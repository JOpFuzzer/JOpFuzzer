// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=214L;
    public static int iFld=-8893;
    public static double dFld=-103.111917;
    public static byte byFld=-22;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -124.298F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9) {

        int i10=-90, i11=-174, i12=5, i13=8, iArr2[]=new int[N];
        float f=1.946F;
        byte by1=-47;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)6827);
        FuzzerUtils.init(iArr2, 2);

        Test.instanceCount = i9;
        sArr[(-23338 >>> 1) % N] = (short)i9;
        iArr2[(Test.iFld >>> 1) % N] >>= 4;
        Test.dFld -= i9;
        i9 = Test.iFld;
        for (i10 = 12; i10 < 245; ++i10) {
            f -= Test.instanceCount;
            i9 = Test.iFld;
            for (i12 = 1; i12 < 7; ++i12) {
                boolean b1=true;
                f = i9;
                b1 = b1;
                i13 += i11;
                by1 >>>= (byte)i12;
                b1 = b1;
                i9 += i9;
            }
        }
        vMeth1_check_sum += i9 + i10 + i11 + Float.floatToIntBits(f) + i12 + i13 + by1 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(boolean b) {

        float f1=26.345F, f2=0.92F;
        int i14=0, i15=-108, i16=51431, i17=160, i18=212, iArr3[]=new int[N];
        short sArr1[][]=new short[N][N];

        FuzzerUtils.init(sArr1, (short)-13875);
        FuzzerUtils.init(iArr3, 14);

        Test.iFld *= (int)(--Test.instanceCount);
        vMeth1(80);
        Test.instanceCount *= Test.instanceCount;
        f1 *= Test.iFld;
        sArr1[(Test.iFld >>> 1) % N][(9945 >>> 1) % N] &= (short)-109;
        if (true) {
            for (f2 = 204; f2 > 12; f2--) {
                iArr3[(int)(f2 + 1)] ^= Test.byFld;
                for (i15 = 1; i15 < 8; i15++) {
                    Test.instanceCount += i15;
                    Test.iFld += i15;
                    Test.iFld = i15;
                    for (i17 = i15; i17 < 2; i17++) {
                        i18 = -65497;
                        i14 = i16;
                    }
                }
            }
        } else if (b) {
            i14 -= Test.iFld;
        } else {
            i16 = (int)-18.115007;
        }
        vMeth_check_sum += (b ? 1 : 0) + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i14 + i15 + i16 + i17 +
            i18 + FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(iArr3);
    }

    public int iMeth() {

        int i3=-44764, i4=-35785, i5=156, i6=-5, i7=-160, i8=-3150, i19=-6, iArr1[][]=new int[N][N];
        byte by=51;

        FuzzerUtils.init(iArr1, -19913);

        iArr1[(Test.iFld >>> 1) % N] = iArr1[(Test.iFld >>> 1) % N];
        for (i3 = 4; i3 < 135; i3++) {
            for (i5 = 1; 12 > i5; i5++) {
                for (i7 = 1; i7 < 2; i7 += 2) {
                    i4 += (i7 | Test.instanceCount);
                    Test.instanceCount = (long)((--Test.fArrFld[i7]) + (iArr1[i7 - 1][i3 - 1]++));
                    by *= (byte)Test.instanceCount;
                    try {
                        i8 = (63 / i3);
                        i4 = (i8 % 174689722);
                        i4 = (-44257 / i6);
                    } catch (ArithmeticException a_e) {}
                    vMeth(true);
                    Test.instanceCount = i4;
                    i4 = i7;
                }
                try {
                    Test.iFld = (i8 % 69);
                    i8 = (i3 % i4);
                    i8 = (i4 % 65080);
                } catch (ArithmeticException a_e) {}
            }
        }
        i19 = 391;
        while (--i19 > 0) {
            Test.instanceCount -= (long)Test.dFld;
            i4 = i5;
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + by + i19 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=13, i1=-31280, i2=26318, i20=-27471, i21=-10, i22=134, i23=13952, i24=-8, i25=5, i26=-214, i27=-253,
            iArr[]=new int[N];
        short s=-10844, sArr2[]=new short[N];
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 12402);
        FuzzerUtils.init(sArr2, (short)22774);
        FuzzerUtils.init(lArr, 212L);

        iArr[(i >>> 1) % N] *= Math.max((int)((i - s) + (--Test.fArrFld[(i >>> 1) % N])), i);
        i += (--i);
        for (i1 = 3; i1 < 151; i1 += 2) {
            i2 -= iMeth();
            i2 += (int)Test.instanceCount;
            Test.instanceCount += (long)124.96841;
            sArr2[i1] -= Test.byFld;
        }
        i20 = 1;
        while (++i20 < 250) {
            Test.instanceCount += (46246 + (i20 * i20));
            b2 = b2;
            for (i21 = 5; i21 < 101; i21++) {
                Test.iFld = i1;
                s = (short)i21;
                if (b2) continue;
                lArr[i21] <<= i22;
            }
            Test.instanceCount /= ((long)(Test.dFld) | 1);
        }
        Test.fArrFld = Test.fArrFld;
        for (i23 = 2; 163 > i23; i23++) {
            i25 = 1;
            while (++i25 < 156) {
                float f3=33.273F;
                switch (((i24 >>> 1) % 9) + 125) {
                case 125:
                    f3 = f3;
                    break;
                case 126:
                    Test.iFld += i20;
                    iArr[i23 + 1] = i23;
                    break;
                case 127:
                    i24 += (i25 * i25);
                    for (i26 = 1; i26 < 1; ++i26) {
                        b2 = b2;
                        Test.fArrFld[i26 + 1] = i24;
                    }
                    Test.iFld = i2;
                    i -= Test.byFld;
                case 128:
                    Test.dFld = i;
                    break;
                case 129:
                    iArr[i23 + 1] <<= -153;
                    break;
                case 130:
                    i27 = (int)Test.instanceCount;
                    break;
                case 131:
                    i2 = i27;
                case 132:
                    Test.dFld += 40;
                    break;
                case 133:
                    i27 += i23;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i s i1 = " + i + "," + s + "," + i1);
        FuzzerUtils.out.println("i2 i20 b2 = " + i2 + "," + i20 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 iArr sArr2 = " + i27 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(sArr2));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld Test.fArrFld = " + Test.byFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
