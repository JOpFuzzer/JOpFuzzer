// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-4L;
    public static long lArrFld[]=new long[N];
    public volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -547705017150538838L);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7, int i8, int i9) {

        int i10=17481, i11=-235, i12=8, i13=-137, i14=-49961, i15=0, i16=-9, iArr3[]=new int[N];
        long l1=-67L;
        short s=21175;
        byte by=9;

        FuzzerUtils.init(iArr3, -21218);

        i8 = -4;
        for (i10 = 16; i10 < 323; i10++) {
            for (i12 = 1; i12 < 5; i12 += 2) {
                switch ((((i9 >>> 1) % 2) * 5) + 51) {
                case 56:
                    i14 >>>= i8;
                    for (i15 = 1; i15 < 3; ++i15) {
                        iArr3[i10] -= i9;
                    }
                    l1 = 3;
                    do {
                        i9 += (int)(((l1 * i13) + i7) - l1);
                        Test.instanceCount >>= l1;
                        s = (short)l1;
                    } while (--l1 > 0);
                    break;
                case 57:
                    i8 = -1;
                    iArr3 = iArr3;
                }
                Test.instanceCount <<= i15;
            }
            i7 = by;
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + l1 + s + by +
            FuzzerUtils.checkSum(iArr3);
    }

    public static long lMeth(long l) {

        int i5=-110, i6=13, i17=245, i18=15851, i19=-10692, i20=27, iArr2[]=new int[N];
        double d1=-76.117999;
        float f=-1.417F;
        byte by1=-95;

        FuzzerUtils.init(iArr2, -4);

        for (i5 = 14; i5 < 358; i5++) {
            i6 *= (--i6);
            iArr2[i5 + 1] >>= Math.min(i5, (int)((14 - (d1 + 1)) * (++d1)));
            vMeth(i5, i5, 63878);
            i6 += i5;
            f = 8838;
            switch ((i5 % 8) + 41) {
            case 41:
                l += (i5 * i5);
                for (i17 = 1; i17 < 5; i17++) {
                    Test.instanceCount += (((i17 * Test.instanceCount) + i6) - i17);
                    for (i19 = i5; i19 < 2; i19++) {
                        by1 = (byte)Test.instanceCount;
                        i20 = i6;
                    }
                    d1 -= by1;
                    f = l;
                }
                break;
            case 42:
                l = i19;
                break;
            case 43:
                f *= (float)d1;
                break;
            case 44:
                Test.instanceCount = i20;
                break;
            case 45:
                i20 += (((i5 * f) + i19) - Test.instanceCount);
                break;
            case 46:
                i6 += (i5 * i5);
            case 47:
                l = 84;
            case 48:
                i18 += (-50 + (i5 * i5));
                break;
            }
        }
        long meth_res = l + i5 + i6 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i17 + i18 + i19 + i20 +
            by1 + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i4=-22139, iArr1[]=new int[N];
        double d=42.47762, d2=1.19865;
        byte by2=90;
        float f1=-1.931F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -105L);
        FuzzerUtils.init(iArr1, -4);

        lArr[(i4 >>> 1) % N] = (--iArr1[(i4 >>> 1) % N]);
        d -= i4;
        Test.instanceCount = Math.min(lMeth(Test.instanceCount), Test.instanceCount);
        iArr1[(80 >>> 1) % N] -= by2;
        i4 = i4;
        f1 += i4;
        d2 = 1;
        while (++d2 < 261) {
            i4 = i4;
            i4 >>= -13;
            Test.instanceCount = 12;
            i4 = i4;
        }
        long meth_res = i4 + Double.doubleToLongBits(d) + by2 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2)
            + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=4, i1=-12, i2=-4, i3=-42360, i21=-4, i22=246, i23=34416, i24=173, i25=29902, i26=-10296, i27=7071,
            iArr[]=new int[N];
        long l3=193L;
        float f2=72.571F;
        byte by3=-40;
        boolean b=false;

        FuzzerUtils.init(iArr, 234);

        for (i = 4; i < 144; i++) {
            for (i2 = 4; i2 < 179; i2++) {
                i1 = (--i1);
                switch (((((iArr[i]--) >>> 1) % 1) * 5) + 17) {
                case 18:
                    i1 += iMeth();
                    break;
                }
                i1 = (int)Test.instanceCount;
                for (l3 = 1; l3 < 2; l3++) {
                    iArr[(int)(l3 + 1)] >>>= (int)Test.instanceCount;
                    fArrFld[i2 - 1] = l3;
                    Test.instanceCount = i21;
                    i21 += (int)(-11L + (l3 * l3));
                    i3 -= i3;
                }
                i3 += (-2 + (i2 * i2));
                for (i22 = 1; i22 < 2; i22++) {
                    double d3=0.13691;
                    i3 += i22;
                    f2 -= (float)d3;
                    d3 = i22;
                    Test.instanceCount = i24;
                    by3 += (byte)i22;
                    d3 -= 99L;
                    i1 = i21;
                    Test.instanceCount += i25;
                    Test.lArrFld[i] *= i;
                }
            }
            i25 += (i ^ i25);
            if (false) {
                i24 = i2;
                fArrFld[i + 1] -= i22;
            } else if (b) {
                for (i26 = 8; i26 < 179; i26++) {
                    i24 += (i26 * i27);
                }
                i21 += i2;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 l3 i21 = " + i3 + "," + l3 + "," + i21);
        FuzzerUtils.out.println("i22 i23 f2 = " + i22 + "," + i23 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i24 by3 i25 = " + i24 + "," + by3 + "," + i25);
        FuzzerUtils.out.println("i26 i27 b = " + i26 + "," + i27 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.lArrFld fArrFld = " + Test.instanceCount + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
