// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=49914L;
    public static volatile int iFld=51;
    public static int iFld1=-9;
    public static double dFld=0.125132;
    public static long lArrFld[][]=new long[N][N];
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 38469L);
        FuzzerUtils.init(Test.fArrFld, 4.637F);
        FuzzerUtils.init(Test.iArrFld, 81);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(int i3, int i4) {

        int i5=15597, i6=-10, i7=-200, iArr1[][]=new int[N][N];
        double d=-2.51640;
        float f1=15.514F, fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(fArr, -25.11F);

        Test.iFld ^= i3;
        Test.instanceCount += i4;
        Test.iFld &= (int)Test.instanceCount;
        i5 = 1;
        do {
            for (d = 1; d < 5; ++d) {
                iArr1[(int)(d - 1)][(int)(d + 1)] = i5;
                fArr[(int)(d + 1)] = Test.iFld;
                i7 = 1;
                while (++i7 < 2) {
                    Test.instanceCount *= 25079;
                    i6 = i5;
                    Test.instanceCount += i4;
                    i6 = i6;
                    iArr1[(int)(d + 1)][(int)(d)] *= (int)f1;
                    i3 = i4;
                    i6 += (i7 + i6);
                }
            }
        } while (++i5 < 335);
        long meth_res = i3 + i4 + i5 + Double.doubleToLongBits(d) + i6 + i7 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(short s1) {

        int i8=-11, iArr2[]=new int[N];
        byte by=-98;

        FuzzerUtils.init(iArr2, -9);

        Test.iFld *= iMeth2(Test.iFld, Test.iFld);
        Test.lArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = Test.iFld1;
        iArr2 = FuzzerUtils.int1array(N, (int)-7);
        Test.iFld = s1;
        i8 = 1;
        while (++i8 < 243) {
            if (i8 != 0) {
            }
            iArr2[i8] = -7;
        }
        iArr2[(Test.iFld >>> 1) % N] <<= Test.iFld1;
        Test.iFld1 &= s1;
        Test.instanceCount -= Test.iFld1;
        Test.iFld <<= -10;
        by = (byte)i8;
        long meth_res = s1 + i8 + by + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i=39956, i1=55625, i2=-14, i9=3, i10=139, iArr[]=new int[N];
        short s=9457;
        float f=54.157F;
        double d1=-80.10450;

        FuzzerUtils.init(iArr, 42592);

        i = 1;
        do {
            for (i1 = 1; i1 < 6; ++i1) {
                Test.instanceCount <<= (-(iArr[i] * (Test.instanceCount >> s)));
                Test.iFld += (3 + (i1 * i1));
                f -= i;
                Test.lArrFld[i - 1][i1 - 1] *= (iArr[i1] += (int)(Test.instanceCount = Math.min(11L,
                    Test.instanceCount)));
                f += (iMeth1(s) + i1);
                i2 = i2;
                for (i9 = i; i9 < 2; ++i9) {
                    try {
                        iArr[i] = (iArr[i9] / i1);
                        i10 = (62665 % Test.iFld);
                        i10 = (i2 / i9);
                    } catch (ArithmeticException a_e) {}
                    d1 -= Test.instanceCount;
                    Test.instanceCount -= Test.iFld;
                    Test.iFld1 += (11 + (i9 * i9));
                }
                iArr[i1] = (int)f;
                Test.iFld ^= i2;
            }
        } while (++i < 291);
        long meth_res = i + i1 + i2 + s + Float.floatToIntBits(f) + i9 + i10 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s2=18921, sArr[]=new short[N];
        int i11=-21, i12=-108, i13=-179, i14=-6, i15=58, i16=0;
        boolean b=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(sArr, (short)17875);
        FuzzerUtils.init(byArr, (byte)-103);

        sArr[(Test.iFld >>> 1) % N] %= (short)(((iMeth() & -2) + Test.instanceCount) | 1);
        Test.fArrFld[(Test.iFld >>> 1) % N] -= 1;
        Test.iFld -= s2;
        Test.iFld1 = Test.iFld;
        Test.dFld += Test.iFld;
        for (i11 = 231; i11 > 2; i11 -= 2) {
            i12 = (int)Test.instanceCount;
            Test.lArrFld[i11 + 1][i11] |= s2;
            i13 = 1;
            while (++i13 < 220) {
                i12 -= i11;
                i12 += (-22 + (i13 * i13));
                i14 = 1;
                do {
                    Test.instanceCount += i14;
                    i12 += (((i14 * Test.iFld1) + i12) - s2);
                    Test.iArrFld[i13] += (int)Test.instanceCount;
                    Test.dFld += -6;
                    if (b) continue;
                    Test.iFld1 += (i14 * Test.iFld);
                    Test.iArrFld[i11] -= i14;
                    Test.instanceCount *= 7607L;
                    Test.iFld -= Test.iFld;
                    byArr[i13 - 1] = (byte)Test.instanceCount;
                } while (++i14 < 1);
                i12 = i14;
                Test.iFld1 -= (int)Test.instanceCount;
                i12 = i13;
                i12 ^= Test.iFld;
                Test.instanceCount += (i13 - i13);
            }
            for (i15 = 2; 220 > i15; ++i15) {
                Test.iArrFld = Test.iArrFld;
                i16 *= i12;
            }
        }

        FuzzerUtils.out.println("s2 i11 i12 = " + s2 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 b = " + i13 + "," + i14 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i15 i16 sArr = " + i15 + "," + i16 + "," + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.iFld1 = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.iFld1);
        FuzzerUtils.out.println("Test.dFld Test.lArrFld Test.fArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
