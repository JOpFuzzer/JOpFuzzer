// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-61419L;
    public static boolean bFld=false;
    public static volatile byte byFld=63;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i3) {

        long l1=2370754008372084513L, lArr[]=new long[N];
        int i4=-103, i5=-11, i6=112, i7=54947, iArr2[][]=new int[N][N], iArr3[]=new int[N];

        FuzzerUtils.init(iArr2, 46);
        FuzzerUtils.init(lArr, -7L);
        FuzzerUtils.init(iArr3, 1);

        l1 = 1;
        while (++l1 < 326) {
            for (i4 = 1; i4 < 5; ++i4) {
                float f2=4.579F;
                if (Test.bFld) {
                    i5 = 13;
                } else {
                    i3 += i4;
                    f2 = i5;
                    for (i6 = 2; i6 > l1; i6--) {
                        iArr2[i4][(int)(l1 - 1)] += (int)f2;
                        lArr[i4 - 1] = i5;
                        Test.bFld = Test.bFld;
                        iArr3[(int)(l1 + 1)] ^= (int)-119L;
                        i5 = i5;
                        i3 = i4;
                        i7 = (int)l1;
                        i3 += i6;
                    }
                }
            }
        }
        long meth_res = i3 + l1 + i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr3);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f1, int i2, long l) {

        int i8=-24358, i9=-31360, i10=35, i11=1, i12=-8614;
        byte by=49;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.65521);

        i2 = (int)(((long)(f1 + i2) | iMeth1(i2)) * i2);
        for (i8 = 372; i8 > 2; i8 -= 3) {
            i9 -= (int)f1;
            switch ((i8 % 3) + 102) {
            case 102:
                for (i10 = 13; i10 > 1; --i10) {
                    if (Test.bFld) continue;
                    i2 <<= by;
                    i11 = i11;
                    i12 = 1;
                    do {
                        Test.instanceCount &= l;
                        i2 += (((i12 * f1) + f1) - i11);
                        l = by;
                        f1 = i2;
                        i11 -= (int)f1;
                    } while (++i12 < 2);
                    Test.instanceCount = Test.instanceCount;
                }
                break;
            case 103:
                dArr[i8 + 1] = by;
                break;
            case 104:
                if (Test.bFld) break;
                break;
            default:
                i2 *= (int)l;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i2 + l + i8 + i9 + i10 + i11 + by + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth() {

        float f3=2.783F;
        int i13=-242, i14=-52, i15=-6, i16=-114, i17=4, i18=23359;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)28145);

        vMeth(f3, i13, 7L);
        Test.instanceCount *= 2L;
        for (i14 = 369; i14 > 23; --i14) {
            Test.iArrFld[i14 - 1] = (int)Test.instanceCount;
            i15 += (i14 * i14);
            for (i16 = i14; i16 < 5; i16++) {
                try {
                    i17 = (10 % i14);
                    i17 = (-213 / i16);
                    Test.iArrFld[i16] = (Test.iArrFld[i14] / -492156851);
                } catch (ArithmeticException a_e) {}
            }
            i13 <<= i14;
            if (false) {
                switch ((i14 % 2) + 44) {
                case 44:
                    i17 += i14;
                    i18 = 1;
                    do {
                        Test.iArrFld[i18 + 1] = (int)Test.instanceCount;
                        i15 *= i18;
                        f3 = i17;
                    } while ((i18 += 3) < 5);
                    break;
                case 45:
                    i15 = 2;
                    break;
                default:
                    sArr[i14] -= (short)Test.instanceCount;
                }
            } else {
                Test.instanceCount += (((i14 * i13) + f3) - f3);
            }
        }
        long meth_res = Float.floatToIntBits(f3) + i13 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-42121, i1=8, i19=0, i20=-6, i21=-123, i22=-40, i23=-7391, i24=8, iArr[]=new int[N], iArr1[][]=new
            int[N][N], iArr4[]=new int[N];
        float f=-9.711F, f4=1.288F;
        short s=27795;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr, 43089);
        FuzzerUtils.init(iArr1, -43381);
        FuzzerUtils.init(lArr1, 3450053578L);
        FuzzerUtils.init(iArr4, -85);

        for (i = 5; i < 152; i++) {
            iArr = (iArr = (iArr = (iArr = iArr1[i])));
            i1 = (int)(((++f) % ((s + 41314) | 1)) - iMeth());
            for (i19 = 8; i19 < 171; ++i19) {
                i20 = i1;
                iArr[i19 + 1] += -27;
                for (i21 = 1; i21 < 2; ++i21) {
                    if (true) continue;
                    i22 += i21;
                    if (Test.bFld) {
                        Test.iArrFld[i] >>= (int)Test.instanceCount;
                        i1 += i21;
                    } else {
                        i20 <<= i20;
                        Test.instanceCount <<= 11L;
                        i22 = i21;
                    }
                }
                lArr1 = lArr1;
                Test.bFld = Test.bFld;
                i22 = i19;
                for (f4 = 2; f4 > i19; f4 -= 3) {
                    try {
                        iArr1[(int)(f4 + 1)][i] = (iArr1[(int)(f4 - 1)][i] / -238);
                        i1 = (i / i21);
                        i1 = (-93781275 % i23);
                    } catch (ArithmeticException a_e) {}
                    i23 *= (int)f4;
                    if (Test.bFld) break;
                    i22 += (int)(((f4 * i1) + f) - Test.byFld);
                }
                if (Test.bFld) break;
            }
            s += (short)(i + i24);
            if (true) {
                iArr1[i + 1] = iArr4;
            } else if (false) {
                Test.instanceCount += (i - i);
            } else {
                Test.byFld += (byte)i;
                iArr1[i] = FuzzerUtils.int1array(N, (int)-4);
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("s i19 i20 = " + s + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 f4 = " + i21 + "," + i22 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i23 i24 iArr = " + i23 + "," + i24 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("iArr1 lArr1 iArr4 = " + FuzzerUtils.checkSum(iArr1) + "," +
            FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(iArr4));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.byFld = " + Test.instanceCount + "," + (Test.bFld ?
            1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
