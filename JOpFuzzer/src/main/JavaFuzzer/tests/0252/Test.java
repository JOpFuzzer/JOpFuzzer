// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=1750924709L;
    public static byte byFld=-86;
    public static double dFld=2.35654;
    public static float fFld=-1.805F;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public int iArrFld1[]=new int[N];
    public float fArrFld[]=new float[N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 28L);
        FuzzerUtils.init(Test.iArrFld, -200);
        FuzzerUtils.init(Test.byArrFld, (byte)81);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth1(int i14) {


        i14 += Test.byFld;
        vMeth1_check_sum += i14;
    }

    public static void vMeth2(int i20, double d) {

        float f=-88.454F;
        int i22=-35954, i23=-11, i24=15968, iArr1[]=new int[N];
        short s=19704;

        FuzzerUtils.init(iArr1, -61812);

        i20 -= i20;
        i20 *= i20;
        for (long l1 : Test.lArrFld) {
            i20 += (int)Test.dFld;
            i20 *= (int)l1;
        }
        Test.instanceCount = Test.byFld;
        for (int i21 : iArr1) {
            i20 >>= i20;
        }
        for (f = 261; 16 < f; f--) {
            i23 = 7;
            do {
                i22 -= i23;
                iArr1[i23 - 1] ^= s;
                i24 = 1;
                do {
                    Test.fFld -= i23;
                    try {
                        i20 = (i20 % 27065);
                        i20 = (36898295 / i20);
                        i22 = (-67 / iArr1[i24]);
                    } catch (ArithmeticException a_e) {}
                } while (++i24 < 1);
            } while (--i23 > 0);
        }
        vMeth2_check_sum += i20 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i22 + i23 + s + i24 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth() {

        int i17=14, i18=56221, i19=21804, i25=3, iArr2[]=new int[N];
        float f1=25.237F;
        short s1=-21844;

        FuzzerUtils.init(iArr2, 11);

        i17 *= (int)Test.lArrFld[(i17 >>> 1) % N];
        for (i18 = 5; i18 < 391; i18++) {
            vMeth2(i18, Test.dFld);
            f1 = 1;
            while (++f1 < 4) {
                i17 += (int)(f1 * f1);
                Test.instanceCount += i19;
                i19 *= (int)f1;
                if (true) break;
                Test.dFld *= -141;
                i17 -= (int)58106L;
                Test.fFld = i18;
                iArr2[(i19 >>> 1) % N] <<= i25;
                Test.instanceCount += (long)f1;
            }
            i17 *= -222;
            i17 <<= s1;
        }
        long meth_res = i17 + i18 + i19 + Float.floatToIntBits(f1) + i25 + s1 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(long l, int i9) {

        int i10=4560, i11=13, i12=9, i13=-65, i15=19785, i16=175;
        boolean b=true;

        for (i10 = 5; i10 < 181; ++i10) {
            i11 = (--i9);
            for (i12 = 1; i12 < 9; i12++) {
                vMeth1((int)(i11 - (-(Test.dFld * Test.instanceCount))));
                if (true) {
                    for (i15 = 1; i15 < 2; i15++) {
                        i13 -= iMeth();
                        switch (((i10 % 2) * 5) + 28) {
                        case 30:
                            Test.fFld += Test.instanceCount;
                            i11 *= (int)Test.dFld;
                            i9 = (int)Test.dFld;
                            Test.fFld = Test.fFld;
                        case 36:
                            try {
                                Test.iArrFld[i10] = (1725591067 % i10);
                                i16 = (i15 / -32922);
                                i13 = (i15 % 241);
                            } catch (ArithmeticException a_e) {}
                            Test.byFld += (byte)-243;
                            break;
                        }
                        i13 %= (int)(i15 | 1);
                    }
                } else if (b) {
                    i16 -= i10;
                }
            }
        }
        vMeth_check_sum += l + i9 + i10 + i11 + i12 + i13 + i15 + i16 + (b ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i1=-44484, i3=-4, i4=-75, i5=5, i6=-12, i7=-8578, i8=-8, i26=-6, i27=114, i28=107, i29=-13, i30=-6,
            iArr[]=new int[N];

        FuzzerUtils.init(iArr, 48456);

        for (i = 10; i < 187; i++) {
            i1 -= ((i1--) + (iArr[i - 1]++));
        }
        for (int i2 : iArr) {
            Test.instanceCount *= (long)((Test.instanceCount--) - ((i2 * -2.652F) - Math.max(i2, i2)));
        }
        for (i3 = 7; 167 > i3; i3++) {
            for (i5 = 157; i5 > 2; i5 -= 3) {
                for (i7 = i5; i7 < 4; ++i7) {
                    i4 += i;
                    i8 += i7;
                    vMeth(Test.instanceCount, i8);
                    Test.fFld += i4;
                    i8 += (int)Test.instanceCount;
                    i1 += (i7 * i7);
                    Test.instanceCount += (i7 - Test.instanceCount);
                    i6 += (i7 - Test.fFld);
                }
            }
            for (i26 = 7; i26 < 157; i26++) {
                iArrFld1[i3 + 1] *= (int)2.9046;
                i8 -= 10;
            }
            Test.dFld = i27;
            i1 >>= (int)-148L;
            i4 = (int)Test.instanceCount;
            for (i28 = i3; i28 < 157; i28++) {
                Test.byFld = (byte)i6;
                Test.dFld -= i8;
                Test.lArrFld[i28] >>= i29;
                i27 += i28;
                i30 = 1;
                do {
                    i1 += i30;
                    fArrFld[i30] = -49389;
                    Test.byArrFld[i28 + 1] -= (byte)3872522995345894571L;
                } while (++i30 < 1);
            }
        }

        FuzzerUtils.out.println("i i1 i3 = " + i + "," + i1 + "," + i3);
        FuzzerUtils.out.println("i4 i5 i6 = " + i4 + "," + i5 + "," + i6);
        FuzzerUtils.out.println("i7 i8 i26 = " + i7 + "," + i8 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 iArr = " + i30 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld Test.lArrFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iArrFld1 fArrFld Test.byArrFld = " + FuzzerUtils.checkSum(iArrFld1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
