// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-9L;
    public static volatile double dFld=-1.130198;
    public static volatile byte byFld=-52;
    public static float fFld=-57.965F;
    public int iFld=-31;
    public boolean bFld=true;
    public byte byFld1=-66;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];
    public volatile long lArrFld1[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 50);
        FuzzerUtils.init(Test.lArrFld, -1308869408L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public void vMeth2(float f1, long l1) {

        int i1=-5390, i2=10852, i3=-7, i4=13, i6=-34709, i7=-79, i8=28076, iArr[]=new int[N], iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr, -37505);
        FuzzerUtils.init(iArr1, 17260);

        for (i1 = 10; i1 < 260; i1++) {
            if (i1 != 0) {
                vMeth2_check_sum += Float.floatToIntBits(f1) + l1 + i1 + i2 + i3 + i4 + i6 + i7 + i8 +
                    FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
                return;
            }
            i2 = i2;
            for (i3 = 1; i3 < 7; i3++) {
                i4 = (int)Test.instanceCount;
            }
            l1 += (((i1 * i3) + i1) - Test.instanceCount);
            i6 = 1;
            do {
                Test.dFld = Test.byFld;
                i4 += (int)l1;
                for (i7 = i6; i7 < 1; ++i7) {
                    iArr1 = iArr1;
                    i2 = 147;
                    l1 &= Test.instanceCount;
                    l1 -= (long)f1;
                }
                i2 += i8;
            } while (++i6 < 7);
        }
        vMeth2_check_sum += Float.floatToIntBits(f1) + l1 + i1 + i2 + i3 + i4 + i6 + i7 + i8 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth1() {

        int i9=-1, i10=-22064, i11=14, i12=-36971, i13=-63171;
        float f2=-2.954F;

        vMeth2(Test.fFld, Test.instanceCount);
        Test.iArrFld[(iFld >>> 1) % N] >>= iFld;
        for (i9 = 13; i9 < 233; i9++) {
            for (f2 = i9; f2 < 7; ++f2) {
                if (bFld) {
                    Test.instanceCount <<= i11;
                }
                Test.byFld = Test.byFld;
                Test.iArrFld = Test.iArrFld;
                try {
                    iFld = (-64 % i11);
                    iFld = (2087 / i10);
                    i11 = (iFld / -31512);
                } catch (ArithmeticException a_e) {}
                i11 |= i11;
                Test.byFld += (byte)(((f2 * i11) + i10) - f2);
                Test.lArrFld[i9 + 1] = i9;
            }
            for (i12 = 7; i12 > 1; --i12) {
                iFld = byFld1;
                try {
                    i10 = (-146 % Test.iArrFld[i12]);
                    iFld = (-88 / i9);
                    iFld = (i13 / 19866);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth1_check_sum += i9 + i10 + Float.floatToIntBits(f2) + i11 + i12 + i13;
    }

    public void vMeth(long l, float f, int i) {

        int i14=71, i15=174, i16=-5387;

        vMeth1();
        Test.iArrFld = Test.iArrFld;
        for (i14 = 10; i14 < 220; i14++) {
            i15 += (i14 * i14);
            l += i14;
            Test.dFld += i15;
        }
        i16 = 1;
        while (++i16 < 131) {
            bFld = bFld;
            iFld += (int)l;
            try {
                i = (i15 / i16);
                i = (iFld % i15);
                i = (iFld % i);
            } catch (ArithmeticException a_e) {}
            i = i;
            iFld = iFld;
            iFld = i14;
            Test.iArrFld[i16] = (int)Test.fFld;
        }
        byFld1 = (byte)iFld;
        vMeth_check_sum += l + Float.floatToIntBits(f) + i + i14 + i15 + i16;
    }

    public void mainTest(String[] strArr1) {

        int i17=-23680, i18=-130, i19=0, i20=13, i21=8, i22=31386, i23=13, i24=39387;
        double d=-37.94545, d1=0.125443, d2=-26.107713, dArr[][]=new double[N][N];
        short s=-17690;

        FuzzerUtils.init(dArr, -38.52576);

        vMeth(Test.instanceCount, -2.518F, 20313);
        i17 = 204;
        while (--i17 > 0) {
            if (false) continue;
            Test.fFld += i17;
        }
        lArrFld1 = lArrFld1;
        d = 1;
        while (++d < 325) {
            iFld += (int)d;
            iFld <<= (int)Test.instanceCount;
            Test.iArrFld[(int)(d + 1)] = -36747;
            Test.fFld += (float)(d * d);
            iFld >>= iFld;
            s = (short)Test.fFld;
        }
        dArr[(iFld >>> 1) % N][(i17 >>> 1) % N] = i17;
        s = (short)d;
        for (d1 = 2; d1 < 368; ++d1) {
            for (i19 = 69; i19 > 2; i19 -= 3) {
                iFld += (((i19 * iFld) + i19) - s);
                switch ((((i19 >>> 1) % 7) * 5) + 59) {
                case 84:
                    for (d2 = 1; d2 < 4; d2++) {
                        Test.iArrFld[(int)(d2 + 1)] >>>= -3;
                        iFld = (int)Test.instanceCount;
                        i21 = 30187;
                        if (bFld) break;
                        if (bFld) break;
                        i22 = 43898;
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)-2);
                    }
                    for (i23 = 1; i23 < 4; i23++) {
                        Test.instanceCount &= Test.instanceCount;
                        Test.fFld += (29318 + (i23 * i23));
                        iFld += (int)Test.fFld;
                    }
                    break;
                case 68:
                    iFld += i19;
                case 66:
                    i24 <<= i23;
                    break;
                case 79:
                    if (bFld) continue;
                case 80:
                    i22 = i24;
                case 90:
                    Test.instanceCount += (((i19 * i17) + i24) - i17);
                    break;
                case 72:
                    Test.instanceCount += (i19 ^ i20);
                    break;
                default:
                    iFld = 58223;
                }
            }
        }

        FuzzerUtils.out.println("i17 d s = " + i17 + "," + Double.doubleToLongBits(d) + "," + s);
        FuzzerUtils.out.println("d1 i18 i19 = " + Double.doubleToLongBits(d1) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 d2 i21 = " + i20 + "," + Double.doubleToLongBits(d2) + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.fFld iFld bFld = " + Float.floatToIntBits(Test.fFld) + "," + iFld + "," + (bFld ?
            1 : 0));
        FuzzerUtils.out.println("byFld1 Test.iArrFld Test.lArrFld = " + byFld1 + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("lArrFld1 = " + FuzzerUtils.checkSum(lArrFld1));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
