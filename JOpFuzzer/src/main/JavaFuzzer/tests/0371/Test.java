// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-107L;
    public static short sFld=1118;
    public static double dFld=-1.27988;
    public static byte byFld=-96;
    public static boolean bFld=false;
    public static int iFld=49;
    public float fFld=-2.12F;
    public long lFld=1343779319924550821L;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -140);
        FuzzerUtils.init(Test.lArrFld, 102L);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f2, int i6, double d) {

        int i7=115, i8=-7, i9=13, i10=-2, i11=161;
        boolean b1=true;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 6L);

        Test.iArrFld[(i6 >>> 1) % N] *= (int)1.413F;
        i7 = 1;
        while (++i7 < 227) {
            Test.instanceCount += (-13L + (i7 * i7));
            i8 = 1;
            while (++i8 < 7) {
                Test.iArrFld[i7 - 1] *= i6;
                Test.sFld += (short)(((i8 * i6) + i6) - f2);
            }
            i6 -= i6;
            i6 *= i8;
            i9 = -20196;
        }
        for (i10 = 140; i10 > 1; i10--) {
            f2 *= Test.instanceCount;
            lArr[i10][i10] += i7;
            if (b1) {
                Test.instanceCount = 128;
            } else if (b1) {
                i11 += (2 + (i10 * i10));
            } else {
                try {
                    i11 = (i10 / i8);
                    i6 = (-1547878556 % i9);
                    Test.iArrFld[i10 - 1] = (163 / i10);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + i6 + Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + i11 + (b1
            ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static double dMeth(int i4, boolean b, float f1) {

        int i5=-3, i12=53242, i13=-1, i14=-140, i15=11, i16=-5, i17=162, i18=102, i19=-38800;

        i5 = 1;
        while ((i5 += 3) < 292) {
            vMeth1(f1, i4, Test.dFld);
            Test.instanceCount -= 113;
        }
        for (i12 = 6; i12 < 220; i12++) {
            i14 = 1;
            while (++i14 < 8) {
                Test.instanceCount += (((i14 * i5) + f1) - Test.instanceCount);
            }
        }
        i15 = 164;
        while (--i15 > 0) {
            i16 = 10;
            do {
                Test.instanceCount = i13;
                i4 = (int)f1;
                Test.iArrFld[i15 + 1] = Test.byFld;
                Test.iArrFld[i15 - 1] ^= i12;
                for (i17 = 1; 1 > i17; i17 += 2) {
                    try {
                        i18 = (22734 / i14);
                        i4 = (-173 / Test.iArrFld[i16 - 1]);
                        Test.iArrFld[i15 - 1] = (187 / i17);
                    } catch (ArithmeticException a_e) {}
                    i19 = i12;
                }
            } while (--i16 > 0);
        }
        long meth_res = i4 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i5 + i12 + i13 + i14 + i15 + i16 + i17 + i18 +
            i19;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void vMeth(int i) {

        int i1=-236, i2=61040, i3=-200, i20=26412, i21=-194, iArr[]=new int[N];
        float f=-30.426F;

        FuzzerUtils.init(iArr, 10);

        i = (iArr[(i >>> 1) % N] >>= (iArr[(i >>> 1) % N] -= (i - i)));
        for (i1 = 11; i1 < 233; ++i1) {
            i3 = 1;
            do {
                Test.sFld <<= (short)i1;
                i2 >>= (int)(++Test.instanceCount);
                i += (i3 * i3);
                f /= (((long)((Test.dFld = i2) + (Test.instanceCount++))) | 1);
                i -= (int)dMeth(i, Test.bFld, f);
                Test.iArrFld[i1 + 1] += (int)1.600F;
                for (i20 = 1; i20 < 1; ++i20) {
                    switch ((((i1 >>> 1) % 2) * 5) + 35) {
                    case 39:
                        iArr[i20 + 1] -= i1;
                        break;
                    case 42:
                        i21 = -50396;
                    default:
                        i2 = i3;
                    }
                    i21 += i21;
                }
            } while (++i3 < 7);
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Float.floatToIntBits(f) + i20 + i21 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i22=-7, i23=1, i24=59413, i25=-151, i26=-6, i27=0, i28=32399, i29=67, i30=5, i31=2, i32=-10, i33=13,
            i34=-40420;

        vMeth(Test.iFld);
        for (i22 = 229; i22 > 8; i22--) {
            i23 += (i22 ^ Test.iFld);
            for (i24 = 1; i24 < 114; ++i24) {
                fFld += (i24 - i24);
                for (i26 = 2; i26 > i22; --i26) {
                    Test.iFld ^= i25;
                    i25 += i22;
                    if (Test.bFld) continue;
                    i27 ^= i22;
                }
                Test.instanceCount = -7513155686362504923L;
                Test.lArrFld = Test.lArrFld;
            }
            for (i28 = 2; i28 < 114; ++i28) {
                Test.sFld += (short)Test.iFld;
                Test.instanceCount += (i28 * i28);
                if (Test.bFld) break;
                i23 >>= i26;
            }
        }
        for (i30 = 6; 394 > i30; i30++) {
            i27 += (int)lFld;
            lFld += (i30 * Test.byFld);
            Test.sFld = (short)i24;
            i32 = 1;
            do {
                for (i33 = i30; i33 < 1; i33++) {
                    i34 = (int)lFld;
                    Test.iArrFld[i33 - 1] = i24;
                    i31 = -13;
                    i25 %= (int)(Test.sFld | 1);
                    if (Test.bFld) continue;
                    lFld += (i33 | i28);
                    Test.iArrFld[i33 + 1] += i34;
                }
            } while (++i32 < 65);
        }

        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 = " + i34);

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld Test.bFld Test.iFld = " + Test.byFld + "," + (Test.bFld ? 1 : 0) + "," +
            Test.iFld);
        FuzzerUtils.out.println("fFld lFld Test.iArrFld = " + Float.floatToIntBits(fFld) + "," + lFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
