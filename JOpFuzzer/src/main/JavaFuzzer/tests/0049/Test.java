// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=1082702680L;
    public static short sFld=-6886;
    public static double dFld=-2.64290;
    public float fFld=-1.426F;
    public float fArrFld[][]=new float[N][N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i5=-223, i6=171, i7=47468, i8=-3, i9=-50457, iArr1[]=new int[N];
        double d=-1.63737;
        byte by=47;
        boolean b=false;

        FuzzerUtils.init(iArr1, 129);

        iArr1[(i5 >>> 1) % N] *= i5;
        for (d = 330; 16 < d; d--) {
            switch ((int)(((d % 1) * 5) + 113)) {
            case 114:
                i5 *= (int)Test.instanceCount;
                i6 = i6;
                for (i7 = (int)(d); i7 < 5; i7++) {
                    i9 = 1;
                    do {
                        float f1=68.658F;
                        f1 -= i5;
                        i6 += i9;
                        f1 = i5;
                        iArr1[i9 + 1] *= (int)-97.658F;
                        by += (byte)Test.sFld;
                        if (b) {
                            Test.sFld -= (short)i8;
                            i5 *= i6;
                        }
                    } while ((i9 -= 2) > 0);
                }
                break;
            }
        }
        long meth_res = i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + by + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i4) {

        byte by1=33;
        long lArr[]=new long[N];
        int iArr[]=new int[N];

        FuzzerUtils.init(lArr, -72L);
        FuzzerUtils.init(iArr, -18626);

        for (long l : lArr) {
            iArr[(-14 >>> 1) % N] -= (int)lMeth();
        }
        iArr[(i4 >>> 1) % N] -= i4;
        iArr[(i4 >>> 1) % N] += i4;
        i4 <<= i4;
        i4 <<= by1;
        i4 -= i4;
        vMeth1_check_sum += i4 + by1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, float f) {

        int i1=-1, i2=56, i3=8, i10=60, i11=30323, i12=36233, i13=12260, iArr2[]=new int[N];
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 0.151F);
        FuzzerUtils.init(iArr2, 12);
        FuzzerUtils.init(lArr1, -2580785103635839134L);

        i = (-((-(i + -79)) + i));
        f = (((f + i) - (f % (i | 1))) - ((++f) / ((0L - (i - i)) | 1)));
        for (i1 = 6; i1 < 134; i1++) {
            i2 += i3;
            fArr = (fArr = (fArr = (fArr = fArr)));
            vMeth1(i3);
            for (i10 = 1; i10 < 12; i10++) {
                iArr2[i10 - 1] -= i;
                for (i12 = 1; i12 < 2; i12++) {
                    lArr1[i12] ^= i;
                    fArr[i10 - 1] -= (float)Test.dFld;
                    Test.instanceCount += i12;
                    i13 += (i12 ^ i);
                    Test.instanceCount ^= 21883;
                    Test.instanceCount >>>= i3;
                }
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i2 + i3 + i10 + i11 + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i14=34451, i15=133, i16=14, i17=14449, i18=-226, i19=-238, i20=-1475, i21=-7;
        boolean b1=true;

        vMeth(i14, fFld);
        fFld = Test.instanceCount;
        for (i15 = 4; i15 < 344; i15++) {
            for (i17 = 74; i17 > i15; i17 -= 2) {
                i16 *= 13312;
                i16 -= 4;
                Test.instanceCount *= i14;
                i18 <<= (int)Test.instanceCount;
                i18 = 29800;
                i18 = i17;
                for (i19 = i15; i19 < 1; ++i19) {
                    fArrFld = fArrFld;
                    i14 ^= 60;
                    i16 = i18;
                    Test.instanceCount = i16;
                    i18 = (int)2.93072;
                    i20 = -24398;
                    Test.dFld -= i15;
                    i20 = (int)9466L;
                    Test.instanceCount -= i19;
                }
                i20 += (4 + (i17 * i17));
                i20 -= (int)-8435107460876008146L;
                i18 *= i15;
            }
            i14 = i17;
            i14 &= -13;
            i16 -= i16;
            if (b1) {
                i21 = 1;
                do {
                    Test.instanceCount *= i19;
                } while (++i21 < 74);
                b1 = b1;
            } else {
                i16 >>>= i17;
            }
        }

        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 b1 = " + i20 + "," + i21 + "," + (b1 ? 1 : 0));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("fFld fArrFld = " + Float.floatToIntBits(fFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
