// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6957350369410876405L;
    public static volatile int iFld=-47941;
    public static short sFld=-19148;
    public static float fFld=66.848F;
    public static int iFld1=-38127;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)800);
    }

    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3, double d2) {

        int i4=6, i5=-36428, i6=7, i7=-59843, i8=38918, i9=-93, i10=-92, iArr[]=new int[N];
        float f2=-80.452F;
        double d3=-95.51012;
        long l=9L;
        boolean b=true, b1=false;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(byArr, (byte)81);

        i4 = 1;
        while (++i4 < 164) {
            iArr[i4 - 1] += Test.iFld;
            if (b) {
                for (i5 = 1; i5 < 10; i5++) {
                    Test.sFld = (short)-2;
                    f2 += i6;
                    Test.iFld += (((i5 * Test.instanceCount) + i5) - Test.sFld);
                    iArr[i4] -= i3;
                    iArr[i5] = (int)Test.instanceCount;
                }
                for (d3 = 10; i4 < d3; d3--) {
                    for (i8 = 1; i8 < 1; ++i8) {
                        i6 += (int)Test.instanceCount;
                        l = -49315;
                    }
                    Test.iFld += Test.iFld;
                    byArr[i4] -= (byte)f2;
                }
            } else if (b1) {
                Test.sFld = (short)i8;
            } else {
                i3 -= i10;
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d2) + i4 + i5 + i6 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(d3) + i7 + i8 + i9 + l + (b ? 1 : 0) + (b1 ? 1 : 0) + i10 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static short sMeth(int i1, int i2) {

        double d4=0.112836;
        int i11=-17306, i12=-23750, i13=2, i14=61661, i15=-210, i16=1, iArr1[]=new int[N];
        byte by=-52;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -239);
        FuzzerUtils.init(lArr, 21364L);

        Test.sArrFld[(i1 >>> 1) % N] = (short)(lMeth(-8, d4) + Test.fFld);
        for (i11 = 9; i11 < 330; i11++) {
            for (i13 = 1; i13 < 5; i13++) {
                iArr1[i11] &= i2;
                switch (((i2 >>> 1) % 2) + 35) {
                case 35:
                    Test.instanceCount |= i2;
                    break;
                case 36:
                    Test.instanceCount = -209L;
                    by *= (byte)Test.fFld;
                    break;
                default:
                    Test.instanceCount *= (long)Test.fFld;
                }
                for (i15 = 1; i15 < 2; i15++) {
                    Test.sFld = (short)Test.instanceCount;
                    lArr[i13 - 1] = i15;
                    i1 -= (int)Test.instanceCount;
                    by |= (byte)Test.instanceCount;
                    i1 <<= by;
                }
            }
        }
        long meth_res = i1 + i2 + Double.doubleToLongBits(d4) + i11 + i12 + i13 + i14 + by + i15 + i16 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(double d) {

        float f=-73.467F, f1=2.621F;
        double d1=-3.94908;
        int i=-13, i17=-1, i18=26402, i19=61945, i20=56120, iArr2[]=new int[N];
        byte by1=-59;

        FuzzerUtils.init(iArr2, 23);

        f = 1;
        do {
            for (d1 = 1; d1 < 7; ++d1) {
                Test.iFld += (int)d1;
                f1 = sMeth(i, i);
                iArr2[(3 >>> 1) % N] = i;
                Test.iFld = 1;
                Test.instanceCount -= i;
                Test.iFld1 = 10;
                by1 += (byte)i;
                for (i17 = 1; i17 < 2; ++i17) {
                    Test.iFld *= i17;
                }
                i18 >>>= i18;
            }
            for (i19 = (int)(f); i19 < 7; i19++) {
                iArr2[i19 - 1] >>= Test.iFld;
                Test.iFld1 -= Test.iFld1;
            }
        } while (++f < 216);
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i +
            Float.floatToIntBits(f1) + by1 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d5=0.38175;
        int i21=-140, i22=-2, i23=14, i24=-34786, i25=-230, i26=-97, i27=-147, i28=5, i29=-56261, i30=9, iArr3[][]=new
            int[N][N];
        boolean b2=true;

        FuzzerUtils.init(iArr3, 61136);

        Test.iFld = iMeth(d5);
        iArr3[(Test.iFld1 >>> 1) % N][(Test.iFld1 >>> 1) % N] = Test.iFld1;
        Test.iFld1 -= Test.iFld1;
        Test.iFld = (int)Test.instanceCount;
        Test.iFld1 -= Test.iFld1;
        for (i21 = 8; 388 > i21; ++i21) {
            for (i23 = 3; i23 < 66; ++i23) {
                b2 = false;
                i22 += (i23 - i24);
            }
            for (i25 = 2; i25 < 66; ++i25) {
                i22 = (int)-49337L;
                Test.iFld = (int)-32.419F;
                Test.instanceCount += i23;
                Test.instanceCount = Test.instanceCount;
            }
            Test.instanceCount += (i21 * i21);
            Test.instanceCount += i21;
            i24 *= i26;
        }
        Test.iFld >>= Test.iFld1;
        try {
            Test.iFld1 *= (int)Test.instanceCount;
            for (i27 = 307; 6 < i27; --i27) {
                iArr3[i27][i27 + 1] = i27;
                for (i29 = 5; i29 < 84; i29 += 3) {
                    iArr3[i27][i27 + 1] = i22;
                    Test.iFld -= (int)-68.835F;
                    Test.iFld = (int)Test.fFld;
                    Test.instanceCount += (i29 * i24);
                    Test.iFld += (((i29 * Test.instanceCount) + i27) - Test.iFld);
                }
                Test.iFld1 += i27;
                Test.fFld += i27;
            }
        }
        catch (NullPointerException exc1) {
            i28 >>= i22;
        }
        finally {
            d5 -= i25;
        }

        FuzzerUtils.out.println("d5 i21 i22 = " + Double.doubleToLongBits(d5) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 b2 = " + i23 + "," + i24 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld Test.iFld1 Test.sArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.iFld1 + "," + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth sMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
