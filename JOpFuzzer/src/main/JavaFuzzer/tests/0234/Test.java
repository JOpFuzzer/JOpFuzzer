// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-423834569L;
    public static int iFld=-218;
    public static volatile boolean bFld=true;
    public short sFld=17823;
    public float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];
    public static float fArrFld1[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld1, 124.140F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, float f1, int i8) {


        i7 = i7;
        Test.fArrFld1[(i7 >>> 1) % N] += i8;
        vMeth1_check_sum += i7 + Float.floatToIntBits(f1) + i8;
    }

    public static int iMeth(float f, int i2) {

        int i3=-153, i4=-133, i5=210, i6=-16298, i9=-16, i10=149;
        long l1=-19955L;
        double d1=-116.105571;
        short s=18288, sArr[][]=new short[N][N];
        byte by1=-98;

        FuzzerUtils.init(sArr, (short)15373);

        for (i3 = 3; i3 < 125; i3++) {
            for (i5 = 1; i5 < 13; ++i5) {
                vMeth1(i3, f, i4);
                i6 ^= (int)l1;
                i4 += i5;
                switch ((i5 % 6) + 41) {
                case 41:
                    d1 = d1;
                    i4 += (i5 - i4);
                    break;
                case 42:
                    i2 = (int)-12.172F;
                    i4 -= (int)f;
                    for (i9 = 1; i9 < 2; ++i9) {
                        i6 += (((i9 * i5) + l1) - i5);
                        i2 += (((i9 * Test.instanceCount) + i10) - l1);
                        i4 = i10;
                    }
                    l1 += (1946282544L + (i5 * i5));
                    break;
                case 43:
                    s += (short)i9;
                case 44:
                    i4 -= i5;
                    break;
                case 45:
                    i10 *= by1;
                    break;
                case 46:
                    i2 = i2;
                default:
                    sArr[i3][i3 + 1] >>>= (short)i10;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + i6 + l1 + Double.doubleToLongBits(d1) + i9 + i10
            + s + by1 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        double d=0.3597;
        float f2=-75.992F, f3=0.594F;
        int i11=7, i12=-27533, i13=13, i14=0, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -36600);

        d = (iMeth(f2, Test.iFld) * Test.iFld);
        Test.instanceCount -= Test.instanceCount;
        l = Test.iFld;
        for (i11 = 8; 143 > i11; i11++) {
            f3 = 1;
            do {
                for (i13 = i11; i13 < 1; ++i13) {
                    int i15=22;
                    f2 -= 6L;
                    i12 = i15;
                    if (Test.bFld) break;
                    Test.instanceCount -= (long)f2;
                    Test.instanceCount = Test.instanceCount;
                }
                f2 = i14;
                Test.iFld += (-2 + (f3 * f3));
                l = 93;
                iArr[(int)(f3 - 1)] = i11;
            } while (++f3 < 12);
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i11 + i12 +
            Float.floatToIntBits(f3) + i13 + i14 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-49677, i1=-55010, i16=-4, i17=-8, i18=-239, i19=14, i20=-26500, i21=169, i22=5, i23=12, i24=-29,
            iArr1[]=new int[N];
        byte by=82;
        double d2=26.43481;
        float f4=0.515F;

        FuzzerUtils.init(iArr1, 39310);

        for (i = 8; i < 182; i++) {
            by ^= (byte)(fArrFld[i] - lArrFld[i + 1]);
            vMeth(Test.instanceCount);
            d2 = d2;
            Test.instanceCount -= i1;
            Test.iFld |= i;
            for (i16 = 144; i16 > 8; i16--) {
                i18 = 1;
                while (++i18 < 2) {
                    i1 += (((i18 * f4) + i17) - Test.instanceCount);
                    i1 += i18;
                    f4 += i18;
                    Test.instanceCount >>>= i1;
                    i1 += (i18 * i18);
                    Test.instanceCount = (long)-98.99221;
                }
                i17 += (int)(-198L + (i16 * i16));
                try {
                    i17 = (i1 % i1);
                    i1 = (i17 % i17);
                    i17 = (i16 / i16);
                } catch (ArithmeticException a_e) {}
                Test.iFld += (i16 * i16);
            }
            if (Test.bFld) continue;
            switch ((i % 8) + 109) {
            case 109:
                for (i19 = 144; i19 > 9; i19--) {
                    if (true) break;
                    for (i21 = 1; 2 > i21; ++i21) {
                        i22 -= i20;
                        i20 += 27876;
                        f4 += (float)d2;
                    }
                    Test.instanceCount += (long)d2;
                    for (i23 = 2; i23 > i; i23 -= 2) {
                        i20 += i1;
                        Test.iFld = i18;
                    }
                    iArr1[i19 + 1] = i22;
                }
            case 110:
                i1 -= -55601;
                break;
            case 111:
                i17 &= i19;
                break;
            case 112:
                fArrFld[i + 1] += i22;
            case 113:
                i17 -= (int)Test.instanceCount;
            case 114:
                Test.instanceCount -= (long)-18.331F;
                break;
            case 115:
            case 116:
                by *= (byte)sFld;
                break;
            default:
                i24 -= i21;
            }
        }

        FuzzerUtils.out.println("i i1 by = " + i + "," + i1 + "," + by);
        FuzzerUtils.out.println("d2 i16 i17 = " + Double.doubleToLongBits(d2) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 f4 i19 = " + i18 + "," + Float.floatToIntBits(f4) + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 iArr1 = " + i23 + "," + i24 + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("sFld fArrFld lArrFld = " + sFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.fArrFld1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld1)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
