// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-90L;
    public static float fFld=0.873F;
    public static int iFld=10;
    public static short sFld=-12594;
    public int iFld1=9;
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 68.380F);
        FuzzerUtils.init(Test.lArrFld, 171L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8, long l) {

        int i9=77, i10=0, i11=-136, i12=56613;
        float f=2.441F;

        Test.fFld -= 34913;
        i8 -= (int)8L;
        i8 = i8;
        i8 %= (int)(l | 1);
        Test.fFld += l;
        i8 = i8;
        i8 %= (int)(i8 | 1);
        i8 &= (int)l;
        if (false) {
            for (i9 = 2; i9 < 264; ++i9) {
                for (i11 = 1; i11 < 6; ++i11) {
                    float f1=-107.481F;
                    f *= 14L;
                    f1 *= i10;
                    i10 += (i11 * i11);
                    f1 -= i12;
                }
            }
            vMeth2_check_sum += i8 + l + i9 + i10 + i11 + i12 + Float.floatToIntBits(f);
            return;
        }
        vMeth2_check_sum += i8 + l + i9 + i10 + i11 + i12 + Float.floatToIntBits(f);
    }

    public static void vMeth1() {

        int i3=6, i4=-180, i5=78, i6=-6, i7=89, i13=63992, i14=9;
        boolean b2=true;

        i3 = 1;
        while ((i3 += 2) < 329) {
            if (b2) {
                i4 += (-63 + (i3 * i3));
                for (i5 = 10; i5 > 1; i5 -= 3) {
                    i6 = (int)(i6 * ((-Integer.reverseBytes(i5)) + Test.instanceCount));
                    try {
                        i4 = (i3 % 61904);
                        i6 = (-48029 / i3);
                        i4 = (i7 % i6);
                    } catch (ArithmeticException a_e) {}
                }
                i6 += (i3 * Test.instanceCount);
                i7 >>= i6;
            } else if (b2) {
                i7 += (int)(Test.instanceCount + i7);
                vMeth2(-62331, 4907246015878978561L);
            } else if (b2) {
                if (i6 != 0) {
                    vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i13 + i14 + (b2 ? 1 : 0);
                    return;
                }
                for (i13 = 1; i13 < 10; i13++) {
                    Test.iFld += i4;
                    Test.instanceCount = i13;
                }
                b2 = b2;
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i13 + i14 + (b2 ? 1 : 0);
    }

    public static void vMeth(boolean b1, int i2) {

        int i16=-32524, i17=-23542, i18=6, i19=90, i20=-65173, iArr[]=new int[N];
        byte by=7;

        FuzzerUtils.init(iArr, -24887);

        vMeth1();
        Test.iFld >>= Test.iFld;
        Test.instanceCount -= Test.instanceCount;
        Test.fArrFld = Test.fArrFld;
        for (int i15 : iArr) {
            for (i16 = 1; i16 < 4; i16++) {
                i2 *= i16;
                if (b1) break;
                for (i18 = 2; 1 < i18; i18 -= 3) {
                    try {
                        i19 = (-109 % i17);
                        i15 = (i2 % i20);
                        iArr[i16 + 1] = (i2 / iArr[i16 + 1]);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += i18;
                    switch ((((i15 >>> 1) % 2) * 5) + 86) {
                    case 91:
                        iArr[i18 + 1] = i17;
                        try {
                            i20 = (i20 / -17);
                            iArr[i16 + 1] = (iArr[i16 + 1] / i20);
                            iArr[i16 + 1] = (i16 % i16);
                        } catch (ArithmeticException a_e) {}
                        i19 += (1 + (i18 * i18));
                        break;
                    case 88:
                        by += (byte)(((i18 * Test.iFld) + Test.instanceCount) - Test.fFld);
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += (b1 ? 1 : 0) + i2 + i16 + i17 + i18 + i19 + i20 + by + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=24883, i1=54758, i21=0, i22=8, i23=236, i24=-20286;
        boolean b=true, bArr[]=new boolean[N];
        double d=0.72790, dArr[]=new double[N];
        byte by1=-18, byArr[][]=new byte[N][N];

        FuzzerUtils.init(dArr, 8.40421);
        FuzzerUtils.init(byArr, (byte)-31);
        FuzzerUtils.init(bArr, true);

        for (i = 8; i < 145; i++) {
            switch ((i * 5) + 24) {
            case 98:
                if (b) break;
                vMeth(b, i1);
                break;
            case 58:
                Test.iFld += i;
                b = b;
                try {
                    i1 = (iArrFld[i] % Test.iFld);
                    Test.iFld = (-1319269219 / i1);
                    i1 = (-1429943647 % iArrFld[i - 1]);
                } catch (ArithmeticException a_e) {}
                break;
            case 91:
                for (i21 = 4; i21 < 183; ++i21) {
                    i23 = 1;
                    do {
                        Test.sFld += (short)(i23 | i);
                        iArrFld[i - 1] -= (int)Test.instanceCount;
                        Test.iFld -= (int)5010L;
                        i1 -= i21;
                        Test.iFld >>= Test.sFld;
                        Test.instanceCount += i1;
                        if (b) {
                        } else {
                            i1 *= i1;
                            Test.sFld *= (short)55.128279;
                            switch ((i23 % 4) + 9) {
                            case 9:
                                i22 *= -9534;
                                dArr[i] -= 4064476106L;
                            case 10:
                            case 11:
                                i1 += (i23 ^ i22);
                                b = b;
                            case 12:
                                Test.sFld += (short)i23;
                                i22 += (((i23 * i23) + i) - i1);
                                Test.iFld += (int)Test.instanceCount;
                                Test.instanceCount = i21;
                                break;
                            }
                            i22 += (((i23 * Test.instanceCount) + Test.sFld) - i22);
                        }
                        Test.instanceCount += (((i23 * i1) + Test.instanceCount) - Test.instanceCount);
                    } while (++i23 < 2);
                    byArr[i21 - 1][i] += (byte)8;
                }
                break;
            case 227:
                Test.fFld = -3L;
                break;
            case 173:
                Test.instanceCount += (((i * Test.sFld) + Test.fFld) - i22);
            case 302:
                iArrFld[i] >>>= Test.iFld;
                break;
            case 41:
                i1 = (int)d;
                break;
            case 304:
                Test.instanceCount += by1;
                break;
            case 187:
                Test.instanceCount += i;
                break;
            case 210:
                if (b) break;
                break;
            case 61:
                i22 = i21;
                break;
            case 284:
                i22 += i;
                break;
            case 170:
                Test.fFld += i;
            case 81:
                i1 |= Test.iFld;
            case 28:
                iArrFld[i] /= 218;
                break;
            case 271:
                Test.instanceCount = Test.instanceCount;
                break;
            case 289:
                Test.fFld += i1;
                break;
            case 99:
                i1 *= i;
            case 222:
                Test.lArrFld[i] -= i1;
                break;
            case 57:
                i1 += i;
                break;
            case 182:
            case 211:
            case 188:
                i22 -= by1;
                break;
            case 118:
                Test.iFld += i;
                break;
            case 336:
                i1 -= i23;
                break;
            case 314:
                Test.instanceCount += (i * i);
                break;
            case 154:
                iArrFld[i] -= (int)Test.instanceCount;
                break;
            case 337:
                i1 += i23;
                break;
            case 223:
                d = -12921;
                break;
            case 355:
                Test.iFld -= i23;
                break;
            case 75:
                i22 ^= i23;
                break;
            case 171:
                d += i21;
            case 137:
                Test.instanceCount = i1;
                break;
            case 87:
            case 237:
                b = b;
                break;
            case 186:
                Test.fFld = i23;
            case 354:
                bArr[i] = b;
                break;
            case 169:
                Test.fFld += (i * Test.iFld);
                break;
            case 109:
                Test.iFld = (int)Test.fFld;
                break;
            case 51:
                iArrFld[i - 1] -= (int)Test.fFld;
            case 117:
                Test.iFld = 51862;
                break;
            case 115:
                Test.lArrFld[i - 1] -= i21;
                break;
            case 239:
                Test.instanceCount = i23;
                break;
            case 204:
                Test.fFld += i;
                break;
            case 83:
            case 212:
                i22 ^= 29;
                break;
            case 363:
                i22 -= i1;
                break;
            case 192:
                Test.instanceCount = i;
            case 48:
                d /= (Test.iFld | 1);
                break;
            case 318:
                i1 = (int)d;
            case 353:
                by1 = (byte)i21;
                break;
            case 313:
                Test.iFld += (i * i21);
            case 331:
                Test.lArrFld[i - 1] -= -42;
                break;
            case 69:
            case 273:
                i22 += i22;
                break;
            case 44:
                Test.instanceCount -= -14;
                break;
            case 129:
                Test.iFld += (i * i24);
                break;
            case 88:
                iArrFld[(i21 >>> 1) % N] -= (int)Test.fFld;
            case 270:
            case 325:
                i24 >>= i22;
            case 241:
                Test.iFld += (((i * i) + i23) - Test.instanceCount);
                break;
            case 106:
                i22 = i;
                break;
            case 264:
            case 155:
                Test.iFld += (i | i24);
                break;
            case 77:
                Test.fFld += (i * i);
                break;
            case 138:
                by1 += (byte)Test.iFld;
                break;
            case 92:
                iArrFld[i] -= i24;
                break;
            case 347:
                try {
                    iFld1 = (Test.iFld % iArrFld[i]);
                    i24 = (-136 / i22);
                    i22 = (156 / iArrFld[i]);
                } catch (ArithmeticException a_e) {}
                break;
            case 349:
                Test.instanceCount = i23;
                break;
            case 348:
                Test.instanceCount += i21;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 b = " + i + "," + i1 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("d by1 i24 = " + Double.doubleToLongBits(d) + "," + by1 + "," + i24);
        FuzzerUtils.out.println("dArr byArr bArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld iFld1 Test.fArrFld = " + Test.sFld + "," + iFld1 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
