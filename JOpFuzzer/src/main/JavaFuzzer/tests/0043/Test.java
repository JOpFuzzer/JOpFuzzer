// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-103L;
    public static float fFld=1.238F;
    public static double dFld=1.59388;
    public static volatile int iFld=-58;
    public static boolean bFld=true;
    public static long lFld=25987L;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.34604);
        FuzzerUtils.init(Test.iArrFld, -12);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i11=-11, i12=76, i14=-4, i15=16170, i16=-10, i17=-19427;

        for (i11 = 8; 324 > i11; ++i11) {
            for (i14 = 1; i14 < 5; ++i14) {
                i15 ^= (int)Test.instanceCount;
                i12 = i11;
            }
            i16 = 5;
            while ((i16 -= 3) > 0) {
                i17 = 1;
                do {
                    Test.instanceCount += i17;
                    i12 += (i17 * i15);
                    Test.iArrFld[i16] >>= (int)Test.instanceCount;
                    Test.bFld = Test.bFld;
                    i12 += (int)236L;
                } while (++i17 < 3);
                Test.instanceCount = i12;
                i15 += (i16 * i11);
                i12 = (int)-13L;
                Test.iArrFld[i16] += (int)-101.25609;
            }
        }
        long meth_res = i11 + i12 + i14 + i15 + i16 + i17;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        double d=0.112431, d1=-50.10632;
        int i7=-8, i8=-15853, i9=-16957, i10=-6;
        short s=-19830;
        long l1=870304832L;

        for (d = 7; d < 272; d += 2) {
            for (i8 = 1; i8 < 12; ++i8) {
                i9 = (int)(((i9 + l) - (++Test.instanceCount)) * (Math.abs(l) + (Test.iFld--)));
                for (d1 = 1; d1 < 2; ++d1) {
                    Test.instanceCount &= (s = (short)((246L - (25 >> (-(l + 213980789L)))) + Test.instanceCount));
                    i10 += (++Test.iFld);
                    i9 += (int)d1;
                }
                Test.instanceCount *= ((51457 + (-i8)) + iMeth());
                l1 = 1;
                while (++l1 < 2) {
                    Test.iArrFld[(int)(d - 1)] = i9;
                    i10 <<= i9;
                    i10 <<= i10;
                    i7 >>= (int)Test.instanceCount;
                    Test.instanceCount += (l1 ^ Test.instanceCount);
                    i10 -= 15323;
                }
            }
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d) + i7 + i8 + i9 + Double.doubleToLongBits(d1) + i10 + s + l1;
    }

    public static long lMeth() {

        int i2=13, i3=-2, i4=9, i5=11, i6=-3345, iArr[]=new int[N];
        boolean b=true;
        byte by=93;

        FuzzerUtils.init(iArr, -9);

        i2 *= (int)Test.fFld;
        for (i3 = 7; i3 < 297; ++i3) {
            i2 = (int)((--iArr[i3 + 1]) - ((11 + (i3 * Test.fFld)) + (Test.dFld - Test.dFld)));
            Test.iFld += i3;
            for (i5 = 1; i5 < 6; ++i5) {
                b = b;
                if (Test.bFld) {
                    vMeth(Test.instanceCount);
                    Test.dArrFld[i5 + 1] *= Test.instanceCount;
                    i4 *= i4;
                } else if (b) {
                    Test.fFld = i3;
                    Test.fFld = Test.instanceCount;
                    Test.iFld *= by;
                } else if (b) {
                    Test.instanceCount -= i6;
                } else {
                    Test.instanceCount += (((i5 * i3) + i2) - Test.fFld);
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + by + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=146, i1=11, i18=62946, i19=6, i20=-34, i21=-44, i22=-3, i23=-2, i24=-8, i25=61836;
        short s1=-16002;
        long l2=-3736612650L;
        byte by1=44;

        for (i = 8; i < 271; i += 3) {
            i1 += (i * i);
            Test.dArrFld[i + 1] -= ((lMeth() - Test.instanceCount) - Test.fFld);
            i1 += i;
        }
        i18 = 1;
        while (++i18 < 323) {
            s1 = (short)Test.instanceCount;
            Test.fFld *= Test.instanceCount;
            Test.iArrFld[i18 - 1] += i1;
        }
        for (l2 = 3; l2 < 125; ++l2) {
            i19 += (int)l2;
            by1 += (byte)Test.iFld;
            for (i20 = (int)(l2); i20 < 205; i20++) {
                Test.instanceCount += i19;
                Test.dFld *= Test.dFld;
                Test.lFld = -10;
                i22 = 1;
                while ((i22 -= 2) > 0) {
                    i21 += by1;
                    Test.iFld += (i22 - i22);
                }
                i21 += (i20 + i18);
                Test.iFld += (i20 - i20);
                for (i23 = i20; i23 < 1; ++i23) {
                    i1 = (int)4209342691L;
                    Test.iArrFld[i23] -= (int)Test.lFld;
                    if (Test.bFld) break;
                    Test.fFld += (float)Test.dFld;
                    if (Test.bFld) {
                        i21 = i20;
                        i19 += by1;
                        s1 = (short)i20;
                        Test.instanceCount <<= 50398L;
                    } else if (Test.bFld) {
                        i21 += (i23 - i);
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i18 = " + i + "," + i1 + "," + i18);
        FuzzerUtils.out.println("s1 l2 i19 = " + s1 + "," + l2 + "," + i19);
        FuzzerUtils.out.println("by1 i20 i21 = " + by1 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 = " + i25);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iFld Test.bFld Test.lFld = " + Test.iFld + "," + (Test.bFld ? 1 : 0) + "," +
            Test.lFld);
        FuzzerUtils.out.println("Test.dArrFld Test.iArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
