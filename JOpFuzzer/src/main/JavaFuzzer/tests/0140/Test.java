// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-80L;
    public static volatile long lFld=-1171435035L;
    public static volatile short sFld=-26525;
    public int iFld=-9170;
    public static float fFld=-12.821F;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 59);
        FuzzerUtils.init(Test.dArrFld, -62.100942);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8, int i9, int i10) {

        long l=3L, lArr[]=new long[N];
        int i12=11825, i13=58292, i14=2;
        byte by1=-55;
        float f=0.819F;
        short s=6601;

        FuzzerUtils.init(lArr, 2915609834L);

        for (int i11 : Test.iArrFld) {
            for (l = 4; 1 < l; --l) {
                by1 = (byte)244;
                lArr[(int)(l)] *= (long)f;
                Test.dArrFld[(int)(l + 1)][(int)(l)] = i12;
                i8 |= i11;
                i10 *= 1504;
                for (i13 = 1; 2 > i13; i13++) {
                    Test.dArrFld[(int)(l + 1)] = Test.dArrFld[(int)(l)];
                    s = (short)Test.instanceCount;
                    i12 *= 145;
                    Test.instanceCount -= i10;
                    Test.iArrFld = Test.iArrFld;
                }
            }
        }
        Test.iArrFld[(i10 >>> 1) % N] = i9;
        Test.iArrFld[(i9 >>> 1) % N] += i9;
        long meth_res = i8 + i9 + i10 + l + i12 + by1 + Float.floatToIntBits(f) + i13 + i14 + s +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i7) {

        float f1=-1.842F;
        int i15=10, i16=-5, i17=-4;
        short s1=27023;
        double d=45.130903;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        bArr[(i7 >>> 1) % N] = (iMeth(i7, i7, i7) < i7);
        i7 *= (int)f1;
        i7 += (int)f1;
        for (i15 = 12; i15 < 198; i15++) {
            s1 = (short)i15;
            i7 -= i16;
            switch (((i15 % 4) * 5) + 108) {
            case 127:
                i7 -= i7;
                i17 = 1;
                while (++i17 < 9) {
                    d = 1;
                    do {
                        if (b) {
                            Test.iArrFld[i17] -= (int)d;
                            b = b;
                            i16 += (int)((long)d ^ i15);
                            i16 = i16;
                            vMeth1_check_sum += i7 + Float.floatToIntBits(f1) + i15 + i16 + s1 + i17 +
                                Double.doubleToLongBits(d) + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr);
                            return;
                        } else {
                            Test.iArrFld[i15 + 1] |= i16;
                        }
                    } while (++d < 1);
                }
                break;
            case 119:
                Test.dArrFld[i15 + 1][i15 - 1] -= i15;
            case 117:
                i7 *= (int)Test.instanceCount;
                break;
            case 113:
                i16 = (int)Test.instanceCount;
                break;
            }
        }
        vMeth1_check_sum += i7 + Float.floatToIntBits(f1) + i15 + i16 + s1 + i17 + Double.doubleToLongBits(d) + (b ? 1
            : 0) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(byte by, int i6) {

        int i18=-20737, i19=12, i20=-50491, i21=147, i22=-10;
        double d1=-25.83536;
        float f2=1.930F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -34982L);

        vMeth1(i6);
        for (i18 = 20; i18 < 372; ++i18) {
            switch (((i19 >>> 1) % 2) + 88) {
            case 88:
                lArr1[i18] %= (i19 | 1);
                for (i20 = 1; i20 < 5; ++i20) {
                    Test.iArrFld[i20 + 1] += (int)d1;
                    Test.lFld = i18;
                }
                Test.instanceCount += i18;
                break;
            case 89:
                i19 = i20;
                i19 -= i18;
                break;
            }
        }
        i22 = 1;
        do {
            f2 -= f2;
            i6 -= by;
            f2 -= Test.sFld;
            i21 <<= i20;
        } while ((i22 += 2) < 166);
        vMeth_check_sum += by + i6 + i18 + i19 + i20 + i21 + Double.doubleToLongBits(d1) + i22 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-4934, i1=14, i2=14, i3=209, i4=-47788, i5=21242;
        byte by2=36;
        long l1=-7851422617493663233L, lArr2[]=new long[N];
        float f3=4.340F;
        boolean b1=true, bArr1[]=new boolean[N];

        FuzzerUtils.init(lArr2, -14L);
        FuzzerUtils.init(bArr1, true);

        for (i = 251; i > 3; --i) {
            switch ((i % 4) + 87) {
            case 87:
                for (i2 = 5; i2 < 101; ++i2) {
                    switch ((((--i1) >>> 1) % 4) + 22) {
                    case 22:
                        for (i4 = i; i4 < 2; ++i4) {
                            switch (((i4 % 7) * 5) + 58) {
                            case 85:
                                Test.instanceCount += (9 + (i4 * i4));
                                vMeth(by2, i);
                                l1 -= i5;
                            case 65:
                                Test.instanceCount += (((i4 * i4) + i3) - Test.lFld);
                                Test.iArrFld = Test.iArrFld;
                                break;
                            case 70:
                                switch ((i2 % 10) + 76) {
                                case 76:
                                    f3 = Test.instanceCount;
                                    break;
                                case 77:
                                    lArr2[i4] *= i3;
                                    i1 >>>= i5;
                                    break;
                                case 78:
                                    i1 += i4;
                                    break;
                                case 79:
                                    i5 *= i4;
                                    break;
                                case 80:
                                    i5 += i1;
                                    i5 <<= by2;
                                    i5 += (((i4 * f3) + iFld) - i1);
                                    f3 += i3;
                                    break;
                                case 81:
                                    Test.dArrFld[i2 - 1][i + 1] = i2;
                                    switch (((i >>> 1) % 5) + 98) {
                                    case 98:
                                        Test.sFld += (short)(i4 * l1);
                                        iFld += (int)l1;
                                        break;
                                    case 99:
                                        i3 += (i4 ^ iFld);
                                        i5 = iFld;
                                        f3 += i2;
                                        break;
                                    case 100:
                                        i1 = (int)l1;
                                        i1 %= (int)(i | 1);
                                    case 101:
                                        iFld += 14;
                                        break;
                                    case 102:
                                        if (false) continue;
                                    default:
                                        Test.iArrFld[i4 - 1] += i2;
                                    }
                                    break;
                                case 82:
                                    Test.lFld >>>= iFld;
                                    break;
                                case 83:
                                    i1 += (((i4 * Test.fFld) + i) - i4);
                                case 84:
                                    iFld -= (int)Test.lFld;
                                    break;
                                case 85:
                                    iFld = (int)65.369F;
                                    break;
                                default:
                                    f3 = by2;
                                }
                            case 87:
                                i1 >>>= -240;
                                break;
                            case 84:
                                i5 = (int)7422464850683671930L;
                                break;
                            case 63:
                                i3 -= i2;
                                break;
                            case 78:
                                Test.lFld &= l1;
                                break;
                            }
                        }
                        break;
                    case 23:
                        bArr1[i - 1] = b1;
                    case 24:
                        i1 -= (int)f3;
                        break;
                    case 25:
                        i3 += 208;
                        break;
                    }
                }
                break;
            case 88:
                Test.dArrFld[i - 1][i + 1] -= 78;
                break;
            case 89:
                iFld -= (int)Test.instanceCount;
                break;
            case 90:
                l1 = (long)Test.fFld;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("by2 l1 f3 = " + by2 + "," + l1 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("b1 lArr2 bArr1 = " + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr2) + "," +
            FuzzerUtils.checkSum(bArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.lFld Test.sFld = " + Test.instanceCount + "," + Test.lFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("iFld Test.fFld Test.iArrFld = " + iFld + "," + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
