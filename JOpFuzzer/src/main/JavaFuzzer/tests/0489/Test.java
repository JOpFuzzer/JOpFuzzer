// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-228L;
    public static boolean bFld=false;
    public int iFld=62536;
    public static long lArrFld[]=new long[N];
    public static long lArrFld1[][]=new long[N][N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 7L);
        FuzzerUtils.init(Test.lArrFld1, -35409L);
        FuzzerUtils.init(Test.iArrFld, 12);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4) {

        int i5=28333, i6=-193, i7=8, iArr[]=new int[N];
        long l=-1367900925L, l1=-95L;
        double d=112.66337;
        float f3=-77.508F;

        FuzzerUtils.init(iArr, 34);

        i4 = i4;
        for (i5 = 6; i5 < 197; i5++) {
            l = 1;
            while ((l += 2) < 8) {
                i3 = i3;
                try {
                    i4 = (i6 % 214);
                    iArr[(int)(l + 1)] = (59208 / iArr[(int)(l)]);
                    iArr[(int)(l)] = (i5 % iArr[(int)(l + 1)]);
                } catch (ArithmeticException a_e) {}
                d = 1;
                while (++d < 2) {
                    i3 &= i6;
                    i3 >>>= i4;
                }
            }
            i4 += (int)f3;
            i3 = i5;
            Test.lArrFld = Test.lArrFld;
            for (l1 = 1; l1 < 8; l1 += 2) {
                Test.instanceCount >>= i5;
                Test.lArrFld = FuzzerUtils.long1array(N, (long)-735179086L);
                try {
                    i6 = (144 % i7);
                    iArr[i5 - 1] = (i3 / i6);
                    iArr[(int)(l1)] = (-921332136 % i3);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + l + Double.doubleToLongBits(d) + Float.floatToIntBits(f3) + l1 + i7 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i1, float f1) {

        float f2=0.623F;
        int i2=27527, i8=189, i9=-63714;
        boolean b=true;
        double d1=-41.43613;
        short s=28587;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)123);

        for (f2 = 343; f2 > 4; --f2) {
            vMeth1(60068, i1);
            b = true;
            for (d1 = 1; d1 < 5; d1++) {
                f1 += Test.instanceCount;
                s = (short)i8;
                Test.instanceCount <<= -19408L;
                i2 <<= i2;
                i2 = 0;
                i2 >>= (int)Test.instanceCount;
                i9 = 1;
                while (++i9 < 2) {
                    if (b) continue;
                    byArr[(int)(d1 - 1)] >>>= (byte)i9;
                    i8 = (int)Test.instanceCount;
                    i2 >>= i8;
                }
            }
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i2 + (b ? 1 : 0) +
            Double.doubleToLongBits(d1) + i8 + s + i9 + FuzzerUtils.checkSum(byArr);
    }

    public float fMeth(int i) {

        int i10=11167, i11=155, i12=10, i13=9;
        short s1=24866;

        i *= (int)Float.intBitsToFloat(0);
        vMeth(i, 0.1015F);
        for (i10 = 5; i10 < 205; ++i10) {
            if (Test.bFld) {
                i11 *= i10;
            } else if (Test.bFld) {
                Test.lArrFld1 = Test.lArrFld1;
            } else if (Test.bFld) {
                i += i11;
                Test.iArrFld[i10 + 1][i10 + 1] = (int)-5L;
            } else {
                for (i12 = 8; i12 > 1; --i12) {
                    Test.lArrFld = Test.lArrFld;
                    Test.bFld = Test.bFld;
                    i *= -14;
                    s1 += (short)i13;
                }
                Test.instanceCount -= i11;
                i11 += (i10 ^ s1);
            }
        }
        long meth_res = i + i10 + i11 + i12 + i13 + s1;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.975F, f4=0.805F, f5=0.616F, fArr[][]=new float[N][N];
        int i14=-171, i15=17769, i16=6, i17=-4, i18=-22427, i19=5;
        short s2=-31567;
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 0.22F);
        FuzzerUtils.init(dArr, 0.41031);

        f = fMeth(-9);
        i14 = 1;
        while (++i14 < 306) {
            i15 = 1;
            do {
                f4 %= (float)0.31534;
                Test.instanceCount = -115;
                iFld += (int)f;
                for (i16 = 1; i16 > i14; i16--) {
                    i17 = i17;
                }
                for (f5 = 1; f5 > 1; f5 -= 2) {
                    i18 -= (int)f5;
                    Test.iArrFld[(int)(f5)][(int)(f5 + 1)] >>= (int)12L;
                    if (Test.bFld) {
                        Test.instanceCount = Test.instanceCount;
                    } else {
                        i18 <<= (int)Test.instanceCount;
                        s2 <<= (short)-30430;
                    }
                    i18 += (int)f5;
                    fArr[i15][i15 + 1] += i15;
                    switch ((int)(((f5 % 8) * 5) + 59)) {
                    case 77:
                    case 65:
                        Test.instanceCount = i16;
                        f += f5;
                        iFld ^= i19;
                    case 61:
                        i19 *= (int)-20.227F;
                        Test.instanceCount = (long)f;
                        i17 <<= i14;
                    case 62:
                        dArr[i15] -= Test.instanceCount;
                        Test.instanceCount -= i18;
                        dArr = dArr;
                        break;
                    case 97:
                        i18 = (int)Test.instanceCount;
                        s2 += (short)(((f5 * f5) + i17) - iFld);
                        f = Test.instanceCount;
                        break;
                    case 85:
                        f = Test.instanceCount;
                        break;
                    case 78:
                        Test.instanceCount = s2;
                        break;
                    case 64:
                        Test.bFld = Test.bFld;
                        break;
                    default:
                        iFld *= (int)Test.instanceCount;
                    }
                }
            } while (++i15 < 82);
        }

        FuzzerUtils.out.println("f i14 i15 = " + Float.floatToIntBits(f) + "," + i14 + "," + i15);
        FuzzerUtils.out.println("f4 i16 i17 = " + Float.floatToIntBits(f4) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("f5 i18 s2 = " + Float.floatToIntBits(f5) + "," + i18 + "," + s2);
        FuzzerUtils.out.println("i19 fArr dArr = " + i19 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld iFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0)
            + "," + iFld);
        FuzzerUtils.out.println("Test.lArrFld Test.lArrFld1 Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld1) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
