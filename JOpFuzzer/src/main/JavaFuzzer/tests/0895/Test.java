// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-157L;
    public boolean bFld=true;
    public static short sFld=-19165;
    public boolean bFld1=false;
    public float fFld=-11.781F;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13);
        FuzzerUtils.init(Test.fArrFld, 1.558F);
        FuzzerUtils.init(Test.iArrFld1, -17032);
    }

    public static long bMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(float f1, long l1, int i8) {

        int i9=-14, i10=-14, i11=-65396, i12=-75, i13=14;
        boolean b=true;
        double d=-28.80645;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)-32);

        i9 = 156;
        do {
            switch (((i9 % 1) * 5) + 30) {
            case 33:
                for (i10 = 1; i10 < 10; i10++) {
                    Test.instanceCount += (((i10 * i9) + i9) - i11);
                    i11 += (((i10 * i10) + i11) - f1);
                    i11 = i11;
                    l1 += i10;
                    switch ((((i9 >>> 1) % 7) * 5) + 56) {
                    case 87:
                        i8 += (4 + (i10 * i10));
                        i11 = i10;
                        i8 += i10;
                        break;
                    case 63:
                        switch (((i10 % 1) * 5) + 127) {
                        case 130:
                            for (i12 = i10; i12 < 2; i12++) {
                                b = b;
                                f1 += i11;
                            }
                            break;
                        }
                        break;
                    case 58:
                        d = l1;
                    case 73:
                        Test.iArrFld[i9 + 1] = -130;
                        break;
                    case 70:
                        Test.instanceCount += -42305;
                    case 84:
                        i13 += i13;
                        break;
                    case 57:
                        d = f1;
                    default:
                        byArr[i9] = byArr[i9 + 1];
                    }
                }
                break;
            }
        } while (--i9 > 0);
        long meth_res = Float.floatToIntBits(f1) + l1 + i8 + i9 + i10 + i11 + i12 + i13 + (b ? 1 : 0) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static float fMeth(long l, int i4, int i5) {

        float f=100.204F, fArr[]=new float[N];
        int i6=0, i7=-57, i14=-5;

        FuzzerUtils.init(fArr, -48.847F);

        i4 <<= (int)((i4 % (Math.max(l, Test.instanceCount) | 1)) - f);
        i4 += -110;
        Test.iArrFld[(i4 >>> 1) % N] = (int)((-(l--)) - ((i5 + f) * (60919 >> (++l))));
        for (i6 = 5; i6 < 154; i6++) {
            double d1=1.76375;
            fArr[i6] = lMeth(15.862F, Test.instanceCount, i5);
            Test.sFld = (short)i6;
            i14 += i4;
            d1 = i5;
            i5 += i6;
        }
        Test.sFld = (short)-2.60213;
        long meth_res = l + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static boolean bMeth(int i2, int i3) {

        double d2=-1.2968;
        int i15=3, i16=-19919, i17=-14, i18=-124, i19=72, i20=-8232, i21=-62;
        byte by1=57;

        fMeth(Test.instanceCount, -38, 0);
        switch ((((-224 >>> 1) % 2) * 5) + 67) {
        case 76:
            for (d2 = 3; d2 < 128; d2++) {
                i2 = (int)Test.instanceCount;
            }
            for (i16 = 2; i16 < 396; ++i16) {
                for (i18 = 1; i18 < 4; ++i18) {
                    i2 += (i18 - Test.instanceCount);
                    Test.fArrFld = Test.fArrFld;
                    Test.instanceCount &= Test.instanceCount;
                    i3 = by1;
                    Test.instanceCount -= i15;
                    Test.sFld = (short)i16;
                }
                for (i20 = 1; i20 < 4; ++i20) {
                    i17 = i21;
                }
                i15 = i17;
            }
            break;
        case 72:
            i21 = (int)49L;
            break;
        default:
            i2 /= (int)(Test.instanceCount | 1);
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d2) + i15 + i16 + i17 + i18 + i19 + by1 + i20 + i21;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=23555, i1=4, i22=-8, i23=-97, i24=-2, i25=9;
        byte by=-44;
        long l2=-97L;
        double d3=0.108852;

        for (i = 2; i < 167; i++) {
            i1 = (int)((~Math.max(i1, i)) * ((by + Test.instanceCount) - (i1 % 2)));
            bFld = (bMeth(i, -14) != bFld1);
        }
        Test.iArrFld[(i1 >>> 1) % N] = 4;
        i1 = i1;
        i1 -= i;
        if (bFld1) {
            Test.sFld *= (short)Test.instanceCount;
            for (i22 = 12; i22 < 322; i22++) {
                Test.sFld += (short)i23;
                fFld *= i;
                Test.iArrFld = Test.iArrFld;
                for (l2 = 4; 81 > l2; ++l2) {
                    i1 = Test.sFld;
                    i1 = i;
                    bFld1 = true;
                    i1 += (int)l2;
                    i24 += (int)(((l2 * Test.instanceCount) + Test.instanceCount) - i1);
                    i24 += (-51625 + (l2 * l2));
                    i24 = 0;
                }
                if (bFld1) {
                    by -= (byte)fFld;
                    Test.instanceCount = i23;
                    i1 = (int)-817898823L;
                } else if (bFld) {
                    i1 = i;
                    for (d3 = 5; d3 < 81; ++d3) {
                        fFld = i24;
                        Test.instanceCount -= Test.instanceCount;
                        Test.iArrFld1[i22 + 1] -= i22;
                    }
                    Test.instanceCount = i22;
                } else {
                    Test.instanceCount += i1;
                }
            }
        } else if (bFld) {
            i23 -= i24;
        } else {
            Test.iArrFld1[(i23 >>> 1) % N] -= i23;
        }

        FuzzerUtils.out.println("i i1 by = " + i + "," + i1 + "," + by);
        FuzzerUtils.out.println("i22 i23 l2 = " + i22 + "," + i23 + "," + l2);
        FuzzerUtils.out.println("i24 d3 i25 = " + i24 + "," + Double.doubleToLongBits(d3) + "," + i25);

        FuzzerUtils.out.println("Test.instanceCount bFld Test.sFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) +
            "," + Test.sFld);
        FuzzerUtils.out.println("bFld1 fFld Test.iArrFld = " + (bFld1 ? 1 : 0) + "," + Float.floatToIntBits(fFld) + ","
            + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld Test.iArrFld1 = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  fMeth ->  fMeth bMeth mainTest
//DEBUG  lMeth ->  lMeth fMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
