// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2755914166L;
    public static short sFld=-11977;
    public static float fFld=112.643F;
    public static boolean bFld=false;
    public float fArrFld[]=new float[N];

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i7, long l1, long l2) {

        int i9=2, i10=-8, i11=-47723, i12=-44, i13=-43, iArr[]=new int[N];
        boolean b1=false;
        byte by=-124;

        FuzzerUtils.init(iArr, 52473);

        for (int i8 : iArr) {
            for (i9 = 1; i9 < 4; ++i9) {
                i11 = 2;
                while (--i11 > 0) {
                    if (b1) break;
                    i7 += (i11 ^ i11);
                    iArr[i9] = Test.sFld;
                }
                i7 = -39944;
                l1 *= 4;
                i8 <<= i9;
                for (i12 = i9; i12 < 2; ++i12) {
                    i7 -= (int)43.160F;
                    switch ((i12 % 2) + 94) {
                    case 94:
                        by >>= (byte)i13;
                        iArr[i12] -= (int)28772L;
                        i13 = -44294;
                        break;
                    case 95:
                        try {
                            i13 = (i13 / -132);
                            i7 = (107 / iArr[i12 + 1]);
                            i10 = (i13 % -74);
                        } catch (ArithmeticException a_e) {}
                        break;
                    }
                }
            }
        }
        long meth_res = i7 + l1 + l2 + i9 + i10 + i11 + (b1 ? 1 : 0) + i12 + i13 + by + FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static float fMeth(int i5, int i6, float f1) {

        boolean b=true;
        int i14=-37;

        b = bMeth(i14, -41040L, Test.instanceCount);
        Test.instanceCount = Test.sFld;
        f1 = i5;
        f1 = i14;
        long meth_res = i5 + i6 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i14;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(float f, int i, long l) {

        int i1=-1, i2=154, i3=-115, i4=-19, i15=65257, iArr1[]=new int[N];
        double d=-28.125643;
        long l3=-2580212654L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3296879996L);
        FuzzerUtils.init(iArr1, -53);

        for (i1 = 223; i1 > 3; i1--) {
            f += ((i++) - Math.abs(++l));
            for (i3 = 1; 7 > i3; ++i3) {
                l <<= (long)(-((++lArr[i1 + 1]) * fMeth(i, 85, f)));
                i2 -= i1;
                iArr1[i1 + 1] += (int)l;
                for (d = 1; d < 2; d++) {
                    double d1=0.113274;
                    i4 -= (int)l3;
                    Test.instanceCount -= i15;
                    iArr1[(int)(d)] = i2;
                    l += (long)-35.22F;
                    i4 += (int)((long)d | i3);
                    d1 -= i3;
                    Test.sFld <<= (short)i1;
                    if (i != 0) {
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i + l + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + i15 + l3 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f2=-17.330F;
        int i16=-2, i17=112, i18=-37459, iArr2[]=new int[N];
        double d2=-2.84246;
        byte by1=53, byArr[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 37594);
        FuzzerUtils.init(byArr, (byte)-76);
        FuzzerUtils.init(lArr1, 2605041021L);

        Test.instanceCount = iMeth(Test.fFld, -216, Test.instanceCount);
        f2 = 1;
        while (++f2 < 185) {
            for (i16 = 6; i16 < 136; i16++) {
                iArr2[i16] += i17;
                i18 = 1;
                do {
                    Test.instanceCount = i17;
                    switch (((i17 >>> 1) % 10) + 119) {
                    case 119:
                        Test.instanceCount *= -30828;
                        byArr = FuzzerUtils.byte1array(N, (byte)-68);
                        Test.fFld += i18;
                        Test.instanceCount = i16;
                        break;
                    case 120:
                        Test.instanceCount *= i17;
                        Test.instanceCount *= (long)d2;
                        Test.bFld = Test.bFld;
                        fArrFld[i18 + 1] += i16;
                        break;
                    case 121:
                        by1 += (byte)i18;
                        Test.fFld += (i18 * i18);
                        fArrFld = fArrFld;
                        i17 += (i18 | i18);
                        break;
                    case 122:
                        i17 <<= i17;
                        switch (((i16 >>> 1) % 10) + 57) {
                        case 57:
                            Test.instanceCount >>= i16;
                            iArr2[i16] = i17;
                            Test.fFld += i18;
                            Test.fFld += i18;
                        case 58:
                            i17 >>= i17;
                            Test.fFld -= -3;
                            i17 = i17;
                            break;
                        case 59:
                            i17 -= i16;
                            i17 <<= Test.sFld;
                            break;
                        case 60:
                            i17 += i16;
                            break;
                        case 61:
                            Test.instanceCount += i18;
                            break;
                        case 62:
                            Test.fFld %= -13;
                            break;
                        case 63:
                            lArr1[(int)(f2)] += i18;
                        case 64:
                            i17 >>>= -7382;
                            break;
                        case 65:
                            d2 -= Test.instanceCount;
                            break;
                        case 66:
                            try {
                                iArr2[i16] = (iArr2[(int)(f2 - 1)] / -35093);
                                i17 = (i18 % -26376);
                                i17 = (199 % i17);
                            } catch (ArithmeticException a_e) {}
                            break;
                        default:
                            i17 += (int)f2;
                        }
                        break;
                    case 123:
                        by1 += (byte)-60170;
                        break;
                    case 124:
                        Test.instanceCount += i18;
                        break;
                    case 125:
                        Test.bFld = Test.bFld;
                        break;
                    case 126:
                        Test.bFld = true;
                        break;
                    case 127:
                        i17 += i18;
                        break;
                    case 128:
                        i17 = by1;
                    default:
                        iArr2[i18 - 1] = i17;
                    }
                } while (++i18 < 2);
            }
        }

        FuzzerUtils.out.println("f2 i16 i17 = " + Float.floatToIntBits(f2) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 d2 by1 = " + i18 + "," + Double.doubleToLongBits(d2) + "," + by1);
        FuzzerUtils.out.println("iArr2 byArr lArr1 = " + FuzzerUtils.checkSum(iArr2) + "," +
            FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld fArrFld = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  bMeth ->  bMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
