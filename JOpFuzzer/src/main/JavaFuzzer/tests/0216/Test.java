// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3762638253L;
    public static short sFld=17684;
    public volatile byte byFld=-115;
    public static int iFld=62735;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static int iMeth() {

        int i3=1, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 5985);

        i3 >>>= iArr[(i3 >>> 1) % N][(i3 >>> 1) % N];
        i3 >>= (int)(Math.abs(-9) % (((long)((i3 * i3) * (2.166F - (i3 - i3)))) | 1));
        long meth_res = i3 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2() {

        int i10=47478, i11=-11, i12=-6, i13=13, i14=2, i15=-12, i16=19814, i17=2, i18=-7, i19=-1;
        float f1=29.254F;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3L);

        i10 = (int)Test.instanceCount;
        for (i11 = 12; i11 < 196; i11++) {
            for (i13 = 1; i13 < 9; i13++) {
                i12 += i13;
                switch ((i13 % 1) + 85) {
                case 85:
                    lArr[i13 - 1] -= i10;
                    break;
                default:
                    for (i15 = 2; i15 > 1; i15 -= 3) {
                        i10 -= 99;
                        Test.instanceCount += i15;
                        f1 += (12 + (i15 * i15));
                    }
                    if (b) continue;
                }
                if (b) {
                    for (i17 = i11; i17 < 2; ++i17) {
                        try {
                            i16 = (153 % i12);
                            i14 = (i10 % i13);
                            i18 = (i19 / i15);
                        } catch (ArithmeticException a_e) {}
                        if (i10 != 0) {
                            vMeth2_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f1) + (b
                                ? 1 : 0) + i17 + i18 + i19 + FuzzerUtils.checkSum(lArr);
                            return;
                        }
                    }
                } else {
                    Test.instanceCount = i16;
                    vMeth2_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f1) + (b ? 1 :
                        0) + i17 + i18 + i19 + FuzzerUtils.checkSum(lArr);
                    return;
                }
            }
        }
        vMeth2_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i17 +
            i18 + i19 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(float f) {

        int i6=53315, i7=-135, i8=3, i9=-14, i20=34792, i21=-188, i22=10330, i23=10;
        byte by=81;
        short s=-8457;
        double d1=0.113068;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.716F);

        for (i6 = 13; 239 > i6; ++i6) {
            i7 >>= i6;
            Test.instanceCount = 43195;
            fArr[i6 - 1] += Long.reverseBytes(Math.max(54610, i7) - (by * Test.instanceCount));
        }
        for (i8 = 20; i8 < 335; i8++) {
            i9 >>= (-i9);
        }
        vMeth2();
        s ^= (short)42569;
        for (i20 = 7; i20 < 301; ++i20) {
            for (i22 = 1; i22 < 6; ++i22) {
                d1 *= 6.84189;
                i21 += (11 + (i22 * i22));
                i21 += (int)7L;
                Test.instanceCount += i22;
                i23 = (int)d1;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i6 + i7 + by + i8 + i9 + s + i20 + i21 + i22 + i23 +
            Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth() {

        int i4=24866, i5=-12, i24=-6, i25=-224, i26=4228, i27=6435, iArr1[]=new int[N];
        float f2=-17.681F, f3=111.241F;
        double d2=15.67582;

        FuzzerUtils.init(iArr1, 38934);

        for (i4 = 6; i4 < 181; ++i4) {
            vMeth1(f2);
            try {
                i5 = (-60304 % i5);
                i5 = (iArr1[i4 - 1] / 1377365182);
                iArr1[i4 + 1] = (39757 / i5);
            } catch (ArithmeticException a_e) {}
            for (i24 = 1; 9 > i24; i24++) {
                d2 -= i25;
                i25 -= i4;
                Test.sFld += (short)(i24 * i24);
                for (i26 = 2; i26 > i24; --i26) {
                    boolean b1=true;
                    Test.instanceCount += (-42079 + (i26 * i26));
                    i5 += (int)f3;
                    if (b1) continue;
                    Test.instanceCount >>= Test.instanceCount;
                    try {
                        i25 = (i26 / -62);
                        i27 = (i24 % -26027);
                        i27 = (i4 % 194130105);
                    } catch (ArithmeticException a_e) {}
                    try {
                        i5 = (i24 % 125);
                        i25 = (i24 % i25);
                        i5 = (i25 % i4);
                    } catch (ArithmeticException a_e) {}
                    i5 = Test.sFld;
                }
            }
        }
        vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f2) + i24 + i25 + Double.doubleToLongBits(d2) + i26 + i27 +
            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        double d=0.36415;
        int i=-41457, i1=-232, i2=-64, i28=-1725, i29=-50542, i30=-27, i31=25272, i32=6439, i33=1, i34=44871,
            i35=58528, i36=45, iArr2[]=new int[N];
        float f4=48.29F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 5597045705636331215L);
        FuzzerUtils.init(iArr2, -9);

        switch (((((int)(d + i)) >>> 1) % 6) + 112) {
        case 112:
            i -= (int)Test.instanceCount;
            break;
        case 113:
            for (i1 = 2; i1 < 319; ++i1) {
                iMeth();
                i2 <<= iMeth();
            }
            vMeth();
            i2 = (int)Test.instanceCount;
            for (i28 = 2; i28 < 380; i28++) {
                for (i30 = 1; i30 < 67; ++i30) {
                    for (i32 = 1; i32 < 2; i32++) {
                        i29 = -6978;
                        i33 -= i32;
                        lArr1[i30 - 1] -= (long)1.574F;
                    }
                    Test.instanceCount = i2;
                    i2 <<= i1;
                    i29 >>= (int)103L;
                    byFld = (byte)i2;
                    for (i34 = 1; i34 < 2; i34 += 2) {
                        i31 -= (int)-70.58520;
                        i29 *= (int)7906488306043506063L;
                        i35 -= i36;
                        switch (((i31 >>> 1) % 9) + 31) {
                        case 31:
                            i33 = 10;
                            break;
                        case 32:
                            iArr2[i34] = i34;
                        case 33:
                        case 34:
                            Test.instanceCount -= byFld;
                            iArr2[i34] -= (int)f4;
                        case 35:
                            i35 *= i28;
                            i29 += (-9 + (i34 * i34));
                            break;
                        case 36:
                            iArr2 = iArr2;
                        case 37:
                            i33 += (i34 + i31);
                            break;
                        case 38:
                            d -= i1;
                        case 39:
                        }
                    }
                }
            }
        case 114:
        case 115:
            iArr2[(-1 >>> 1) % N] *= (int)230L;
            break;
        case 116:
            iArr2[(i30 >>> 1) % N] ^= i34;
        case 117:
            i2 = i32;
            break;
        default:
            Test.iFld -= i;
        }

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i28 i29 = " + i2 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 f4 lArr1 = " + i36 + "," + Float.floatToIntBits(f4) + "," +
            FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld byFld = " + Test.instanceCount + "," + Test.sFld + "," +
            byFld);
        FuzzerUtils.out.println("Test.iFld = " + Test.iFld);

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
