// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1L;
    public static short sFld=719;
    public static double dFld=-2.104334;
    public static float fFld=0.297F;
    public boolean bFld=true;
    public static int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -22757);
        FuzzerUtils.init(Test.fArrFld, 2.34F);
        FuzzerUtils.init(Test.lArrFld, 4L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f2) {

        double d1=0.4559;
        int i12=126, i13=111, i14=13, i15=46509, i16=11, i17=-9, i18=8635;
        byte by2=98;

        for (d1 = 7; d1 < 192; d1++) {
            for (i13 = 9; 1 < i13; --i13) {
                i12 = (int)Test.instanceCount;
                for (i15 = 1; i15 < 2; i15++) {
                    Test.instanceCount <<= i13;
                    i16 *= (int)f2;
                    Test.iArrFld[i15][(int)(d1 - 1)] -= (int)Test.fFld;
                }
                Test.dFld %= ((long)(Test.dFld) | 1);
                i12 += i12;
                i14 = i13;
            }
            for (i17 = (int)(d1); i17 < 9; i17++) {
                Test.fArrFld[(int)(d1 + 1)] -= Test.instanceCount;
                Test.instanceCount -= -18458;
                by2 -= (byte)Test.instanceCount;
                Test.sFld += (short)d1;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 + i16 + i17
            + i18 + by2;
    }

    public static void vMeth(double d) {

        int i8=166, i9=-1617, i10=90, i11=-125, i19=-20750;
        long l1=1571589511604821713L;
        float f1=-18.362F;
        byte by1=83;
        boolean b=true;
        short sArr[]=new short[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(sArr, (short)31862);
        FuzzerUtils.init(dArr, 56.21430);

        i8 += (int)((i8 = Math.abs(i8)) - ((l1 + f1) - (i8 + Test.dFld)));
        i9 = 1;
        do {
            f1 += (--by1);
            for (i10 = 1; i10 < 28; i10 += 3) {
                vMeth1(f1);
                i19 = 1;
                do {
                    if (b) continue;
                    sArr[i10 - 1] = (short)25264;
                    i8 += (((i19 * l1) + Test.fFld) - i11);
                    by1 += (byte)117717614347001851L;
                    i11 = (int)Test.dFld;
                    Test.fFld -= 5646;
                    dArr = dArr;
                    i8 += (((i19 * i9) + Test.sFld) - Test.fFld);
                    if (i10 != 0) {
                        vMeth_check_sum += Double.doubleToLongBits(d) + i8 + l1 + Float.floatToIntBits(f1) + i9 + by1 +
                            i10 + i11 + i19 + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                } while (++i19 < 4);
            }
        } while ((i9 += 3) < 166);
        vMeth_check_sum += Double.doubleToLongBits(d) + i8 + l1 + Float.floatToIntBits(f1) + i9 + by1 + i10 + i11 + i19
            + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(long l, int i4) {

        float f=75.802F;
        int i5=-10, i6=11326, i7=61325, i20=99, i21=-6;
        byte by=-98;
        boolean b1=true, bArr[]=new boolean[N];
        long lArr[]=new long[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(lArr, 5419799057747531261L);
        FuzzerUtils.init(dArr1, 1.14851);
        FuzzerUtils.init(bArr, true);

        Test.sFld += (short)((f + (i4 * f)) * (-(Test.sFld * i4)));
        for (i5 = 12; i5 < 314; ++i5) {
            i7 = (int)((Test.dFld++) + (--i6));
            Test.iArrFld[i5][i5 - 1] >>= (int)(((by -= (byte)Test.instanceCount) + lArr[i5 - 1]) - ((i4--) + (i5 -
                i7)));
            vMeth(Test.dFld);
            i6 -= (int)f;
            Test.instanceCount = i4;
            i4 += (int)1.123666;
            i4 <<= i4;
            switch ((i5 % 8) + 62) {
            case 62:
                b1 = true;
                l = (long)Test.dFld;
                i20 = 1;
                do {
                    i7 >>>= i7;
                    dArr1[i5 - 1] += Test.dFld;
                } while (++i20 < 5);
                break;
            case 63:
                i4 += (int)Test.dFld;
                break;
            case 64:
                i7 += (int)Test.dFld;
                break;
            case 65:
            case 66:
                i4 -= 34071;
            case 67:
                i7 <<= i21;
            case 68:
                bArr[i5] = true;
                break;
            case 69:
                i21 += (i5 - Test.instanceCount);
                break;
            }
        }
        long meth_res = l + i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + by + (b1 ? 1 : 0) + i20 + i21 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-2495, i1=9, i2=35854, i3=-8, i22=54410, i23=-9;
        double d2=-34.715;

        for (i = 3; 284 > i; ++i) {
            for (i2 = 5; i2 < 89; ++i2) {
                i1 -= (i1++);
                Test.sFld = (short)iMeth(Test.instanceCount, -130);
                switch ((((i3 >>> 1) % 2) * 5) + 120) {
                case 127:
                    Test.sFld *= (short)Test.dFld;
                    break;
                case 130:
                    i1 = (int)2719145263L;
                    Test.fFld *= (float)Test.dFld;
                    i1 = i;
                default:
                    Test.instanceCount <<= -4783626823933443259L;
                    i1 ^= -46;
                    i3 *= i2;
                }
                i3 <<= i3;
                i3 = i3;
            }
            i1 /= (int)-1.14742;
            Test.instanceCount *= i1;
            if (bFld) continue;
            i3 += (int)Test.fFld;
            i3 |= i2;
        }
        for (i22 = 5; i22 < 126; i22++) {
            i1 += i22;
            i1 -= i3;
            Test.fFld *= i2;
            Test.sFld -= (short)Test.instanceCount;
            d2 = Test.sFld;
        }
        d2 -= 109;
        i3 = i22;
        i1 -= i;
        i1 += (int)Test.dFld;
        Test.lArrFld = Test.lArrFld;

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i22 i23 = " + i3 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("d2 = " + Double.doubleToLongBits(d2));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld bFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," + (bFld ? 1 :
            0) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld Test.lArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
