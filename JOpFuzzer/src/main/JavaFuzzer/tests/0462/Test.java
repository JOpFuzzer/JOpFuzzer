// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=86L;
    public static int iFld=78;
    public static boolean bFld=true;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l1, float f2) {

        int i7=-244, i8=-9, i9=151, i10=-12, iArr[][]=new int[N][N];
        double d=-2.81480, dArr[]=new double[N];
        long l2=3001754387L;

        FuzzerUtils.init(iArr, -47134);
        FuzzerUtils.init(dArr, 91.73873);

        iArr[(224 >>> 1) % N][(Test.iFld >>> 1) % N] += Test.iFld;
        i7 = 1;
        do {
            iArr[i7][i7] = (int)d;
            Test.iFld = i7;
        } while (++i7 < 325);
        Test.iFld += (int)d;
        try {
            iArr[(i7 >>> 1) % N][(i7 >>> 1) % N] *= Test.iFld;
            for (l2 = 8; l2 < 170; ++l2) {
                Test.iFld %= (int)(i7 | 1);
                for (i9 = 10; 1 < i9; --i9) {
                    i10 += (int)Test.instanceCount;
                    Test.instanceCount = (long)f2;
                    i10 -= (int)Test.instanceCount;
                    i10 += i9;
                    Test.bFld = Test.bFld;
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            dArr[(i8 >>> 1) % N] = 7;
        }
        long meth_res = l1 + Float.floatToIntBits(f2) + i7 + Double.doubleToLongBits(d) + l2 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i) {

        float f1=1.644F;
        int i1=26827, i2=-57525, i3=-19, i4=11, i5=31, i6=-247, iArr1[]=new int[N];
        byte by=-2;
        double d1=-46.119674;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8L);
        FuzzerUtils.init(iArr1, 9);

        f1 = (~((i - i) + (i + 12)));
        for (i1 = 6; i1 < 203; ++i1) {
            lArr[i1] = (i2++);
            for (i3 = 1; i3 < 8; ++i3) {
                for (i5 = 1; i5 < 2; i5++) {
                    Test.instanceCount >>= (-((i1 * 148) | Long.reverseBytes(Test.instanceCount)));
                    i6 <<= iMeth1(Test.instanceCount, 2.155F);
                    by >>>= (byte)i5;
                    lArr[i5] -= -524;
                    Test.iFld += (i5 + i6);
                    by += (byte)(i5 | i);
                    d1 += -40084L;
                    iArr1[i3] = 30567;
                }
                i6 = i2;
                f1 += (i3 - i1);
            }
        }
        long meth_res = i + Float.floatToIntBits(f1) + i1 + i2 + i3 + i4 + i5 + i6 + by + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        float f=-2.192F;
        double d2=-1.59347;
        int i11=14, i12=-3, i13=12, i14=229, i15=-9, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 39972);

        if (Test.bFld) {
            f += (iMeth(Test.iFld) * Test.iFld);
            for (d2 = 2; 291 > d2; ++d2) {
                if (Test.bFld) break;
                Test.iFld &= i11;
                if (Test.bFld) break;
                f = Test.iFld;
                i11 += i11;
                i11 = (int)1.481F;
                for (i12 = 1; 6 > i12; ++i12) {
                    Test.instanceCount = i12;
                    for (i14 = 1; i14 < 2; ++i14) {
                        Test.iFld += (i14 ^ i15);
                        Test.iFld -= i15;
                        i15 = i12;
                    }
                }
            }
        } else if (false) {
            i15 += Test.iFld;
            vMeth_check_sum += l + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i11 + i12 + i13 + i14 + i15
                + FuzzerUtils.checkSum(iArr2);
            return;
        } else {
            Test.iFld *= i14;
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i11 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        double d3=23.19887;

        vMeth(-6393692309697382602L);
        d3 *= Test.iFld;
        Test.iFld += (int)Test.instanceCount;

        FuzzerUtils.out.println("d3 = " + Double.doubleToLongBits(d3));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
