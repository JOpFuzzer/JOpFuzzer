// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=64047L;
    public static int iFld=22;
    public static float fFld=-1.579F;
    public static float fArrFld[]=new float[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 105.406F);
        FuzzerUtils.init(Test.iArrFld, -3);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, boolean b) {

        int i=-14156, i1=24, i2=117, i3=32199, i4=-64, iArr[]=new int[N];
        double d=-50.17980;
        short s=-22903;

        FuzzerUtils.init(iArr, 0);

        for (i = 7; i < 159; ++i) {
            for (d = i; d < 10; ++d) {
                f1 += i;
            }
            i3 = 1;
            while (++i3 < 10) {
                Test.instanceCount -= Test.instanceCount;
            }
            i2 = i;
            i2 = i3;
            i2 += i;
            i4 = 1;
            do {
                Test.instanceCount >>= i3;
                s <<= (short)Test.instanceCount;
                if (b) break;
                b = b;
                Test.instanceCount += (i4 * i4);
                iArr[i4 - 1] >>>= (int)Test.instanceCount;
            } while (++i4 < 10);
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + (b ? 1 : 0) + i + i1 + Double.doubleToLongBits(d) + i2 + i3 + i4
            + s + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, float f) {

        int i5=-8, i6=-14, i7=63345, i8=-36263, i9=10, i10=49575, i11=-44664, i12=217, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 63756);

        vMeth1(f, false);
        iArr1[(Test.iFld >>> 1) % N] *= -11;
        for (i5 = 365; 21 < i5; --i5) {
            if (false) continue;
            Test.iFld = (int)l;
        }
        f += -30;
        Test.instanceCount = 18670;
        Test.iFld = Test.iFld;
        for (i7 = 11; 271 > i7; ++i7) {
            l -= i6;
            for (i9 = 6; i9 > 1; i9 -= 3) {
                iArr1[i9 + 1] = Test.iFld;
                for (i11 = 1; 6 > i11; i11++) {
                    Test.fArrFld[i9 + 1] -= 251;
                    i8 = -111;
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth() {


        vMeth(Test.instanceCount, Test.fFld);
        Test.iFld >>>= Test.iFld;
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i13=62272, i14=-39817, i15=-10, i16=129, i17=-23179, i18=14, i19=-11, i20=-9, i21=40282, i22=-8;
        long l1=-7845L, lArr[]=new long[N];
        double d1=2.117497, dArr[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, 57614L);
        FuzzerUtils.init(dArr, 88.117850);
        FuzzerUtils.init(byArr, (byte)-60);

        for (int smallinvoc=0; smallinvoc<189; smallinvoc++) vSmallMeth();
        Test.iFld *= Test.iFld;
        Test.iFld -= Test.iFld;
        for (i13 = 168; i13 > 8; --i13) {
            switch (((i13 % 1) * 5) + 19) {
            case 24:
                for (i15 = 2; i15 < 157; i15++) {
                    boolean b1=true;
                    if (b1) break;
                    for (i17 = 2; i17 > 1; --i17) {
                        try {
                            i18 = (Test.iFld / Test.iFld);
                            Test.iFld = (185 / i15);
                            i16 = (i17 / -57);
                        } catch (ArithmeticException a_e) {}
                        i16 <<= (int)Test.instanceCount;
                        lArr = lArr;
                        if (b1) continue;
                        i14 = 4;
                    }
                    for (i19 = 1; i19 < 2; ++i19) {
                        short s1=11820;
                        byte by=96;
                        Test.fFld -= s1;
                        Test.fFld += (-190 + (i19 * i19));
                        dArr[i13] = Test.iFld;
                        i20 -= i13;
                        Test.iArrFld[i15] *= i14;
                        i20 = (int)l1;
                        i14 += (i19 - by);
                        i18 += (i19 * i16);
                    }
                    i16 += (i15 - Test.instanceCount);
                    byArr[i15] = (byte)i17;
                    if (b1) {
                        for (i21 = 1; i21 < 2; ++i21) {
                            i22 %= -8;
                            Test.iFld -= (int)-56194L;
                            i20 += (int)35.14898;
                            i22 &= -20505;
                        }
                    } else if (false) {
                        Test.instanceCount += (long)d1;
                    }
                }
                break;
            }
        }

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 l1 = " + i19 + "," + i20 + "," + l1);
        FuzzerUtils.out.println("i21 i22 d1 = " + i21 + "," + i22 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("lArr dArr byArr = " + FuzzerUtils.checkSum(lArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.fArrFld Test.iArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
