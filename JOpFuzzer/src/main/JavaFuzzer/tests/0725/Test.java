// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5721L;
    public int iFld=-11819;
    public volatile short sFld=-21582;
    public static volatile double dFld=101.93686;
    public static boolean bFld=false;
    public static byte byFld=-119;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -36667);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i11) {

        float f=-2.403F, f1=2.558F;
        int i12=-10, i13=50225, i14=-118, i15=-4, i16=7;
        boolean b=true;

        Test.instanceCount = i11;
        Test.iArrFld[(i11 >>> 1) % N] >>= i11;
        Test.iArrFld[(-2 >>> 1) % N] |= i11;
        for (f = 5; f < 223; f++) {
            i11 *= i11;
            Test.iArrFld = FuzzerUtils.int1array(N, (int)101);
            for (i13 = (int)(f); i13 < 7; ++i13) {
                Test.instanceCount &= i11;
                b = b;
                f1 = i11;
                Test.dFld -= i11;
                for (i15 = 1; i15 < 1; ++i15) {
                    b = b;
                    f1 += i11;
                    Test.instanceCount >>= 231;
                }
            }
        }
        long meth_res = i11 + Float.floatToIntBits(f) + i12 + i13 + i14 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i15
            + i16;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(int i9, byte by, int i10) {


        byMeth(i9);
        i10 = 47493;
        long meth_res = i9 + by + i10;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, long l) {

        short s=1156;
        int i5=-56228, i6=-13, i7=-43013, i8=-12, i17=212, i18=-56442;
        float f2=-1.563F;
        byte by1=-10;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 1487457401L);

        lArr[(i4 >>> 1) % N][(-12 >>> 1) % N] |= (Short.reverseBytes((short)(s++)) >>> i4);
        for (i5 = 14; i5 < 224; i5++) {
            for (i7 = 1; i7 < 8; i7++) {
                i6 = (-iMeth(i4, (byte)(63), 5));
                i6 -= i6;
                for (i17 = 1; i17 < 2; i17++) {
                    i6 += (i17 - f2);
                    f2 = i5;
                    if (Test.bFld) continue;
                    if (Test.bFld) continue;
                    i18 = i7;
                    Test.instanceCount -= 9520;
                    i18 *= i8;
                    by1 += (byte)f2;
                    i6 += (i17 * i17);
                }
            }
        }
        vMeth_check_sum += i4 + l + s + i5 + i6 + i7 + i8 + i17 + i18 + Float.floatToIntBits(f2) + by1 +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=43095, i1=-6, i2=46744, i3=35790, i19=-19;
        float f3=-1.480F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i = 1;
        do {
            iFld += (int)((i - (1 - (-160L + (-115.77945 - (sFld--))))) - 200);
            for (i1 = 3; 76 > i1; ++i1) {
                i3 = 1;
                do {
                    vMeth(i3, Test.instanceCount);
                    Test.instanceCount = -126;
                    if (true) {
                        Test.iArrFld[i3] -= 52;
                        iFld = (int)Test.instanceCount;
                        if (Test.bFld) continue;
                    } else if (Test.bFld) {
                        Test.dFld += i1;
                        Test.instanceCount = -1873579470L;
                    } else if (false) {
                        iFld = (int)-177132389808750501L;
                        if (Test.bFld) break;
                    } else {
                        Test.iArrFld[i + 1] = iFld;
                        Test.iArrFld[i3] = (int)Test.instanceCount;
                        i2 += Test.byFld;
                    }
                    f3 *= Test.instanceCount;
                    Test.instanceCount = i2;
                    sFld = (short)i;
                    bArr[i - 1] = Test.bFld;
                } while (++i3 < 2);
            }
            i2 += i;
            lArrFld[i] |= 38592;
            iFld >>= (int)-1242601276L;
            Test.iArrFld[i] *= (int)Test.instanceCount;
            i2 += i;
            i19 = 76;
            do {
                i2 = i2;
                iFld >>= i2;
                Test.iArrFld = Test.iArrFld;
            } while (--i19 > 0);
        } while (++i < 329);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 f3 i19 = " + i3 + "," + Float.floatToIntBits(f3) + "," + i19);
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount iFld sFld = " + Test.instanceCount + "," + iFld + "," + sFld);
        FuzzerUtils.out.println("Test.dFld Test.bFld Test.byFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            (Test.bFld ? 1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iArrFld lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
