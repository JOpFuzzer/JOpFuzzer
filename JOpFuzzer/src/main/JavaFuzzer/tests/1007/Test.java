// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=7328952034996340127L;
    public static float fFld=-106.578F;
    public static boolean bFld=true;
    public static volatile int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -179);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=-2, i3=177, i4=95, i5=-118, i6=170, i7=-2, i8=-85, i9=-125, iArr[]=new int[N];
        boolean b=true;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr, 5024);
        FuzzerUtils.init(fArr, 1.770F);

        iArr[(i2 >>> 1) % N] ^= i2;
        for (i3 = 11; 344 > i3; ++i3) {
            iArr[i3 - 1] *= i2;
            i2 = (int)Test.instanceCount;
            i5 = 1;
            while (++i5 < 5) {
                iArr[i5] = i4;
                for (i6 = i3; i6 < 1; ++i6) {
                    iArr[i3 + 1] = i6;
                }
                i7 >>= i7;
                for (i8 = 1; i8 < 1; i8++) {
                    if (b) continue;
                }
                try {
                    i4 = (-57603 / i8);
                    i7 = (i9 / 92);
                    iArr[i3] = (iArr[i5 + 1] % iArr[i3]);
                } catch (ArithmeticException a_e) {}
            }
            i9 >>>= i9;
            fArr[i3 - 1][i3] = -34904L;
            Test.instanceCount += (i3 * i3);
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i1, long l) {

        short s1=-21702;
        int i10=-63420, i11=-11, i12=40944, i13=4, i14=11784;
        byte by=-33;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -560501156234902747L);

        vMeth1();
        try {
            s1 = (short)i1;
            lArr[(-20489 >>> 1) % N] = i1;
            i1 += i1;
        }
        catch (NegativeArraySizeException exc2) {
            lArr[(i1 >>> 1) % N] = i1;
            for (i10 = 4; i10 < 148; i10 += 3) {
                Test.instanceCount >>= i1;
                i12 = 1;
                do {
                    i11 -= (int)Test.instanceCount;
                    for (i13 = 1; i13 < 1; i13++) {
                        i11 >>= -7183;
                        s1 = (short)l;
                        i14 *= i1;
                        by += (byte)(120 + (i13 * i13));
                    }
                } while (++i12 < 32);
            }
        }
        catch (UserDefinedExceptionTest exc3) {
            Test.iArrFld[(2 >>> 1) % N][(i14 >>> 1) % N] += (int)Test.instanceCount;
        }
        vMeth_check_sum += i1 + l + s1 + i10 + i11 + i12 + i13 + i14 + by + FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(short s, float f, int i) {


        vMeth(i, Test.instanceCount);
        i = (int)f;
        vSmallMeth_check_sum += s + Float.floatToIntBits(f) + i;
    }

    
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
