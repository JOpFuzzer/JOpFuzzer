// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public float fFld=-66.411F;
    public boolean bFld=false;

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i9, int i10, int i11) {

        int i12=-4, i13=-62984, i14=84, i15=63730, iArr1[]=new int[N];
        double d2=-73.39700;
        float f3=0.547F;
        short sArr[]=new short[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr1, -11071);
        FuzzerUtils.init(sArr, (short)5209);
        FuzzerUtils.init(lArr2, 4905727979732534489L);

        Test.instanceCount = i9;
        i12 = 1;
        while (++i12 < 284) {
            iArr1[i12 - 1] <<= (int)15L;
            i9 += (10 + (i12 * i12));
            for (i13 = 1; i13 < 6; ++i13) {
                i10 -= 23697;
                d2 *= i10;
                f3 -= f3;
            }
            Test.instanceCount -= i9;
            i9 += (193 + (i12 * i12));
            i15 = 1;
            while (++i15 < 6) {
                sArr[i12] &= (short)Test.instanceCount;
                i14 += (int)d2;
                i11 <<= i10;
                lArr2[i12 + 1] ^= Test.instanceCount;
            }
        }
        vMeth_check_sum += i9 + i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f3) +
            i15 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr2);
    }

    public static long lMeth(int i4, float f2) {

        int i5=129, i6=56910, i7=46, i8=168, i16=12, i17=-13, i18=-41155, i19=152, iArr[]=new int[N];
        short s1=26779;
        byte by1=80;
        double d3=-17.51769;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -51);
        FuzzerUtils.init(lArr1, -26713L);

        f2 += ((++i4) + (iArr[(149 >>> 1) % N] + (i4 - -809558282L)));
        for (i5 = 17; i5 < 278; i5++) {
            iArr[i5] |= (int)(lArr1[i5 - 1] + (s1++));
            for (i7 = 1; i7 < 6; ++i7) {
                vMeth(i8, i6, i7);
                by1 += (byte)f2;
                i8 += (int)-26.390F;
            }
            iArr[i5] = (int)Test.instanceCount;
        }
        for (i16 = 7; i16 < 281; ++i16) {
            for (i18 = 1; 6 > i18; ++i18) {
                i6 <<= 0;
                f2 -= i8;
                i19 += (i18 * i18);
                i8 *= (int)Test.instanceCount;
                d3 = 139;
            }
        }
        long meth_res = i4 + Float.floatToIntBits(f2) + i5 + i6 + s1 + i7 + i8 + by1 + i16 + i17 + i18 + i19 +
            Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth(float f1, int i3, long l) {

        double d1=1.50694;

        d1 += (i3 & lMeth(i3, f1));
        vSmallMeth_check_sum += Float.floatToIntBits(f1) + i3 + l + Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i=54722, i1=-8, i2=-62623, i20=246, i21=10369, i22=166, iArr2[]=new int[N];
        byte by=77;
        short s=-31091;
        float f=0.208F;
        double d=-36.25018;
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -35L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr2, -4);

        i = 1;
        while (++i < 155) {
            fFld /= ((++i1) | 1);
            i1 = i;
            i1 = (int)((by - (lArr[i] <<= i1)) + Math.min(i1 >>= s, i1++));
            f += (-(i1--));
            bFld = bArr[i];
            i1 = (int)(((i - i1) + (-3884441360L - (d + Test.instanceCount))) - ((7 + Test.instanceCount) + (-7 + (i -
                f))));
        }
        i2 = 1;
        do {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(fFld, i20, Test.instanceCount);
            i21 = 82;
            while (--i21 > 0) {
                i1 = i;
                d += 4;
                i1 = i21;
                i22 = 1;
                while (++i22 < 1) {
                    long l1=-7L;
                    lArr[i2 - 1] *= i2;
                    i1 <<= i22;
                    by += (byte)i22;
                    Test.instanceCount += (((i22 * i21) + Test.instanceCount) - i);
                    d = l1;
                    iArr2[(i1 >>> 1) % N] += i21;
                    iArr2[i2 + 1] -= -9;
                    by += (byte)i1;
                    d /= (l1 | 1);
                    i20 <<= i22;
                }
                if (bFld) break;
                i1 += 0;
                i1 >>>= (int)Test.instanceCount;
                i20 >>= 223;
                f = i21;
                i20 += i21;
            }
        } while (++i2 < 308);

        FuzzerUtils.out.println("i i1 by = " + i + "," + i1 + "," + by);
        FuzzerUtils.out.println("s f d = " + s + "," + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i2 i20 i21 = " + i2 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 lArr bArr = " + i22 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount fFld bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + (bFld ? 1 : 0));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
