// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=44L;
    public static float fFld=61.176F;
    public static byte byFld=53;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld1[]=new int[N];
    public static short sArrFld[][]=new short[N][N];
    public static double dArrFld[][]=new double[N][N];
    public static volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -17053L);
        FuzzerUtils.init(Test.iArrFld1, -81);
        FuzzerUtils.init(Test.sArrFld, (short)-28183);
        FuzzerUtils.init(Test.dArrFld, -92.118755);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7) {

        int i8=-19, i9=-19233, i10=10;
        long l1=-6L;
        short s=9389;
        byte by=-57;
        boolean b=false;

        for (long l : Test.lArrFld) {
            for (i8 = 1; 4 > i8; i8++) {
                Test.instanceCount += (((i8 * i9) + Test.fFld) - i7);
                Test.lArrFld[i8 + 1] = l;
                switch (((i8 % 10) * 5) + 95) {
                case 102:
                    for (l1 = 1; l1 < 2; ++l1) {
                        i7 += (int)l1;
                        i7 -= i9;
                        switch ((i8 % 2) + 80) {
                        case 80:
                            i9 %= (int)-81.392F;
                            i7 += (int)Test.instanceCount;
                            l += (1 + (l1 * l1));
                            i9 >>= i8;
                            break;
                        case 81:
                            i10 += (int)(((l1 * i9) + s) - Test.instanceCount);
                            i9 += by;
                            break;
                        }
                    }
                    break;
                case 144:
                    Test.iArrFld1[i8] /= (int)(i7 | 1);
                    break;
                case 129:
                    i10 *= i8;
                    break;
                case 112:
                    Test.iArrFld1[i8 - 1] = i10;
                    break;
                case 139:
                    i10 >>>= (int)-61719L;
                    break;
                case 127:
                    if (b) continue;
                    break;
                case 117:
                case 105:
                    i7 = -6879;
                    break;
                case 108:
                    Test.iArrFld1[i8] += i10;
                    break;
                case 106:
                    Test.sArrFld[i8][i8 - 1] = (short)i8;
                }
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + l1 + i10 + s + by + (b ? 1 : 0);
    }

    public static int iMeth(int i4, int i5) {

        double d=-27.111513, dArr[]=new double[N];
        int i6=-176, iArr[][]=new int[N][N];
        byte by1=-63;
        boolean b1=false;

        FuzzerUtils.init(iArr, 33083);
        FuzzerUtils.init(dArr, -1.73604);

        Test.instanceCount += (((Test.instanceCount - Test.instanceCount) + (iArr[(i4 >>> 1) % N][(i4 >>> 1) % N]++)) -
            (i4++));
        for (d = 3; 124 > d; d++) {
            Test.instanceCount -= ((Math.max(i6, i4) - (++Test.lArrFld[(int)(d)])) + ((i6 - Test.instanceCount) + i6));
            i4 += (i4++);
            dArr = dArr;
            vMeth(i6);
            Test.instanceCount += (long)(((d * i5) + Test.fFld) - i5);
            i6 += (int)(((d * i6) + i5) - i6);
            Test.instanceCount = Test.instanceCount;
            by1 -= (byte)i5;
            if (i6 != 0) {
            }
            switch ((-4 >>> 1) % 2) {
            case 0:
                if (b1) continue;
                i5 -= (int)Test.instanceCount;
                break;
            case 1:
                Test.instanceCount = i5;
                break;
            default:
                Test.instanceCount += -11;
            }
        }
        long meth_res = i4 + i5 + Double.doubleToLongBits(d) + i6 + by1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i2, int i3) {

        boolean b2=true;
        int i12=-4, i13=-7;

        Test.instanceCount -= ((i3 - (i2 - i3)) + iMeth(i2, i3));
        for (int i11 : Test.iArrFld1) {
            if (b2) {
                i11 = (int)Test.instanceCount;
                Test.iArrFld1 = Test.iArrFld1;
                i3 -= i2;
            } else if (b2) {
                Test.instanceCount = Test.instanceCount;
                if (b2) continue;
            }
            switch ((((i3 >>> 1) % 1) * 5) + 123) {
            case 124:
            default:
                Test.iArrFld1[(i2 >>> 1) % N] = 94;
            }
            for (i12 = 1; i12 < 4; i12++) {
                i13 ^= (int)8990155633664744735L;
                i3 += i12;
                i13 <<= (int)Test.instanceCount;
                Test.iArrFld1[i12 + 1] = i13;
            }
        }
        long meth_res = i2 + i3 + (b2 ? 1 : 0) + i12 + i13;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=28714, i1=53922, i14=9, i15=-14, i16=-147, i17=27, i18=-221;
        double d1=0.34624;
        boolean b3=false;
        long l2=221L, lArr[]=new long[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(lArr, 5352L);
        FuzzerUtils.init(fArr, 113.834F);

        for (i = 345; 5 < i; i -= 3) {
            iArrFld[i - 1] >>>= (-(++i1));
            Test.fFld -= (((i + i1) * lArr[i + 1]) - Test.fFld);
            Test.fFld *= (Test.fFld + (fArr[i][i] % (lMeth(i1, i) | 1)));
        }
        i14 = 1;
        do {
            i1 = 11579;
            i15 = 1;
            while (++i15 < 126) {
                i1 += (((i15 * i) + Test.fFld) - i);
                iArrFld[i14] = i;
                i1 = i15;
                i1 <<= Test.byFld;
            }
            for (d1 = 4; d1 < 126; ++d1) {
                Test.instanceCount += (long)(d1 + Test.instanceCount);
                i16 += (int)d1;
                i17 = 1;
                do {
                    i16 += (i17 * i17);
                    i1 += (int)Test.fFld;
                    i16 *= i15;
                    Test.fFld *= Test.fFld;
                    Test.fFld -= 73;
                    Test.byFld ^= (byte)49153;
                    Test.byFld >>= Test.byFld;
                    Test.dArrFld[(int)(d1)][(int)(d1)] %= ((long)(Test.fFld) | 1);
                    Test.bArrFld[(int)(d1)] = b3;
                    Test.sArrFld[(int)(d1)][i14 + 1] -= (short)i17;
                } while (++i17 < 2);
                Test.byFld = (byte)Test.instanceCount;
                i16 -= i14;
                for (l2 = 2; l2 > 1; --l2) {
                    Test.fFld -= (float)d1;
                    Test.iArrFld1[i14 + 1] *= (int)d1;
                }
            }
        } while (++i14 < 199);

        FuzzerUtils.out.println("i i1 i14 = " + i + "," + i1 + "," + i14);
        FuzzerUtils.out.println("i15 d1 i16 = " + i15 + "," + Double.doubleToLongBits(d1) + "," + i16);
        FuzzerUtils.out.println("i17 b3 l2 = " + i17 + "," + (b3 ? 1 : 0) + "," + l2);
        FuzzerUtils.out.println("i18 lArr fArr = " + i18 + "," + FuzzerUtils.checkSum(lArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("iArrFld Test.lArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld1));
        FuzzerUtils.out.println("Test.sArrFld Test.dArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
