// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=52350L;
    public static volatile byte byFld=14;
    public static long lFld=1120951049L;
    public static float fFld=2.20F;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i7=100;

        i7 = 76;
        vMeth2_check_sum += i7;
    }

    public static void vMeth1(float f1, int i5, int i6) {

        int i8=-103, i9=7, i10=81, i11=-252, i12=114, i13=-247, i14=-9, iArr[]=new int[N];
        boolean b=false;
        short s1=-9602;
        long l=4L;
        double d=19.50206;

        FuzzerUtils.init(iArr, -188);

        vMeth2();
        i6 += (int)-12L;
        for (i8 = 10; i8 < 254; i8 += 2) {
            if (b) break;
            i6 += s1;
            switch (((i8 % 4) * 5) + 105) {
            case 117:
                iArr[i8 + 1] -= (int)-2903038491144104170L;
                iArr = iArr;
                for (l = 1; 13 > l; l++) {
                    i9 -= i5;
                }
                for (i11 = 13; i11 > 1; --i11) {
                    s1 = Test.byFld;
                    for (i13 = 1; i13 < 2; i13++) {
                        d -= -2L;
                        iArr[i8] <<= (int)l;
                    }
                }
            case 119:
                Test.instanceCount &= Test.instanceCount;
                break;
            case 109:
                try {
                    i9 = (-214 / i13);
                    i5 = (i13 / 36037);
                    i14 = (iArr[(i12 >>> 1) % N] / iArr[i8 + 1]);
                } catch (ArithmeticException a_e) {}
            case 107:
                f1 += (i8 - i5);
            default:
                Test.instanceCount += i8;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i5 + i6 + i8 + i9 + (b ? 1 : 0) + s1 + l + i10 + i11 + i12 + i13
            + i14 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(byte by, short s, int i2) {

        int i3=-20, i4=-49938, i15=9347, i16=227, iArr1[]=new int[N];
        float f=0.527F, fArr[]=new float[N];
        boolean b1=false;
        double d1=-2.92593;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -120.695F);
        FuzzerUtils.init(lArr, -5L);
        FuzzerUtils.init(iArr1, -64709);

        for (i3 = 7; 191 > i3; ++i3) {
            f -= i4;
            Test.instanceCount |= i2;
            i4 *= (int)(i2 >>= (int)(i4 - f));
            switch ((((i3 >> i4) >>> 1) % 1) + 45) {
            case 45:
                i4 -= (int)(-((i4 - i4) * fArr[(48 >>> 1) % N]));
                i2 = (int)(++Test.instanceCount);
                i2 = i4;
                vMeth1(f, -42948, i3);
                break;
            default:
                if (b1) continue;
                switch ((i3 % 2) + 111) {
                case 111:
                    lArr[i3 - 1] += Test.byFld;
                    for (i15 = 1; i15 < 9; ++i15) {
                        i4 = -62;
                        Test.instanceCount *= (long)d1;
                    }
                case 112:
                    iArr1[i3] = s;
                default:
                    i4 += (int)(30328L + (i3 * i3));
                }
            }
        }
        vMeth_check_sum += by + s + i2 + i3 + i4 + Float.floatToIntBits(f) + (b1 ? 1 : 0) + i15 + i16 +
            Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=13, i1=12, i17=35407, i18=9, i19=-14, i20=44081, i21=64299, i22=-135, i23=-194, i24=14, iArr2[]=new
            int[N];
        short s2=11211;
        float f2=-2.195F;
        boolean b2=false;
        double d2=0.23996, dArr[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-126);
        FuzzerUtils.init(dArr, 63.1104);
        FuzzerUtils.init(iArr2, 13);

        for (i = 17; i < 374; ++i) {
            vMeth(Test.byFld, s2, -14342);
            i1 = s2;
            for (i17 = 2; i17 < 71; i17++) {
                for (i19 = 1; i19 < 2; ++i19) {
                    f2 += i20;
                    i18 /= (int)(Test.instanceCount | 1);
                    Test.instanceCount *= Test.instanceCount;
                    b2 = b2;
                    b2 = false;
                    byArr[i - 1] -= (byte)Test.instanceCount;
                    switch (i17 % 2) {
                    case 0:
                        Test.byFld ^= (byte)i17;
                        break;
                    case 1:
                        dArr[i19 - 1] = Test.instanceCount;
                        break;
                    }
                    if (b2) continue;
                    try {
                        i18 = (i21 % -73);
                        i18 = (i / iArr2[i17 + 1]);
                        i1 = (i18 / 50091);
                    } catch (ArithmeticException a_e) {}
                }
                Test.lFld = i21;
                i1 -= (int)Test.instanceCount;
                switch (((i % 9) * 5) + 6) {
                case 8:
                    d2 = i20;
                    i20 += i19;
                    i21 *= i19;
                    for (i22 = i; i22 < 2; ++i22) {
                        iArr2[i22 + 1] *= i18;
                        i24 -= (int)Test.fFld;
                        iArr2[i17 + 1] += (int)d2;
                        i23 >>>= i21;
                        Test.lFld += i22;
                        i21 = i23;
                        Test.fFld += i24;
                    }
                    break;
                case 23:
                    i20 += (i17 | (long)f2);
                    break;
                case 28:
                    Test.lFld += Test.instanceCount;
                case 37:
                    Test.instanceCount += i17;
                    break;
                case 48:
                    i20 -= (int)Test.fFld;
                    break;
                case 30:
                    i1 = i23;
                    break;
                case 36:
                    i23 <<= i;
                    break;
                case 46:
                    i1 >>= i19;
                    break;
                case 32:
                    i20 += Test.byFld;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 s2 = " + i + "," + i1 + "," + s2);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 f2 b2 = " + i20 + "," + Float.floatToIntBits(f2) + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i21 d2 i22 = " + i21 + "," + Double.doubleToLongBits(d2) + "," + i22);
        FuzzerUtils.out.println("i23 i24 byArr = " + i23 + "," + i24 + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("dArr iArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.lFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.lFld);
        FuzzerUtils.out.println("Test.fFld = " + Float.floatToIntBits(Test.fFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
