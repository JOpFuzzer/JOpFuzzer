// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3035594785L;
    public static int iFld=-5;
    public static float fFld=0.351F;
    public static boolean bFld=false;
    public short sFld=30788;
    public static byte byFld=47;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 5);
        FuzzerUtils.init(Test.lArrFld, 52793L);
    }

    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i2) {

        int i3=-238, i4=138, i5=24;
        byte by1=92;
        double d1=33.74704;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-22429);

        Test.iArrFld[(i2 >>> 1) % N] = i2;
        Test.lArrFld[(11 >>> 1) % N] = Test.iFld;
        if (Test.bFld) {
            i3 = 1;
            while (++i3 < 149) {
                Test.iArrFld[i3] += -16945;
                for (i4 = 11; i4 > i3; --i4) {
                    Test.instanceCount += (((i4 * by1) + Test.fFld) - i4);
                    Test.instanceCount += i2;
                    sArr[i4 + 1] += (short)-5598561222097196347L;
                    i2 += (i4 | i4);
                }
                Test.lArrFld[i3 + 1] = Test.instanceCount;
                Test.instanceCount = i4;
                Test.lArrFld = Test.lArrFld;
                i2 <<= (int)134L;
                d1 = Test.iFld;
            }
        } else if (false) {
            i5 >>= i5;
        } else {
            Test.iFld += (int)Test.instanceCount;
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + by1 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(sArr);
    }

    public static short sMeth(long l, long l1, int i1) {

        int i6=-4, i7=4;
        double d2=-2.60339, d3=2.88774;
        long l2=23L, l3=-8093800560295648174L;
        byte by2=-106;

        vMeth(28);
        l1 = l;
        Test.iArrFld[(38 >>> 1) % N] = (int)l1;
        l += (long)Test.fFld;
        i6 = 1;
        while (++i6 < 221) {
            Test.iFld -= (int)d2;
            if (i1 != 0) {
            }
            i1 += (-179 + (i6 * i6));
            try {
                Test.iFld = (Test.iArrFld[i6] % Test.iFld);
                Test.iFld = (Test.iArrFld[i6 - 1] % i1);
                Test.iFld = (i6 % i1);
            } catch (ArithmeticException a_e) {}
        }
        for (l2 = 1; l2 < 129; ++l2) {
            i7 += (int)(((l2 * i1) + i1) - l3);
        }
        i7 += 44253;
        d3 = 1;
        while (++d3 < 244) {
            Test.iFld += (int)(d3 * d3);
            Test.iArrFld[(int)(d3 + 1)] = by2;
        }
        long meth_res = l + l1 + i1 + i6 + Double.doubleToLongBits(d2) + l2 + i7 + l3 + Double.doubleToLongBits(d3) +
            by2;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public int iMeth(byte by, float f) {

        int i=22342, i8=-9, i9=30263, i10=-52201, i11=8, iArr[]=new int[N];
        double d=0.117329;
        float fArr[]=new float[N];
        short sArr1[]=new short[N];

        FuzzerUtils.init(iArr, 29575);
        FuzzerUtils.init(fArr, 107.396F);
        FuzzerUtils.init(sArr1, (short)24483);

        i -= (iArr[(i >>> 1) % N]--);
        d = sMeth(Test.instanceCount, Test.instanceCount, i);
        for (i8 = 11; i8 < 284; ++i8) {
            Test.iFld *= Test.iFld;
            Test.instanceCount += (-18743 + (i8 * i8));
            try {
                i = (-191 / i);
                Test.iFld = (i % -1855127617);
                i = (235 / i9);
            } catch (ArithmeticException a_e) {}
            if (Test.bFld) {
                i9 = sFld;
                fArr[i8 - 1] *= Test.iFld;
                for (i10 = 1; i10 < 6; ++i10) {
                    Test.instanceCount += i10;
                    sArr1[i10 + 1] -= (short)Test.iFld;
                    Test.lArrFld[i8] = Test.instanceCount;
                    i11 = 12;
                    i9 *= (int)Test.instanceCount;
                }
            }
        }
        long meth_res = by + Float.floatToIntBits(f) + i + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(sArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i12=42, i13=-3;

        Test.instanceCount = iMeth(Test.byFld, 0.548F);
        Test.iFld = (int)Test.instanceCount;
        Test.lArrFld[(Test.iFld >>> 1) % N] *= Test.iFld;
        for (i12 = 1; i12 < 148; ++i12) {
            Test.instanceCount >>>= Test.instanceCount;
        }

        FuzzerUtils.out.println("i12 i13 = " + i12 + "," + i13);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld sFld Test.byFld = " + (Test.bFld ? 1 : 0) + "," + sFld + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
