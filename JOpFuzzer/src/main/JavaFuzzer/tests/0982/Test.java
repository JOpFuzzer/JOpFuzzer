// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-103363367367227327L;
    public static float fFld=1.787F;
    public static short sFld=-29633;
    public static double dFld=1.103989;
    public static int iFld=-1;
    public boolean bFld=true;
    public static volatile byte byFld=98;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -106.1F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7) {

        int i8=196, i9=-58581, i10=13, i11=-176, i12=6, iArr1[]=new int[N];
        double d=-1.67104;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -1);
        FuzzerUtils.init(lArr, 65117L);

        for (i8 = 7; 160 > i8; ++i8) {
            i7 = i6;
            iArr1[i8] -= i7;
            i7 += (i8 * i8);
            iArr1 = iArr1;
            for (i10 = i8; i10 < 10; ++i10) {
                short s1=-2129;
                i9 = (int)Test.instanceCount;
                try {
                    i7 = (i10 / -7007);
                    iArr1[i8 + 1] = (iArr1[i10 + 1] % i12);
                    i12 = (-156 / i10);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (((i10 * i9) + Test.fFld) - i12);
                d -= Test.instanceCount;
                i7 += i10;
                switch ((i12 >>> 1) % 8) {
                case 0:
                    Test.instanceCount = -571989156L;
                case 1:
                    i11 = i12;
                    Test.instanceCount -= i7;
                    break;
                case 2:
                    lArr = lArr;
                    break;
                case 3:
                    i6 >>>= i6;
                    break;
                case 4:
                    i7 = (int)Test.instanceCount;
                    break;
                case 5:
                    i11 *= i10;
                    break;
                case 6:
                    i11 += (((i10 * s1) + i10) - Test.instanceCount);
                    break;
                case 7:
                    i9 += (((i10 * Test.instanceCount) + i11) - i6);
                default:
                    i6 = 28999;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i3) {

        int i4=-48, i5=-12, i13=-17865, i14=-61371, i15=-13, i16=15873, i17=7, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -8);

        for (i4 = 18; 343 > i4; ++i4) {
            vMeth1(i4, i5);
        }
        for (i13 = 1; i13 < 300; i13++) {
            Test.instanceCount = Test.sFld;
            i5 = -137;
            for (i15 = 1; i15 < 6; ++i15) {
                i3 ^= i4;
                i14 += i14;
            }
            i17 = 1;
            do {
                i14 += i3;
                iArr2[i17 + 1] += (int)Test.dFld;
                Test.instanceCount = Test.iFld;
                i5 -= -58112;
                iArr2 = iArr2;
                Test.instanceCount >>= i15;
            } while (++i17 < 6);
        }
        vMeth_check_sum += i3 + i4 + i5 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr2);
    }

    public static long lMeth(int i1, int i2) {

        short s=21702;
        int i18=152, i19=-94, i20=-53760, i21=3, i22=-13668, iArr[]=new int[N];
        byte by=124;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr, -133);
        FuzzerUtils.init(lArr1, -2004563114629402375L);

        s >>= (short)6318;
        iArr[(i2 >>> 1) % N] += (int)Test.instanceCount;
        Test.instanceCount -= (--i1);
        vMeth(i2);
        i18 = 1;
        while (++i18 < 378) {
            lArr1[i18][i18 + 1] += i2;
            Test.instanceCount -= i1;
            for (i19 = 1; i19 < 4; ++i19) {
                for (i21 = 1; i21 < 2; ++i21) {
                    by &= (byte)Test.instanceCount;
                }
                iArr[i18] = i18;
                i22 = i22;
                iArr[i19] = (int)Test.instanceCount;
                i1 = -175;
                Test.instanceCount += (i19 ^ (long)Test.fFld);
            }
        }
        long meth_res = i1 + i2 + s + i18 + i19 + i20 + i21 + i22 + by + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i24=-6, i25=-104, i26=0, i27=6, iArr3[]=new int[N];
        double d1=1.115037;
        boolean b=false;

        FuzzerUtils.init(iArr3, -5);

        i = (int)lMeth(Test.iFld, Test.iFld);
        Test.fArrFld[(-53496 >>> 1) % N] *= Test.iFld;
        Test.iFld = i;
        for (int i23 : iArr3) {
            bFld = bFld;
            iArr3 = iArr3;
            d1 = 1;
            do {
                if (b) {
                    for (i24 = 1; i24 < 1; ++i24) {
                        i23 *= i26;
                        Test.fArrFld[(int)(d1)] = (float)d1;
                        iArr3[i24 - 1] -= Test.byFld;
                        Test.fFld -= Test.fFld;
                        switch (((i26 >>> 1) % 4) + 123) {
                        case 123:
                            switch ((int)(((d1 % 9) * 5) + 80)) {
                            case 123:
                                i23 *= (int)Test.fFld;
                                break;
                            case 125:
                                i -= (int)Test.instanceCount;
                                i25 += Test.byFld;
                                Test.byFld = (byte)Test.sFld;
                                i <<= i24;
                            case 88:
                                i -= (int)Test.instanceCount;
                                i |= (int)-29883L;
                            case 82:
                                Test.instanceCount = i27;
                                i27 += Test.byFld;
                                break;
                            case 101:
                                iArr3[i24] *= 22573;
                                iArr3[i24] = i24;
                                iArr3[(int)(d1 - 1)] = (int)Test.dFld;
                                break;
                            case 111:
                                i25 = i;
                            case 110:
                                i25 -= Test.iFld;
                                break;
                            case 99:
                                i27 = (int)Test.instanceCount;
                                break;
                            case 84:
                                Test.dFld = i;
                                break;
                            default:
                                i25 += i27;
                            }
                            break;
                        case 124:
                            Test.instanceCount *= i27;
                            break;
                        case 125:
                            Test.iFld += i24;
                        case 126:
                            Test.instanceCount = i24;
                        }
                    }
                } else if (b) {
                    i = 213;
                } else {
                    iArr3[(int)(d1 - 1)] *= (int)-1.604F;
                }
            } while (++d1 < 63);
        }

        FuzzerUtils.out.println("i d1 i24 = " + i + "," + Double.doubleToLongBits(d1) + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("b iArr3 = " + (b ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.dFld Test.iFld bFld = " + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld +
            "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld Test.fArrFld = " + Test.byFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
