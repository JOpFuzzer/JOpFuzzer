// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-248L;
    public static volatile int iFld=240;
    public static float fFld=109.642F;
    public static double dFld=-100.22472;
    public static int iFld1=52838;
    public static short sFld=-25513;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i8=-10, i9=-4, i10=7, i11=-196, i12=216, i13=-178;
        byte by=-92;
        short sArr[]=new short[N], sArr1[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)16090);
        FuzzerUtils.init(lArr, -7700452223656866226L);
        FuzzerUtils.init(sArr1, (short)14083);

        for (short s1 : sArr) {
            switch ((((Test.iFld >>> 1) % 9) * 5) + 65) {
            case 66:
                for (i8 = 1; i8 < 4; ++i8) {
                    for (i10 = 1; i10 < 2; ++i10) {
                        if (Test.iFld != 0) {
                        }
                        i11 &= i11;
                    }
                    for (i12 = i8; i12 < 2; i12++) {
                        Test.dFld = Test.instanceCount;
                        switch (((i8 % 8) * 5) + 118) {
                        case 137:
                            Test.fFld += i10;
                            Test.instanceCount *= i11;
                            if (i12 != 0) {
                            }
                            if (false) continue;
                            break;
                        case 129:
                            i13 = (int)-248L;
                            break;
                        case 132:
                            i11 = i10;
                        case 128:
                            lArr[i12] = -23703;
                            break;
                        case 131:
                            Test.instanceCount = by;
                        case 136:
                            sArr1[i12] >>= (short)Test.iFld;
                        case 120:
                            Test.iArrFld[i8 - 1] *= i11;
                            break;
                        case 139:
                            Test.iArrFld[i12] += i10;
                        }
                    }
                }
                break;
            case 76:
                Test.fFld = Test.instanceCount;
            case 95:
                Test.iArrFld[(i11 >>> 1) % N] = Test.iFld;
                break;
            case 83:
                Test.instanceCount = Test.instanceCount;
                break;
            case 84:
                Test.iFld = (int)Test.dFld;
                break;
            case 82:
                Test.fFld += i11;
            case 67:
                Test.fFld = Test.fFld;
            case 107:
                Test.iFld1 = -31;
            case 74:
                Test.instanceCount -= -73;
                break;
            default:
                Test.fFld += i8;
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + by + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr)
            + FuzzerUtils.checkSum(sArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1) {

        short s=-3856;
        int i2=-14782, i3=-25477, i4=-50, i5=-114, i6=-11, i7=0, i14=-3, i15=-30504, iArr1[]=new int[N];
        boolean b=true;
        double d=-2.5351;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr1, 118);
        FuzzerUtils.init(fArr, -35.470F);

        Test.instanceCount = 13;
        Test.iFld -= (int)(Test.iFld + (-(Test.instanceCount - s)));
        for (i2 = 1; i2 < 122; ++i2) {
            if (b) continue;
            switch ((((i2 + i1) >>> 1) % 2) + 77) {
            case 77:
                for (i4 = 1; i4 < 13; ++i4) {
                    i3 += (((i4 * Test.fFld) + Test.instanceCount) - i4);
                    for (i6 = i4; i6 < 2; i6++) {
                        iArr1[i6] >>= 37970;
                        d *= iMeth();
                        i5 += Test.iFld;
                    }
                    for (i14 = 1; i14 < 2; i14++) {
                        fArr[i14 - 1][i2 - 1] += (float)Test.dFld;
                        i7 >>= i4;
                        i5 = i1;
                    }
                }
                break;
            case 78:
                Test.iFld1 -= (int)Test.fFld;
            default:
                Test.iArrFld[i2 + 1] -= i4;
            }
        }
        vMeth1_check_sum += i1 + s + i2 + i3 + (b ? 1 : 0) + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i14 + i15
            + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i) {

        int i16=21505, i17=43756, i18=4;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -10450L);

        vMeth1(i);
        for (i16 = 18; i16 < 308; i16++) {
            Test.iFld -= i17;
            i -= i17;
            Test.instanceCount += i17;
            Test.iFld1 += (i16 | Test.instanceCount);
            i += (((i16 * Test.sFld) + i17) - Test.instanceCount);
            i17 = i16;
        }
        Test.iFld1 *= Test.iFld;
        i18 = 1;
        do {
            i17 += i18;
            i -= (int)Test.instanceCount;
            Test.instanceCount += Test.iFld;
            lArr1[i18 - 1] ^= Test.iFld;
            Test.iArrFld[i18] *= Test.iFld1;
        } while (++i18 < 294);
        vMeth_check_sum += i + i16 + i17 + i18 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i19=4, i20=214, i21=-10, i22=-11350, i23=-132, i24=-11, i25=2, i26=121, i27=12, iArr[][]=new int[N][N];
        float f=-2.199F;

        FuzzerUtils.init(iArr, 79);

        iArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = (int)(-((Test.instanceCount + Test.iFld) * (Test.iFld *=
            (int)Test.fFld)));
        Test.instanceCount += (--iArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N]);
        vMeth(Test.iFld);
        for (i19 = 3; i19 < 233; i19++) {
            for (i21 = i19; i21 < 109; i21++) {
                Test.iFld1 += i21;
                Test.dFld += i22;
            }
            for (i23 = 1; 109 > i23; ++i23) {
                i24 <<= (int)-1234L;
                Test.instanceCount *= i23;
                i24 -= (int)-3077810982056471654L;
                Test.instanceCount += i21;
                for (f = 2; 1 < f; --f) {
                    Test.instanceCount += (819665082303978594L + (f * f));
                    Test.iFld1 += (int)(f * f);
                    Test.iArrFld[i23] -= i24;
                }
                i22 >>= 203;
                Test.iFld1 += (i23 | (long)Test.fFld);
                for (i26 = 2; i26 > 1; i26--) {
                    switch (((i19 % 2) * 5) + 58) {
                    case 61:
                        i20 += (int)Test.instanceCount;
                        Test.bFld = true;
                        iArr[i19][i26 - 1] -= i22;
                    case 62:
                        Test.instanceCount = i20;
                        if (true) break;
                        i22 += (i26 * i26);
                        Test.iFld1 <<= -240;
                        break;
                    }
                    Test.iFld += (((i26 * Test.instanceCount) + i23) - f);
                    i27 -= (int)-2.78724;
                    i24 ^= Test.iFld1;
                }
            }
        }

        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("f i25 i26 = " + Float.floatToIntBits(f) + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 iArr = " + i27 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.iFld1 Test.sFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Test.iFld1 + "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
