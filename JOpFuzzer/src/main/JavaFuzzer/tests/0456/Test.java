// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static int iFld=10;
    public static float fFld=38.508F;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13);
        FuzzerUtils.init(Test.sArrFld, (short)-9673);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(boolean b) {

        int i5=251, i6=11, i7=23129;
        double d=115.35105;
        float fArr[]=new float[N];
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(fArr, -2.572F);
        FuzzerUtils.init(bArr, true);

        Test.iFld = (int)Test.instanceCount;
        for (i5 = 10; i5 < 268; ++i5) {
            Test.iFld += i5;
            i6 = Test.iFld;
            Test.fFld *= -15;
            for (d = 1; d < 6; ++d) {
                Test.sArrFld = Test.sArrFld;
                i6 += (int)(d * d);
                i7 += i7;
            }
        }
        i7 += i6;
        i7 = i6;
        switch ((((121 >>> 1) % 5) * 5) + 43) {
        case 46:
            Test.iFld = i5;
            Test.iArrFld = FuzzerUtils.int1array(N, (int)-207);
            i6 = i5;
            break;
        case 62:
            Test.fFld += (float)d;
            break;
        case 56:
            i7 &= i7;
            break;
        case 57:
            fArr[(-30619 >>> 1) % N] = i7;
        case 55:
            bArr[(211 >>> 1) % N][(i5 >>> 1) % N] = b;
            break;
        }
        vMeth_check_sum += (b ? 1 : 0) + i5 + i6 + Double.doubleToLongBits(d) + i7 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth() {

        float f1=63.677F;
        boolean b1=false;
        short s1=-32659;
        double d1=2.2201;
        int i8=15199;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -56460L);

        Test.iArrFld[(-87 >>> 1) % N] += (int)(++Test.instanceCount);
        f1 = 1;
        while (++f1 < 136) {
            switch ((int)((f1 % 1) + 82)) {
            case 82:
                vMeth(b1);
                Test.instanceCount = Test.iFld;
            default:
                Test.iFld += (int)(f1 * f1);
                Test.iArrFld[(int)(f1)] = (int)f1;
                if (b1) continue;
            }
            Test.iFld = s1;
            for (d1 = 1; d1 < 12; d1++) {
                Test.iFld -= (int)Test.instanceCount;
            }
        }
        i8 *= (int)Test.instanceCount;
        Test.iArrFld[(62 >>> 1) % N] = Test.iFld;
        Test.fFld = Test.instanceCount;
        Test.iFld <<= i8;
        long meth_res = Float.floatToIntBits(f1) + (b1 ? 1 : 0) + s1 + Double.doubleToLongBits(d1) + i8 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i3, float f, int i4) {

        int i9=40406, i10=-59, i12=25184, i13=-11;
        boolean b2=true, bArr1[]=new boolean[N];
        byte by=-26;
        double d2=-1.71119;
        short s2=-25569;
        long lArr1[]=new long[N];
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(lArr1, 3581659147749837277L);
        FuzzerUtils.init(fArr1, 1.814F);

        iMeth();
        for (i9 = 3; i9 < 223; i9++) {
            boolean b3=true;
            Test.iArrFld[i9 - 1] >>= (int)Test.instanceCount;
            bArr1[(i9 >>> 1) % N] = b2;
            Test.iArrFld[i9 - 1] = i10;
            switch ((((i3 >>> 1) % 10) * 5) + 13) {
            case 34:
                b2 = b3;
                i4 *= i10;
                for (i12 = i9; 7 > i12; i12++) {
                    long l1=945967257L;
                    i4 = i9;
                    Test.fFld += i12;
                    i10 *= i3;
                    f = l1;
                    lArr1[i12] += (long)f;
                    i4 += (i12 * i12);
                }
                break;
            case 45:
                Test.iArrFld[i9 + 1] -= i9;
                break;
            case 23:
                i13 -= i13;
                break;
            case 19:
                by += (byte)Test.instanceCount;
                break;
            case 52:
            case 20:
                i13 += i9;
                break;
            case 51:
                fArr1[i9][i9] -= i12;
                break;
            case 48:
                d2 += i12;
                break;
            case 60:
                Test.instanceCount *= s2;
                break;
            case 16:
                Test.instanceCount *= Test.iFld;
                break;
            default:
                by -= (byte)i13;
            }
        }
        long meth_res = i3 + Float.floatToIntBits(f) + i4 + i9 + i10 + (b2 ? 1 : 0) + i12 + i13 + by +
            Double.doubleToLongBits(d2) + s2 + FuzzerUtils.checkSum(bArr1) + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-187, i1=8, i2=-213, i14=-34, i15=89, i16=-52, i17=-42140, i18=29215, i19=-9, i20=90;
        short s3=-2940;
        double d3=-1.3305, d4=-2.33023;
        byte by1=42, by2=-79;
        boolean b4=false;

        i += Test.iArrFld[(i >>> 1) % N];
        for (i1 = 8; 310 > i1; i1++) {
            i2 >>>= (int)(lMeth(i1, -118.40F, i2) + Test.instanceCount);
            s3 += (short)(i1 * i1);
            Test.iArrFld[i1] >>= i2;
            for (i14 = 4; i14 < 83; i14++) {
                long l2=130L;
                Test.iFld = Test.iFld;
                i15 -= i15;
                Test.iArrFld[i1 - 1] <<= (int)Test.instanceCount;
                lArrFld[i14 - 1] = i16;
                Test.iFld *= i1;
                for (i17 = 2; i17 > 1; i17--) {
                    d3 /= (i1 | 1);
                    Test.iFld = i1;
                    Test.iArrFld[i17] = by1;
                    Test.iArrFld[i14 - 1] += i;
                    i2 -= (int)Test.instanceCount;
                    Test.fFld = by1;
                }
                Test.iFld -= i17;
                Test.iArrFld[(i18 >>> 1) % N] -= i16;
                switch (((i1 % 2) * 5) + 96) {
                case 99:
                    for (d4 = 1; d4 < 2; ++d4) {
                        i2 += i;
                        if (b4) continue;
                        Test.instanceCount += (long)(((d4 * s3) + i1) - i);
                        switch ((i1 % 4) + 88) {
                        case 88:
                            by1 = by2;
                            Test.fFld *= Test.instanceCount;
                            i18 = (int)Test.instanceCount;
                        case 89:
                            i15 += -26676;
                            break;
                        case 90:
                            Test.iArrFld = Test.iArrFld;
                            break;
                        case 91:
                            Test.instanceCount = i2;
                            break;
                        default:
                            Test.iArrFld[i14 + 1] >>>= i15;
                        }
                    }
                    break;
                case 103:
                    i16 = (int)l2;
                default:
                    try {
                        i = (i14 % i18);
                        i15 = (i20 % i16);
                        i2 = (i / Test.iArrFld[i1]);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("s3 i14 i15 = " + s3 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("d3 by1 d4 = " + Double.doubleToLongBits(d3) + "," + by1 + "," +
            Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("i19 b4 by2 = " + i19 + "," + (b4 ? 1 : 0) + "," + by2);
        FuzzerUtils.out.println("i20 = " + i20);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iArrFld Test.sArrFld lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
