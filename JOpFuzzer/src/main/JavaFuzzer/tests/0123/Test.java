// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1667502555L;
    public float fFld=-34.689F;
    public static int iFld=49442;
    public static double dFld=-1.59895;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13);
        FuzzerUtils.init(Test.lArrFld, 17880L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i5=-38384, i6=7, i7=-10, i8=-6770, i9=-4, i10=147;
        float f1=54.645F;
        byte by1=-9;
        boolean b=false;

        for (i5 = 290; i5 > 1; i5 -= 2) {
            for (i7 = 1; i7 < 11; ++i7) {
                for (i9 = 1; i9 < 2; ++i9) {
                    f1 = i9;
                    i6 = (int)Test.instanceCount;
                }
                Test.iFld += (i7 * i7);
                if (b) {
                    i10 /= (int)(i5 | 1);
                    by1 += (byte)i8;
                    f1 += Test.instanceCount;
                    i8 -= i8;
                } else {
                    i6 += (i7 * i8);
                }
                Test.instanceCount -= (long)f1;
                Test.iArrFld[i5] = 9;
                if (b) continue;
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f1) + by1 + (b ? 1 : 0);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(byte by, double d1, double d2) {

        double d3=1.87332;
        int i4=-5, i11=16928, i12=3, i13=-7, i14=238;
        boolean b1=true;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, 48794L);
        FuzzerUtils.init(byArr, (byte)56);

        Test.iFld = (int)(++lArr[(82 >>> 1) % N]);
        for (d3 = 2; d3 < 369; ++d3) {
            short s=-32392;
            s = (short)(((-(-Test.instanceCount)) + (Test.iFld * Test.instanceCount)) - dMeth());
            i4 *= (int)Test.instanceCount;
            if (b1) continue;
            switch ((int)((d3 % 10) + 75)) {
            case 75:
                i4 = Test.iFld;
                i4 = i4;
                Test.instanceCount += (long)(d3 - i4);
                break;
            case 76:
                for (i11 = 1; i11 < 5; i11++) {
                    i12 -= s;
                    Test.instanceCount = Test.instanceCount;
                    for (i13 = 1; 2 > i13; ++i13) {
                        i4 = 3450;
                        if (b1) continue;
                    }
                }
                break;
            case 77:
                Test.iFld >>= i4;
                break;
            case 78:
                i12 += (int)(d3 + Test.instanceCount);
                break;
            case 79:
                Test.iFld = i13;
            case 80:
                d2 += 5;
            case 81:
                byArr[(int)(d3 + 1)] -= (byte)Test.iFld;
                break;
            case 82:
                i14 <<= i12;
                break;
            case 83:
            case 84:
                i4 = Test.iFld;
                break;
            default:
                i4 = (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += by + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3)
            + i4 + (b1 ? 1 : 0) + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
    }

    public static long lMeth(float f, double d) {

        byte by2=105;
        int i15=13, i16=-13661, i17=11, i18=52209, i19=-109, i20=-18977, i21=20977;
        double d4=-19.54843;

        Test.iFld = (Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iArrFld[(Test.iFld >>> 1) % N]);
        try {
            vMeth(by2, d, d);
            Test.iFld += (int)Test.instanceCount;
            for (i15 = 5; i15 < 306; i15++) {
                i17 = 1;
                do {
                    Test.iArrFld[i15] <<= (int)Test.instanceCount;
                    i16 = i15;
                } while (++i17 < 5);
            }
            for (i18 = 7; i18 < 137; i18++) {
                by2 += (byte)(8861 + (i18 * i18));
            }
            for (d4 = 12; d4 < 376; d4++) {
                i21 = 1;
                do {
                    if (false) continue;
                    by2 >>>= (byte)i19;
                    f -= f;
                } while (++i21 < 5);
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            Test.instanceCount = i20;
        }
        long meth_res = Float.floatToIntBits(f) + Double.doubleToLongBits(d) + by2 + i15 + i16 + i17 + i18 + i19 +
            Double.doubleToLongBits(d4) + i20 + i21;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-67, i1=-7, i2=-2456, i3=183, i22=-10, i23=55, i24=-2, i25=42892, i26=-3, i27=203;
        byte by3=-15;
        float f2=-33.907F, fArr[]=new float[N];
        boolean b2=true;

        FuzzerUtils.init(fArr, 82.611F);

        for (i = 5; i < 270; i++) {
            for (i2 = 4; i2 < 95; ++i2) {
                fFld = (-lMeth(fFld, Test.dFld));
                for (i22 = 1; i22 < 2; i22++) {
                    Test.lArrFld[i] = -22416;
                    i3 = by3;
                    i3 += i2;
                    Test.dFld -= i3;
                }
                i3 -= i1;
                fFld = i22;
            }
            i23 = i22;
            fFld = i1;
        }
        for (f2 = 14; f2 < 255; ++f2) {
            Test.instanceCount += (long)(((f2 * i1) + i1) - Test.instanceCount);
            i24 = (int)Test.dFld;
            i1 = (int)f2;
        }
        Test.iFld = i3;
        Test.iFld = (int)Test.instanceCount;
        for (i25 = 6; i25 < 222; i25++) {
            fArr = FuzzerUtils.float1array(N, (float)0.722F);
            i27 = 1;
            do {
                i26 += (((i27 * i23) + i3) - Test.iFld);
                fFld = i27;
                Test.lArrFld[i27] *= Test.instanceCount;
            } while (++i27 < 116);
            if (b2) continue;
            try {
                i24 = (-111 / i27);
                Test.iArrFld[i25 - 1] = (Test.iArrFld[i25] % -55);
                Test.iArrFld[i25 - 1] = (i22 / -36941);
            } catch (ArithmeticException a_e) {}
            i1 += i25;
            fFld += (i25 - Test.instanceCount);
            b2 = b2;
            i26 += (int)f2;
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i22 i23 = " + i3 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("by3 f2 i24 = " + by3 + "," + Float.floatToIntBits(f2) + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("b2 fArr = " + (b2 ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld Test.iArrFld Test.lArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
