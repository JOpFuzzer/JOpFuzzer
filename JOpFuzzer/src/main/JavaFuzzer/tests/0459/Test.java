// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-154L;
    public static volatile boolean bFld=false;
    public short sFld=24373;
    public static float fFld=58.725F;
    public volatile double dFld=-2.29715;
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2506285459814934534L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(short s) {

        int i8=132, i9=47391, i10=8, i11=33941, i12=-1798, i13=-13, i14=-7, i15=16394, iArr[]=new int[N];
        double d1=39.96756;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -11);
        FuzzerUtils.init(lArr, -13L);

        for (i8 = 14; i8 < 339; i8++) {
            for (i10 = 5; i10 > 1; --i10) {
                i9 = i9;
                iArr = iArr;
            }
            Test.instanceCount += (629775742L + (i8 * i8));
            iArr[i8] += i9;
            for (i12 = 1; i12 < 5; i12++) {
                float f1=21.840F;
                byte by=72;
                if (Test.bFld) continue;
                i13 += i8;
                switch (((i13 >>> 1) % 9) + 67) {
                case 67:
                    if (Test.bFld) continue;
                    f1 -= i13;
                    break;
                case 68:
                    for (i14 = i8; i14 < 2; ++i14) {
                        i13 += i14;
                        s *= (short)i14;
                    }
                case 69:
                    d1 -= i13;
                case 70:
                    i9 -= (int)d1;
                    break;
                case 71:
                    by = (byte)i11;
                case 72:
                    lArr = lArr;
                    break;
                case 73:
                    if (i13 != 0) {
                        vMeth2_check_sum += s + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 +
                            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    break;
                case 74:
                    i13 -= i14;
                    break;
                case 75:
                    lArr[(i10 >>> 1) % N] = s;
                    break;
                }
            }
        }
        vMeth2_check_sum += s + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth1(long l, double d, long l1) {

        int i16=-64148, i17=-8, i18=57, i19=6417, i20=9, i21=52552;
        float f2=10.409F;

        vMeth2(sFld);
        for (i16 = 3; i16 < 212; i16++) {
            i17 = i17;
            i17 <<= (int)l;
            for (i18 = 8; i18 > 1; i18 -= 2) {
                for (i20 = i18; i20 < 3; ++i20) {
                    l1 = i17;
                    Test.lArrFld[i20] ^= -30382L;
                    Test.instanceCount += (-20897L + (i20 * i20));
                    d -= l;
                    Test.bFld = Test.bFld;
                    l = l;
                    f2 += i20;
                }
                i21 += i18;
                i19 += (i18 | i21);
            }
        }
        vMeth1_check_sum += l + Double.doubleToLongBits(d) + l1 + i16 + i17 + i18 + i19 + i20 + i21 +
            Float.floatToIntBits(f2);
    }

    public void vMeth(int i2, float f) {

        int i3=25665, i4=11177, i5=55966, i6=-1, i7=5;
        double d2=12.120169;
        boolean bArr1[]=new boolean[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(fArr, 0.341F);

        Test.bFld = bArr1[(i2 >>> 1) % N];
        for (i3 = 13; i3 < 348; ++i3) {
            i5 = 1;
            while (++i5 < 5) {
                for (i6 = 1; i6 < 1; i6++) {
                    switch ((i6 % 3) + 3) {
                    case 3:
                        vMeth1(Test.instanceCount, d2, Test.instanceCount);
                        fArr[i3] = 3;
                        break;
                    case 4:
                        d2 = i5;
                        break;
                    case 5:
                        i7 >>= -8786;
                    }
                    i7 += i5;
                    i7 = (int)Test.instanceCount;
                    i4 += (int)Test.instanceCount;
                    Test.instanceCount += Test.instanceCount;
                    i7 += (int)d2;
                    i4 += 148;
                }
            }
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(bArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=3722, i1=-133, i22=-79, i23=28406, i24=-126, i25=-8371, i26=25005, i27=-4206;
        byte by1=-55;
        float f3=91.933F, fArr1[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr1, -37.886F);

        for (i = 2; i < 252; i++) {
            bArr = bArr;
            vMeth(i, Test.fFld);
            i1 = (int)Test.instanceCount;
            by1 = (byte)Test.instanceCount;
            Test.fFld -= (float)dFld;
            i1 += (((i * i1) + i) - Test.fFld);
            i1 += (i | i1);
            i1 &= i1;
            Test.instanceCount = i;
            iArrFld[i] -= (int)1489417278371257761L;
        }
        i1 -= i;
        i1 += (int)Test.instanceCount;
        for (i22 = 8; i22 < 242; i22++) {
            fArr1[i22 - 1] = i23;
            i23 = (int)f3;
            switch (((i22 % 2) * 5) + 99) {
            case 100:
                Test.bFld = true;
                iArrFld[i22 - 1] += 12805;
                Test.instanceCount = (long)108.76606;
                i1 += (((i22 * i22) + Test.instanceCount) - i1);
            case 101:
                for (i24 = 5; i24 < 107; i24 += 3) {
                    iArrFld[i22] -= by1;
                    if (Test.bFld) {
                        i1 = 23;
                    }
                }
                i25 = i1;
                i23 += i1;
                for (i26 = 2; i26 < 107; i26++) {
                    Test.instanceCount += (i26 * i27);
                    by1 += (byte)i26;
                }
            default:
                Test.lArrFld[i22 + 1] <<= Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i i1 by1 = " + i + "," + i1 + "," + by1);
        FuzzerUtils.out.println("i22 i23 f3 = " + i22 + "," + i23 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 bArr fArr1 = " + i27 + "," + FuzzerUtils.checkSum(bArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld sFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0)
            + "," + sFld);
        FuzzerUtils.out.println("Test.fFld dFld Test.lArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Double.doubleToLongBits(dFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
