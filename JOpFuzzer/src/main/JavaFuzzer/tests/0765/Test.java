// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-25106L;
    public static short sFld=-30784;
    public static volatile float fFld=0.221F;
    public static double dFld=60.27385;
    public int iFld=59;
    public static int iFld1=-5374;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(boolean b) {

        int i1=-149;

        i1 = (-(++i1));
        vMeth_check_sum += (b ? 1 : 0) + i1;
    }

    public static void vMeth1(int i2, float f1, long l1) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -35144L);

        lArr[(i2 >>> 1) % N] -= (long)f1;
        vMeth1_check_sum += i2 + Float.floatToIntBits(f1) + l1 + FuzzerUtils.checkSum(lArr);
    }

    public static boolean bMeth(float f) {

        int i3=9, i4=1, i5=-238, i6=24544, i7=36134, i8=99, i9=-159;
        boolean b1=false;

        if (b1) {
            vMeth1(i3, 0.33F, Test.instanceCount);
            for (i4 = 6; i4 < 122; ++i4) {
                Test.instanceCount += Test.instanceCount;
                i5 += (i4 * i4);
                for (i6 = 1; i6 < 13; ++i6) {
                    i5 += (int)Test.instanceCount;
                    i8 = 1;
                    while (++i8 < 2) {
                        if (b1) {
                            i9 = i4;
                            if (i9 != 0) {
                                return ((int)(Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + (b1 ? 1 :
                                    0))) % 2 > 0;
                            }
                            i3 = Test.sFld;
                        } else if (b1) {
                            i9 = 12;
                            i9 = 202;
                            b1 = b1;
                            return ((int)(Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + (b1 ? 1 : 0))) %
                                2 > 0;
                        }
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + (b1 ? 1 : 0);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vSmallMeth(long l) {

        int i=-202;
        float f2=2.30F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 69.36283);

        i += (int)dArr[(i >>> 1) % N];
        vMeth(bMeth(f2));
        vSmallMeth_check_sum += l + i + Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i10=-10, i11=250, i12=48176, i13=-24, i14=-9021, i15=13, i16=-23211, i17=-28107, iArr[]=new int[N];
        byte by=65;
        float f3=0.113F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -59977);
        FuzzerUtils.init(lArr1, 5L);

        for (int smallinvoc=0; smallinvoc<544; smallinvoc++) vSmallMeth(Test.instanceCount);
        i10 = i10;
        i11 = 1;
        do {
            Test.instanceCount += (87 + (i11 * i11));
            Test.fFld = (float)Test.dFld;
            i10 += by;
            i12 = 1;
            while (++i12 < 120) {
                Test.fFld += Test.fFld;
                iArr[i11 - 1] |= (int)Test.instanceCount;
                Test.instanceCount = (long)Test.fFld;
                Test.dFld += i12;
                Test.fFld = i11;
            }
        } while (++i11 < 210);
        Test.instanceCount = i10;
        Test.dFld = Test.dFld;
        for (long l2 : lArr1) {
            switch ((((4 >>> 1) % 4) * 5) + 123) {
            case 124:
                i13 = 1;
                while (++i13 < 63) {
                    for (i14 = 1; i14 < 1; ++i14) {
                        i15 += i10;
                        i10 = i16;
                    }
                    iFld += (i13 * i11);
                    i15 = Test.iFld1;
                    iFld |= i16;
                    iFld &= -59;
                }
                for (f3 = 3; 63 > f3; ++f3) {
                    float f4=74.38F;
                    iFld <<= i15;
                    i16 = i15;
                    i10 += (int)(((f3 * i14) + l2) - i10);
                    try {
                        iArr[(int)(f3)] = (i12 % iFld);
                        iArr[(int)(f3)] = (i10 % i15);
                        iFld = (-14 % i10);
                    } catch (ArithmeticException a_e) {}
                    Test.dFld += f4;
                }
            case 128:
                Test.fFld += i17;
            case 141:
                Test.dFld /= (l2 | 1);
                break;
            case 143:
                i15 = (int)f3;
                break;
            default:
                i16 = (int)Test.dFld;
            }
        }

        FuzzerUtils.out.println("i10 i11 by = " + i10 + "," + i11 + "," + by);
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 f3 = " + i15 + "," + i16 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i17 iArr lArr1 = " + i17 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld iFld Test.iFld1 = " + Double.doubleToLongBits(Test.dFld) + "," + iFld + ","
            + Test.iFld1);

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  bMeth ->  bMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 bMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
