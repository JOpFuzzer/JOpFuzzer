// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=751950909398453835L;
    public static long lFld=7920424291681572842L;
    public static float fFld=-46.397F;
    public static int iFld=11590;
    public static short sArrFld[][]=new short[N][N];
    public static volatile int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public static boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)21877);
        FuzzerUtils.init(Test.iArrFld, 6);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(byte by, int i5, int i6) {

        float f=74.362F, fArr[]=new float[N];
        int i7=-238, i8=-5964, i9=22;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 2.680F);
        FuzzerUtils.init(lArr, 170L);

        i6 -= i5;
        f += i6;
        for (i7 = 11; i7 < 371; i7 += 3) {
            double d=15.72470;
            f += (float)d;
            switch (((i7 % 10) * 5) + 50) {
            case 91:
                Test.sArrFld = Test.sArrFld;
                i8 = (int)Test.instanceCount;
                break;
            case 88:
                if (b) {
                    by += (byte)i7;
                    i9 = 1;
                    while (++i9 < 13) {
                        i8 += (i9 | i7);
                        i5 += (((i9 * i5) + Test.instanceCount) - i5);
                    }
                    i8 += i9;
                    Test.instanceCount = 6;
                } else if (b) {
                    i6 = (int)Test.lFld;
                } else {
                    i5 += (int)(-35693L + (i7 * i7));
                }
            case 97:
                fArr[i7] = 0.683F;
                break;
            case 93:
                lArr[i7 - 1] <<= 54649L;
                break;
            case 80:
                i8 <<= i7;
            case 70:
                Test.lFld += (i7 + i9);
                break;
            case 77:
            case 65:
                i5 -= (int)Test.lFld;
            case 59:
                f = (float)d;
                break;
            case 87:
                i6 = (int)Test.instanceCount;
                break;
            default:
                i6 >>= i7;
            }
        }
        vMeth_check_sum += by + i5 + i6 + Float.floatToIntBits(f) + i7 + i8 + i9 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth1() {

        int i3=16474, i4=8, i10=-17381, i11=7, i12=156;
        byte by1=-111;
        short s=23790;
        boolean b1=false;
        double d1=0.37278;
        float f1=0.512F;

        for (i3 = 8; i3 < 332; ++i3) {
            vMeth(by1, i4, i3);
            Test.lFld |= i4;
            Test.iArrFld[i3] = by1;
            i4 -= s;
            if (b1) break;
            d1 = i4;
        }
        i4 = i3;
        i4 += (int)Test.fFld;
        for (f1 = 6; f1 < 334; ++f1) {
            if (b1) {
                for (i11 = 1; i11 < 5; i11++) {
                    if (b1) break;
                    Test.iArrFld[(int)(f1 - 1)] *= 16;
                    Test.iArrFld[(int)(f1)] = 26;
                }
            } else if (b1) {
                i4 += i12;
            }
        }
        long meth_res = i3 + i4 + by1 + s + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i10
            + i11 + i12;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=11, i2=-7742, i13=-58997, i14=4, i15=-3, i16=7;
        boolean b2=false;
        short s1=17412;

        for (i1 = 11; i1 < 222; i1++) {
            i2 >>= (int)-74L;
            Test.instanceCount <<= iMeth1();
            i2 += (i1 + i2);
            if (b2) break;
            Test.fFld += i2;
            i2 = (int)6978602555456285175L;
            i2 -= i2;
            Test.lFld = i2;
        }
        for (i13 = 13; i13 < 355; i13++) {
            i2 >>= i13;
            for (i15 = 5; i15 > 1; --i15) {
                Test.iArrFld[i15] += (int)Test.instanceCount;
                i14 = (int)Test.instanceCount;
                s1 += (short)1;
            }
        }
        long meth_res = i1 + i2 + (b2 ? 1 : 0) + i13 + i14 + i15 + i16 + s1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=51576, i17=-197, i18=-58316, i19=5, i20=-20117, i21=50264;
        long l=-2621894537311968104L;
        double d2=0.78898;
        boolean b3=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-17901);

        Test.instanceCount >>>= sArr[(i >>> 1) % N];
        i += (Math.min(i * -9, iMeth()) + i);
        Test.iArrFld = Test.iArrFld;
        for (i17 = 12; i17 < 220; i17++) {
            short s2=-2127;
            s2 <<= (short)Test.instanceCount;
            switch ((i17 % 4) + 9) {
            case 9:
                for (l = 121; l > 2; l--) {
                    i19 += s2;
                    i >>>= i17;
                    i18 = i;
                    for (i20 = 1; 2 > i20; i20++) {
                        switch (((i17 % 8) * 5) + 17) {
                        case 18:
                            s2 <<= (short)i17;
                            i19 %= (int)(Test.iFld | 1);
                            s2 += (short)(11 + (i20 * i20));
                            break;
                        case 38:
                            lArrFld[i17] += i20;
                            break;
                        case 20:
                            Test.instanceCount += (((i20 * i17) + l) - Test.lFld);
                            Test.iFld *= (int)d2;
                            Test.iFld = i20;
                            Test.lFld = Test.iFld;
                            break;
                        case 31:
                            Test.bArrFld[i20][i20] = b3;
                            b3 = b3;
                        case 43:
                            Test.lFld ^= i21;
                            if (false) continue;
                            i19 = (int)Test.fFld;
                        case 28:
                            try {
                                i = (i19 / i18);
                                i19 = (i % -51950);
                                i21 = (1878666874 / i21);
                            } catch (ArithmeticException a_e) {}
                            Test.iArrFld[i17 - 1] >>= i18;
                            i18 += i20;
                            break;
                        case 53:
                            try {
                                i = (i20 % Test.iArrFld[i20 + 1]);
                                i18 = (Test.iArrFld[(int)(l - 1)] / i17);
                                Test.iArrFld[(int)(l + 1)] = (Test.iFld / i21);
                            } catch (ArithmeticException a_e) {}
                            i21 += (i20 * i20);
                            break;
                        case 25:
                            Test.iArrFld[i20] >>>= i21;
                            break;
                        default:
                            Test.iArrFld[(int)(l - 1)] = Test.iFld;
                        }
                    }
                }
                break;
            case 10:
                i19 -= i20;
            case 11:
                Test.instanceCount += (((i17 * i19) + i19) - i18);
                break;
            case 12:
                i *= (int)-7651460086757140791L;
            default:
                i19 = Test.iFld;
            }
        }

        FuzzerUtils.out.println("i i17 i18 = " + i + "," + i17 + "," + i18);
        FuzzerUtils.out.println("l i19 i20 = " + l + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 d2 b3 = " + i21 + "," + Double.doubleToLongBits(d2) + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.lFld Test.fFld = " + Test.instanceCount + "," + Test.lFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld Test.sArrFld Test.iArrFld = " + Test.iFld + "," +
            FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld Test.bArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
