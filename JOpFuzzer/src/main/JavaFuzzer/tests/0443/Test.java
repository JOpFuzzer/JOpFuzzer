// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=478601832237759044L;
    public static volatile int iFld=-193;
    public static boolean bFld=false;

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, long l2) {

        int i2=-29874;
        boolean b=false;

        i2 = 1;
        do {
            b = b;
        } while ((i2 += 2) < 162);
        vMeth1_check_sum += l1 + l2 + i2 + (b ? 1 : 0);
    }

    public static void vMeth(int i, long l, int i1) {

        int i3=24, i4=-95, i5=86, i6=188, i7=-91, i8=4;
        byte by=18, byArr[]=new byte[N];
        float f=68.953F;

        FuzzerUtils.init(byArr, (byte)89);

        vMeth1(l, l);
        Test.instanceCount += i1;
        for (i3 = 4; i3 < 181; i3 += 3) {
            byArr[i3 - 1] -= by;
            i4 *= (int)38.205F;
            Test.instanceCount += (i3 * i3);
            f *= Test.instanceCount;
            if (i4 != 0) {
                vMeth_check_sum += i + l + i1 + i3 + i4 + by + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 +
                    FuzzerUtils.checkSum(byArr);
                return;
            }
            Test.instanceCount += (((i3 * i3) + i4) - l);
        }
        for (i5 = 226; 10 < i5; --i5) {
            i <<= i;
            for (i7 = 1; i7 < 7; i7++) {
                Test.instanceCount *= i5;
                Test.iFld -= -32728;
                by -= (byte)i6;
            }
        }
        vMeth_check_sum += i + l + i1 + i3 + i4 + by + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 +
            FuzzerUtils.checkSum(byArr);
    }

    public long lMeth() {


        vMeth(Test.iFld, Test.instanceCount, Test.iFld);
        long meth_res = 0;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i9=-204, i10=2479, i11=56791, i12=10, i13=0, i14=23811, i15=4696, i16=195, i17=14, i18=-4, i19=207, i20=-7,
            i21=36239, iArr[]=new int[N];
        float f1=-2.999F;
        byte by1=-43;
        long l3=3448798862L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1915071640L);
        FuzzerUtils.init(iArr, 6);

        Test.iFld += (Test.iFld - Test.iFld);
        lMeth();
        lArr[(Test.iFld >>> 1) % N] *= Test.iFld;
        i9 = 1;
        do {
            Test.iFld += i9;
        } while (++i9 < 206);
        for (i10 = 211; i10 > 12; --i10) {
            Test.instanceCount <<= i9;
            for (i12 = 126; i12 > 2; i12 -= 2) {
                for (i14 = 1; 3 > i14; ++i14) {
                    Test.instanceCount += (i14 | i10);
                    i13 = i12;
                    Test.instanceCount -= 51;
                    f1 += (i14 * i9);
                    iArr[i14 + 1] |= i11;
                    iArr[i10 + 1] = i15;
                }
                for (i16 = 1; i16 < 3; ++i16) {
                    f1 -= i10;
                    by1 = (byte)Test.instanceCount;
                    Test.instanceCount += i16;
                    Test.iFld = (int)Test.instanceCount;
                    iArr[i16 - 1] = -89;
                    i17 += i16;
                }
            }
            switch (((i10 % 8) * 5) + 31) {
            case 52:
                for (i18 = 5; i18 < 126; ++i18) {
                    f1 -= Test.instanceCount;
                    i17 &= 6;
                    l3 -= -41982L;
                    for (i20 = 1; i20 < 2; i20++) {
                        double d=1.105800;
                        iArr = FuzzerUtils.int1array(N, (int)8);
                        d = i14;
                    }
                }
                break;
            case 44:
                if (Test.bFld) break;
                break;
            case 66:
                try {
                    i15 = (i16 % Test.iFld);
                    i17 = (-52158 % i10);
                    i17 = (-1076484817 % Test.iFld);
                } catch (ArithmeticException a_e) {}
                break;
            case 47:
                lArr = lArr;
                break;
            case 64:
                iArr[i10 + 1] = i15;
                break;
            case 37:
                Test.instanceCount += (192L + (i10 * i10));
                break;
            case 50:
                i17 -= i12;
                break;
            case 62:
                i13 += (13 + (i10 * i10));
                break;
            default:
                l3 = i17;
            }
        }

        FuzzerUtils.out.println("i9 i10 i11 = " + i9 + "," + i10 + "," + i11);
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 f1 i16 = " + i15 + "," + Float.floatToIntBits(f1) + "," + i16);
        FuzzerUtils.out.println("i17 by1 i18 = " + i17 + "," + by1 + "," + i18);
        FuzzerUtils.out.println("i19 l3 i20 = " + i19 + "," + l3 + "," + i20);
        FuzzerUtils.out.println("i21 lArr iArr = " + i21 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
