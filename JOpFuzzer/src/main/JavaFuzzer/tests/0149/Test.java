// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=58643L;
    public static int iFld=3;
    public static volatile int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -27);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i8=-10, i9=4504, i10=60, i11=54, i12=7, i13=-246;
        float f1=-71.964F, f2=1.617F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2227108609L);

        i8 = 1;
        while (++i8 < 252) {
            for (i9 = 1; i9 < 6; i9++) {
                i11 = 1;
                while (++i11 < 2) {
                    f1 += i11;
                    i10 <<= 4;
                    i10 *= i9;
                    Test.iFld -= (int)f2;
                    Test.instanceCount = Test.iFld;
                }
                Test.iFld += (1 + (i9 * i9));
                for (i12 = i9; 2 > i12; ++i12) {
                    Test.iArrFld[i9 - 1][i9] = (int)Test.instanceCount;
                    Test.iArrFld[i9 + 1] = FuzzerUtils.int1array(N, (int)116);
                    Test.iArrFld[i8 - 1][i8 - 1] = 4;
                }
                lArr1[i9 - 1] *= i13;
                i13 = i11;
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i12 + i13 +
            FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth() {

        int i6=-32261, i7=226, i14=-14, i15=-8, i16=13, i17=-137, iArr1[]=new int[N];
        float f=0.820F, fArr[]=new float[N];
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, 42411);
        FuzzerUtils.init(lArr, -38521L);
        FuzzerUtils.init(fArr, -65.541F);
        FuzzerUtils.init(byArr, (byte)-97);

        iArr1[(-5292 >>> 1) % N] >>= (int)(iArr1[(-4 >>> 1) % N] * ((Test.instanceCount - 62098) - (Test.iFld +
            Test.iFld)));
        for (i6 = 8; i6 < 177; i6++) {
            iArr1[i6 - 1] *= 11;
            i7 += i6;
            Test.iFld += (((i6 * f) + i6) - Test.iFld);
            vMeth1();
            Test.instanceCount >>= i6;
            for (i14 = 1; i14 < 9; ++i14) {
                iArr1[i14 + 1] ^= i15;
                fArr[i14] -= Test.instanceCount;
                for (i16 = 1; i16 < 2; i16++) {
                    f = Test.instanceCount;
                    try {
                        Test.iFld = (62868 % i7);
                        i15 = (1626474025 / i6);
                        Test.iArrFld[i6][i16 + 1] = (77 % i7);
                    } catch (ArithmeticException a_e) {}
                    i15 = i16;
                    byArr[i16 + 1] -= (byte)Test.instanceCount;
                }
            }
        }
        long meth_res = i6 + i7 + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i3, long l) {

        int i4=-20549, i5=-64319, i18=64337, i19=10, i20=122, iArr[]=new int[N];
        float f3=2.973F, f4=-2.626F;
        byte by=68;
        boolean b=true;

        FuzzerUtils.init(iArr, -7);

        i3 += (int)Math.abs(3595515631479800265L);
        Test.instanceCount >>>= Long.reverseBytes(Math.abs(Test.iFld + Test.iFld));
        for (i4 = 19; i4 < 304; ++i4) {
            Test.iFld |= Test.iFld;
            i3 = (int)((i3 * (Test.iFld * 9757)) - (Test.instanceCount--));
            iArr[i4] = (int)lMeth();
        }
        for (f3 = 7; f3 < 336; ++f3) {
            Test.instanceCount = 58883L;
        }
        i18 += (int)l;
        for (i19 = 10; i19 < 236; i19++) {
            if (b) {
                try {
                    i18 = (i5 % i19);
                    i18 = (iArr[i19 - 1] / i19);
                    i5 = (i18 / i19);
                } catch (ArithmeticException a_e) {}
                by = (byte)-80;
                f4 = Test.iFld;
                i18 += i19;
            } else {
                i18 += i20;
            }
        }
        vMeth_check_sum += i3 + l + i4 + i5 + Float.floatToIntBits(f3) + i18 + i19 + i20 + by +
            Float.floatToIntBits(f4) + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d=0.126168;
        int i=-27, i1=50739, i2=13, i21=-9, i22=13, i23=4685, i24=5, i25=10, i26=-3;
        float f5=1.136F, f6=57.517F;
        long l2=-6L;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(byArr1, (byte)-45);

        d += Test.iFld;
        i = 122;
        while ((i -= 3) > 0) {
            for (i1 = 1; i > i1; ++i1) {
                i2 += (int)(55651L + (i1 * i1));
                Test.iFld += (i1 + i1);
                vMeth(Test.iFld, Test.instanceCount);
                Test.iFld -= -79;
                f5 *= Test.iFld;
                for (i21 = i; i21 < 2; ++i21) {
                    Test.iFld -= (int)-19.419F;
                    byArr1[i - 1] *= (byte)Test.iFld;
                }
                Test.instanceCount -= Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                i2 = i22;
                for (l2 = 1; l2 < 2; ++l2) {
                    i22 ^= i23;
                    i22 += (int)-125.29943;
                }
            }
            i22 = Test.iFld;
            for (f6 = 172; f6 > 9; f6 -= 3) {
                for (i25 = 1; i25 < 12; i25++) {
                    Test.instanceCount += (i25 ^ i2);
                    i26 *= 22;
                    f5 *= Test.instanceCount;
                    Test.instanceCount += i24;
                }
                i22 >>= (int)l2;
            }
            Test.iArrFld[(i25 >>> 1) % N][i] -= i23;
            i23 += (((i * i22) + i22) - i22);
            i2 -= i24;
        }
        i22 = i25;
        Test.iArrFld[(i23 >>> 1) % N][(i2 >>> 1) % N] += (int)f5;

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 f5 i21 = " + i2 + "," + Float.floatToIntBits(f5) + "," + i21);
        FuzzerUtils.out.println("i22 l2 i23 = " + i22 + "," + l2 + "," + i23);
        FuzzerUtils.out.println("f6 i24 i25 = " + Float.floatToIntBits(f6) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 byArr1 = " + i26 + "," + FuzzerUtils.checkSum(byArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.iArrFld = " + Test.instanceCount + "," + Test.iFld +
            "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
