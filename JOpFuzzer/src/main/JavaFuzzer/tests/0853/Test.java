// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-33579L;
    public static int iFld=17821;
    public static boolean bFld=false;
    public static float fFld=0.623F;
    public static byte byFld=-123;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)12631);
        FuzzerUtils.init(Test.iArrFld, 186);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        float f2=1.944F;
        int i10=-54308, i11=64087, i12=-16573;
        byte by=76;
        double d2=-18.31945;
        short s=29492;

        for (f2 = 16; f2 < 312; ++f2) {
            for (i11 = (int)(f2); i11 < 6; i11++) {
                Test.bFld = Test.bFld;
                i12 = i10;
                Test.iArrFld[i11 - 1] = (int)Test.instanceCount;
                Test.instanceCount = i10;
                i10 += i10;
                i12 <<= -15402;
                Test.iArrFld[i11 - 1] *= Test.iFld;
                Test.iFld = Test.iFld;
                Test.iFld += (((i11 * by) + i12) - Test.iFld);
            }
            Test.fFld = i10;
            Test.iFld = (int)Test.fFld;
            d2 *= s;
        }
        i12 -= (int)1821L;
        long meth_res = Float.floatToIntBits(f2) + i10 + i11 + i12 + by + Double.doubleToLongBits(d2) + s;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth(long l1, int i9) {

        int i13=-190, i14=-218, i15=-16119, i16=-4, i17=108;
        long lArr2[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr2, -12L);
        FuzzerUtils.init(dArr, 1.116903);

        Test.instanceCount = (--l1);
        fMeth();
        lArr2[(i9 >>> 1) % N] <<= i9;
        dArr = dArr;
        for (i13 = 4; i13 < 347; i13++) {
            i15 = 1;
            while (++i15 < 5) {
                Test.iArrFld = Test.iArrFld;
                i14 *= (int)Test.instanceCount;
                l1 += i15;
                Test.byFld |= (byte)i16;
            }
            i14 = i16;
            i17 = 1;
            do {
                i9 += (i17 + i15);
                i14 += i17;
                l1 >>= Test.iFld;
            } while (++i17 < 5);
        }
        long meth_res = l1 + i9 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(lArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i2, long l) {

        int i3=62, i4=-212, i5=8, i6=39671, i7=121, i8=-11, i18=-52, i19=-28214;
        double d1=1.35931;
        float f1=-2.703F;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 4L);

        Test.iFld *= (i2 = ((Test.sArrFld[(i2 >>> 1) % N] = (short)25182) + Math.abs(-7)));
        for (i3 = 2; i3 < 329; i3++) {
            Test.iArrFld[i3 + 1] = (int)((--i2) - d1);
            i2 = (int)(Test.instanceCount + Math.abs(--Test.iArrFld[i3]));
            Test.instanceCount = (Test.instanceCount++);
            for (i5 = 1; i5 < 5; ++i5) {
                for (i7 = 1; i7 < 2; ++i7) {
                    if (Test.bFld = ((f1 -= (++i8)) != (-(++f1)))) continue;
                    lArr1[i5][i3] = (Test.iFld - lMeth(Test.instanceCount, 64));
                    Test.iFld += (i7 * i7);
                }
                for (i18 = 1; i18 < 2; i18++) {
                    Test.instanceCount -= i18;
                    Test.instanceCount += (i18 * Test.fFld);
                    lArr1[i3 + 1][i18 + 1] = i3;
                    d1 = Test.iFld;
                }
            }
        }
        vMeth_check_sum += i2 + l + i3 + i4 + Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 +
            Float.floatToIntBits(f1) + i18 + i19 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=51734, i1=48307, i20=-90, i21=14, i22=-12, i23=8, i24=-2, i25=-10, i26=65, i27=-127, i28=-1;
        float f=-55.867F, f3=54.276F;
        double d=2.59695;
        short s1=-13800;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 3L);

        for (i = 6; i < 189; i++) {
            i1 <<= Integer.reverseBytes((int)((2.127609 - (164 + Math.max(i1, i1))) * i));
            i1 -= (int)(lArr[i - 1][i] + ((Test.iFld + i) + f));
        }
        d += (f--);
        vMeth(i, Test.instanceCount);
        Test.iFld *= i1;
        switch ((((Test.iFld >>> 1) % 2) * 5) + 83) {
        case 90:
            Test.iFld = s1;
        case 88:
            for (i20 = 17; 374 > i20; ++i20) {
                for (f3 = i20; 71 > f3; ++f3) {
                    Test.bFld = Test.bFld;
                    Test.fFld += i21;
                    Test.instanceCount = i20;
                    i21 = 3;
                    Test.instanceCount -= (long)f3;
                    s1 -= (short)-106;
                    lArr[(int)(f3 + 1)][i20] = i20;
                    i22 += -56863;
                }
                f += (float)-1.15882;
                Test.instanceCount = -90;
                Test.instanceCount = Test.instanceCount;
                i22 = i22;
            }
            i21 <<= i20;
            break;
        }
        i21 >>= Test.iFld;
        for (i23 = 2; i23 < 308; ++i23) {
            try {
                i22 = (i24 / -889223542);
                i21 = (-164 % i23);
                Test.iArrFld[i23 - 1] = (i21 / 1711770017);
            } catch (ArithmeticException a_e) {}
        }
        for (i25 = 9; 148 > i25; i25++) {
            for (i27 = i25; 180 > i27; i27++) {
                Test.instanceCount *= Test.byFld;
                s1 *= (short)d;
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("d s1 i20 = " + Double.doubleToLongBits(d) + "," + s1 + "," + i20);
        FuzzerUtils.out.println("i21 f3 i22 = " + i21 + "," + Float.floatToIntBits(f3) + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.byFld Test.sArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.byFld + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
