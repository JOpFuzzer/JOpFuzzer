// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-24172L;
    public static short sFld=-22262;
    public static volatile long lFld=252L;
    public static double dFld=1.13903;
    public static int iFld=-218;
    public boolean bFld=true;
    public byte byFld=-42;
    public static float fFld=-76.616F;
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static double dArrFld[][]=new double[N][N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 37L);
        FuzzerUtils.init(Test.iArrFld, 22441);
        FuzzerUtils.init(Test.dArrFld, -2.74924);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public void vMeth2(long l1, int i2, int i3) {

        int i4=-29744, i5=2513, i6=-55, i7=-11, iArr[]=new int[N];
        byte by1=-34, byArr[]=new byte[N];
        float f=-67.629F, fArr[]=new float[N];
        boolean b=true;

        FuzzerUtils.init(iArr, 24175);
        FuzzerUtils.init(byArr, (byte)-53);
        FuzzerUtils.init(fArr, -2.620F);

        Test.lArrFld[(i2 >>> 1) % N] *= i3;
        i3 += (int)Test.instanceCount;
        for (i4 = 16; i4 < 258; i4++) {
            try {
                iArr[i4] = (iArr[i4 + 1] % -5380);
                i3 = (i4 / -142);
                iArr[i4] = (i4 % 1401915268);
            } catch (ArithmeticException a_e) {}
            i3 *= Test.sFld;
            i3 -= (int)Test.lFld;
            i3 += (i4 | Test.instanceCount);
            by1 -= (byte)Test.dFld;
            for (i6 = 1; i6 < 7; ++i6) {
                Test.dFld = 6;
                i5 <<= -1387;
                i3 += (i6 ^ (long)f);
                i5 = i7;
                fArr[i6 - 1] = f;
            }
            b = true;
        }
        vMeth2_check_sum += l1 + i2 + i3 + i4 + i5 + by1 + i6 + i7 + Float.floatToIntBits(f) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth1(int i, int i1) {

        float f1=0.606F, f2=2.735F;
        int i8=-122, i9=-57194, i10=-16581, i11=-93, i12=63780;
        byte by2=-61;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-31932);

        Test.lArrFld[(-1927 >>> 1) % N] = ((-(-5 * i)) + (-i));
        vMeth2(Test.instanceCount, i1, 8602);
        i >>>= (int)Test.lFld;
        if (bFld) {
            Test.iArrFld[(i >>> 1) % N] = i;
            Test.dArrFld[(Test.iFld >>> 1) % N][(i1 >>> 1) % N] += Test.instanceCount;
            for (f1 = 16; f1 < 329; f1++) {
                for (i9 = 1; i9 < 5; i9++) {
                    i1 -= i;
                    Test.instanceCount += (i9 * Test.lFld);
                    switch ((((-14 >>> 1) % 7) * 5) + 108) {
                    case 124:
                        for (i11 = 1; 2 > i11; ++i11) {
                            Test.instanceCount += -79;
                            f2 = 116.510F;
                            by2 -= (byte)i11;
                        }
                    case 143:
                        i -= (int)f2;
                        break;
                    case 122:
                        f2 *= i1;
                        break;
                    case 132:
                        Test.iArrFld[(int)(f1)] = (int)Test.lFld;
                    case 119:
                    case 112:
                        sArr[i9 + 1] += (short)-2.102500;
                    case 131:
                        if (bFld) continue;
                        break;
                    }
                }
            }
        } else if (bFld) {
            Test.iArrFld[(i10 >>> 1) % N] -= (int)f1;
        }
        vMeth1_check_sum += i + i1 + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f2) +
            by2 + FuzzerUtils.checkSum(sArr);
    }

    public void vMeth(long l) {

        long l2=39823L;
        float f3=1.386F;
        int i13=47942, i14=38;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.48228);

        for (double d : dArr) {
            vMeth1(Test.iFld, Test.iFld);
            l2 = 4;
            do {
                Test.iFld += Test.iFld;
                Test.iArrFld[(int)(l2)] += Test.iFld;
                Test.iArrFld = Test.iArrFld;
                d = f3;
                Test.iFld -= Test.iFld;
                for (i13 = 1; i13 < 1; i13 += 3) {
                    byFld >>>= (byte)i13;
                    bFld = bFld;
                }
                Test.lArrFld[(int)(l2 - 1)] -= Test.iFld;
                Test.iFld -= 55118;
                bArrFld[(int)(l2 + 1)] = bFld;
                Test.iFld >>= i13;
            } while (--l2 > 0);
        }
        vMeth_check_sum += l + l2 + Float.floatToIntBits(f3) + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i15=64, i16=-88, i17=11, i18=1, i19=9126;
        long l3=-951L, l4=6736452524398304498L;
        double d1=0.118831;

        vMeth(Test.instanceCount);
        Test.iFld <<= Test.iFld;
        Test.lFld -= 242L;
        for (i15 = 9; i15 < 292; ++i15) {
            Test.lFld += i15;
            Test.iFld = i15;
            Test.iFld = Test.iFld;
            Test.iFld += (i15 * i15);
            i16 *= (int)-8888248132843835250L;
            for (i17 = 89; i17 > 5; i17--) {
                Test.lArrFld[(i17 >>> 1) % N] = l3;
                for (d1 = 2; d1 > 1; d1--) {
                    Test.iArrFld[(int)(d1)] += (int)45.42174;
                    Test.iArrFld[(int)(d1 - 1)] <<= i19;
                    l3 = l3;
                    i18 >>= i17;
                    i19 = i19;
                    Test.iFld >>= i17;
                    Test.lArrFld = Test.lArrFld;
                    i19 *= i19;
                    Test.iFld += -21890;
                }
                i16 += i15;
                l3 = l4;
                i18 *= (int)Test.fFld;
                Test.dFld *= Test.sFld;
                i19 += (int)2.565F;
                i16 >>= i15;
                i19 = i15;
            }
            i16 >>= Test.iFld;
        }
        Test.dFld = i15;

        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 l3 d1 = " + i18 + "," + l3 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i19 l4 = " + i19 + "," + l4);

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.lFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.lFld);
        FuzzerUtils.out.println("Test.dFld Test.iFld bFld = " + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld +
            "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("byFld Test.fFld Test.lArrFld = " + byFld + "," + Float.floatToIntBits(Test.fFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.dArrFld bArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
