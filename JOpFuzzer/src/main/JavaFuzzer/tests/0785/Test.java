// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public static float fFld=-123.973F;
    public static double dFld=0.116798;
    public static byte byFld=40;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(long l2, int i9) {

        int i10=-253, i11=-94, i12=-12, i13=46696, i14=17685, i15=26150, i16=-40960, iArr1[]=new int[N];
        short s=14359;

        FuzzerUtils.init(iArr1, 14);

        for (i10 = 8; i10 < 138; ++i10) {
            Test.fFld -= i10;
            for (i12 = i10; i12 < 12; ++i12) {
                Test.dFld += i12;
                i14 = 1;
                while (++i14 < 1) {
                    Test.fFld += (i14 * i14);
                    i11 <<= -81;
                    i9 += i13;
                    i9 = i13;
                    i11 >>= i9;
                }
                i9 = s;
            }
            i9 += i14;
        }
        for (i15 = 259; i15 > 3; i15--) {
            i11 += (((i15 * Test.fFld) + i9) - i9);
            try {
                iArr1[i15] = (i16 % iArr1[i15 - 1]);
                i9 = (742338121 % i14);
                i16 = (i10 / 1244828370);
            } catch (ArithmeticException a_e) {}
        }
        long meth_res = l2 + i9 + i10 + i11 + i12 + i13 + i14 + s + i15 + i16 + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(long l1) {

        int i8=27459, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -8);

        iArr[(i8 >>> 1) % N] = (int)(dMeth(Test.instanceCount, i8) + i8);
        long meth_res = l1 + i8 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i5) {

        int i6=-11, i7=-5, i17=5, i18=213, i19=4, i20=-181, i21=41056, i22=-14, iArr2[]=new int[N];
        long l3=2535L;
        boolean b=false;
        short s1=-8061;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -69.595F);
        FuzzerUtils.init(iArr2, -2);

        for (i6 = 14; i6 < 275; ++i6) {
            Test.fFld = (i5 * (iMeth(4L) % 9));
            i7 = Test.byFld;
        }
        for (i17 = 5; i17 < 135; i17++) {
            i18 = (int)l3;
            Test.fFld *= i7;
            b = b;
            Test.dFld = s1;
            i7 *= i18;
            i7 = i18;
            for (i19 = 1; i19 < 12; i19++) {
                for (i21 = 1; 2 > i21; i21++) {
                    if (b) {
                        Test.dFld += i20;
                        Test.fFld = i18;
                    } else if (true) {
                        fArr[i19 + 1] *= i17;
                    } else if (b) {
                        iArr2[i19] = i5;
                        vMeth_check_sum += i5 + i6 + i7 + i17 + i18 + l3 + (b ? 1 : 0) + s1 + i19 + i20 + i21 + i22 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
                        return;
                    } else {
                        l3 += i5;
                        vMeth_check_sum += i5 + i6 + i7 + i17 + i18 + l3 + (b ? 1 : 0) + s1 + i19 + i20 + i21 + i22 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + i17 + i18 + l3 + (b ? 1 : 0) + s1 + i19 + i20 + i21 + i22 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-5, i1=188, i2=6, i3=-23183, i4=-21870, i23=-5, i24=75, i25=13, i26=29967, i27=22502, i28=50048,
            i29=-20999;
        byte by=119;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -149L);

        for (long l : lArr) {
            for (i = 63; i > 1; i--) {
                Test.fFld = (((-(lArr[i - 1] += (long)Test.fFld)) - lArr[i]) * (iArrFld[i - 1] - (Test.instanceCount -
                    Test.instanceCount)));
                for (i2 = 1; i2 < 2; i2++) {
                    i3 *= (int)((iArrFld[i + 1] + (i1 + l)) - ((i3 & l) / ((long)(Math.sqrt(Test.dFld)) | 1)));
                }
                i3 -= (int)(Test.fFld + (i3++));
                l += i;
                i4 >>= (--i3);
                i3 /= (int)(((long)(((235 - (by + i)) - Math.max(i4, i1)) + ((i2 * i4) - (-2.834F + (i + i4))))) | 1);
            }
            vMeth(i4);
            try {
                i3 = (i3 % 60493);
                i4 = (-53176 / i3);
                i1 = (i4 % i);
            } catch (ArithmeticException a_e) {}
            iArrFld[(i2 >>> 1) % N] *= (int)l;
            i1 >>>= i3;
            iArrFld = iArrFld;
            i3 = i3;
        }
        i1 -= (int)101.559F;
        for (i23 = 3; i23 < 164; i23++) {
            i4 += i23;
            if (b1) continue;
            for (i25 = 156; i25 > 5; i25--) {
                i1 ^= i3;
            }
            for (i27 = i23; i27 < 156; ++i27) {
                lArr[i27] = i27;
                iArrFld = iArrFld;
                if (b1) {
                    i1 += i;
                    i29 -= i26;
                } else if (b1) {
                    iArrFld[i23 - 1] -= (int)Test.instanceCount;
                    i3 = i26;
                    i24 += (int)1.669F;
                } else {
                    lArr[i27 - 1] += -12;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 by = " + i3 + "," + i4 + "," + by);
        FuzzerUtils.out.println("i23 i24 b1 = " + i23 + "," + i24 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 lArr = " + i28 + "," + i29 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld iArrFld = " + Test.byFld + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
