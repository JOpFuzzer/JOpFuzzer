// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=95L;
    public static int iFld=-21112;
    public static float fFld=0.1002F;
    public volatile int iFld1=13795;
    public static byte byFld=-103;
    public boolean bFld=true;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 33.951F);
        FuzzerUtils.init(Test.lArrFld, 94L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4, int i5, double d1) {

        long l=-2792573881L;
        int i6=7455, i7=43405, i8=9, i9=-4040, i10=-366, i11=-8, i12=-2, iArr2[]=new int[N];
        byte by=-114;

        FuzzerUtils.init(iArr2, -59);

        for (l = 7; 142 > l; l++) {
            for (i7 = 1; i7 < 12; ++i7) {
                try {
                    Test.iFld = (-44770 / i7);
                    i6 = (iArr2[i7] % i4);
                    i8 = (Test.iFld / 1987749417);
                } catch (ArithmeticException a_e) {}
                i8 += (((i7 * i6) + by) - Test.fFld);
            }
            for (i9 = 1; 12 > i9; i9++) {
                Test.instanceCount = 32022;
                for (i11 = 1; i11 < 2; i11++) {
                    Test.instanceCount = (long)Test.fFld;
                    i10 += i8;
                    i5 += i11;
                    Test.instanceCount += (i11 * i11);
                    i6 += (i11 * i12);
                    Test.instanceCount = i6;
                    if (i11 != 0) {
                        vMeth_check_sum += i4 + i5 + Double.doubleToLongBits(d1) + l + i6 + i7 + i8 + by + i9 + i10 +
                            i11 + i12 + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                }
                i12 *= (int)l;
            }
        }
        vMeth_check_sum += i4 + i5 + Double.doubleToLongBits(d1) + l + i6 + i7 + i8 + by + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr2);
    }

    public static byte byMeth(double d, int i3) {

        int i13=54804, i14=8, i15=108, i16=-9604, i17=14, i18=-1, iArr3[]=new int[N];
        float f=-37.265F;
        byte by1=103, byArr[]=new byte[N];

        FuzzerUtils.init(iArr3, 9);
        FuzzerUtils.init(byArr, (byte)-69);

        vMeth(i13, 33327, 0.101489);
        iArr3[(i13 >>> 1) % N] ^= -7586;
        Test.fArrFld[(Test.iFld >>> 1) % N] = 68.191F;
        i14 = 1;
        while (++i14 < 187) {
            Test.iFld = (int)Test.instanceCount;
            for (i15 = 1; i15 < 9; i15++) {
                for (i17 = i14; i17 < 2; ++i17) {
                    f = i14;
                    byArr[i15] += (byte)i14;
                    i18 += (i17 * i17);
                    try {
                        i3 = (i13 % i18);
                        i16 = (-153 % i15);
                        iArr3[i17 + 1] = (i13 % iArr3[i14 - 1]);
                    } catch (ArithmeticException a_e) {}
                }
                i18 += (i15 * i3);
                if (false) continue;
                Test.instanceCount -= (long)Test.fFld;
                d *= by1;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i3 + i13 + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f) +
            by1 + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(byArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vSmallMeth() {

        double d2=-116.126401;
        int iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr1, -212);

        iArr1[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] -= byMeth(d2, Test.iFld);
        vSmallMeth_check_sum += Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=56528, i2=-4, i19=-185, i20=10, iArr[][]=new int[N][N], iArr4[]=new int[N];
        long l1=-62L;
        double d3=-2.91982;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, -154);
        FuzzerUtils.init(iArr4, -153);

        i = 1;
        while (++i < 158) {
            int i1=-3;
            if ((bArr[i] = ((i1--) < (iArr[i - 1][i - 1] *= 10))) == (((i1 >>> i) >> -5L) >=
                Integer.reverseBytes((int)(i1 - 12L)))) {
                i1 -= (int)((--i1) + ((i * Test.instanceCount) - (Test.instanceCount++)));
                i1 += i;
            }
            i1 += i;
            i2 = 1;
            do {
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth();
                iFld1 = (int)Test.instanceCount;
                for (l1 = 1; l1 < 1; l1++) {
                    switch ((((Test.iFld >>> 1) % 2) * 5) + 26) {
                    case 27:
                        Test.byFld += (byte)(-191 + (l1 * l1));
                        Test.fFld += (((l1 * Test.fFld) + i) - iFld1);
                        Test.instanceCount += l1;
                        break;
                    case 29:
                        Test.fFld = i19;
                        iArr4 = iArr4;
                        switch ((i % 8) + 124) {
                        case 124:
                            Test.lArrFld[i2] >>= Test.iFld;
                            if (bFld) break;
                            i1 += (int)(l1 * l1);
                            iFld1 *= (int)l1;
                            break;
                        case 125:
                            i20 += (int)(((l1 * i1) + l1) - Test.byFld);
                            d3 = i;
                            Test.instanceCount += (long)-9.88046;
                            break;
                        case 126:
                            i19 += (int)d3;
                            try {
                                i20 = (i % i);
                                i19 = (i1 % 497777240);
                                i19 = (i20 % -17128);
                            } catch (ArithmeticException a_e) {}
                            Test.lArrFld[i - 1] >>= -319554892L;
                            i1 /= (int)((long)(Test.fFld) | 1);
                            break;
                        case 127:
                            i20 += i1;
                            break;
                        case 128:
                            i19 += i1;
                            i1 = i;
                            break;
                        case 129:
                            iArr[i + 1][(int)(l1 + 1)] = Test.iFld;
                            break;
                        case 130:
                            bArr[i2 + 1] = bFld;
                            break;
                        case 131:
                            i20 += (int)l1;
                            break;
                        default:
                            Test.byFld += (byte)(((l1 * l1) + i19) - l1);
                        }
                    }
                }
            } while (++i2 < 159);
        }

        FuzzerUtils.out.println("i i2 l1 = " + i + "," + i2 + "," + l1);
        FuzzerUtils.out.println("i19 i20 d3 = " + i19 + "," + i20 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("bArr iArr iArr4 = " + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(iArr) +
            "," + FuzzerUtils.checkSum(iArr4));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("iFld1 Test.byFld bFld = " + iFld1 + "," + Test.byFld + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fArrFld Test.lArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  byMeth ->  byMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth byMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
