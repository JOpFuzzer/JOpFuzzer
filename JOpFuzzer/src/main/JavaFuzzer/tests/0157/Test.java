// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static byte byFld=-39;
    public short sFld=25246;
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 136L);
        FuzzerUtils.init(Test.dArrFld, -2.5504);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(double d1, int i11, int i12) {

        int i13=46749, i14=12, i16=3757, i17=-14337, i18=-62487, iArr2[]=new int[N];
        float f2=85.615F;
        boolean b1=false;
        double d2=2.67095, dArr[]=new double[N];

        FuzzerUtils.init(iArr2, -10);
        FuzzerUtils.init(dArr, -1.21913);

        i13 = 334;
        do {
            Test.instanceCount = Test.instanceCount;
        } while (--i13 > 0);
        i14 = 1;
        while ((i14 += 2) < 186) {
            i11 += i14;
            i11 *= 29030;
            f2 = Test.instanceCount;
            i12 += (((i14 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
            i16 = 17;
            do {
                dArr[i16 - 1] = i17;
                if (b1) break;
                i12 = i12;
                f2 += (1220946807552792302L + (i16 * i16));
                for (d2 = 1; d2 < 3; d2++) {
                    i18 = Test.byFld;
                    iArr2 = iArr2;
                }
            } while ((i16 -= 3) > 0);
        }
        long meth_res = Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 + Float.floatToIntBits(f2) + i16 + i17 +
            (b1 ? 1 : 0) + Double.doubleToLongBits(d2) + i18 + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(int i4, long l) {

        int i5=141, i6=88, i7=12411, i8=160, i9=-8, i10=13848, i19=0, iArr1[]=new int[N];
        boolean b=true;
        double d=59.96419;
        float f1=2.845F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -12);
        FuzzerUtils.init(lArr, -8012858113930913517L);

        for (i5 = 377; i5 > 11; i5 -= 3) {
            for (i7 = 1; i7 < 13; i7++) {
                for (i9 = 1; i9 < 2; ++i9) {
                    if (b = (((i8 <<= -238) * (Test.instanceCount - Test.byFld)) < (iArr1[(i5 >>> 1) % N]++))) break;
                    i6 = (int)(-(i8 - (l >>>= i10)));
                    i4 += (int)(Test.instanceCount++);
                    switch (((i5 % 2) * 5) + 3) {
                    case 12:
                        lArr = (lArr = (lArr = (lArr = lArr)));
                        if (i9 != 0) {
                            vMeth_check_sum += i4 + l + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) +
                                Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i19 +
                                FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
                            return;
                        }
                        break;
                    case 7:
                        b = (!((d >= f1) && bMeth(d, i10, i4)));
                        iArr1[i9 - 1] -= 27348;
                        try {
                            i4 = (i19 % i8);
                            i6 = (-38984 / i6);
                            i4 = (i6 / iArr1[i7 + 1]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    }
                    iArr1[i9] >>= (int)l;
                    iArr1[i5 - 1] -= (int)-64.104526;
                    iArr1[i9 - 1] *= -13;
                }
            }
        }
        vMeth_check_sum += i4 + l + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f1) + i19 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        int i3=-232, iArr[]=new int[N];
        byte by=62;
        short s=-30287;
        float f=-2.823F;

        FuzzerUtils.init(iArr, 47644);

        i3 &= (int)(Test.instanceCount -= (by++));
        iArr[(-4 >>> 1) % N] *= (int)((iArr[(i3 >>> 1) % N]--) - ((-39319 / ((s - i3) | 1)) / (((long)(f - i3)) | 1)));
        vMeth(i3, -7L);
        long meth_res = i3 + by + s + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=171, i1=126, i2=-181, i20=-12854, i21=-9, i22=220, i23=366, i24=212, iArr3[][]=new int[N][N];
        float f3=-80.941F;
        boolean b2=false;
        double d3=68.33976;

        FuzzerUtils.init(iArr3, 7);

        for (i = 5; i < 389; i++) {
            i2 = 66;
            do {
                iMeth();
                for (i20 = 1; i20 < 1; i20++) {
                    i21 += (i20 * Test.instanceCount);
                    iArr3[i2][i + 1] = i20;
                    i1 = (int)f3;
                    i21 *= i22;
                    Test.lArrFld = Test.lArrFld;
                    Test.instanceCount = Test.instanceCount;
                    i22 += (int)Test.instanceCount;
                    if (b2) continue;
                    d3 *= -27794;
                    i1 += (((i20 * Test.instanceCount) + i1) - Test.instanceCount);
                }
                iArr3[i2][i + 1] = 7;
                i22 = (int)Test.instanceCount;
                i22 += (59975 + (i2 * i2));
                Test.instanceCount -= i;
                b2 = b2;
                i21 -= i;
                iArr3[i2] = iArr3[i - 1];
            } while (--i2 > 0);
            sFld += (short)(i * i);
            i1 = i20;
            switch (((i21 >>> 1) % 7) + 57) {
            case 57:
                for (i23 = 66; i23 > i; i23--) {
                    i21 = -10;
                    i22 += i23;
                    b2 = b2;
                    i21 >>= -9;
                    Test.instanceCount *= (long)f3;
                }
                break;
            case 58:
                i24 ^= 4;
            case 59:
                Test.dArrFld[i - 1] *= i23;
            case 60:
                i22 = (int)Test.instanceCount;
                break;
            case 61:
                Test.byFld <<= (byte)3;
            case 62:
                Test.instanceCount >>>= i21;
            case 63:
                i21 += (i * i);
                break;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i20 i21 f3 = " + i20 + "," + i21 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i22 b2 d3 = " + i22 + "," + (b2 ? 1 : 0) + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i23 i24 iArr3 = " + i23 + "," + i24 + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld sFld = " + Test.instanceCount + "," + Test.byFld + "," +
            sFld);
        FuzzerUtils.out.println("Test.lArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
