// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=4840L;
    public static double dFld=-39.25698;
    public static boolean bFld=true;
    public float fFld=-119.399F;
    public byte byFld=-22;
    public int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.889F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7) {

        int i8=7, i9=-2, i10=-200, i11=3, i12=63, i13=-165, iArr[]=new int[N];
        float f1=-95.733F;
        short s=29730;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -20);
        FuzzerUtils.init(lArr, -1157783364L);

        for (i8 = 7; i8 < 339; i8++) {
            for (i10 = 1; 5 > i10; i10++) {
                i11 += -9;
                for (i12 = 1; 2 > i12; i12++) {
                    boolean b=true;
                    f1 += (((i12 * i13) + i11) - s);
                    i11 += i12;
                    iArr[i12] = i6;
                    lArr[i8 - 1] -= i12;
                    i11 *= -26;
                    if (b) break;
                    i7 = (int)Test.instanceCount;
                }
                i7 -= i6;
                i6 += (i10 * i10);
                i11 = 7;
                i6 -= (int)f1;
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) + s +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(float f, int i2, int i3) {

        int i4=0, i5=-22880, i14=-106, i15=-56, i16=-37, iArr1[]=new int[N];
        long l=28623L, lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -1472914891263678159L);
        FuzzerUtils.init(iArr1, -1);

        for (i4 = 8; i4 < 319; i4++) {
            i3 += (--i3);
            vMeth1(-11, i5);
            Test.instanceCount += -5;
            Test.instanceCount += i14;
            for (l = 5; 1 < l; l--) {
                i16 = 1;
                while ((i16 += 3) < 2) {
                    i15 -= (int)1.792F;
                    Test.instanceCount += (long)-31.99383;
                }
                lArr1 = FuzzerUtils.long1array(N, (long)-3245374081L);
                i15 <<= 208;
                Test.dFld += i16;
                Test.instanceCount -= i15;
                try {
                    i2 = (iArr1[i4] % iArr1[(int)(l - 1)]);
                    i15 = (i4 / -56337);
                    i2 = (i4 % 19929);
                } catch (ArithmeticException a_e) {}
            }
            i2 >>>= i4;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + i14 + l + i15 + i16 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(double d) {

        float f2=85.563F;
        int i17=-156, i19=14, i20=5, i21=-4, i22=10, i23=-98, iArr2[]=new int[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr2, 8);
        FuzzerUtils.init(bArr, true);

        vMeth(f2, i17, -5);
        i17 <<= i17;
        Test.instanceCount -= i17;
        for (int i18 : iArr2) {
            for (i19 = 1; i19 < 4; ++i19) {
                byte by=0;
                Test.instanceCount -= i18;
                i20 += by;
            }
            if (Test.bFld) break;
            f2 += i20;
            d = f2;
            for (i21 = 1; i21 < 4; i21++) {
                if (Test.bFld) continue;
                i23 = 1;
                while (++i23 < 2) {
                    bArr[i23] = Test.bFld;
                    Test.instanceCount = Test.instanceCount;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i17 + i19 + i20 + i21 + i22 + i23 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=62145, i1=4169, i24=6, i25=10, i26=-26295, i27=-5;
        double d1=0.89504;
        boolean b1=true;
        long lArr2[][]=new long[N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr2, 86L);
        FuzzerUtils.init(byArr, (byte)127);

        for (i = 16; i < 288; ++i) {
            i1 -= iMeth(Test.dFld);
            switch (((i % 9) * 5) + 123) {
            case 164:
                switch ((i % 5) + 76) {
                case 76:
                    i1 += i;
                    if (Test.bFld) {
                        i1 += i1;
                        Test.instanceCount += i;
                        i1 += i;
                    } else {
                    }
                    break;
                case 77:
                    i1 += i;
                    break;
                case 78:
                    for (i24 = 92; i24 > 5; i24 -= 2) {
                        if (b1) {
                            for (d1 = 1; d1 < 3; ++d1) {
                                i1 += i24;
                                i25 >>= i1;
                                fFld += (float)d1;
                                i26 %= (int)(Test.instanceCount | 1);
                                lArr2[(int)(d1 + 1)][i + 1] *= i25;
                                switch ((int)(((d1 % 8) * 5) + 104)) {
                                case 124:
                                    i25 = (int)fFld;
                                    iArrFld[(int)(d1 - 1)] = i25;
                                    switch (((i25 >>> 1) % 1) + 20) {
                                    case 20:
                                        i25 += (int)d1;
                                        break;
                                    default:
                                        Test.instanceCount *= Test.instanceCount;
                                        switch (((i24 % 6) * 5) + 116) {
                                        case 141:
                                            i25 += -9700;
                                            break;
                                        case 139:
                                            i1 = -11;
                                            break;
                                        case 146:
                                            try {
                                                i26 = (-35971 % i1);
                                                i25 = (-2027666916 % i24);
                                                i26 = (-2009288443 % iArrFld[(int)(d1 - 1)]);
                                            } catch (ArithmeticException a_e) {}
                                            i1 *= i27;
                                            i25 -= i26;
                                            break;
                                        case 130:
                                            i1 += (int)Test.instanceCount;
                                            break;
                                        case 128:
                                            byArr[(int)(d1)] *= (byte)i26;
                                            break;
                                        case 140:
                                            i1 *= i1;
                                            break;
                                        default:
                                            Test.dFld += i24;
                                        }
                                    }
                                    break;
                                case 125:
                                    i1 += (int)(((d1 * Test.instanceCount) + i24) - i1);
                                    break;
                                case 135:
                                    if (Test.bFld) break;
                                    break;
                                case 132:
                                    i26 += i24;
                                    break;
                                case 128:
                                    i25 -= (int)Test.instanceCount;
                                    break;
                                case 141:
                                    i27 += (int)(((d1 * i) + i24) - i1);
                                    break;
                                case 120:
                                    iArrFld = iArrFld;
                                    break;
                                case 131:
                                    i26 %= (int)336819917277717927L;
                                    break;
                                }
                            }
                        } else {
                            Test.instanceCount = byFld;
                        }
                    }
                    break;
                case 79:
                    if (Test.bFld) break;
                    break;
                case 80:
                    iArrFld[i - 1] += i24;
                    break;
                default:
                    fFld += -224;
                }
                break;
            case 131:
                Test.fArrFld[i] = (float)-2.27552;
                break;
            case 139:
                try {
                    i27 = (-74 / iArrFld[i + 1]);
                    iArrFld[i + 1] = (i26 % i26);
                    i1 = (i25 / 314610788);
                } catch (ArithmeticException a_e) {}
            case 138:
                try {
                    i25 = (-57192 % i27);
                    i25 = (i1 / 188);
                    i1 = (i25 / i);
                } catch (ArithmeticException a_e) {}
                break;
            case 133:
                i1 += i;
            case 161:
                Test.instanceCount += i25;
                break;
            case 163:
            case 145:
                byFld = (byte)Test.instanceCount;
                break;
            case 149:
                Test.instanceCount = Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i i1 i24 = " + i + "," + i1 + "," + i24);
        FuzzerUtils.out.println("i25 d1 i26 = " + i25 + "," + Double.doubleToLongBits(d1) + "," + i26);
        FuzzerUtils.out.println("i27 b1 lArr2 = " + i27 + "," + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("fFld byFld iArrFld = " + Float.floatToIntBits(fFld) + "," + byFld + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
