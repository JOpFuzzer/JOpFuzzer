// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8322L;
    public static double dFld=-44.94767;
    public static int iFld=-7486;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 1);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4) {

        boolean b=false;
        int i5=138, i6=-3, i7=13, i8=211;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3406350180L);

        b = b;
        i4 = i4;
        for (i5 = 20; i5 < 373; i5++) {
            for (i7 = 1; i7 < 5; ++i7) {
                switch ((i7 % 1) + 28) {
                case 28:
                }
                lArr[i7 - 1] >>= i6;
                i4 += (i7 | i4);
            }
            i8 >>>= i7;
            if (i6 != 0) {
                vMeth_check_sum += i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(lArr);
                return;
            }
            Test.instanceCount = i6;
            i4 >>>= i5;
            if (b) {
                i6 -= i7;
                i4 *= i7;
                lArr[(i6 >>> 1) % N] = 0;
            } else {
                i6 = (int)-105.578F;
            }
        }
        vMeth_check_sum += i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth1() {

        int i9=47079, i10=-28125, i11=235, i12=11, i13=13, i14=-40076;
        boolean b1=false;
        byte by=42;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)12689);

        vMeth(-58589);
        i9 -= i9;
        sArr = sArr;
        b1 = b1;
        for (i10 = 1; 235 > i10; i10 += 2) {
            switch (((i10 % 10) * 5) + 115) {
            case 129:
                Test.instanceCount = i11;
                break;
            case 119:
                Test.iArrFld[i10] *= 1;
                i9 += i10;
                break;
            case 165:
                i12 = 1;
                while (++i12 < 13) {
                    i9 >>= (int)Test.instanceCount;
                }
                Test.iArrFld[(-28 >>> 1) % N] = (int)Test.instanceCount;
                break;
            case 118:
                for (i13 = 1; i13 < 13; i13 += 3) {
                    by -= (byte)-9;
                    i9 *= (int)Test.instanceCount;
                }
                break;
            case 125:
                i11 = i11;
            case 124:
                i9 += i10;
                break;
            case 149:
                Test.dFld += -149;
                break;
            case 144:
                i14 = i11;
                break;
            case 116:
                Test.instanceCount += i10;
                break;
            case 156:
                i14 += (((i10 * i14) + i13) - i9);
                break;
            default:
                Test.instanceCount <<= Test.instanceCount;
            }
        }
        long meth_res = i9 + (b1 ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + by + FuzzerUtils.checkSum(sArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2, int i3) {

        double d=-57.18485;
        int i15=14, i16=-6134, i17=58410, i18=37367, i19=-2;
        float f=-1.552F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 4719947256935372565L);

        Test.iArrFld[(i1 >>> 1) % N] *= ((i1 + iMeth1()) >> i2);
        for (d = 5; 394 > d; ++d) {
            for (i16 = (int)(d); 4 > i16; i16++) {
                lArr1[(int)(d)] -= 44824;
                i1 = i1;
                for (i18 = 1; i18 < 1; i18++) {
                    f += i18;
                    if (false) break;
                    i15 = i1;
                    Test.iFld ^= i19;
                    f -= Test.iFld;
                    Test.iArrFld[i16] += i17;
                    i3 |= i15;
                    Test.iFld *= (int)f;
                    f = Test.iFld;
                }
            }
        }
        long meth_res = i1 + i2 + i3 + Double.doubleToLongBits(d) + i15 + i16 + i17 + i18 + i19 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=19065, i20=-11, i21=-226, i22=148, i23=7, i24=0, i25=51, i26=6542, i27=2, iArr[]=new int[N];
        byte by1=8;
        short s=-3491;
        boolean b2=true, bArr[]=new boolean[N];
        float f1=2.222F;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(iArr, 28735);
        FuzzerUtils.init(lArr2, 14L);
        FuzzerUtils.init(bArr, false);

        i = iMeth(Test.iFld, -229, 4);
        i20 = 1;
        while (++i20 < 215) {
            i21 = 1;
            do {
                by1 = (byte)s;
                switch ((i20 % 7) + 62) {
                case 62:
                    Test.iFld += (i21 * i21);
                    for (i22 = 1; i22 < 1; i22++) {
                        iArr[i22 - 1] += by1;
                        i += (i22 * i22);
                        by1 *= (byte)Test.instanceCount;
                        i23 <<= i21;
                        b2 = b2;
                        Test.instanceCount >>= -29956;
                        lArr2[i20][i22 - 1] += -35676;
                        s = (short)Test.iFld;
                        Test.iFld -= (int)Test.instanceCount;
                    }
                    b2 = true;
                    break;
                case 63:
                    by1 += (byte)i22;
                    Test.iFld += i20;
                    Test.iArrFld[i21 + 1] <<= i22;
                    for (i24 = 1; i24 < 1; i24++) {
                        Test.dFld += -128;
                    }
                case 64:
                    i *= i22;
                    i25 *= (int)Test.instanceCount;
                    switch (((i21 % 2) * 5) + 36) {
                    case 42:
                        for (i26 = 1; i26 < 1; i26++) {
                            f1 = 244;
                            bArr[i21 - 1] = b2;
                        }
                        b2 = b2;
                        break;
                    case 46:
                        i += i21;
                        break;
                    }
                    break;
                case 65:
                    Test.dFld += s;
                case 66:
                case 67:
                    bArr[i21 + 1] = b2;
                    break;
                case 68:
                    i27 += (int)Test.instanceCount;
                    break;
                default:
                    i25 += (i21 * i21);
                }
            } while (++i21 < 117);
        }

        FuzzerUtils.out.println("i i20 i21 = " + i + "," + i20 + "," + i21);
        FuzzerUtils.out.println("by1 s i22 = " + by1 + "," + s + "," + i22);
        FuzzerUtils.out.println("i23 b2 i24 = " + i23 + "," + (b2 ? 1 : 0) + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("f1 iArr lArr2 = " + Float.floatToIntBits(f1) + "," + FuzzerUtils.checkSum(iArr) + ","
            + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
