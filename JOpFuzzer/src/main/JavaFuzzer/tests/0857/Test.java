// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static int iFld=37565;
    public static byte byFld=99;
    public static long lFld=-152L;
    public static long lArrFld[]=new long[N];
    public static volatile float fArrFld[]=new float[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -249L);
        FuzzerUtils.init(Test.fArrFld, 0.128F);
        FuzzerUtils.init(Test.byArrFld, (byte)-28);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i5=-14, i6=-2, i7=10, i8=24190, i9=29951, i10=28298;
        short s=-6683;
        float f=21.891F;
        boolean b=true;
        double d1=-1.65290;

        for (i5 = 3; 139 > i5; ++i5) {
            for (i7 = 12; i7 > 1; i7 -= 2) {
                Test.instanceCount &= Test.instanceCount;
                Test.instanceCount = s;
                Test.instanceCount += (i7 * i5);
                for (i9 = 1; i9 < 3; i9++) {
                    i8 += (i9 * i9);
                    Test.instanceCount -= i7;
                    Test.fArrFld[i9 - 1] = i7;
                }
                Test.byArrFld[i5] = (byte)i6;
                f += (i7 * i7);
                i10 += (((i7 * i10) + i8) - i7);
                if (b) continue;
                i8 *= (int)d1;
            }
            Test.lArrFld[i5 + 1] = i10;
        }
        long meth_res = i5 + i6 + i7 + i8 + s + i9 + i10 + Float.floatToIntBits(f) + (b ? 1 : 0) +
            Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i11=-205, i12=-30632, i13=128, i14=-9, iArr[]=new int[N];
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.58261);
        FuzzerUtils.init(iArr, 30616);

        Test.lArrFld[(Test.iFld >>> 1) % N] = 14;
        for (double d : dArr) {
            Test.iFld *= iMeth();
            for (i11 = 1; i11 < 4; i11++) {
                Test.iFld += Test.iFld;
                i12 = -59841;
                if (b1) {
                    b1 = b1;
                    Test.iFld += i11;
                    Test.iFld -= i11;
                }
                Test.instanceCount = Test.instanceCount;
                Test.instanceCount &= Test.iFld;
                for (i13 = 1; i13 < 2; ++i13) {
                    iArr[i13 - 1] -= (int)d;
                    Test.instanceCount = Test.iFld;
                }
            }
        }
        vMeth1_check_sum += i11 + i12 + (b1 ? 1 : 0) + i13 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))
            + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, int i1) {

        int i2=5, i3=167, i4=-31, i15=14, i16=-1, i17=-22, iArr1[]=new int[N];
        double d2=0.70044;
        boolean b2=true;
        short s1=16093;
        float f1=17.396F;

        FuzzerUtils.init(iArr1, 70);

        Test.instanceCount -= (Test.instanceCount--);
        i2 = 1;
        do {
            for (i3 = 1; i3 < 6; ++i3) {
                i4 |= i;
            }
            vMeth1();
            for (i15 = 1; i15 < 6; ++i15) {
                d2 += i;
                if (b2) continue;
                i16 += i15;
                i17 = 1;
                do {
                    b2 = b2;
                    iArr1[i2 + 1] = s1;
                    Test.byFld *= (byte)f1;
                    Test.iFld >>= i;
                    if (b2) break;
                } while (++i17 < 2);
            }
        } while (++i2 < 266);
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i15 + i16 + Double.doubleToLongBits(d2) + (b2 ? 1 : 0) + i17 + s1 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i18=-7810, i19=11, i20=11677, i21=-1, i22=-60, i23=166, i24=42360, i25=-56331, iArr2[]=new int[N];
        float f2=-1.425F;
        double d3=1.563;
        short s2=12964;
        boolean b3=false;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr2, -10);
        FuzzerUtils.init(lArr, -244L);

        vMeth(Test.iFld, 82);
        for (i18 = 205; i18 > 8; --i18) {
            f2 += (i18 * i18);
            i19 = (int)f2;
            for (i20 = 5; i20 < 127; i20 += 3) {
                Test.fArrFld[i18 + 1] *= (float)d3;
                i21 -= 35773;
                i21 = i21;
                switch ((i20 % 10) + 64) {
                case 64:
                    for (i22 = i18; 4 > i22; i22++) {
                        i23 += s2;
                        i23 += (int)Test.instanceCount;
                        i19 = i20;
                        Test.fArrFld[i22] += i19;
                        Test.instanceCount += i22;
                        Test.iFld = i19;
                        d3 *= f2;
                    }
                    for (i24 = 1; i24 < 4; i24++) {
                        Test.iFld += (11455 + (i24 * i24));
                        if (b3) {
                            if (b3) break;
                            i23 = (int)d3;
                            switch ((i20 % 7) + 69) {
                            case 69:
                                try {
                                    Test.iFld = (Test.iFld / 200);
                                    i23 = (32390 / iArr2[i24 - 1]);
                                    i25 = (i24 / 23067);
                                } catch (ArithmeticException a_e) {}
                                iArr2[i24 - 1] = (int)-1.350F;
                                i23 -= (int)d3;
                                i23 = i18;
                                break;
                            case 70:
                                f2 *= Test.instanceCount;
                                if (b3) break;
                                break;
                            case 71:
                                lArr = FuzzerUtils.long2array(N, (long)292708323L);
                                break;
                            case 72:
                                d3 *= Test.lFld;
                                break;
                            case 73:
                                i21 += (i24 ^ i25);
                                break;
                            case 74:
                                i25 = i20;
                                break;
                            case 75:
                                i21 += (i24 * i24);
                                break;
                            default:
                                i19 -= (int)d3;
                            }
                        }
                    }
                    break;
                case 65:
                    i23 |= i23;
                    break;
                case 66:
                    i25 -= i19;
                    break;
                case 67:
                    Test.lFld *= (long)f2;
                    break;
                case 68:
                    iArr2[i20 - 1] = i25;
                case 69:
                    i25 = (int)f2;
                    break;
                case 70:
                    i23 = Test.iFld;
                case 71:
                    lArr[i18 - 1][i18] += (long)f2;
                    break;
                case 72:
                    iArr2[i20 + 1] -= i19;
                    break;
                case 73:
                    Test.fArrFld[i18 - 1] += i21;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i18 i19 f2 = " + i18 + "," + i19 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i20 i21 d3 = " + i20 + "," + i21 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i22 i23 s2 = " + i22 + "," + i23 + "," + s2);
        FuzzerUtils.out.println("i24 i25 b3 = " + i24 + "," + i25 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("iArr2 lArr = " + FuzzerUtils.checkSum(iArr2) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.lFld Test.lArrFld Test.fArrFld = " + Test.lFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.byArrFld = " + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
