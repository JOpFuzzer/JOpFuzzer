// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2821259681L;
    public static float fFld=0.162F;
    public static int iFld=-156;
    public static short sFld=972;
    public static double dFld=-32.53308;
    public static int iArrFld[][]=new int[N][N];
    public int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 218);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i9, int i10) {

        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -100.121036);

        i9 = i10;
        dArr[(i9 >>> 1) % N] = 2.379F;
        vMeth2_check_sum += i9 + i10 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i3) {

        int i4=205, i5=-4, i6=53105, i7=-14, i8=-32001, i11=-61279, i12=-46536;
        boolean b=false;
        short sArr[]=new short[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)-25015);
        FuzzerUtils.init(fArr, 116.986F);

        for (i4 = 17; i4 < 313; i4++) {
            switch ((i4 % 5) + 126) {
            case 126:
                if (b) {
                    Test.iFld = (-i5);
                    for (i6 = 1; i6 < 6; i6++) {
                        sArr[i4 + 1] <<= (short)i8;
                        i8 += (-3 + (i6 * i6));
                        Test.iArrFld[i6 + 1][i4] -= (int)(((-(i8--)) - Math.min(i5, Test.iFld)) - Test.dFld);
                        i7 += (int)(Test.fFld * (Test.sFld + (Test.instanceCount * i4)));
                        Test.instanceCount += (i6 + i4);
                        i8 = (int)Test.instanceCount;
                        vMeth2(i4, i7);
                    }
                } else if (b) {
                    for (i11 = 1; i11 < 6; i11++) {
                        fArr[i11] = (float)Test.dFld;
                        Test.dFld = i6;
                    }
                } else if (b) {
                    Test.fFld *= i8;
                }
                break;
            case 127:
                Test.instanceCount = i6;
                break;
            case 128:
                i12 *= (int)2L;
            case 129:
                i12 = (int)Test.dFld;
                break;
            case 130:
                i3 = i12;
            default:
                Test.instanceCount -= (long)Test.fFld;
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i13=-75, i14=52114, i15=5, i16=-5, i17=-28386, i18=-12;
        boolean b1=true;
        float f=-92.391F;
        byte by=63;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -186L);

        Test.iArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] <<= (int)((3 + lArr[(Test.iFld >>> 1) % N]) -
            (++Test.iFld));
        Test.iFld -= Math.abs(-30 - (Test.iFld * Test.sFld));
        Test.iArrFld[(Test.iFld >>> 1) % N][(-1 >>> 1) % N] -= (int)((--Test.iFld) * Test.instanceCount);
        vMeth1(Test.iFld);
        Test.iFld *= Test.sFld;
        for (i13 = 2; i13 < 196; i13++) {
            for (i15 = i13; i15 < 8; ++i15) {
                Test.instanceCount += (((i15 * i14) + Test.instanceCount) - i16);
                if (true) break;
                switch (((i13 % 7) * 5) + 87) {
                case 117:
                    Test.instanceCount += (long)Test.fFld;
                    for (i17 = 1; i17 < 1; i17++) {
                        if (b1) continue;
                        i14 = (int)Test.instanceCount;
                        i18 -= (int)Test.dFld;
                    }
                    break;
                case 101:
                    Test.iFld += (((i15 * i14) + i16) - i18);
                    break;
                case 121:
                    i18 -= i16;
                    break;
                case 88:
                    Test.fFld -= f;
                    break;
                case 91:
                    Test.iArrFld[i13][i13] = i14;
                case 95:
                    Test.iArrFld[i13 - 1][i15 + 1] *= by;
                    break;
                case 122:
                    i18 = Test.iFld;
                    break;
                default:
                    try {
                        Test.iFld = (236 % i13);
                        Test.iArrFld[i15 + 1][i13] = (Test.iArrFld[i13 + 1][i15 + 1] / 4560);
                        Test.iFld = (i15 / 561885724);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth_check_sum += i13 + i14 + i15 + i16 + i17 + i18 + (b1 ? 1 : 0) + Float.floatToIntBits(f) + by +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=2035, i1=-2, i2=145, i19=-216, i20=-248, i21=-8435, i22=-1, i23=7, i24=-21608;
        boolean b2=false;
        long lArr1[]=new long[N];
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(lArr1, 0L);
        FuzzerUtils.init(byArr, (byte)-83);

        i *= i;
        Test.instanceCount = (i++);
        for (i1 = 11; i1 < 294; i1++) {
            Test.fFld += (126.580F + (i1 * i1));
            vMeth();
            Test.iArrFld[i1 - 1] = FuzzerUtils.int1array(N, (int)18312);
            i19 = 1;
            while (++i19 < 89) {
                lArr1 = lArr1;
                if (b2) break;
                switch ((((-15903 >>> 1) % 2) * 5) + 115) {
                case 125:
                    i2 *= i;
                    iArrFld1[i19 + 1][i1 - 1] = i1;
                    Test.iFld += (i19 * i19);
                    break;
                case 120:
                    for (i20 = 1; i20 < 1; i20++) {
                        Test.instanceCount -= Test.instanceCount;
                        if (b2) continue;
                        Test.dFld -= Test.instanceCount;
                        Test.iArrFld[i1][i19 - 1] = -14;
                    }
                    break;
                default:
                    i22 = 1;
                    while (++i22 < 1) {
                        lArr1[i19] *= Test.iFld;
                        byArr[i1 - 1] = byArr[i19];
                    }
                    Test.fFld += i19;
                    i2 -= (int)Test.fFld;
                }
                i2 += (-13143 + (i19 * i19));
                i21 = i1;
                Test.instanceCount >>= i1;
                if (true) continue;
                for (i23 = 1; i23 < 1; i23++) {
                    Test.iFld -= i24;
                    Test.dFld -= i20;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i19 b2 i20 = " + i19 + "," + (b2 ? 1 : 0) + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 lArr1 byArr = " + i24 + "," + FuzzerUtils.checkSum(lArr1) + "," +
            FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld Test.dFld Test.iArrFld = " + Test.sFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iArrFld1 = " + FuzzerUtils.checkSum(iArrFld1));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
