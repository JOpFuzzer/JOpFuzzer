// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public static short sFld=12258;
    public static double dFld=85.54929;
    public static boolean bFld=false;
    public float fFld=-1.196F;
    public long lFld=688495725L;
    public static volatile int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -171);
        FuzzerUtils.init(Test.fArrFld, 0.352F);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i9) {

        float f2=1.585F;
        int i10=-10, i11=-3, i12=10184, i13=14, i14=5;
        long l=6627069491227835286L;

        for (f2 = 225; f2 > 5; f2--) {
            i10 += (int)(((f2 * i10) + i10) - Test.instanceCount);
            i9 ^= i9;
        }
        Test.instanceCount += 83L;
        i10 = 7;
        for (i11 = 133; i11 > 4; i11 -= 2) {
            Test.instanceCount += i10;
            i10 += i9;
            l = 1;
            do {
                for (i13 = 1; i13 < 1; ++i13) {
                    Test.iArrFld[(int)(l)] &= i14;
                    switch ((i11 % 3) + 40) {
                    case 40:
                        Test.sFld = (short)i12;
                        Test.iArrFld[(int)(l - 1)] += -11304;
                        i14 = i13;
                    case 41:
                        Test.dFld = i11;
                        break;
                    case 42:
                        i12 += i13;
                        break;
                    }
                }
            } while (++l < 24);
        }
        long meth_res = i9 + Float.floatToIntBits(f2) + i10 + i11 + i12 + l + i13 + i14;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static boolean bMeth() {

        int i4=-7, i5=-145, i7=56776, i8=36310, i15=-2510, i16=-57;
        double d1=0.4571;
        boolean b=false;

        for (i4 = 11; i4 < 259; ++i4) {
            Test.iArrFld[i4] = (int)(i5 - Test.fArrFld[i4 + 1]);
            d1 = 7;
            do {
                for (i7 = 1; i7 < 1; i7++) {
                    Test.iArrFld[i4] = 36;
                    i8 += (i7 * i7);
                    Test.instanceCount = (long)(182 - fMeth(i5));
                }
            } while (--d1 > 0);
            Test.instanceCount += (((i4 * i7) + i5) - i15);
            i16 = 7;
            do {
                Test.instanceCount += (-8659 + (i16 * i16));
                i15 -= Test.sFld;
                i8 >>>= i5;
                if (b) {
                    Test.instanceCount ^= Test.instanceCount;
                    i5 >>>= i16;
                } else if (b) {
                    if (b) continue;
                }
            } while ((i16 -= 2) > 0);
        }
        long meth_res = i4 + i5 + Double.doubleToLongBits(d1) + i7 + i8 + i15 + i16 + (b ? 1 : 0);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(float f) {

        int i1=186, i2=61659, i3=12, i17=-116, iArr[]=new int[N];
        float f1=1.488F, fArr[]=new float[N];
        double d=0.126861;

        FuzzerUtils.init(iArr, -24);
        FuzzerUtils.init(fArr, -1.915F);

        for (i1 = 316; i1 > 17; i1--) {
            i2 += (int)f;
            iArr[i1] = (int)(~(long)((f - -12) * (++Test.instanceCount)));
            for (f1 = 6; f1 > 1; --f1) {
                i2 >>= (int)(14 + d);
                switch ((int)((f1 % 6) + 110)) {
                case 110:
                    Test.instanceCount += (long)(f1 + Test.instanceCount);
                    i2 += (int)((long)f1 | i3);
                    fArr[(int)(f1 + 1)] -= i2;
                    bMeth();
                    break;
                case 111:
                    i17 = 2;
                    do {
                        if (Test.bFld) continue;
                        i2 >>= i2;
                    } while (--i17 > 0);
                    i2 += i17;
                    break;
                case 112:
                    i2 += (21 + (f1 * f1));
                case 113:
                    i3 += i3;
                    break;
                case 114:
                    Test.instanceCount >>= i17;
                    break;
                case 115:
                    i3 += (32 + (f1 * f1));
                    break;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i1 + i2 + Float.floatToIntBits(f1) + i3 +
            Double.doubleToLongBits(d) + i17 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-8913, i18=166, i19=5, i20=-66, i21=-31688, i22=-167;
        byte by=88;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2L);

        Test.instanceCount += i;
        vMeth(fFld);
        i += i;
        by ^= (byte)17408;
        i = -199;
        Test.bFld = Test.bFld;
        for (i18 = 14; i18 < 294; i18++) {
            i *= i18;
            i20 = 1;
            while (++i20 < 90) {
                Test.instanceCount = i20;
                by = (byte)i18;
                Test.instanceCount = Test.instanceCount;
                i = i20;
                i += i18;
                i21 = 1;
                while (++i21 < 1) {
                    Test.instanceCount += (i21 ^ i20);
                    by += (byte)(i21 * i19);
                    i >>= (int)Test.instanceCount;
                    i = i20;
                    Test.instanceCount >>= Test.instanceCount;
                }
                Test.instanceCount ^= Test.instanceCount;
                if (false) break;
                Test.iArrFld[i20 + 1] *= Test.sFld;
                i22 = 1;
                do {
                    i19 = i;
                    i += (int)Test.instanceCount;
                    lArr = lArr;
                    lFld >>= lFld;
                    i19 >>= 141;
                    i += (((i22 * i18) + lFld) - i21);
                } while (--i22 > 0);
            }
        }

        FuzzerUtils.out.println("i by i18 = " + i + "," + by + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 lArr = " + i22 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld fFld lFld = " + (Test.bFld ? 1 : 0) + "," + Float.floatToIntBits(fFld) + ","
            + lFld);
        FuzzerUtils.out.println("Test.iArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth bMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
