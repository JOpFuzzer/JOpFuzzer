// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3332310949L;
    public static int iFld=-39634;
    public static float fFld=70.414F;
    public static double dFld=-1.66069;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth(int i, short s, short s1) {


        i -= ((++i) * i);
        vSmallMeth_check_sum += i + s + s1;
    }

    public static int iMeth(int i6, int i7) {

        int i8=-4, i9=-13136, i10=-123;
        float f1=1.242F;
        short s3=-15116;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)85);

        i8 = 1;
        do {
            if (Test.iFld != 0) {
            }
            i7 -= i7;
            f1 += (((i8 * f1) + i7) - i8);
            for (i9 = 1; 5 > i9; i9++) {
                i10 += (i9 * Test.instanceCount);
                i10 -= Test.iFld;
                if (i9 != 0) {
                }
                i6 += i6;
                Test.instanceCount *= Test.instanceCount;
                i6 = s3;
                byArr[i9] -= (byte)i6;
                i10 = (int)Test.instanceCount;
            }
            Test.instanceCount += (i8 * i8);
        } while (++i8 < 306);
        Test.iArrFld[(-5 >>> 1) % N] -= (int)f1;
        long meth_res = i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 + s3 + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, float f) {

        int i2=-9227, i3=214, i4=-11, i5=106, iArr[]=new int[N];
        byte by=64;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -13L);
        FuzzerUtils.init(iArr, -160);

        Test.iFld -= (int)(++Test.instanceCount);
        for (long l : lArr) {
            for (i2 = 1; i2 < 4; ++i2) {
                by += (byte)i1;
                i3 += i2;
                Test.instanceCount += (i2 * i2);
                for (i4 = 1; i4 < 2; ++i4) {
                    i3 = (int)lArr[i4];
                    if ((Test.iFld - ((i4 * i5) - Test.iFld)) < lArr[(i2 >>> 1) % N]) break;
                    iArr[i4 - 1] += iMeth(i3, i5);
                    iArr[i4 + 1] = (int)Test.instanceCount;
                    l = l;
                    i3 += Test.iFld;
                    iArr[i2] &= i5;
                    i5 -= i2;
                }
            }
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f) + i2 + i3 + by + i4 + i5 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth() {

        int i11=-1, i12=-9, i13=37239, i14=-43193, i15=-183;
        short s4=-22829;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2676899420L);

        vMeth(Test.iFld, Test.fFld);
        for (i11 = 6; i11 < 150; ++i11) {
            i12 += Test.iFld;
            s4 -= (short)-551L;
            Test.instanceCount += Test.iFld;
            Test.instanceCount = Test.instanceCount;
            for (i13 = 1; 11 > i13; ++i13) {
                Test.fFld = Test.instanceCount;
                switch (((i13 % 2) * 5) + 106) {
                case 113:
                    lArr1[i11 + 1] -= (long)Test.fFld;
                    Test.fFld *= Test.iFld;
                    Test.instanceCount += i15;
                case 116:
                    i15 = i15;
                    s4 += (short)Test.instanceCount;
                    break;
                }
                i12 = i11;
            }
        }
        long meth_res = i11 + i12 + s4 + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s2=17036;
        double d=71.130677;
        int i16=225, i17=26597, i18=14, i19=-91, i20=250, i21=7, i22=26, i23=14, i24=10;
        byte by1=-101;
        boolean b=true;
        long lArr2[][]=new long[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr2, 4223693628609455676L);
        FuzzerUtils.init(fArr, -30.455F);

        for (int smallinvoc=0; smallinvoc<860; smallinvoc++) vSmallMeth(Math.min((int)(Test.iFld =
            (int)Math.max(Test.instanceCount, -52006L)), --Test.iFld), (short)(s2--), (short)(Test.iFld /
            (Math.min((int)(-lMeth()), 26295) | 1)));
        d = 1;
        while (++d < 141) {
            Test.instanceCount >>= Test.iFld;
        }
        for (i16 = 13; i16 < 233; ++i16) {
            Test.dFld += i16;
            i18 = 1;
            while ((i18 += 3) < 114) {
                Test.iFld <<= Test.iFld;
                i17 = Test.iFld;
                i19 = 1;
                while (++i19 < 3) {
                    try {
                        Test.iFld = (798553245 / i18);
                        Test.iFld = (i17 % i18);
                        Test.iFld = (8261 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    i17 <<= i18;
                    Test.iFld = (int)Test.instanceCount;
                    i17 ^= i18;
                    Test.fFld += ((long)i19 ^ (long)i19);
                }
                i17 &= i18;
                switch ((i16 % 6) + 13) {
                case 13:
                    Test.instanceCount = (long)Test.dFld;
                    lArr2[i16 - 1][i16 + 1] -= i16;
                case 14:
                    for (i20 = i18; i20 < 3; ++i20) {
                        fArr[i18 + 1] *= by1;
                        Test.iFld += Test.iFld;
                        i21 -= i17;
                        Test.instanceCount += (long)(1.662F + (i20 * i20));
                        if (b) break;
                    }
                    i22 = 1;
                    do {
                        i17 *= i16;
                        by1 = (byte)i18;
                        if (b) {
                            i17 = 11;
                            Test.iArrFld[i18 + 1] *= (int)Test.instanceCount;
                        } else if (b) {
                            i23 += (i22 * Test.instanceCount);
                        } else {
                            lArr2[i22 + 1][i22] = Test.iFld;
                        }
                    } while (++i22 < 3);
                case 15:
                    Test.instanceCount += (long)Test.fFld;
                    break;
                case 16:
                    Test.iFld *= i22;
                case 17:
                    i24 = (int)Test.instanceCount;
                    break;
                case 18:
                    i17 = (int)Test.instanceCount;
                default:
                    Test.iFld *= (int)Test.fFld;
                }
            }
        }

        FuzzerUtils.out.println("s2 d i16 = " + s2 + "," + Double.doubleToLongBits(d) + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 by1 = " + i20 + "," + i21 + "," + by1);
        FuzzerUtils.out.println("b i22 i23 = " + (b ? 1 : 0) + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 lArr2 fArr = " + i24 + "," + FuzzerUtils.checkSum(lArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
