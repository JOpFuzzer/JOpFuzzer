// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=1771430075L;
    public static int iFld=146;
    public static boolean bFld=true;
    public static long lFld=-236L;
    public float fFld=1.264F;
    public volatile byte byFld=36;
    public static long lArrFld[]=new long[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2045235285L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i2=3670, i3=-214, i4=-5204, i5=0, i6=-12, i7=-46444, i8=-62245, i9=60801;
        double d=-101.86494;
        float f1=-1.994F;
        short s1=-11437;

        for (i2 = 18; 333 > i2; ++i2) {
            for (i4 = 1; 5 > i4; i4 += 3) {
                boolean b=false;
                Test.instanceCount ^= i4;
                Test.instanceCount += (long)d;
                f1 += i4;
                if (i2 != 0) {
                }
                f1 += (((i4 * Test.iFld) + i2) - s1);
                b = b;
            }
            for (i6 = 1; i6 < 5; ++i6) {
                for (i8 = i2; 2 > i8; i8++) {
                    i7 &= i4;
                    Test.lArrFld[i2] += i5;
                    i3 = i6;
                }
                f1 = i9;
                i3 = i9;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + s1 + i6 + i7 + i8 +
            i9;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(float f) {

        short s=-3896;
        int i10=-1, i11=11, i12=137, i13=542, iArr[]=new int[N];
        boolean b1=false, bArr[]=new boolean[N];
        double d1=15.114207;

        FuzzerUtils.init(iArr, 81);
        FuzzerUtils.init(bArr, false);

        f *= (float)(((Test.iFld + 982) * (-8 * (Test.instanceCount + Test.iFld))) - (s - dMeth()));
        iArr[(Test.iFld >>> 1) % N] -= i10;
        Test.instanceCount -= s;
        iArr[(Test.iFld >>> 1) % N] *= (int)f;
        bArr[(-128 >>> 1) % N] = b1;
        d1 = Test.iFld;
        i11 = 1;
        do {
            Test.iFld &= Test.iFld;
            switch (((i11 % 8) * 5) + 101) {
            case 119:
                Test.iFld = (int)Test.instanceCount;
                for (i12 = 11; i12 > 1; i12 -= 2) {
                    i13 = (int)f;
                    i10 -= (int)d1;
                    i13 += (((i12 * f) + Test.iFld) - i12);
                    Test.instanceCount &= Test.instanceCount;
                }
            case 125:
                d1 = 1;
                break;
            case 129:
                Test.lArrFld[i11] = Test.iFld;
                break;
            case 112:
                Test.instanceCount >>= 11215;
            case 127:
                i13 -= (int)f;
                break;
            case 107:
                i13 += (i11 ^ i11);
                break;
            case 118:
                Test.instanceCount = Test.iFld;
                break;
            case 134:
                Test.instanceCount += i11;
                break;
            }
        } while (++i11 < 147);
        vMeth1_check_sum += Float.floatToIntBits(f) + s + i10 + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) + i11 + i12
            + i13 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i1) {

        float f2=-53.674F, fArr[]=new float[N];
        byte by=-25;
        int i14=-4622, i15=-73, i16=23553, i17=-71, iArr1[]=new int[N];

        FuzzerUtils.init(fArr, 49.896F);
        FuzzerUtils.init(iArr1, 193);

        fArr = FuzzerUtils.float1array(N, (float)-72.472F);
        vMeth1(f2);
        i1 >>>= (int)41L;
        Test.instanceCount *= Test.instanceCount;
        i1 = (int)f2;
        if (Test.bFld) {
            Test.iFld = i1;
            by -= by;
        } else {
            iArr1[(i1 >>> 1) % N] = i1;
            Test.lArrFld[(Test.iFld >>> 1) % N] -= i1;
        }
        for (i14 = 280; i14 > 6; --i14) {
            i1 += i14;
            for (i16 = 6; i16 > 1; i16--) {
                Test.iFld = i1;
                iArr1[i14] = 22974;
            }
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f2) + by + i14 + i15 + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-467, i18=-2, i19=150, i20=-8, i21=-244, i22=-5, iArr2[][]=new int[N][N];
        double d2=78.62215, d3=-1.6109;
        float f3=-1.551F, fArr1[]=new float[N];
        long l=-3057158949L;

        FuzzerUtils.init(fArr1, 2.339F);
        FuzzerUtils.init(iArr2, 8);

        switch (((Math.min(i, i) >>> 1) % 2) + 49) {
        case 49:
            vMeth(i);
            for (d2 = 1; d2 < 149; d2++) {
                if (Test.bFld) {
                    f3 = 1;
                    while (++f3 < 169) {
                        Test.iFld <<= Test.iFld;
                        for (i19 = 1; 1 > i19; i19++) {
                            fArr1[(int)(f3)] = i;
                            Test.bFld = Test.bFld;
                            d3 = Test.iFld;
                            switch ((i19 % 2) + 58) {
                            case 58:
                                fArr1[i19 - 1] *= i18;
                                iArr2 = iArr2;
                                Test.instanceCount += i19;
                                i18 += (int)Test.lFld;
                                break;
                            case 59:
                                Test.iFld = i19;
                                i <<= (int)Test.lFld;
                                break;
                            default:
                                iArr2[(int)(d2 + 1)][(int)(d2 + 1)] -= Test.iFld;
                                Test.lArrFld[(int)(f3 + 1)] *= -1776;
                            }
                            Test.iFld *= i;
                            iArr2[i19 - 1] = iArr2[i19];
                            fFld += Test.instanceCount;
                        }
                        for (i21 = (int)(f3); i21 < 1; ++i21) {
                            i22 = i18;
                            l += i21;
                            if (Test.bFld) {
                                iArr2[(int)(f3)][i21] = Test.iFld;
                                sArrFld[i21 + 1] *= byFld;
                                iArr2[(int)(d2 - 1)][i21] = (int)l;
                            } else if (Test.bFld) {
                                l -= i19;
                            } else if (Test.bFld) {
                                fFld /= (i22 | 1);
                            } else {
                                Test.instanceCount = i22;
                            }
                        }
                    }
                } else if (Test.bFld) {
                    try {
                        i22 = (iArr2[(int)(d2)][(-97 >>> 1) % N] % 189);
                        i18 = (-985156677 / iArr2[(int)(d2)][(int)(d2 - 1)]);
                        i = (i22 / 111);
                    } catch (ArithmeticException a_e) {}
                }
            }
            break;
        case 50:
        }

        FuzzerUtils.out.println("i d2 i18 = " + i + "," + Double.doubleToLongBits(d2) + "," + i18);
        FuzzerUtils.out.println("f3 i19 i20 = " + Float.floatToIntBits(f3) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("d3 i21 i22 = " + Double.doubleToLongBits(d3) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("l fArr1 iArr2 = " + l + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lFld fFld byFld = " + Test.lFld + "," + Float.floatToIntBits(fFld) + "," + byFld);
        FuzzerUtils.out.println("Test.lArrFld sArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
