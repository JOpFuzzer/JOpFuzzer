// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3780057972L;
    public static int iFld=-161;
    public static byte byFld=-111;
    public static double dFld=-78.13258;
    public volatile short sFld=28070;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 27034);
        FuzzerUtils.init(Test.dArrFld, 16.49168);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, long l1, int i6) {

        int i7=-12, i8=5, i9=5, i10=-11, i11=-247, i12=96, i13=197, i14=-60264;
        double d2=-94.18759;
        float f2=0.697F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6L);

        for (i7 = 4; 218 > i7; ++i7) {
            for (i9 = 1; i9 < 8; i9++) {
                l1 = (long)d2;
                for (i11 = 2; i11 > i9; i11 -= 2) {
                    if (true) continue;
                    i6 = -6;
                    Test.iArrFld[i7] = (int)Test.instanceCount;
                }
                for (i13 = 2; i13 > 1; i13--) {
                    float f1=0.545F;
                    Test.instanceCount += l1;
                    lArr[i9 - 1] >>= i12;
                    i6 += (i13 ^ i7);
                    Test.iFld = -10;
                    Test.iArrFld[i7 + 1] += (int)f1;
                    i12 >>>= 78;
                }
                f2 *= l1;
            }
        }
        long meth_res = i5 + l1 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d2) + i11 + i12 + i13 + i14 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i4) {

        int i16=-67, i17=25355, i18=-28475, i19=9, iArr[]=new int[N];
        short s1=23530;
        float f3=-23.889F;

        FuzzerUtils.init(iArr, 1069);

        iArr[(i4 >>> 1) % N] = iMeth(Test.iFld, -6221642746620498652L, i4);
        for (int i15 : Test.iArrFld) {
            for (i16 = 1; i16 < 4; i16++) {
                i4 = (int)Test.instanceCount;
                i4 += i16;
            }
            Test.dFld -= i15;
            for (i18 = 4; i18 > 1; i18 -= 2) {
                Test.instanceCount &= s1;
                f3 += i15;
                switch ((i18 % 2) + 121) {
                case 121:
                    i15 *= i15;
                    Test.instanceCount -= 10;
                    i15 -= Test.iFld;
                case 122:
                    f3 += Test.instanceCount;
                    i19 = i19;
                    break;
                }
            }
        }
        long meth_res = i4 + i16 + i17 + i18 + i19 + s1 + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i=138, i1=3, i2=-9759, i3=-11;
        float f=123.961F;
        double d=-124.112462, d1=10.108452, dArr[]=new double[N];
        long l=-1219966012L;
        short s=-11980;

        FuzzerUtils.init(dArr, 31.87455);

        dArr[(Test.iFld >>> 1) % N] += ((Test.iFld + (Test.instanceCount - 73.34598)) - Test.iFld);
        for (i = 236; i > 5; --i) {
            switch ((i % 1) + 40) {
            case 40:
                Test.byFld = (byte)((f *= 11963) + 33929);
                i1 <<= (int)(((d * i) + (Test.iFld * 7)) + ((f / (i | 1)) - (i1 = i1)));
                i1 &= (int)(-((i1 += (int)f) / ((i1 - i) | 1)));
                break;
            default:
                i1 += i;
                for (d1 = 1; d1 < 7; ++d1) {
                    f += ((i1++) % 7);
                    for (l = 2; 1 < l; l--) {
                        Test.byFld += (byte)l;
                        s -= (short)(dMeth(i) - 119);
                    }
                    Test.instanceCount = Test.byFld;
                    Test.byFld -= (byte)i;
                    Test.dFld -= Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1)
            + i2 + l + i3 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=-4, i22=-2842, i23=-65, i24=-47349, i25=-24995, i26=-32286, i27=-59;
        float f4=74.602F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -3040329240L);

        vMeth();
        Test.instanceCount &= Test.iFld;
        for (int i20 : Test.iArrFld) {
            Test.instanceCount >>= sFld;
            for (i21 = 2; i21 < 63; i21++) {
                i20 = Test.iFld;
            }
            i22 = i20;
        }
        for (i23 = 9; 243 > i23; ++i23) {
            Test.iArrFld[i23 - 1] <<= (int)Test.instanceCount;
            if (bFld) break;
            Test.instanceCount = -7499508626540468452L;
        }
        i22 += i23;
        Test.dArrFld[(i23 >>> 1) % N] -= 12;
        i24 >>= sFld;
        Test.dFld = Test.instanceCount;
        for (i25 = 14; i25 < 266; ++i25) {
            for (f4 = 100; f4 > i25; f4 -= 3) {
                sFld += (short)13;
                bFld = bFld;
                Test.instanceCount -= 23044L;
                i27 += (int)(f4 + i27);
            }
            lArr1[i25 - 1] = i24;
            i26 = -140;
            Test.instanceCount += (i25 * i25);
            i27 += i25;
        }
        Test.instanceCount -= i22;
        for (int i28 : Test.iArrFld) {
            i26 = i24;
        }
        i26 = -72;
        Test.iArrFld[(i25 >>> 1) % N] -= (int)Test.instanceCount;

        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("f4 i27 lArr1 = " + Float.floatToIntBits(f4) + "," + i27 + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.dFld sFld bFld = " + Double.doubleToLongBits(Test.dFld) + "," + sFld + "," +
            (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
