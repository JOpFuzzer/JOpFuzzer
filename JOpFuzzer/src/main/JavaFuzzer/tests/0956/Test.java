// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=216L;
    public static float fFld=1.616F;
    public static volatile byte byFld=-4;
    public static volatile int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -250);
        FuzzerUtils.init(Test.lArrFld, -2346798342L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b, int i8) {

        long l=60885L;
        int i9=-14, i10=64191, i11=-44332, i12=-13;
        short s1=-28915;

        b = b;
        Test.iArrFld[(i8 >>> 1) % N] -= i8;
        i8 += (int)-63.78F;
        for (l = 4; l < 373; ++l) {
            i10 = 1;
            while (++i10 < 5) {
                Test.iArrFld[i10 - 1] += (int)l;
                switch ((int)((l % 6) + 84)) {
                case 84:
                case 85:
                    i9 += i10;
                    i8 <<= s1;
                    for (i11 = 1; i11 < 1; i11++) {
                        float f1=1.668F;
                        f1 += (i11 - Test.instanceCount);
                        Test.instanceCount += (long)(35.115F + (i11 * i11));
                        Test.iArrFld[i11 - 1] <<= (int)Test.instanceCount;
                        Test.instanceCount = -6;
                        i12 -= i9;
                    }
                    break;
                case 86:
                    i8 += (i10 ^ l);
                case 87:
                    i9 -= (int)-92.622F;
                case 88:
                    i9 = (int)Test.instanceCount;
                case 89:
                    i8 -= i10;
                    break;
                default:
                    Test.iArrFld[i10] >>= i8;
                }
            }
        }
        vMeth2_check_sum += (b ? 1 : 0) + i8 + l + i9 + i10 + s1 + i11 + i12;
    }

    public static void vMeth1(float f, double d, int i5) {

        int i6=236, i7=59567, i13=42876, i14=-33316, i15=-5, i16=1;
        boolean b1=true;
        short s2=-16708;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 35251L);

        for (i6 = 9; i6 < 169; ++i6) {
            vMeth2(b1, 35);
            b1 = b1;
            f -= (float)d;
            i5 += i7;
            i7 = i7;
            d -= i7;
            for (i13 = 1; 10 > i13; i13++) {
                if (b1) continue;
                Test.instanceCount += Test.instanceCount;
            }
            for (i15 = 1; i15 < 10; i15++) {
                Test.instanceCount = i5;
                i5 -= -182;
                s2 = (short)i7;
                i5 <<= i14;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i5 + i6 + i7 + (b1 ? 1 : 0) + i13 +
            i14 + i15 + i16 + s2 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i=-57002, i1=-61, i2=-11151, i3=-29, i4=5, i17=11, i18=121, i19=-22;
        short s=-11480;
        double d1=-40.130324;
        boolean b2=false;

        i -= (++i);
        for (i1 = 1; i1 < 247; i1++) {
            Test.iArrFld[i1 + 1] -= (int)(i2 = (int)((Test.instanceCount >>> i1) - (Test.instanceCount * s)));
            for (i3 = 1; i3 < 7; i3++) {
                vMeth1(Test.fFld, d1, i);
                Test.instanceCount = i3;
                for (i17 = i1; i17 < 2; i17++) {
                    b2 = b2;
                    Test.fFld += (((i17 * i19) + i2) - Test.fFld);
                    i2 += (i17 * i17);
                    i -= (int)67.124880;
                    i = i2;
                    i2 = i2;
                    Test.iArrFld[i17 + 1] = (int)Test.fFld;
                }
                if (i != 0) {
                    vMeth_check_sum += i + i1 + i2 + s + i3 + i4 + Double.doubleToLongBits(d1) + i17 + i18 + (b2 ? 1 :
                        0) + i19;
                    return;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + s + i3 + i4 + Double.doubleToLongBits(d1) + i17 + i18 + (b2 ? 1 : 0) + i19;
    }

    public void mainTest(String[] strArr1) {

        int i20=63624, i21=-26288, i22=-38519, i23=153, i24=-9, i25=238, i26=206, i27=-172, i28=11, i29=29;
        double d2=-59.52048, dArr[]=new double[N];
        float f2=-22.504F;
        boolean b3=false, bArr[]=new boolean[N];
        short s3=9040;

        FuzzerUtils.init(dArr, 93.23430);
        FuzzerUtils.init(bArr, true);

        vMeth();
        for (i20 = 227; 13 < i20; i20 -= 3) {
            Test.lArrFld[i20 - 1] = i21;
        }
        for (i22 = 5; i22 < 168; i22++) {
            for (i24 = 1; i24 < 154; ++i24) {
                i25 = (int)d2;
                i23 += i24;
            }
        }
        Test.fFld = 3455722430L;
        for (f2 = 6; 134 > f2; ++f2) {
            i27 = 1;
            while (++i27 < 196) {
                Test.iArrFld[(int)(f2 + 1)] <<= i20;
                if (b3) break;
                Test.fFld *= i22;
                i25 += (i27 - Test.fFld);
                Test.fFld += (float)d2;
                switch (((i27 % 9) * 5) + 60) {
                case 93:
                    i21 += (i27 - i27);
                case 74:
                    i21 += i24;
                    i26 = i25;
                    i21 += (0 + (i27 * i27));
                    i26 = i20;
                    break;
                case 73:
                    i23 *= s3;
                case 77:
                    Test.iArrFld[i27 - 1] <<= 0;
                    break;
                case 70:
                case 79:
                    for (i28 = 1; i28 > 1; i28--) {
                        Test.byFld >>= (byte)i23;
                        dArr[i27] = i23;
                        i26 += (int)1.27041;
                        i29 = i22;
                    }
                    i21 %= (int)((long)(Test.fFld) | 1);
                    i26 += (i27 | Test.instanceCount);
                    break;
                case 95:
                    i26 += (i27 * i27);
                    break;
                case 66:
                    Test.instanceCount >>= 195;
                    break;
                case 82:
                    Test.fFld = -1729081599L;
                    break;
                default:
                    bArr[(int)(f2 + 1)] = b3;
                }
            }
        }

        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("d2 f2 i26 = " + Double.doubleToLongBits(d2) + "," + Float.floatToIntBits(f2) + "," +
            i26);
        FuzzerUtils.out.println("i27 b3 s3 = " + i27 + "," + (b3 ? 1 : 0) + "," + s3);
        FuzzerUtils.out.println("i28 i29 dArr = " + i28 + "," + i29 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
