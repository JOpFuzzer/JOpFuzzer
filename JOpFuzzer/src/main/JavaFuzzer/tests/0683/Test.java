// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public static boolean bFld=true;
    public static float fFld=-29.682F;
    public static int iFld=-2;
    public static double dFld=2.99583;
    public static byte byFld=79;
    public static int iArrFld[][]=new int[N][N];
    public static volatile short sArrFld[]=new short[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 179);
        FuzzerUtils.init(Test.sArrFld, (short)11639);
        FuzzerUtils.init(Test.fArrFld, 2.340F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, short s1, int i7) {

        int i8=-9, i9=2285, i10=-2618, i11=-12;
        long l2=136L;
        double d=0.104540;

        i7 = (int)-223096093L;
        i7 -= i7;
        Test.iArrFld[(-12877 >>> 1) % N][(-10 >>> 1) % N] = i7;
        for (i8 = 14; i8 < 321; i8++) {
            if (Test.bFld) {
                Test.iArrFld[i8 - 1][i8 - 1] = (int)13L;
            } else {
                i7 += (i8 | l1);
                l1 = l1;
                Test.fFld += (i8 + i9);
            }
            for (l2 = 1; l2 < 5; ++l2) {
                try {
                    i10 = (-82 % i8);
                    i9 = (-1862540422 / i8);
                    i7 = (i8 % 1286600293);
                } catch (ArithmeticException a_e) {}
                i7 += (int)l2;
                i11 = 1;
                do {
                    i7 += i8;
                    d = i11;
                } while (++i11 < 2);
            }
        }
        vMeth1_check_sum += l1 + s1 + i7 + i8 + i9 + l2 + i10 + i11 + Double.doubleToLongBits(d);
    }

    public static int iMeth() {

        int i12=-46880, i13=183, i14=246, i15=11, i16=-193, i17=-9;
        byte by=-66;

        vMeth1(Test.instanceCount, (short)(-19453), Test.iFld);
        Test.iFld *= (int)-218L;
        Test.iFld -= Test.iFld;
        for (i12 = 6; i12 < 338; i12++) {
            for (i14 = 5; i14 > 1; i14--) {
                i15 = 7;
                Test.sArrFld = FuzzerUtils.short1array(N, (short)212);
            }
            for (i16 = 1; i16 < 5; i16++) {
                Test.instanceCount ^= i17;
                Test.iFld -= i17;
                by += (byte)(((i16 * Test.iFld) + by) - Test.instanceCount);
                Test.dFld = Test.dFld;
            }
            if (Test.bFld) break;
            i17 = (int)Test.instanceCount;
            i17 = (int)Test.fFld;
        }
        long meth_res = i12 + i13 + i14 + i15 + i16 + i17 + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, short s, int i) {

        int i1=-52761, i2=192, i3=-41, i4=3, i5=-13, i6=156, i18=-5, i19=-33704, iArr[]=new int[N];
        float f=14.131F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 39835);
        FuzzerUtils.init(lArr, -6558217223620127693L);
        FuzzerUtils.init(fArr, -1.118F);

        for (i1 = 4; i1 < 304; i1 += 2) {
            for (i3 = 1; i3 < 11; ++i3) {
                i += (i - 210);
                l += (i3 * i3);
                for (i5 = 1; i5 < 2; i5++) {
                    i2 += i1;
                    Test.instanceCount += (i5 * i5);
                }
                i4 >>>= (int)Math.min(iArr[i3 + 1] * 7L, -(--lArr[i3 + 1]));
                i = (int)((++f) - ((i2++) + (++f)));
                fArr[i3 - 1] = iMeth();
                l += Test.iFld;
                i2 = -5883;
            }
            for (i18 = i1; i18 < 11; i18++) {
                byte by1=-9;
                by1 += (byte)(i18 * i18);
            }
            fArr[i1 - 1] = -6;
        }
        vMeth_check_sum += l + s + i + i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i18 + i19 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        short s2=7351;
        int i20=-13, i21=11944, i22=38, i23=9, i24=-225;
        long lArr1[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr1, -26265L);
        FuzzerUtils.init(bArr, true);

        vMeth(Test.instanceCount, s2, Test.iFld);
        Test.fArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] += 68;
        Test.iFld = (int)Test.fFld;
        Test.iFld = Test.byFld;
        for (i20 = 4; i20 < 132; ++i20) {
            switch ((i20 % 1) + 45) {
            case 45:
                switch ((i20 % 1) + 24) {
                case 24:
                    Test.fFld *= Test.iFld;
                    i21 |= i20;
                    s2 |= (short)Test.instanceCount;
                default:
                    Test.iFld += Test.iFld;
                    for (i22 = 11; i22 < 196; i22++) {
                        i21 += (int)Test.fFld;
                        Test.instanceCount += 3513408911L;
                        i23 &= (int)Test.instanceCount;
                        if (Test.bFld) continue;
                        i24 = 1;
                        do {
                            Test.fFld = i24;
                            if (true) {
                                Test.fFld += (float)Test.dFld;
                                lArr1 = FuzzerUtils.long1array(N, (long)-1428L);
                                i21 >>= Test.iFld;
                            } else {
                                if (false) {
                                    bArr[i24 + 1] = Test.bFld;
                                    i21 = (int)Test.instanceCount;
                                    Test.iArrFld[i24][i22 - 1] -= (int)Test.instanceCount;
                                    i21 += i21;
                                }
                            }
                            Test.iFld <<= -140;
                            i23 -= (int)Test.dFld;
                            i21 <<= i22;
                        } while (++i24 < 2);
                    }
                }
            }
        }

        FuzzerUtils.out.println("s2 i20 i21 = " + s2 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("lArr1 bArr = " + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld Test.dFld Test.byFld = " + Test.iFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.sArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + FuzzerUtils.checkSum(Test.sArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
