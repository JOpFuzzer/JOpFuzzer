// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1038183686L;
    public static double dFld=1.67724;
    public static short sFld=-358;
    public static boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.115491);
        FuzzerUtils.init(Test.fArrFld, 0.80F);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f) {

        int i7=-6, i8=-65352, i9=-115, i10=-55, i11=9, i12=-10, i13=-20;
        boolean b=false;

        f += i7;
        for (i8 = 8; i8 < 149; ++i8) {
            switch (((i8 % 3) * 5) + 126) {
            case 134:
                if (b) continue;
                Test.instanceCount &= Test.instanceCount;
                i9 = i9;
                for (i10 = 1; i10 < 11; i10++) {
                    b = b;
                    Test.dArrFld[i8 - 1] *= -3704;
                    i9 *= i10;
                    for (i12 = 1; i12 < 2; ++i12) {
                        if (b) continue;
                    }
                    i11 <<= i12;
                    Test.instanceCount += Test.instanceCount;
                    Test.instanceCount = -11L;
                }
                break;
            case 139:
                Test.instanceCount = i12;
                break;
            case 135:
                i13 *= (int)Test.instanceCount;
                break;
            default:
                i11 >>= i9;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i7 + i8 + i9 + (b ? 1 : 0) + i10 + i11 + i12 + i13;
    }

    public static int iMeth(int i2, int i3, int i4) {

        int i5=14, i6=185, i14=8, i15=-118, i16=36808, i17=9884;
        float f1=-1.694F;
        byte by=-101;
        boolean b1=true;

        for (i5 = 11; i5 < 332; ++i5) {
            vMeth(f1);
            i4 = i5;
            if (true) {
                i6 = i5;
            } else if (b1) {
                i4 += i4;
                if (b1) {
                    for (i14 = i5; i14 < 5; ++i14) {
                        i3 = -11;
                        i3 = (int)1.89053;
                        for (i16 = 1; i16 < 1; i16++) {
                            i6 += i2;
                            i15 += (int)Test.instanceCount;
                            i4 -= by;
                            f1 = i17;
                        }
                    }
                } else {
                    i3 = (int)Test.instanceCount;
                }
            } else {
                Test.instanceCount = (long)f1;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 + by + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i1) {

        short s=24142;
        int i18=1, i19=-196, i20=126, iArr1[]=new int[N];
        boolean b2=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3118596103L);
        FuzzerUtils.init(iArr1, -7);

        s += (short)iMeth(-13083, i1, i1);
        for (i18 = 12; 192 > i18; ++i18) {
            lArr = FuzzerUtils.long1array(N, (long)-208L);
            i19 = -156;
            i1 = (int)Test.instanceCount;
            Test.instanceCount += i18;
            Test.instanceCount = i20;
        }
        if (b2) {
            i19 >>= (int)Test.instanceCount;
            s -= (short)Test.instanceCount;
        } else if (b2) {
            Test.instanceCount >>>= 81;
            i19 = (int)4294764215492833594L;
        } else if (b2) {
            iArr1[(i20 >>> 1) % N] += (int)-45280L;
            iArr1[(i1 >>> 1) % N] >>= i18;
            i19 >>= i1;
        }
        long meth_res = i1 + s + i18 + i19 + i20 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-223, i21=-7, i22=-6, i23=-35752, i24=-42054, i25=-2, i26=-2347, i27=250, i28=11, i29=-12, iArr[]=new
            int[N];
        float f2=0.531F;
        byte by1=48;

        FuzzerUtils.init(iArr, 44);

        i = iArr[(5 >>> 1) % N];
        i -= (int)(i + ((--Test.instanceCount) + (iArr[(i >>> 1) % N]++)));
        lMeth(i);
        for (i21 = 1; i21 < 338; ++i21) {
            iArr[i21 + 1] += (int)Test.dFld;
            switch (((i21 % 2) * 5) + 100) {
            case 106:
                for (i23 = i21; i23 < 75; i23 += 2) {
                    iArr[i21] = (int)f2;
                }
                i = Test.sFld;
                break;
            case 107:
                iArr[(i22 >>> 1) % N] += (int)Test.dFld;
                break;
            }
            switch (((i21 % 1) * 5) + 26) {
            case 29:
                i25 = 1;
                while (++i25 < 75) {
                    i22 = (int)Test.instanceCount;
                    i24 >>= i25;
                    if (Test.bFld) continue;
                    Test.instanceCount += (-3232 + (i25 * i25));
                    i = 40;
                }
                if (Test.bFld) {
                    i22 = (int)Test.dFld;
                } else if (Test.bFld) {
                    for (i26 = i21; 75 > i26; ++i26) {
                        i27 = 1;
                        switch (((i26 % 6) * 5) + 103) {
                        case 131:
                            for (i28 = i26; i28 < 1; ++i28) {
                                Test.instanceCount = Test.instanceCount;
                                i24 = (int)2.89051;
                                Test.fArrFld = Test.fArrFld;
                                by1 += (byte)i28;
                                Test.dFld = f2;
                                f2 -= i28;
                                i24 >>= by1;
                            }
                        case 122:
                            i27 = (int)-2.609F;
                            break;
                        case 126:
                            Test.instanceCount &= i;
                        case 128:
                            i29 += (-8 + (i26 * i26));
                        case 123:
                            i29 *= i29;
                        case 124:
                            i22 = Test.sFld;
                            break;
                        }
                    }
                } else {
                    i += (i21 - by1);
                }
                break;
            default:
                Test.instanceCount *= i28;
            }
        }

        FuzzerUtils.out.println("i i21 i22 = " + i + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 f2 = " + i23 + "," + i24 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 by1 = " + i28 + "," + i29 + "," + by1);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld Test.dArrFld Test.fArrFld = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
