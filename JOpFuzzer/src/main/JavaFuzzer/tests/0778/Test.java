// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2406035908057301864L;
    public static volatile int iFld=-58549;
    public static boolean bFld=false;
    public static short sFld=-8398;
    public static byte byFld=91;
    public volatile double dFld=-96.75315;
    public volatile float fFld=98.1017F;

    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, int i4, byte by) {

        int i5=-11, i6=35224, i7=-42656, iArr[]=new int[N];
        float f=0.580F;
        double d=-12.82905;

        FuzzerUtils.init(iArr, -174);

        Test.iFld -= (int)-34376L;
        for (i5 = 4; i5 < 276; i5 += 2) {
            i6 += i5;
            i6 <<= i5;
            Test.iFld += -50076;
            Test.iFld = -29808;
            Test.bFld = Test.bFld;
            iArr[i5 + 1] += (int)Test.instanceCount;
            i4 += (((i5 * f) + f) - Test.instanceCount);
            Test.instanceCount += i5;
            Test.iFld = i6;
            i7 = 1;
            do {
                d = l1;
                if (Test.bFld) break;
                iArr[i5 + 1] >>= 46;
            } while (++i7 < 12);
        }
        vMeth_check_sum += l1 + i4 + by + i5 + i6 + Float.floatToIntBits(f) + i7 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
    }

    public static float fMeth(long l, int i3) {

        byte by1=-22;
        int i8=-14447, i9=22382, i10=-52952, i11=-6, i12=16926, iArr1[]=new int[N];
        float f1=2.365F;
        short s=31032;
        double d1=0.86866;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(iArr1, 6);
        FuzzerUtils.init(bArr, true);

        vMeth(Test.instanceCount, Test.iFld, by1);
        for (i8 = 6; i8 < 198; i8++) {
            i10 = 1;
            while (++i10 < 8) {
                try {
                    i3 = (i3 % iArr1[i8 - 1]);
                    i3 = (iArr1[i10 - 1] % i10);
                    Test.iFld = (53588 / i8);
                } catch (ArithmeticException a_e) {}
                i3 <<= i8;
                for (i11 = 1; i11 > 1; i11 -= 2) {
                    f1 = Test.instanceCount;
                    if (i10 != 0) {
                    }
                    switch (((2 >>> 1) % 10) + 29) {
                    case 29:
                        bArr[i8 + 1][i10] = Test.bFld;
                        if (Test.iFld != 0) {
                        }
                    case 30:
                        iArr1[i11 + 1] &= (int)l;
                        f1 += i11;
                        i12 += (i11 * i11);
                        s += (short)i12;
                        break;
                    case 31:
                        iArr1[i11] = 14560;
                        break;
                    case 32:
                        try {
                            iArr1[i10 - 1] = (i8 % 37002);
                            iArr1[i8] = (38913 / i12);
                            i9 = (-5741 / iArr1[i10 - 1]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 33:
                    case 34:
                        i3 += i11;
                        break;
                    case 35:
                        d1 = Test.iFld;
                    case 36:
                        i3 = i9;
                    case 37:
                        Test.instanceCount = i12;
                        break;
                    case 38:
                        f1 = i12;
                    }
                }
            }
        }
        long meth_res = l + i3 + by1 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) + s +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth() {

        int i2=54605, i13=2, i14=-19, iArr2[]=new int[N];
        long l2=-2990891334276861612L;
        float f2=1.148F;

        FuzzerUtils.init(iArr2, -116);

        i2 = 1;
        while (++i2 < 279) {
            Test.iFld *= ((Test.iFld * 134) - ((-(i2 - i2)) + (Test.iFld | Test.iFld)));
            fMeth(Test.instanceCount, 183);
            for (i13 = i2; i13 < 6; ++i13) {
                Test.sFld += (short)i13;
                i14 = (int)-100.123131;
                l2 = 1;
                while (++l2 < 1) {
                    i14 = i13;
                    Test.byFld *= (byte)i2;
                    i14 += (int)(l2 * l2);
                    f2 += i14;
                    f2 = Test.sFld;
                    i14 += (20951 + (l2 * l2));
                    iArr2[i13] = -252;
                    Test.sFld *= (short)Test.iFld;
                }
            }
        }
        long meth_res = i2 + i13 + i14 + l2 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=176, i1=147, i15=167, i16=-7, i17=-227, i18=30, i19=34258, iArr3[]=new int[N];
        byte by2=-32;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr3, 5);
        FuzzerUtils.init(dArr, 39.22431);

        for (i = 22; i < 360; ++i) {
            i1 -= (int)(((-1 * Math.abs(-204)) | i) - lMeth());
            iArr3[i] <<= i1;
            iArr3[i + 1] += Test.iFld;
            Test.iFld = Test.iFld;
            if (Test.bFld) continue;
            i1 = Test.iFld;
            i1 *= 202;
            dArr[i - 1] += -3;
        }
        for (i15 = 7; i15 < 187; i15 += 3) {
            iArr3[i15 - 1] -= -77;
            Test.instanceCount = -145;
            i1 >>= (int)Test.instanceCount;
            for (i17 = 1; i17 < i15; i17++) {
                i19 = 2;
                while (--i19 > 0) {
                    Test.iFld |= -220;
                    i1 = -62;
                    i1 = (int)Test.instanceCount;
                    i16 *= Test.sFld;
                    dFld -= i18;
                    Test.instanceCount *= i17;
                    switch (((i16 >>> 1) % 3) + 29) {
                    case 29:
                        switch ((i17 % 2) + 87) {
                        case 87:
                            iArr3[i19 + 1] = (int)Test.instanceCount;
                            Test.instanceCount += -85;
                            i1 = i19;
                            break;
                        case 88:
                            Test.iFld += (-11747 + (i19 * i19));
                            Test.instanceCount = i19;
                            by2 += (byte)i15;
                            i16 = i18;
                        default:
                            Test.iFld += i19;
                        }
                    case 30:
                        i16 -= (int)fFld;
                        break;
                    case 31:
                        i18 += (int)dFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i15 = " + i + "," + i1 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 by2 iArr3 = " + i19 + "," + by2 + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld Test.byFld dFld = " + Test.sFld + "," + Test.byFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("fFld = " + Float.floatToIntBits(fFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
