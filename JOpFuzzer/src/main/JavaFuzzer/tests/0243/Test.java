// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=727723691L;
    public static volatile int iFld=-5;
    public static boolean bFld=true;
    public static float fFld=3.57F;
    public short sFld=16883;
    public double dFld=-2.125787;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 26750);
        FuzzerUtils.init(Test.lArrFld, 1826987774L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i4) {

        float f=-38.333F;
        double d=-1.17001;
        long l1=-62592L, l2=-7L;
        int i5=178;
        short s=-15347;

        Test.iFld <<= (int)Test.instanceCount;
        Test.iFld = Test.iFld;
        f += (float)d;
        l1 = 1;
        while (++l1 < 256) {
            for (l2 = 6; l2 > 1; l2--) {
                s = (short)Test.iFld;
                i4 -= (int)Test.instanceCount;
                if (Test.bFld) {
                    i5 = i5;
                    Test.instanceCount = Test.instanceCount;
                    Test.iFld = Test.iFld;
                    i4 >>= i4;
                } else {
                    i4 <<= (int)l2;
                    s = (short)Test.iFld;
                    Test.iFld = i4;
                }
            }
        }
        long meth_res = i4 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + l1 + l2 + i5 + s;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(int i3) {

        int i6=23138, i7=-46887, i8=-14, i9=560, i10=165, i11=132, i12=7, i13=11;
        byte by=-69;

        Test.iArrFld[(4 >>> 1) % N] += (int)(((Test.iFld - Test.iFld) + (Test.iFld + Test.iFld)) + (lMeth(1937) *
            Test.iFld));
        Test.instanceCount *= -11;
        i6 = 1;
        do {
            Test.iFld &= -51613;
        } while (++i6 < 218);
        i7 = 1;
        while (++i7 < 241) {
            Test.fFld += (((i7 * i6) + Test.fFld) - Test.fFld);
            Test.instanceCount -= i3;
        }
        i8 = 1;
        while (++i8 < 157) {
            for (i9 = 1; i9 < 10; i9++) {
                Test.instanceCount = i9;
                for (i11 = 1; i11 < 2; i11++) {
                    i10 += (i11 * Test.iFld);
                    Test.iFld -= Test.iFld;
                    try {
                        i3 = (1643854777 % Test.iFld);
                        i3 = (12 / Test.iArrFld[i9]);
                        i13 = (i7 / i8);
                    } catch (ArithmeticException a_e) {}
                    by >>>= (byte)49829;
                }
            }
        }
        long meth_res = i3 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + by;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(long l, int i1, int i2) {

        int i14=-1, i15=136, i16=-3, i17=-64656, i18=-254, i19=7705;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)32687);

        Test.iFld = (int)(((l % -187L) * iMeth1(i2)) | i1);
        Test.fFld -= -11;
        for (i14 = 2; i14 < 339; i14++) {
            i1 <<= i15;
            for (i16 = 1; i16 < 5; i16++) {
                sArr[i16 + 1] = (short)i14;
                i1 <<= i17;
                Test.iArrFld[i16 - 1] >>= 1;
                for (i18 = i14; i18 < 2; i18 += 2) {
                    switch ((i14 % 5) + 103) {
                    case 103:
                        i19 *= i16;
                        i17 = (int)-13602L;
                        if (Test.bFld) break;
                        i2 += (i18 * i18);
                    case 104:
                        i15 = i1;
                        break;
                    case 105:
                        l -= i19;
                    case 106:
                        i1 -= i1;
                        break;
                    case 107:
                        l += i2;
                    default:
                        Test.iArrFld[i16 - 1] = Test.iFld;
                    }
                }
            }
        }
        long meth_res = l + i1 + i2 + i14 + i15 + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-7303, i21=7, i22=-39693, i23=-84, i24=-14, i25=-14773, i26=-9, i27=-17, i28=-8, i29=177;
        byte by1=-50, byArr[]=new byte[N];
        boolean bArr[]=new boolean[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, -120.612F);
        FuzzerUtils.init(byArr, (byte)86);

        i = iMeth(Test.instanceCount, -99, Test.iFld);
        Test.bFld = Test.bFld;
        bArr[(41089 >>> 1) % N] = Test.bFld;
        for (int i20 : Test.iArrFld) {
            Test.instanceCount = Test.instanceCount;
        }
        for (i21 = 8; i21 < 260; ++i21) {
            for (i23 = 100; i23 > i21; i23 -= 3) {
                Test.lArrFld[i21] >>= i21;
                i += Test.iFld;
                i = sFld;
                Test.iFld -= Test.iFld;
                switch (((i21 % 10) * 5) + 93) {
                case 123:
                    by1 *= by1;
                    fArr[i23] = i22;
                    for (i25 = 1; 1 > i25; ++i25) {
                        i -= (int)Test.fFld;
                        if (Test.bFld) break;
                    }
                    by1 += (byte)i23;
                    break;
                case 131:
                    Test.iArrFld[i23 - 1] = (int)Test.instanceCount;
                    break;
                case 138:
                    i24 -= (int)dFld;
                    byArr[(i21 >>> 1) % N] &= (byte)i21;
                    Test.iFld -= (int)56L;
                    i24 = i27;
                    break;
                case 98:
                case 130:
                    for (i28 = 1; i28 < 1; i28++) {
                        Test.instanceCount = -794972799L;
                        Test.instanceCount -= (long)Test.fFld;
                        Test.fFld += (i28 - Test.iFld);
                        Test.fFld += i28;
                    }
                    i += (int)Test.instanceCount;
                    break;
                case 112:
                case 116:
                    Test.instanceCount -= 143L;
                    break;
                case 95:
                    Test.fFld += Test.fFld;
                case 141:
                    i24 += 9;
                    break;
                case 134:
                    dFld *= Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i i21 i22 = " + i + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 by1 = " + i23 + "," + i24 + "," + by1);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 bArr = " + i28 + "," + i29 + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("fArr byArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld sFld dFld = " + Float.floatToIntBits(Test.fFld) + "," + sFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
