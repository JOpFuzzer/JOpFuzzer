// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=10629L;
    public static short sFld=15175;
    public static float fFld=8.862F;
    public byte byFld=23;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4);
        FuzzerUtils.init(Test.lArrFld, 3427568006L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, long l) {

        int i6=252, i7=10363, i8=0, i9=-94;
        boolean b=false;
        double d1=18.28088;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1L);

        i5 -= i5;
        try {
            for (i6 = 12; i6 < 247; i6++) {
                i5 = i6;
                i5 += (((i6 * Test.instanceCount) + Test.instanceCount) - i5);
                Test.instanceCount = i5;
                i7 -= (int)Test.instanceCount;
                if (i7 != 0) {
                }
                switch ((i6 % 3) + 66) {
                case 66:
                    b = false;
                    for (i8 = 1; 7 > i8; ++i8) {
                        i9 -= i8;
                        if (b) continue;
                        Test.iArrFld[i6 + 1] *= i8;
                        i9 = i6;
                    }
                    break;
                case 67:
                    i7 ^= i9;
                case 68:
                    d1 %= 75;
                    break;
                default:
                    lArr[i6] = Test.sFld;
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            i9 = (int)l;
        }
        long meth_res = i5 + l + i6 + i7 + (b ? 1 : 0) + i8 + i9 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i4) {

        int i10=161, i11=11, i12=14, i13=-58016, i14=-108, i15=44909, i16=95, iArr[][]=new int[N][N];
        double d2=-43.75426;
        long lArr1[]=new long[N], lArr2[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 135L);
        FuzzerUtils.init(iArr, 43549);
        FuzzerUtils.init(lArr2, 4488L);

        i4 >>>= iMeth(i4, Test.instanceCount);
        i4 = i4;
        i10 = 145;
        while ((i10 -= 3) > 0) {
            lArr1[i10 - 1] = Test.instanceCount;
            Test.instanceCount *= i10;
            i11 = 1;
            while (++i11 < 31) {
                i4 = (int)Test.instanceCount;
            }
            for (i12 = 31; 1 < i12; i12--) {
                for (i14 = 1; i14 < 2; ++i14) {
                    i4 = i12;
                    iArr[i14][i10] = (int)65.477F;
                    lArr1[i10 - 1] -= Test.instanceCount;
                    i15 -= i16;
                    lArr2[i10 - 1][i10 - 1] <<= i16;
                    d2 -= d2;
                }
            }
        }
        vMeth1_check_sum += i4 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr2);
    }

    public static void vMeth(double d, short s) {

        int i2=-62330, i3=1009, i17=-120, i18=11, i19=13;
        float f=-93.454F, f1=0.182F;
        byte by=-44;

        for (i2 = 11; i2 < 177; ++i2) {
            switch ((i2 % 3) + 4) {
            case 4:
                i3 += (i2 * i2);
                f += (--by);
                vMeth1(i3);
                break;
            case 5:
                i3 += i2;
                i3 = s;
                Test.iArrFld[i2 + 1] <<= 32856;
                i3 -= i3;
                break;
            case 6:
                for (i17 = 1; 10 > i17; ++i17) {
                    i18 += (((i17 * f) + f) - i3);
                }
                for (f1 = 1; f1 < 10; f1++) {
                    Test.lArrFld[(int)(f1 - 1)] += i18;
                    i3 &= i2;
                    Test.lArrFld[(int)(f1)] += i17;
                }
                break;
            default:
                Test.instanceCount *= (long)96.93441;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + s + i2 + i3 + Float.floatToIntBits(f) + by + i17 + i18 +
            Float.floatToIntBits(f1) + i19;
    }

    public void mainTest(String[] strArr1) {

        int i=-117, i1=-163, i20=36245, i21=8002, i22=-14485, i23=-11, i24=13, i25=-9, i26=-3, i27=-244, i28=-236,
            i29=-46764;
        double d3=-2.79165;
        boolean b1=false;
        long l1=-3679944602L;
        byte byArr[]=new byte[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(byArr, (byte)75);
        FuzzerUtils.init(sArr, (short)1492);

        i += (((i + i1) - i1) - ((--i1) - (Test.sFld * i1)));
        if (false) {
            vMeth(0.2363, Test.sFld);
            i1 -= -252;
        } else if (b1) {
            i <<= i1;
            i20 = 1;
            while (++i20 < 313) {
                i = (int)Test.instanceCount;
            }
            for (i21 = 12; i21 < 223; ++i21) {
                for (i23 = 5; 119 > i23; ++i23) {
                    i25 = 1;
                    while (++i25 < 2) {
                        i22 += (int)Test.instanceCount;
                    }
                }
            }
        } else if (b1) {
            i22 = (int)Test.fFld;
            byArr[(i21 >>> 1) % N] = (byte)i20;
            i26 = 1;
            do {
                for (i27 = 3; 207 > i27; i27++) {
                    i29 = 1;
                    while (++i29 < 2) {
                        i22 += i27;
                        i24 = (int)Test.instanceCount;
                        sArr[i29] ^= Test.sFld;
                        Test.instanceCount += (((i29 * i23) + Test.instanceCount) - i29);
                        switch (((i27 % 9) * 5) + 93) {
                        case 125:
                            i1 += i28;
                            i22 = (int)Test.fFld;
                            d3 = i21;
                            i1 = i23;
                            break;
                        case 105:
                            Test.iArrFld[i26] = byFld;
                            switch ((i26 % 2) + 114) {
                            case 114:
                                Test.iArrFld[i27 + 1] *= i25;
                                i1 += (int)Test.instanceCount;
                                if (b1) continue;
                            case 115:
                                l1 = 795506820L;
                                break;
                            }
                            break;
                        case 113:
                            i1 = i29;
                            break;
                        case 122:
                            Test.instanceCount += (i29 ^ i25);
                            break;
                        case 110:
                            i1 += i25;
                            break;
                        case 136:
                            Test.fFld += Test.fFld;
                        case 95:
                            i28 += (i29 * i29);
                            break;
                        case 121:
                            if (b1) continue;
                            break;
                        case 96:
                            Test.instanceCount >>= i20;
                        default:
                            l1 = (long)Test.fFld;
                        }
                    }
                }
            } while (++i26 < 121);
        } else {
            Test.iArrFld[(i27 >>> 1) % N] -= i29;
        }

        FuzzerUtils.out.println("i i1 i20 = " + i + "," + i1 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("d3 b1 l1 = " + Double.doubleToLongBits(d3) + "," + (b1 ? 1 : 0) + "," + l1);
        FuzzerUtils.out.println("byArr sArr = " + FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("byFld Test.iArrFld Test.lArrFld = " + byFld + "," + FuzzerUtils.checkSum(Test.iArrFld)
            + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
