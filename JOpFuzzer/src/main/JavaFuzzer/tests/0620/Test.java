// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3157068960L;
    public double dFld=60.116163;
    public static int iFld=201;
    public static float fFld=-2.543F;
    public static volatile byte byFld=-7;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l) {

        int i7=34483, i8=14, i9=-991, i10=-47544;
        double d=-52.3152;
        short s=9205;
        long lArr1[]=new long[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(lArr1, -7429468721937248628L);
        FuzzerUtils.init(fArr, -103.906F);

        for (i7 = 1; 150 > i7; ++i7) {
            for (i9 = 11; i9 > 1; i9--) {
                d = Test.fFld;
                i8 -= i9;
                l -= (long)Test.fFld;
                Test.byFld += (byte)(((i9 * l) + Test.byFld) - Test.iFld);
                i10 += (int)(33.485F + (i9 * i9));
                i10 += (i9 * i8);
                lArr1[i9] -= i8;
                fArr[i9][i9 - 1] += l;
                Test.iFld -= (int)1.63623;
            }
            i8 += (int)Test.fFld;
            s += (short)(-239 + (i7 * i7));
            i10 += (i7 ^ i10);
            Test.instanceCount >>= l;
        }
        long meth_res = l + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + s + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i5, int i6) {

        double d1=-2.64546;
        int i11=-220, i12=-37262, i13=4232, i14=43031, i15=13, i16=148, iArr1[][]=new int[N][N];
        short s1=27532;
        long l1=-12L;

        FuzzerUtils.init(iArr1, 4);

        iArr1[(i6 >>> 1) % N][(6 >>> 1) % N] <<= (int)(-lMeth(Test.instanceCount));
        d1 = Test.iFld;
        for (i11 = 7; 154 > i11; ++i11) {
            d1 *= -3645881953579130878L;
            for (i13 = 11; i13 > 1; --i13) {
                d1 -= -10L;
                switch (((i13 % 8) * 5) + 25) {
                case 27:
                    i14 += (((i13 * Test.byFld) + i14) - i6);
                    break;
                case 53:
                    for (i15 = 1; 2 > i15; ++i15) {
                        boolean b=true;
                        if (b) {
                            Test.instanceCount |= i16;
                        } else if (b) {
                            s1 <<= (short)Test.iFld;
                        } else if (true) {
                            i5 += (int)Test.instanceCount;
                            l1 = i13;
                            i14 = i16;
                        } else {
                            l1 = i11;
                        }
                    }
                    break;
                case 58:
                    Test.instanceCount = (long)Test.fFld;
                    break;
                case 45:
                    iArr1[i11] = iArr1[i13 - 1];
                    break;
                case 54:
                    i16 += i13;
                    break;
                case 38:
                    i16 += i14;
                    break;
                case 46:
                    i6 += (((i13 * i11) + i15) - i13);
                    break;
                case 42:
                    Test.iFld = i12;
                    break;
                default:
                    Test.fFld *= i13;
                }
            }
        }
        vMeth_check_sum += i5 + i6 + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 + i15 + i16 + s1 + l1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(int i4) {


        Test.iFld *= (int)(((i4 - Test.iFld) - -9L) - ((Test.fFld + Test.iFld) - (Test.fFld * Test.instanceCount)));
        vMeth(i4, i4);
        vSmallMeth_check_sum += i4;
    }

    public void mainTest(String[] strArr1) {

        int i=12, i1=-113, i2=6, i3=3, i17=-189, i18=220, i19=-159, i20=51606, i21=-13, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5705796834028891766L);
        FuzzerUtils.init(iArr, 59);

        for (i = 3; 147 > i; i += 2) {
            dFld = (lArr[i - 1] &= (i - Math.abs(i1)));
        }
        iArr[(18 >>> 1) % N] += ((-(Test.iFld | i)) * (++iArr[(i1 >>> 1) % N]));
        for (i2 = 8; i2 < 287; i2++) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(-8);
            Test.iFld -= i;
            for (i17 = 1; i17 < 90; i17++) {
                lArr[i17] *= i;
                Test.iFld -= i2;
                for (i19 = 1; i19 < 2; i19++) {
                    switch (((i19 >>> 1) % 10) + 42) {
                    case 42:
                        Test.instanceCount >>= Test.byFld;
                        Test.instanceCount = i20;
                        dFld += i2;
                        break;
                    case 43:
                        i20 <<= i1;
                        iArr[i2 + 1] >>= -7;
                        if (true) continue;
                        break;
                    case 44:
                        dFld += -45111;
                        break;
                    case 45:
                        i3 = Test.byFld;
                        i21 = i;
                        break;
                    case 46:
                        i21 -= (int)Test.fFld;
                        i20 += (-228 + (i19 * i19));
                        iArr[i17] = (int)Test.instanceCount;
                        i20 += i19;
                        break;
                    case 47:
                        Test.iFld = i3;
                        Test.fFld += (i19 + i2);
                        i21 -= (int)Test.fFld;
                        break;
                    case 48:
                        Test.instanceCount += i17;
                        i3 = i20;
                        i3 = i3;
                    case 49:
                        i20 += 6;
                        break;
                    case 50:
                        Test.byFld = (byte)i21;
                        break;
                    case 51:
                        Test.instanceCount += (long)Test.fFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i17 i18 = " + i3 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("lArr iArr = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.byFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.byFld);

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
