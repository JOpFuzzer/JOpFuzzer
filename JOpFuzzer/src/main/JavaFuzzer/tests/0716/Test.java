// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2058L;
    public static byte byFld=0;
    public static boolean bFld=true;
    public static short sFld=25477;
    public static int iArrFld[][]=new int[N][N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 98);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i12=-27447, i13=-1, i14=-120, i15=7, i16=-59798, i17=13;
        float f1=0.840F;
        byte by=13;
        double d=64.94823;

        Test.instanceCount *= i12;
        f1 = i12;
        Test.bFld = Test.bFld;
        for (i13 = 4; 207 > i13; i13++) {
            i12 += (((i13 * f1) + i14) - i13);
            if (i12 != 0) {
                vMeth1_check_sum += i12 + Float.floatToIntBits(f1) + i13 + i14 + by + i15 + Double.doubleToLongBits(d)
                    + i16 + i17;
                return;
            }
            f1 = i14;
            Test.sFld -= (short)i14;
            f1 += (((i13 * by) + i13) - i14);
            i15 = 1;
            do {
                i14 += (i15 - i12);
                Test.iArrFld[i15][i15] += (int)d;
                for (i16 = i15; i16 < 1; ++i16) {
                    i17 = i13;
                    i17 *= i15;
                }
            } while (++i15 < 8);
        }
        vMeth1_check_sum += i12 + Float.floatToIntBits(f1) + i13 + i14 + by + i15 + Double.doubleToLongBits(d) + i16 +
            i17;
    }

    public static long lMeth(int i4, int i5, int i6) {

        int i7=-14, i8=169, i9=-18398, i10=-190, i11=-54854, i18=-64243;
        float f2=103.737F;

        i7 = 1;
        while ((i7 += 3) < 226) {
            for (i8 = 1; 21 > i8; i8++) {
                for (i10 = 2; i10 > 1; --i10) {
                    vMeth1();
                    i6 &= i8;
                    i5 = (int)70.106768;
                    Test.iArrFld[i10 + 1][i10] += (int)Test.instanceCount;
                    i4 %= -17481;
                }
                for (f2 = 1; f2 < 2; ++f2) {
                    int i19=-2;
                    i11 += (int)f2;
                    try {
                        Test.iArrFld[(int)(f2 - 1)][i8 - 1] = (i8 % -198);
                        i11 = (i10 / -227);
                        i19 = (-16829 / Test.iArrFld[i8][i7]);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[(int)(f2)][i8 + 1] <<= i10;
                    Test.instanceCount = Test.instanceCount;
                    i11 <<= Test.sFld;
                }
                i11 = i8;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f2) + i18;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i3, float f) {

        int i20=8, i21=-82, i22=12, i23=-185;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -181L);

        f *= (lMeth(i3, i3, -7) - i3);
        for (long l : lArr) {
            for (i20 = 1; i20 < 4; ++i20) {
                for (i22 = 1; i22 < 2; i22++) {
                    i23 = -18424;
                    l += (-223 + (i22 * i22));
                    switch ((i22 % 2) + 29) {
                    case 29:
                        switch ((i20 % 1) + 17) {
                        case 17:
                            i23 = (int)79.259F;
                            i23 *= i20;
                            Test.sFld >>>= Test.byFld;
                            break;
                        default:
                            if (Test.bFld) break;
                        }
                        break;
                    case 30:
                        if (Test.bFld) continue;
                        l += i22;
                    default:
                        Test.iArrFld[i20 + 1][i22] -= (int)Test.instanceCount;
                    }
                }
            }
        }
        vMeth_check_sum += i3 + Float.floatToIntBits(f) + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=61898, i1=34560, i2=3, i24=-1, i25=-14, i26=-41815, i27=191, i28=-222, i29=-47982;
        float f3=-85.964F, fArr[]=new float[N];
        double d1=0.10016;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 1278482434L);
        FuzzerUtils.init(fArr, 75.9F);

        for (i = 6; 160 > i; i++) {
            i1 += Math.min((198 + (i1 / (Test.byFld | 1))) + (i % (i1 | 1)), -(17 - (i2 *= 42803)));
            vMeth(i, 1.644F);
            Test.iArrFld[i] = Test.iArrFld[i];
            f3 -= i2;
            Test.instanceCount = i2;
            for (i24 = 4; i24 < 163; i24++) {
                switch (((i24 % 8) * 5) + 37) {
                case 49:
                    Test.iArrFld[i] = Test.iArrFld[i24];
                    i26 = 1;
                    while (++i26 < 2) {
                        switch ((i24 % 2) + 32) {
                        case 32:
                            Test.iArrFld[i24 + 1][i + 1] *= i2;
                            try {
                                Test.iArrFld[i][i26 - 1] = (Test.iArrFld[i24 - 1][i24 - 1] % -1087442717);
                                i1 = (-36 / i25);
                                i1 = (2145716127 % i25);
                            } catch (ArithmeticException a_e) {}
                            i1 += (i26 | i1);
                            i25 += (int)f3;
                            break;
                        case 33:
                            i1 ^= i26;
                            i2 += (((i26 * i) + i2) - i26);
                            dArrFld[i26 - 1] %= -2.290F;
                            break;
                        default:
                            i25 += i26;
                            Test.sFld >>= (short)100;
                            try {
                                i1 = (i % -57508);
                                Test.iArrFld[i26][i - 1] = (39927 % Test.iArrFld[i26][i26 + 1]);
                                i25 = (i25 / i25);
                            } catch (ArithmeticException a_e) {}
                            if (false) continue;
                        }
                        i1 += i26;
                        lArr1[i24 + 1][i - 1] = i26;
                        Test.bFld = Test.bFld;
                    }
                    for (i27 = 1; 2 > i27; ++i27) {
                        i25 = i25;
                        Test.instanceCount += (16815 + (i27 * i27));
                        i28 = i;
                        fArr[i27 + 1] *= i2;
                    }
                    break;
                case 46:
                    i2 *= -142;
                case 70:
                    Test.instanceCount <<= i26;
                case 38:
                    i29 -= (int)13L;
                case 69:
                    lArr1[i][i - 1] = i28;
                    break;
                case 48:
                    Test.byFld = (byte)d1;
                case 75:
                    i29 = i2;
                case 57:
                    i28 = i2;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("f3 i24 i25 = " + Float.floatToIntBits(f3) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 d1 lArr1 = " + i29 + "," + Double.doubleToLongBits(d1) + "," +
            FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.bFld = " + Test.instanceCount + "," + Test.byFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld Test.iArrFld dArrFld = " + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
