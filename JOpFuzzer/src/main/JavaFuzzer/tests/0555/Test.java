// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=158L;
    public static float fFld=2.552F;
    public static short sFld=-1924;
    public static volatile int iFld=-2;
    public static volatile double dFld=-1.75082;
    public static volatile long lFld=-9L;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4) {

        int i5=-6, i6=-243, i7=174, i8=2, i9=-48790, i10=96;
        byte by=-8;

        try {
            for (i5 = 2; i5 < 339; ++i5) {
                Test.iFld = (int)Test.instanceCount;
                Test.iFld += by;
            }
        }
        catch (NullPointerException exc1) {
            for (i7 = 18; 382 > i7; i7 += 3) {
                boolean b=false;
                if (b) {
                    Test.dFld += Test.instanceCount;
                    Test.iArrFld[i7] += i6;
                    Test.iFld += i6;
                } else if (b) {
                } else {
                    if (i6 != 0) {
                        vMeth1_check_sum += i3 + i4 + i5 + i6 + by + i7 + i8 + i9 + i10;
                        return;
                    }
                    i6 += (((i7 * i6) + Test.fFld) - i5);
                }
                if (b) continue;
                for (i9 = 1; i9 < 13; ++i9) {
                    Test.dFld *= by;
                }
                Test.iArrFld[i7 - 1] = (int)1.747F;
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + by + i7 + i8 + i9 + i10;
    }

    public static void vMeth(int i2, short s) {

        int i11=9378, i12=-252, i13=253, i14=-169, i15=18396, i16=-199, i17=-14;
        byte by1=37;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -775L);

        Test.instanceCount <<= (-(lArr[(i2 >>> 1) % N][(i2 >>> 1) % N] = (--i2)));
        vMeth1(Test.iFld, i2);
        Test.instanceCount = i2;
        i11 = 1;
        while (++i11 < 208) {
            for (i12 = 1; i12 < 8; i12++) {
                Test.lFld >>= Test.instanceCount;
                Test.lFld += Test.instanceCount;
            }
        }
        for (i14 = 249; i14 > 5; --i14) {
            for (i16 = 1; i16 < 7; ++i16) {
                if (Test.bFld) continue;
                i2 += (i16 ^ i13);
            }
            Test.iFld -= Test.iFld;
            i13 = (int)Test.fFld;
            if (Test.bFld) continue;
            Test.lFld += by1;
        }
        vMeth_check_sum += i2 + s + i11 + i12 + i13 + i14 + i15 + i16 + i17 + by1 + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i, int i1) {

        long l=3758489651429214023L, lArr1[]=new long[N];
        int i19=16, i20=10;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.709F);
        FuzzerUtils.init(lArr1, 3101455624L);

        i = (-i);
        fArr[(4 >>> 1) % N] += (Math.max((long)(Test.fFld + Test.sFld), Math.min(Test.instanceCount,
            Test.instanceCount)) % (i1 | 1));
        vMeth(-9122, (short)(-7584));
        i -= i1;
        Test.iArrFld[(Test.iFld >>> 1) % N] -= Test.sFld;
        Test.lFld += i;
        lArr1[(-56127 >>> 1) % N] -= Test.iFld;
        if (Test.bFld) {
            l = 1;
            do {
                Test.dFld += i1;
                Test.instanceCount += (l * l);
                i = -43853;
                for (i19 = 1; i19 < 7; i19++) {
                    if (Test.bFld) break;
                    i1 -= Test.iFld;
                }
            } while (++l < 238);
        } else if (Test.bFld) {
            i ^= Test.iFld;
        } else if (Test.bFld) {
            Test.lFld += Test.sFld;
        }
        long meth_res = i + i1 + l + i19 + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i21=31317, i22=-110, i23=11198, i24=-45, i25=172, i26=-8193, i27=-51114, i28=25053, i29=6664, i30=0,
            i31=-41785;
        long l1=-3410224803L, l2=1929L, l3=-2L, lArr2[][]=new long[N][N];
        byte by2=52;
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr2, 3741427584878576477L);
        FuzzerUtils.init(fArr1, 0.59F);

        iMeth(Test.iFld, Test.iFld);
        Test.iArrFld[(5 >>> 1) % N] |= Test.iFld;
        for (i21 = 17; i21 < 355; i21++) {
            Test.instanceCount /= (i22 | 1);
            Test.bFld = false;
            Test.fFld = Test.instanceCount;
            Test.iFld = i22;
            Test.iFld += (int)Test.fFld;
            i22 /= -129;
            i22 *= i22;
        }
        Test.iFld -= i21;
        i22 += (int)18968L;
        lArr2[(Test.iFld >>> 1) % N][(i21 >>> 1) % N] = i21;
        for (l1 = 18; 349 > l1; l1++) {
            switch ((int)((l1 % 8) + 89)) {
            case 89:
                switch ((int)(((l1 % 5) * 5) + 34)) {
                case 42:
                    Test.dFld += i22;
                    Test.sFld >>= (short)i21;
                    Test.instanceCount -= Test.iFld;
                    Test.iFld = (int)1.86889;
                    break;
                case 36:
                    for (i24 = 4; i24 < 76; ++i24) {
                        for (i26 = 1; 2 > i26; i26 += 3) {
                            lArr2[(int)(l1 - 1)][i26 + 1] *= l2;
                        }
                    }
                    for (i28 = 4; 76 > i28; i28++) {
                        Test.iArrFld[i28] = i21;
                        for (i30 = (int)(l1); i30 < 2; i30++) {
                            Test.iFld <<= by2;
                            Test.lFld = i23;
                            i23 += i30;
                            i22 -= (int)l3;
                        }
                    }
                case 59:
                    Test.iArrFld[(int)(l1 + 1)] = i30;
                    break;
                case 55:
                    Test.iArrFld[(5 >>> 1) % N] = (int)-9L;
                    break;
                case 49:
                    i29 = i22;
                    break;
                }
                break;
            case 90:
                fArr1 = fArr1;
                break;
            case 91:
                Test.sFld = (short)i21;
                break;
            case 92:
                i22 = 4152;
                break;
            case 93:
                i23 = 10;
                break;
            case 94:
                i29 = i29;
            case 95:
                Test.iFld -= i29;
            case 96:
                i29 = (int)Test.dFld;
                break;
            }
        }

        FuzzerUtils.out.println("i21 i22 l1 = " + i21 + "," + i22 + "," + l1);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 l2 = " + i26 + "," + i27 + "," + l2);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 by2 l3 = " + i31 + "," + by2 + "," + l3);
        FuzzerUtils.out.println("lArr2 fArr1 = " + FuzzerUtils.checkSum(lArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld Test.dFld Test.lFld = " + Test.iFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.lFld);
        FuzzerUtils.out.println("Test.bFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
