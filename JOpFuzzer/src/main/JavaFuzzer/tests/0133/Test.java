// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3861775461616342765L;
    public static int iFld=-99;
    public static boolean bFld=true;
    public static volatile int iFld1=-242;
    public static volatile double dFld=-2.67032;
    public static short sFld=-12417;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -137);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i5=161, i6=4, i7=38626, i8=-8, i9=-5;
        double d1=8.6995, dArr[]=new double[N];
        float f1=-4.150F, f2=-126.203F;

        FuzzerUtils.init(dArr, -113.33220);

        Test.instanceCount += -2;
        Test.instanceCount -= Test.iFld;
        i5 = 1;
        do {
            Test.iFld = i5;
            Test.iFld += i5;
            dArr[i5 + 1] *= d1;
            if (Test.bFld) break;
            Test.iFld = (int)Test.instanceCount;
        } while (++i5 < 159);
        for (f1 = 12; 326 > f1; ++f1) {
            for (i7 = 5; i7 > f1; i7 -= 3) {
                f2 = Test.iFld;
            }
            Test.instanceCount -= Test.iFld;
            i9 = 1;
            while (++i9 < 5) {
                Test.instanceCount = -11;
                i8 += (int)Test.instanceCount;
            }
        }
        long meth_res = i5 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i6 + i7 + i8 +
            Float.floatToIntBits(f2) + i9 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i3, int i4) {


        iMeth1();
        long meth_res = i3 + i4;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth() {

        int i=137, i1=9, i2=61896, i10=-124, i11=20634;
        double d=-1.109409;
        float f=-1.141F, f3=-65.391F;
        short s=23408;

        Test.instanceCount = (Test.iArrFld[(Test.iFld >>> 1) % N]++);
        Test.iFld *= (Test.iArrFld[(Test.iFld >>> 1) % N]++);
        for (i = 7; i < 144; i++) {
            for (d = 1; d < 11; d++) {
                i1 *= (Test.iFld--);
                Test.iFld >>= Test.iArrFld[i - 1];
                i2 += (int)(((d * i) + i) - f);
                Test.instanceCount = (long)(((-46.105221 - dMeth(-4903, i1)) + Test.iFld) * Test.iFld);
            }
            Test.iFld = i;
            for (i10 = 1; i10 < 11; i10++) {
                Test.iFld += (i10 - Test.instanceCount);
                f3 = 1;
                do {
                    i1 = (int)Test.instanceCount;
                    Test.instanceCount &= s;
                    Test.iArrFld[(int)(f3 - 1)] = Test.iFld1;
                } while (++f3 < 2);
            }
        }
        long meth_res = i + i1 + Double.doubleToLongBits(d) + i2 + Float.floatToIntBits(f) + i10 + i11 +
            Float.floatToIntBits(f3) + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f4=1.503F;
        int i12=58, i13=-19056, i14=143, i15=-13378, i16=-108, i17=-253, i18=160, i19=-48662;
        double d2=-2.77659;
        byte by=109;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8L);

        if (false) {
            Test.iFld += iMeth();
            Test.iFld1 -= (int)-40.716F;
        }
        f4 = Test.instanceCount;
        Test.iFld1 += (int)Test.dFld;
        for (i12 = 8; i12 < 206; i12++) {
            Test.iFld += i12;
            Test.instanceCount *= (long)f4;
        }
        i14 = -123;
        i14 -= i12;
        for (i15 = 16; i15 < 300; i15++) {
            Test.iArrFld[i15] += 102;
            Test.bArrFld = FuzzerUtils.boolean1array(N, (boolean)false);
            i14 += (i15 * Test.iFld);
            i14 = (int)Test.instanceCount;
            for (i17 = 1; i17 < 89; i17++) {
                Test.instanceCount = Test.iFld1;
                try {
                    i18 = (-169 / i18);
                    i18 = (36468 % i15);
                    Test.iFld = (466658427 / i17);
                } catch (ArithmeticException a_e) {}
                Test.iFld1 >>= i18;
                Test.instanceCount -= i13;
                f4 += (float)Test.dFld;
            }
            i16 = 10;
            if (true) break;
            f4 *= Test.iFld1;
        }
        d2 = 1;
        while (++d2 < 266) {
            switch ((((i17 >>> 1) % 3) * 5) + 36) {
            case 46:
                by *= (byte)i14;
                i19 += (int)d2;
                lArr[(int)(d2)] += i19;
                break;
            case 38:
                i13 *= (int)Test.instanceCount;
                break;
            case 43:
                i18 = Test.sFld;
                break;
            default:
                i14 += 5;
            }
        }

        FuzzerUtils.out.println("f4 i12 i13 = " + Float.floatToIntBits(f4) + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 d2 = " + i17 + "," + i18 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("by i19 lArr = " + by + "," + i19 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld1 Test.dFld Test.sFld = " + Test.iFld1 + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
