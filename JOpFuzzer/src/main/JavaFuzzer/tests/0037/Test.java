// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-60378L;
    public static float fFld=53.479F;
    public static byte byFld=-37;
    public static short sFld=-17105;
    public int iFld=0;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public byte byArrFld[][]=new byte[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14);
        FuzzerUtils.init(Test.dArrFld, 0.129189);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(boolean b) {

        long l2=-15793L;
        int i6=-43967;
        double d2=0.92371, d3=-82.20052;

        for (int i5 : Test.iArrFld) {
            for (l2 = 1; l2 < 4; ++l2) {
                i5 *= (int)l2;
                i5 = i5;
                Test.iArrFld = Test.iArrFld;
                i6 += (int)d2;
                i5 += i5;
                b = true;
                Test.iArrFld[(int)(l2)] -= (int)Test.instanceCount;
                d3 = 1;
                while (++d3 < 2) {
                    i6 = i5;
                    i6 /= (int)(i5 | 1);
                    Test.instanceCount = (long)d2;
                    i6 <<= i5;
                    Test.instanceCount += (long)((long)d3 ^ i5);
                }
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + l2 + i6 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3);
    }

    public static int iMeth(int i3, int i4) {

        boolean b1=false;
        int i7=64262, i8=85, i9=-176;
        short s=-4572;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8L);

        vMeth1(b1);
        i3 = i3;
        for (i7 = 2; 133 > i7; ++i7) {
            i8 += (i7 * i7);
            i8 = (int)Test.instanceCount;
            s -= (short)i8;
            Test.instanceCount = 31758;
            i8 += (i7 * i7);
            Test.byFld += (byte)(i7 * i7);
            if (b1) {
                i4 <<= 10;
                i9 = 1;
                while (++i9 < 12) {
                    b1 = b1;
                    i3 = i8;
                    Test.iArrFld[i7 - 1] = i9;
                }
            } else if (b1) {
                Test.instanceCount = s;
            } else if (b1) {
                i8 >>= 55;
            } else {
                i8 = (int)2.5105;
            }
        }
        long meth_res = i3 + i4 + (b1 ? 1 : 0) + i7 + i8 + s + i9 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, long l, int i1) {

        double d1=126.79930;
        long l1=2215373834L, lArr1[]=new long[N];
        int i2=86, i10=1;
        boolean b2=false;

        FuzzerUtils.init(lArr1, -8L);

        d1 *= i1;
        if (b2) {
            for (l1 = 15; 305 > l1; ++l1) {
                Test.instanceCount = ((-iMeth(i, -40620)) * l);
                try {
                    i = (i1 % i1);
                    i = (i2 / Test.iArrFld[(int)(l1)]);
                    i = (i2 / -56425);
                } catch (ArithmeticException a_e) {}
                i2 = Test.sFld;
            }
            i = i1;
        }
        i10 = 362;
        while (--i10 > 0) {
            lArr1[i10] *= i2;
            Test.instanceCount = Test.byFld;
        }
        i1 += (int)l;
        i1 -= (int)l;
        lArr1[(i1 >>> 1) % N] = -6366994345493682331L;
        Test.fFld *= i1;
        i2 >>>= i;
        vMeth_check_sum += i + l + i1 + Double.doubleToLongBits(d1) + l1 + i2 + (b2 ? 1 : 0) + i10 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        double d=-105.119985;
        int i11=79, i12=14, i13=-205, i14=-13, i15=-12, i16=22951, i17=150;
        boolean b3=true;
        float f=-105.325F;

        Test.fFld -= (float)((-(Test.byFld--)) + (d--));
        vMeth(51854, Test.instanceCount, i11);
        for (i12 = 1; i12 < 170; i12++) {
            switch (((i12 % 9) * 5) + 41) {
            case 66:
                Test.instanceCount = i12;
                break;
            case 55:
                i13 = i13;
                for (i14 = 2; i14 < 148; ++i14) {
                    for (i16 = 1; i16 < 2; ++i16) {
                        Test.fFld -= i11;
                        Test.fFld += (i16 - Test.sFld);
                        Test.iArrFld[i12] += i16;
                        Test.instanceCount += (i16 * i16);
                        if (b3) {
                            Test.dArrFld[i12 - 1] -= i14;
                        }
                        i15 += (i16 * Test.fFld);
                        Test.instanceCount = Test.instanceCount;
                        Test.byFld = (byte)492;
                        Test.iArrFld[i12] <<= i12;
                    }
                    if (b3) break;
                    f += i12;
                    i11 += (-96 + (i14 * i14));
                    switch ((i12 % 3) + 16) {
                    case 16:
                        i13 += (i14 * i14);
                        d -= 0;
                        i13 += i14;
                        i17 &= i17;
                        break;
                    case 17:
                        switch (((i12 % 8) * 5) + 87) {
                        case 109:
                            Test.sFld = (short)i14;
                            i13 += i13;
                            break;
                        case 90:
                            Test.instanceCount += (i14 ^ Test.instanceCount);
                            break;
                        case 121:
                            Test.instanceCount = i14;
                        case 117:
                            i15 += (int)Test.instanceCount;
                            break;
                        case 101:
                            iFld = (int)-5L;
                            break;
                        case 102:
                            Test.instanceCount >>>= i15;
                            break;
                        case 125:
                            iFld >>= i16;
                            break;
                        case 126:
                        }
                        break;
                    case 18:
                        byArrFld[i12 - 1][i14 + 1] = (byte)i16;
                        break;
                    default:
                        i15 -= (int)d;
                    }
                }
                break;
            case 70:
                i11 += (int)Test.instanceCount;
                break;
            case 60:
                i15 -= i12;
                break;
            case 47:
                iFld |= (int)Test.instanceCount;
            case 74:
                i11 *= iFld;
                break;
            case 50:
                i13 += (i12 * i12);
                break;
            case 46:
                Test.instanceCount <<= i15;
            case 67:
                d -= 0.95647;
                break;
            default:
                i17 += (i12 * i12);
            }
        }

        FuzzerUtils.out.println("d i11 i12 = " + Double.doubleToLongBits(d) + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 b3 = " + i16 + "," + i17 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("f = " + Float.floatToIntBits(f));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.sFld iFld Test.iArrFld = " + Test.sFld + "," + iFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.dArrFld byArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
