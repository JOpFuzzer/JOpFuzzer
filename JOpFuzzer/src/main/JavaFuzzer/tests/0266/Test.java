// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-983196763L;
    public static byte byFld=2;
    public static short sFld=31585;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)111);
        FuzzerUtils.init(Test.iArrFld, 56259);
    }

    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(long l, int i4) {

        float f=0.97F;
        long l1=126L;
        int i5=-14, i6=14, i7=8;
        double d=0.103599, dArr[]=new double[N];
        boolean b=true;

        FuzzerUtils.init(dArr, 34.113219);

        f *= l1;
        i5 = 1;
        do {
            i4 = i4;
            dArr[i5] -= i4;
            for (i6 = 1; 5 > i6; ++i6) {
                Test.iArrFld = Test.iArrFld;
                i7 <<= 43570;
                i4 -= (int)f;
                f -= i5;
                Test.iArrFld[i5 - 1] ^= i6;
                Test.iArrFld[i6] += Test.byFld;
                d = i6;
                f += i6;
                i7 = (int)l1;
            }
            if (b) break;
        } while (++i5 < 344);
        long meth_res = l + i4 + Float.floatToIntBits(f) + l1 + i5 + i6 + i7 + Double.doubleToLongBits(d) + (b ? 1 : 0)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static byte byMeth() {

        int i3=75, i8=-147, i9=-5, i10=188, i11=-8782;
        double d1=-71.54580;
        float f1=0.200F, fArr[]=new float[N];
        boolean b1=true;
        short s=-9195, sArr[][]=new short[N][N];

        FuzzerUtils.init(fArr, -12.32F);
        FuzzerUtils.init(sArr, (short)5283);

        i3 *= (int)(((++Test.byArrFld[(184 >>> 1) % N]) - Math.max(2, -6)) * dMeth(-552662792L, i3));
        d1 -= f1;
        i8 = 1;
        while (++i8 < 245) {
            fArr[i8] += i3;
            i3 = i8;
            d1 = Test.instanceCount;
            b1 = true;
            for (i9 = 7; i9 > 1; i9--) {
                Test.instanceCount += (i9 + i3);
                i3 += i8;
                sArr[i8] = FuzzerUtils.short1array(N, (short)-29794);
            }
            s -= (short)f1;
            i11 = 1;
            while (++i11 < 7) {
                i10 = i11;
                Test.instanceCount -= -26990;
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i8 + (b1 ? 1 : 0) + i9 + i10 + s
            + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth() {

        int i2=-83, i12=153, i13=30;
        double d2=-103.105375;
        boolean b2=true;
        long l2=1665152784L;
        float f2=90.854F;

        i2 >>= byMeth();
        try {
            i2 = i2;
            if (b2) {
                Test.byFld = (byte)Test.instanceCount;
                i2 -= (int)Test.instanceCount;
                d2 = 12133;
            }
            Test.sFld += (short)i2;
        }
        catch (ArithmeticException exc1) {
            for (i12 = 302; i12 > 18; --i12) {
                l2 += (((i12 * i13) + Test.sFld) - i12);
                i13 = i12;
                Test.sFld -= (short)-59;
                f2 = 6;
                while (--f2 > 0) {
                    i2 -= (int)Test.instanceCount;
                    Test.iArrFld[(int)(f2 + 1)] ^= i12;
                }
            }
        }
        finally {
            i2 = i12;
        }
        long meth_res = i2 + Double.doubleToLongBits(d2) + (b2 ? 1 : 0) + i12 + i13 + l2 + Float.floatToIntBits(f2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=49931, i14=2444, i15=-6, i16=61259;
        long l3=1170277239L, lArr[]=new long[N];
        float f3=0.832F;
        double d3=0.103831, d4=-117.83362;

        FuzzerUtils.init(lArr, -133L);

        i = 323;
        do {
            i1 = i1;
            switch (((i1 >>> 1) % 2) + 35) {
            case 35:
                Test.instanceCount -= iMeth();
                for (i14 = 9; i14 < 155; i14++) {
                    switch (((i >>> 1) % 4) + 64) {
                    case 64:
                        i1 *= (int)Test.instanceCount;
                        i15 += (-234 + (i14 * i14));
                        Test.instanceCount += (15840 + (i14 * i14));
                        break;
                    case 65:
                        i1 = (int)Test.instanceCount;
                        break;
                    case 66:
                        lArr[i + 1] = l3;
                        Test.iArrFld[i - 1] = (int)Test.instanceCount;
                        i1 = i;
                        i15 = (int)Test.instanceCount;
                        break;
                    case 67:
                        Test.iArrFld[i - 1] += i15;
                        i15 *= (int)f3;
                        for (d3 = 1; d3 < 2; ++d3) {
                            l3 -= i;
                            l3 += (long)(((d3 * l3) + l3) - Test.instanceCount);
                            i16 *= (int)l3;
                            d4 += Test.instanceCount;
                            Test.instanceCount += (long)d3;
                            l3 += i14;
                        }
                    default:
                        i1 = (int)f3;
                        try {
                            i1 = (i16 % -1417835462);
                            Test.iArrFld[i14] = (Test.iArrFld[i14 + 1] / 27819);
                            i16 = (i14 / 188);
                        } catch (ArithmeticException a_e) {}
                        i1 *= (int)-2.387F;
                    }
                    i16 >>= i;
                    i1 = 32132;
                    i16 *= i1;
                    d4 -= i;
                }
            case 36:
                i16 += i1;
                break;
            default:
                Test.sFld >>>= (short)l3;
            }
        } while ((i -= 2) > 0);

        FuzzerUtils.out.println("i i1 i14 = " + i + "," + i1 + "," + i14);
        FuzzerUtils.out.println("i15 l3 f3 = " + i15 + "," + l3 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("d3 i16 d4 = " + Double.doubleToLongBits(d3) + "," + i16 + "," +
            Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.sFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.byArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth mainTest
//DEBUG  dMeth ->  dMeth byMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
