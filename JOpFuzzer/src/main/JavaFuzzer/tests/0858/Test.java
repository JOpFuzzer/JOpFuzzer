// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=7328952034996340127L;
    public static float fFld=-106.578F;
    public static boolean bFld=true;
    public static volatile int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -179);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=-2, i3=177, i4=95, i5=-118, i6=170, i7=-2, i8=-85, i9=-125, iArr[]=new int[N];
        boolean b=true;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr, 5024);
        FuzzerUtils.init(fArr, 1.770F);

        iArr[(i2 >>> 1) % N] ^= i2;
        for (i3 = 11; 344 > i3; ++i3) {
            iArr[i3 - 1] *= i2;
            i2 = (int)Test.instanceCount;
            i5 = 1;
            while (++i5 < 5) {
                iArr[i5] = i4;
                for (i6 = i3; i6 < 1; ++i6) {
                    iArr[i3 + 1] = i6;
                }
                i7 >>= i7;
                for (i8 = 1; i8 < 1; i8++) {
                    if (b) continue;
                }
                try {
                    i4 = (-57603 / i8);
                    i7 = (i9 / 92);
                    iArr[i3] = (iArr[i5 + 1] % iArr[i3]);
                } catch (ArithmeticException a_e) {}
            }
            i9 >>>= i9;
            fArr[i3 - 1][i3] = -34904L;
            Test.instanceCount += (i3 * i3);
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i1, long l) {

        short s1=-21702;
        int i10=-63420, i11=-11, i12=40944, i13=4, i14=11784;
        byte by=-33;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -560501156234902747L);

        vMeth1();
        try {
            s1 = (short)i1;
            lArr[(-20489 >>> 1) % N] = i1;
            i1 += i1;
        }
        catch (NegativeArraySizeException exc2) {
            lArr[(i1 >>> 1) % N] = i1;
            for (i10 = 4; i10 < 148; i10 += 3) {
                Test.instanceCount >>= i1;
                i12 = 1;
                do {
                    i11 -= (int)Test.instanceCount;
                    for (i13 = 1; i13 < 1; i13++) {
                        i11 >>= -7183;
                        s1 = (short)l;
                        i14 *= i1;
                        by += (byte)(120 + (i13 * i13));
                    }
                } while (++i12 < 32);
            }
        }
        catch (UserDefinedExceptionTest exc3) {
            Test.iArrFld[(2 >>> 1) % N][(i14 >>> 1) % N] += (int)Test.instanceCount;
        }
        vMeth_check_sum += i1 + l + s1 + i10 + i11 + i12 + i13 + i14 + by + FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(short s, float f, int i) {


        vMeth(i, Test.instanceCount);
        i = (int)f;
        vSmallMeth_check_sum += s + Float.floatToIntBits(f) + i;
    }

    public void mainTest(String[] strArr1) {

        short s2=-26713;
        int i15=-9, i16=-73, i17=-10430, i18=-62815, i19=182, i20=172, i21=-7, i22=224, i23=87, i24=21529, i25=-14,
            i26=158, i27=34, i28=3, iArr1[]=new int[N];
        double d=-28.87991;
        byte by1=-5;

        FuzzerUtils.init(iArr1, 56875);

        for (int smallinvoc=0; smallinvoc<823; smallinvoc++) vSmallMeth(s2, Test.fFld, i15);
        d -= 56L;
        i16 = 1;
        while (++i16 < 328) {
            i15 -= (int)Test.instanceCount;
            Test.iArrFld[i16 + 1][i16 - 1] = 1;
            i15 += (i16 | i16);
        }
        for (i17 = 7; i17 < 153; ++i17) {
            for (i19 = 2; 172 > i19; i19++) {
                i15 = i20;
                Test.instanceCount += (i19 * i19);
                Test.iArrFld[i19][i19] += (int)Test.fFld;
                Test.iArrFld[i17][i19] = -10;
                i15 += i19;
                d = i18;
                by1 = (byte)Test.instanceCount;
                try {
                    i15 = (i17 / i18);
                    i20 = (-1597765908 % i16);
                    i20 = (i21 % iArr1[i17 + 1]);
                } catch (ArithmeticException a_e) {}
            }
            for (i22 = 1; i22 < 172; i22++) {
                i18 *= i22;
            }
            if (Test.bFld) {
                for (i24 = i17; i24 < 172; ++i24) {
                    i20 -= (int)d;
                }
                switch (((i16 >>> 1) % 7) + 60) {
                case 60:
                    i26 = 1;
                    do {
                        i23 += i26;
                        switch ((i26 % 6) + 8) {
                        case 8:
                            for (i27 = i17; i27 < 1; i27++) {
                                Test.fFld = i20;
                                s2 *= (short)Test.instanceCount;
                                Test.instanceCount += (62106 + (i27 * i27));
                                i18 = 10;
                            }
                        case 9:
                            Test.iArrFld[i17 - 1][i17] = (int)Test.instanceCount;
                            break;
                        case 10:
                            by1 += (byte)(i26 * i26);
                        case 11:
                            Test.fFld += i26;
                            break;
                        case 12:
                            Test.instanceCount -= i28;
                            break;
                        case 13:
                            i18 >>>= (int)11052L;
                            break;
                        default:
                            i18 %= (int)(i19 | 1);
                        }
                    } while (++i26 < 172);
                    break;
                case 61:
                    Test.bFld = Test.bFld;
                    break;
                case 62:
                    i18 <<= i25;
                    break;
                case 63:
                    i21 += (((i17 * i25) + i16) - s2);
                    break;
                case 64:
                    try {
                        i18 = (i17 / -1775495811);
                        i23 = (45049 / i21);
                        i20 = (-35580 % iArr1[i17]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 65:
                    Test.fFld += i17;
                    break;
                case 66:
                    i25 -= i19;
                    break;
                default:
                    i23 <<= (int)Test.instanceCount;
                }
            } else if (Test.bFld) {
                i21 = by1;
            } else if (Test.bFld) {
                iArr1[i17 - 1] >>>= i18;
            } else {
                i25 -= (int)-2.712F;
            }
        }

        FuzzerUtils.out.println("s2 i15 d = " + s2 + "," + i15 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 by1 = " + i19 + "," + i20 + "," + by1);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 iArr1 = " + i27 + "," + i28 + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
