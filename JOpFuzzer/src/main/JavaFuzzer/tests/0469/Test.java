// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=60942L;
    public static short sFld=-15569;
    public static int iFld=-9;
    public static float fFld=23.220F;
    public static long lArrFld[][]=new long[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 8L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i3=1, i4=3, i5=23643, i6=-33628, i7=14, iArr[]=new int[N];
        double d=71.35877;
        float f=-2.244F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2697364062L);
        FuzzerUtils.init(iArr, 11);

        try {
            switch (((i3 >>> 1) % 6) + 48) {
            case 48:
                Test.instanceCount += i3;
                i3 += i3;
                break;
            case 49:
                i4 = 1;
                do {
                    Test.instanceCount >>= -9;
                    lArr[i4 - 1] = Test.sFld;
                    i3 = (int)d;
                    i5 = 1;
                    do {
                        for (i6 = i4; i6 < (1 + 400); ++i6) {
                            f -= i4;
                            i7 += (-35044 + (i6 * i6));
                            i3 += i6;
                            Test.instanceCount |= i6;
                        }
                        i7 >>= (int)Test.instanceCount;
                    } while (++i5 < 5);
                } while (++i4 < 336);
                break;
            case 50:
                d = i3;
                break;
            case 51:
                f *= 3477142854L;
                break;
            case 52:
                iArr = iArr;
            case 53:
                Test.sFld = (short)36864;
                break;
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            i7 += 217;
        }
        finally {
            i7 = i5;
        }
        long meth_res = i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 + i7 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2) {


        i1 -= iMeth1();
        i1 -= i2;
        vMeth_check_sum += i1 + i2;
    }

    public static int iMeth() {

        float f1=89.28F, f2=-15.803F;
        int i8=-6, i9=5, i10=14, i11=7, i12=-3, i13=-237, iArr1[][]=new int[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-2229);
        FuzzerUtils.init(iArr1, 2);

        vMeth(Test.iFld, 56784);
        sArr[(Test.iFld >>> 1) % N] = (short)Test.instanceCount;
        Test.iFld += Test.iFld;
        iArr1[(11 >>> 1) % N][(-8 >>> 1) % N] = (int)Test.instanceCount;
        for (f1 = 7; 128 > f1; ++f1) {
            i9 = 1;
            while (++i9 < 13) {
                Test.iFld = i9;
            }
            i8 /= (int)(Test.iFld | 1);
            for (i10 = 1; i10 < 13; i10++) {
                iArr1[(int)(f1)][(int)(f1 - 1)] &= Test.sFld;
                f2 = Test.sFld;
            }
        }
        Test.instanceCount = Test.sFld;
        for (i12 = 9; i12 < 204; ++i12) {
            Test.iFld <<= i11;
            if (i11 != 0) {
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + Float.floatToIntBits(f2) + i12 + i13 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=52142, i14=58313, i15=3, i16=-85, i17=60236, i18=3561, i19=-11456, i20=190, i21=7, iArr2[]=new int[N];
        long l=-3989008500L;
        boolean b=true;
        byte by=-35;
        double d1=-33.6715;
        short sArr1[]=new short[N];

        FuzzerUtils.init(iArr2, 21819);
        FuzzerUtils.init(sArr1, (short)14849);

        i += iMeth();
        Test.lArrFld = Test.lArrFld;
        iArrFld[(-141 >>> 1) % N] -= i;
        Test.lArrFld[(Test.iFld >>> 1) % N][(i14 >>> 1) % N] &= -1;
        for (i15 = 7; i15 < 244; i15++) {
            Test.iFld += i15;
            iArr2[i15] = i14;
            Test.fFld -= i14;
            i = (int)Test.instanceCount;
            Test.lArrFld[i15 + 1][i15 + 1] += 46L;
        }
        Test.instanceCount = Test.instanceCount;
        l = 1;
        do {
            Test.instanceCount += l;
            i %= (int)(Test.iFld | 1);
            if (b) break;
            Test.instanceCount += (7 + (l * l));
            i17 = 1;
            do {
                i <<= (int)Test.instanceCount;
            } while (++i17 < 103);
            by -= (byte)-86;
            i14 += i14;
        } while (++l < 243);
        i14 -= i14;
        Test.instanceCount = i16;
        for (i18 = 1; i18 < 149; ++i18) {
            for (i20 = 10; i20 < 169; ++i20) {
                d1 = i;
                sArr1[i20] = (short)i15;
                Test.iFld |= Test.sFld;
            }
            Test.instanceCount += -206;
            i19 += (i18 + i15);
            Test.fFld += i20;
        }

        FuzzerUtils.out.println("i i14 i15 = " + i + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 l b = " + i16 + "," + l + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i17 by i18 = " + i17 + "," + by + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("d1 iArr2 sArr1 = " + Double.doubleToLongBits(d1) + "," + FuzzerUtils.checkSum(iArr2) +
            "," + FuzzerUtils.checkSum(sArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.iFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.lArrFld iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
