// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public static double dFld=-1.44786;
    public static short sFld=10113;
    public static float fFld=-9.363F;
    public byte byFld=35;
    public boolean bFld=true;
    public long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.919F);
        FuzzerUtils.init(Test.iArrFld, -4);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth() {

        int i9=-1, i10=29548, i11=-81, i12=60979, i13=38;
        float f=-51.852F, f1=23.803F;
        boolean b=false;

        for (i9 = 6; i9 < 223; ++i9) {
            f *= i9;
            i11 = 1;
            while (++i11 < 7) {
                i10 = i10;
                Test.instanceCount -= 14;
                b = false;
                i12 = 1;
                while ((i12 -= 3) > 0) {
                    Test.instanceCount += i12;
                }
                for (f1 = 1; f1 < 1; f1++) {
                    Test.dFld += Test.dFld;
                    Test.iArrFld[(int)(f1)] *= i13;
                    Test.instanceCount += (long)f1;
                    f += f;
                    if (b) break;
                }
                Test.fArrFld[i9 - 1] -= i11;
            }
        }
        long meth_res = i9 + i10 + Float.floatToIntBits(f) + i11 + (b ? 1 : 0) + i12 + Float.floatToIntBits(f1) + i13;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth1(int i5, int i6) {

        double d=26.130575;
        int i7=-4, i8=57414, iArr2[]=new int[N];
        byte by=-101;
        long l=1959628073L;

        FuzzerUtils.init(iArr2, -222);

        for (d = 3; 211 > d; ++d) {
            i7 += (int)(((d * Test.sFld) + i6) - i5);
            i8 = 1;
            do {
                iArr2[i8] -= ((sMeth() - by) + i8);
                l = 1;
                while ((l -= 2) > 0) {
                    i6 -= i6;
                    i6 -= (int)-2.271F;
                    switch (((i5 >>> 1) % 8) + 6) {
                    case 6:
                        i5 += (int)(l | Test.instanceCount);
                    case 7:
                        Test.iArrFld[(int)(d - 1)] *= i8;
                        i7 = i7;
                        Test.fFld = -13L;
                    case 8:
                        i7 -= i5;
                        break;
                    case 9:
                        i6 = i6;
                        break;
                    case 10:
                        Test.fFld *= i6;
                        break;
                    case 11:
                        i7 |= i6;
                    case 12:
                        i7 = (int)Test.instanceCount;
                    case 13:
                        i5 = (int)l;
                        break;
                    default:
                        i7 <<= i8;
                    }
                }
            } while (++i8 < 8);
        }
        vMeth1_check_sum += i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + by + l + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth() {

        int i3=52637, i4=165, i14=-192, i15=8, i16=50384, i17=12, iArr1[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, -70);
        FuzzerUtils.init(byArr, (byte)-124);

        for (i3 = 12; 353 > i3; i3++) {
            try {
                i4 = (iArr1[i3 + 1] % i4);
                i4 = (i4 % -1505530655);
                i4 = (740298315 % i3);
            } catch (ArithmeticException a_e) {}
        }
        vMeth1(i4, i4);
        Test.fArrFld = Test.fArrFld;
        iArr1[(i4 >>> 1) % N] = -5;
        i14 = 1;
        while (++i14 < 381) {
            i15 = 1;
            while (++i15 < 4) {
                Test.dFld -= i4;
                i4 *= -78;
                Test.instanceCount += Test.instanceCount;
                try {
                    i4 = (i15 / -186);
                    i4 = (i14 / i14);
                    i4 = (i15 / -56);
                } catch (ArithmeticException a_e) {}
                for (i16 = i14; 1 > i16; i16++) {
                    byArr[i15 - 1] = (byte)3;
                }
                Test.sFld %= (short)(i4 | 1);
                Test.iArrFld[i15 - 1] = (int)Test.dFld;
            }
        }
        vMeth_check_sum += i3 + i4 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=122, i1=19140, i2=0, i18=23340, i19=52852, i20=-46114, i21=20876, i22=-14, i23=-25680, i24=113, i25=9653,
            iArr[]=new int[N];
        short s=9319;
        long l1=3L;

        FuzzerUtils.init(iArr, 24083);

        lArrFld[(i >>> 1) % N] = (Math.abs(Math.abs(Test.instanceCount)) + Test.instanceCount);
        for (i1 = 7; i1 < 276; i1++) {
            s = (short)(iArr[i1 + 1]--);
            i += (int)((i1 >> (i2 - Test.instanceCount)) - (++Test.dFld));
            Test.fArrFld[i1] = Math.max(iArr[i1]--, i);
            vMeth();
            for (l1 = 1; l1 < 93; ++l1) {
                i += (int)l1;
                Test.instanceCount -= -35416;
                i18 >>>= 130;
                i18 = i18;
                iArr[(int)(l1 + 1)] -= (int)l1;
            }
            i19 = 1;
            while (++i19 < 93) {
                i20 ^= i20;
                i18 += (i19 ^ i19);
                switch ((i19 % 4) + 119) {
                case 119:
                    for (i21 = 1; i21 < 1; ++i21) {
                        Test.instanceCount >>= i2;
                    }
                    switch ((((i19 >>> 1) % 4) * 5) + 79) {
                    case 81:
                        i23 = 1;
                        while (++i23 < 1) {
                            Test.instanceCount >>>= 26193;
                            Test.sFld <<= (short)44868;
                        }
                        break;
                    case 84:
                        for (i24 = 1; i24 < 1; ++i24) {
                            i20 += i;
                            i2 = -112;
                            Test.fFld = i;
                            i20 *= byFld;
                            i25 *= (int)Test.dFld;
                            i20 += (int)(0.766F + (i24 * i24));
                        }
                    case 98:
                        i += (i19 * Test.instanceCount);
                        break;
                    case 95:
                        bFld = bFld;
                        break;
                    default:
                        if (bFld) continue;
                    }
                    break;
                case 120:
                    Test.sFld += (short)(-20L + (i19 * i19));
                    break;
                case 121:
                    i25 = s;
                    break;
                case 122:
                    Test.iArrFld[i1 - 1] -= (int)1.955F;
                    break;
                default:
                    lArrFld = lArrFld;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("s l1 i18 = " + s + "," + l1 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 iArr = " + i25 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld byFld bFld = " + Float.floatToIntBits(Test.fFld) + "," + byFld + "," + (bFld
            ? 1 : 0));
        FuzzerUtils.out.println("lArrFld Test.fArrFld Test.iArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
