// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=7347540323073380460L;
    public float fFld=-7.626F;
    public static double dFld=1.26121;
    public int iArrFld[]=new int[N];
    public static double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.23587);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i10, float f2) {

        int i11=-63541, i12=-59674, iArr2[]=new int[N];
        double d2=-1.117832, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 47.110310);
        FuzzerUtils.init(iArr2, -6);

        i10 >>= 27438;
        i10 = i10;
        i11 = 1;
        do {
            i10 = (int)f2;
            i10 += (int)Test.instanceCount;
            i10 -= 208;
            i10 <<= i11;
            if (i10 != 0) {
            }
            i12 = 1;
            do {
                switch (((i12 % 6) * 5) + 98) {
                case 101:
                    d2 = 1;
                    do {
                        dArr[i12 - 1] += 12;
                        Test.instanceCount += (230 + (d2 * d2));
                    } while (++d2 < 1);
                    i10 = (int)Test.instanceCount;
                    iArr2[i12] += i11;
                    break;
                case 126:
                    i10 += (i12 * i12);
                    break;
                case 103:
                    f2 *= f2;
                    break;
                case 124:
                    dArr[i12] *= -3507;
                case 115:
                    f2 -= 8;
                case 112:
                    i10 = i11;
                    break;
                }
            } while (++i12 < 7);
        } while (++i11 < 240);
        long meth_res = i10 + Float.floatToIntBits(f2) + i11 + i12 + Double.doubleToLongBits(d2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i9, double d1, float f1) {

        short s=-18499;
        int i13=-12, i14=3, i15=157, i16=-13, i17=-4, i18=229, iArr1[]=new int[N];
        byte by1=34;
        boolean b=false;

        FuzzerUtils.init(iArr1, 9);

        iArr1[(i9 >>> 1) % N] *= (++i9);
        i9 -= (Math.min(i9++, s * i9) - iMeth1(i9, f1));
        d1 += i9;
        for (i13 = 3; i13 < 391; ++i13) {
            d1 -= -49;
            s -= (short)f1;
            iArr1 = iArr1;
            for (i15 = 1; 4 > i15; ++i15) {
                f1 += i9;
                f1 -= 15.100F;
                i16 += i15;
                if (b) {
                    for (i17 = 1; i17 < 2; i17++) {
                        d1 += i16;
                        f1 = Test.instanceCount;
                    }
                } else if (b) {
                    by1 += (byte)(i15 ^ i18);
                } else if (b) {
                    i18 += (((i15 * i13) + s) - i17);
                }
            }
        }
        vMeth_check_sum += i9 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + s + i13 + i14 + i15 + i16 +
            i17 + i18 + by1 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i2, float f) {

        byte by=-65;
        int i3=-198, i4=8, i5=83, i6=6, i7=-11828, i8=246, i19=11, i20=-49448, iArr[]=new int[N];
        double d=1.117386;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 65093L);
        FuzzerUtils.init(fArr, -2.0F);
        FuzzerUtils.init(iArr, 6055);

        by += (byte)lArr[(i2 >>> 1) % N];
        for (i3 = 138; i3 > 7; --i3) {
            for (i5 = i3; i5 < 12; i5++) {
                for (i7 = 1; i7 < 1; i7++) {
                    i8 = (int)(-(i2 - (126 + (i6 - -6391292834556781473L))));
                    Test.instanceCount += ((Test.instanceCount = Math.min(i6, i5)) + i2);
                    i8 *= (int)((-(Test.instanceCount + Test.instanceCount)) * ((Test.instanceCount * d) - fArr[i3 -
                        1]));
                    iArr[i3 - 1] <<= (int)lArr[i5 - 1];
                }
                try {
                    i2 = (49 / iArr[i5 + 1]);
                    iArr[i3 + 1] = (20664 % i2);
                    i8 = (-44683 / i5);
                } catch (ArithmeticException a_e) {}
            }
            d = (i2--);
            i8 |= (int)(iArr[i3] - Test.instanceCount);
        }
        vMeth(12, d, f);
        for (i19 = 10; 299 > i19; i19++) {
            d -= f;
            f += (((i19 * f) + f) - i4);
        }
        long meth_res = i2 + Float.floatToIntBits(f) + by + i3 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) +
            i19 + i20 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-123, i1=46160, i21=248, i22=-2, i23=-14, i24=49, i25=188, i26=-8;
        double d3=-1.76391;
        long l=-12L, lArr1[]=new long[N];
        boolean b1=false;

        FuzzerUtils.init(lArr1, 9L);

        for (i = 10; 345 > i; i += 2) {
            iMeth(i, fFld);
            i21 = 1;
            do {
                i1 += (int)fFld;
                i1 = i1;
                try {
                    iArrFld[i21 + 1] = (1394018976 % i21);
                    i1 = (iArrFld[i] % iArrFld[i21 + 1]);
                    i1 = (i1 / i21);
                } catch (ArithmeticException a_e) {}
                for (i22 = 1; i22 > 1; i22--) {
                    Test.instanceCount = i22;
                    i23 <<= 37703;
                    Test.dFld += Test.instanceCount;
                    i23 += (i22 + i1);
                    i23 *= (int)46.201F;
                    Test.instanceCount = 3003088392891632117L;
                    i23 -= i21;
                    iArrFld[i22 + 1] = i22;
                }
                Test.instanceCount <<= -67;
                for (d3 = 1; d3 < 1; ++d3) {
                    Test.dArrFld[i21 - 1][(int)(d3 - 1)] -= i1;
                }
                i24 *= i21;
                for (i25 = 1; i25 < 1; ++i25) {
                    if (b1) {
                        fFld += i;
                        Test.instanceCount += (((i25 * i23) + i23) - i23);
                        i23 *= i22;
                        i26 *= i1;
                    } else if (b1) {
                        i26 -= i23;
                        i26 *= (int)l;
                        lArr1[i21 + 1] *= 87;
                        i23 += i25;
                    }
                    i23 += (int)fFld;
                }
            } while (++i21 < 150);
        }

        FuzzerUtils.out.println("i i1 i21 = " + i + "," + i1 + "," + i21);
        FuzzerUtils.out.println("i22 i23 d3 = " + i22 + "," + i23 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("l b1 lArr1 = " + l + "," + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iArrFld Test.dArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
