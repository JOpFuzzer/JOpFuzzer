// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-48386L;
    public boolean bFld=false;
    public static boolean bFld1=true;
    public static float fFld=0.567F;
    public static volatile byte byFld=-74;
    public static volatile int iArrFld[][]=new int[N][N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 5);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, short s, float f1) {

        int i10=-38265, i11=-29555, i12=31497, i13=8, i14=-6, i15=55004, i16=52560, i17=3764;
        boolean b=false;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 70.953F);

        i10 = 1;
        do {
            i11 = i10;
            fArr[i10][i10] = i11;
            i11 = (int)f1;
            i11 += (((i10 * i11) + i11) - i11);
            fArr[i10 + 1][i10 - 1] -= i10;
            for (i12 = 6; i12 > 1; i12--) {
                Test.instanceCount += -5447677638014358258L;
                for (i14 = 1; i14 < 2; i14++) {
                    double d1=-13.114181;
                    i13 = (int)Test.instanceCount;
                    b = true;
                    d1 *= i11;
                }
                for (i16 = 1; i16 < 2; ++i16) {
                    i17 = i10;
                    fArr[i10][i16] -= Test.instanceCount;
                }
            }
        } while (++i10 < 293);
        vMeth1_check_sum += Float.floatToIntBits(f) + s + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + i15
            + (b ? 1 : 0) + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i5) {

        int i6=8, i7=7, i8=5, i9=0, i18=0, i19=-8;
        double d=0.36784;
        float f2=16.253F;
        short s1=-31764;
        byte by=-118;

        for (i6 = 15; i6 < 361; ++i6) {
            d = 1;
            do {
                for (i8 = 1; 1 > i8; ++i8) {
                    vMeth1(f2, s1, f2);
                }
                i7 ^= i5;
                for (i18 = 1; i18 < 1; i18++) {
                    Test.instanceCount += (i18 + i19);
                    Test.bFld1 = Test.bFld1;
                    by = (byte)i18;
                    if (Test.bFld1) continue;
                    Test.instanceCount *= (long)d;
                }
                by += (byte)(((d * i7) + s1) - i8);
            } while (++d < 5);
            i7 -= (int)Test.instanceCount;
        }
        i19 += s1;
        Test.instanceCount = (long)d;
        vMeth_check_sum += i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 + Float.floatToIntBits(f2) + s1 + i18 +
            i19 + by;
    }

    public static void vSmallMeth(long l, int i3, int i4) {


        i3 = (int)((++Test.instanceCount) - (i4--));
        vMeth(i3);
        vSmallMeth_check_sum += l + i3 + i4;
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i1=236, i2=-36293, i20=4, i21=-7, i22=-25929;
        double d2=-48.4145;
        byte by1=-80;
        long l1=1281930150L;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        bFld = (bFld = (bArr[(i >>> 1) % N] = bFld));
        for (i1 = 261; i1 > 9; i1 -= 2) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(Test.instanceCount, i, i);
            i20 = 1;
            while (++i20 < 199) {
                short s2=-7476;
                s2 -= (short)42243;
                d2 -= Test.instanceCount;
                Test.instanceCount &= i2;
                Test.instanceCount += Test.instanceCount;
                bFld = bFld;
                if (bFld) {
                    i2 -= i20;
                    i += i20;
                    Test.instanceCount <<= i20;
                    Test.fFld -= i;
                } else {
                    i = i;
                    by1 = (byte)i2;
                    i2 *= 725;
                }
                for (i21 = 1; 1 > i21; i21++) {
                    i2 = Test.byFld;
                    i22 = i1;
                    i22 ^= (int)Test.instanceCount;
                    i = (int)-2.115657;
                    Test.iArrFld[i21][i20 - 1] = i22;
                    Test.byFld = (byte)673;
                    lArrFld[i20 + 1] = -87;
                }
                s2 += (short)(191 + (i20 * i20));
                if (bFld) {
                    l1 += (((i20 * by1) + Test.instanceCount) - i1);
                    i22 += i20;
                    i2 += 45614;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i20 d2 by1 = " + i20 + "," + Double.doubleToLongBits(d2) + "," + by1);
        FuzzerUtils.out.println("i21 i22 l1 = " + i21 + "," + i22 + "," + l1);
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount bFld Test.bFld1 = " + Test.instanceCount + "," + (bFld ? 1 : 0) +
            "," + (Test.bFld1 ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.byFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.byFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
