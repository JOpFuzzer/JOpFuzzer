// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public static boolean bFld=false;
    public static int iFld=-9;
    public static double dFld=1.9100;
    public short sFld=9071;
    public byte byFld=64;

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(short s1, short s2, int i6) {

        int i7=-29347, i8=-233, i9=-40495, i10=25888, i11=45197, i12=-5, i13=-2, i14=-13, i15=46, iArr2[]=new int[N];
        short s3=-29670;
        byte by1=-49;
        float fArr1[][]=new float[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr1, -117.385F);
        FuzzerUtils.init(iArr2, -37327);
        FuzzerUtils.init(lArr1, 3804710482L);

        fArr1[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = i6;
        iArr2 = iArr2;
        for (i7 = 186; 7 < i7; --i7) {
            i9 = 1;
            while (++i9 < 9) {
                s3 *= (short)94;
            }
            for (i10 = 1; i10 < 9; ++i10) {
                Test.instanceCount += i10;
                Test.instanceCount = i11;
            }
            lArr1[i7 - 1] >>= i11;
            Test.instanceCount += (((i7 * i8) + Test.instanceCount) - by1);
            i11 = 29086;
        }
        for (i12 = 13; i12 < 357; ++i12) {
            i14 = 1;
            while (++i14 < 5) {
                s3 = (short)i15;
                fArr1[i14 + 1][i14] += (float)Test.dFld;
            }
        }
        long meth_res = s1 + s2 + i6 + i7 + i8 + i9 + s3 + i10 + i11 + by1 + i12 + i13 + i14 + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth() {

        int i5=1, iArr3[]=new int[N];
        float f2=-35.695F;
        short s4=16970;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr3, -8);
        FuzzerUtils.init(lArr2, -152L);

        if (Test.bFld) {
            i5 = 1;
            do {
                f2 *= lMeth1(s4, s4, i5);
                Test.iFld += (int)Test.instanceCount;
                Test.iFld += (i5 ^ (long)f2);
                Test.iFld = -64317;
                switch (((i5 % 2) * 5) + 78) {
                case 80:
                    Test.instanceCount >>>= i5;
                    if (Test.bFld) continue;
                    Test.iFld -= Test.iFld;
                    iArr3 = FuzzerUtils.int1array(N, (int)1);
                    break;
                case 83:
                    f2 = Test.instanceCount;
                    iArr3[i5] <<= i5;
                    Test.iFld += (((i5 * Test.instanceCount) + i5) - i5);
                    lArr2[i5 + 1] -= Test.instanceCount;
                    break;
                default:
                    Test.iFld += (((i5 * f2) + i5) - Test.iFld);
                }
            } while (++i5 < 177);
        }
        long meth_res = i5 + Float.floatToIntBits(f2) + s4 + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(lArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(double d, long l, long l1) {

        int i1=233, i2=10, i3=-38, i4=31, i16=-44391, i17=-41155, iArr1[]=new int[N];
        float f1=-2.428F, fArr[]=new float[N], fArr2[]=new float[N];
        byte by=-88;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -1.976F);
        FuzzerUtils.init(lArr, 3012162337L);
        FuzzerUtils.init(iArr1, 128);
        FuzzerUtils.init(fArr2, 4.345F);

        for (i1 = 8; i1 < 205; i1++) {
            short s=19211;
            fArr[i1] = (i2++);
            Test.bFld = false;
            i3 += i1;
            s = (short)((++f1) - l);
        }
        lArr = (lArr = FuzzerUtils.long1array(N, (long)5340893508662512989L));
        i4 = 1;
        while (++i4 < 291) {
            by >>= (byte)iArr1[i4 + 1];
            i3 += (((i4 * i4) + i3) - Test.iFld);
            i2 = (int)((++i3) * lMeth());
            iArr1[i4 + 1] -= (int)-117.102F;
            l1 -= (long)f1;
            for (i16 = i4; i16 < 6; ++i16) {
                fArr2[i4] -= -13940;
                i17 += (i16 - i1);
            }
        }
        long meth_res = Double.doubleToLongBits(d) + l + l1 + i1 + i2 + i3 + Float.floatToIntBits(f1) + i4 + by + i16 +
            i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i18=219, i19=-135, i20=-3, i21=-10418, i22=-13185, i23=65347, i24=-6, i25=-39113, i26=42, i27=56059,
            iArr[]=new int[N];
        float f=-1.327F, fArr3[]=new float[N];
        double d1=85.72192;

        FuzzerUtils.init(iArr, 1910);
        FuzzerUtils.init(fArr3, 0.908F);

        i += (i++);
        iArr[(i >>> 1) % N] >>= (int)(((f--) - (i * 0)) + iMeth(Test.dFld, Test.instanceCount, Test.instanceCount));
        sFld += (short)Test.iFld;
        Test.instanceCount >>>= Test.iFld;
        for (i18 = 12; i18 < 237; ++i18) {
            f += Test.iFld;
        }
        i19 -= i18;
        for (i20 = 8; i20 < 174; i20++) {
            f *= (float)Test.dFld;
            if (Test.bFld) {
                if (Test.bFld) break;
                Test.instanceCount += (((i20 * i21) + byFld) - i21);
            }
            i21 *= i19;
        }
        for (i22 = 6; i22 < 292; ++i22) {
            for (i24 = 4; 88 > i24; ++i24) {
                Test.instanceCount -= (long)f;
                i25 += (i24 * i24);
                if (Test.bFld) continue;
                switch ((i24 % 10) + 86) {
                case 86:
                    for (d1 = 1; d1 < 2; d1++) {
                        i21 |= (int)Test.instanceCount;
                        Test.instanceCount &= i22;
                        i23 += (int)(d1 * i26);
                        i19 *= (int)d1;
                        iArr[i24 - 1] *= (int)f;
                        Test.bFld = Test.bFld;
                        Test.iFld = (int)Test.instanceCount;
                        i19 += (int)(d1 - f);
                    }
                    if (Test.bFld) continue;
                    byFld = (byte)-50057;
                case 87:
                    i = Test.iFld;
                    break;
                case 88:
                    Test.instanceCount &= Test.instanceCount;
                    break;
                case 89:
                    Test.dFld = i27;
                case 90:
                    iArr[i22 + 1] += i25;
                    break;
                case 91:
                    iArr[i24 + 1] *= Test.iFld;
                    break;
                case 92:
                    fArr3[i24] -= (float)Test.dFld;
                    break;
                case 93:
                    if (Test.bFld) continue;
                    break;
                case 94:
                    byFld += (byte)i24;
                case 95:
                    i23 = sFld;
                }
            }
        }

        FuzzerUtils.out.println("i f i18 = " + i + "," + Float.floatToIntBits(f) + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 d1 i26 = " + i25 + "," + Double.doubleToLongBits(d1) + "," + i26);
        FuzzerUtils.out.println("i27 iArr fArr3 = " + i27 + "," + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr3)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.iFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld sFld byFld = " + Double.doubleToLongBits(Test.dFld) + "," + sFld + "," +
            byFld);

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
