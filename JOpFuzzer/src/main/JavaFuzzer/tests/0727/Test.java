// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-9L;
    public static int iFld=202;
    public double dFld=0.9477;
    public static short sFld=-20300;
    public float fFld=81.97F;
    public static double dArrFld[]=new double[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -24.17247);
    }

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long bMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public int iMeth() {

        float f=1.37F;
        int i=0, i1=0, i2=-245, i3=-94, iArr[]=new int[N];
        short s=14682;
        byte by=28, byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)82);
        FuzzerUtils.init(iArr, 222);
        FuzzerUtils.init(lArr, 86L);

        f = Test.iFld;
        i = 1;
        do {
            byArr[i] = (byte)((++f) + (++iArr[i + 1]));
            Test.iFld >>>= (int)Test.instanceCount;
            if (i != 0) {
            }
        } while (++i < 163);
        i1 = 1;
        do {
            Test.instanceCount = 254;
            i2 = 1;
            do {
                s += (short)(i2 + by);
                i3 = 1;
                do {
                    by += (byte)(((i3 * f) + i1) - i1);
                    Test.iFld += (i3 * i3);
                    lArr = (lArr = lArr);
                    f += i3;
                    Test.instanceCount = i1;
                } while (++i3 < 1);
            } while (++i2 < 7);
        } while (++i1 < 229);
        long meth_res = Float.floatToIntBits(f) + i + i1 + i2 + s + by + i3 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i17, int i18) {

        int i19=7, i20=1303, i21=-123, i22=85, i23=11, i24=-11845;
        float f2=74.243F;
        long l2=-8473629263935058224L, lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 1L);

        lArr2 = lArr2;
        i19 = 1;
        do {
            f2 += l2;
            Test.instanceCount &= i17;
            if (i19 != 0) {
                vMeth_check_sum += i17 + i18 + i19 + Float.floatToIntBits(f2) + l2 + i20 + i21 + i22 + i23 + i24 +
                    FuzzerUtils.checkSum(lArr2);
                return;
            }
            for (i20 = 1; i20 < 12; ++i20) {
                for (i22 = 1; i22 < 2; i22 += 3) {
                    Test.iFld += (i22 ^ i17);
                    i18 -= (int)2762071575L;
                    i17 = i17;
                    f2 += Test.instanceCount;
                }
                if (i18 != 0) {
                    vMeth_check_sum += i17 + i18 + i19 + Float.floatToIntBits(f2) + l2 + i20 + i21 + i22 + i23 + i24 +
                        FuzzerUtils.checkSum(lArr2);
                    return;
                }
                i24 = 1;
                while (++i24 < 2) {
                    i18 += (((i24 * i18) + f2) - i19);
                }
                Test.sFld >>>= (short)i24;
            }
        } while (++i19 < 127);
        vMeth_check_sum += i17 + i18 + i19 + Float.floatToIntBits(f2) + l2 + i20 + i21 + i22 + i23 + i24 +
            FuzzerUtils.checkSum(lArr2);
    }

    public boolean bMeth1(int i10) {

        int i11=-44185, i12=-167, i13=-1637, i14=196, i15=238, i16=134, i25=-11, i26=-177;
        boolean b1=false;
        byte by2=91;

        for (i11 = 240; i11 > 7; i11--) {
            for (i13 = 1; i13 < 7; i13++) {
                for (i15 = 1; 2 > i15; ++i15) {
                    Test.instanceCount += i15;
                }
                vMeth(i13, Test.iFld);
                Test.instanceCount = i12;
                Test.iFld += (((i13 * Test.instanceCount) + Test.instanceCount) - i14);
                i12 %= 3368;
                if (b1) continue;
                for (i25 = i11; i25 < 2; i25++) {
                    Test.iFld *= (int)dFld;
                    dFld *= Test.instanceCount;
                    i16 += (i25 * i13);
                }
                by2 <<= (byte)58;
            }
        }
        Test.instanceCount += 7076L;
        long meth_res = i10 + i11 + i12 + i13 + i14 + i15 + i16 + (b1 ? 1 : 0) + i25 + i26 + by2;
        bMeth1_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public boolean bMeth() {

        int i6=3, i7=14467, i8=-211, i9=108;
        boolean b=false;
        byte by1=1;
        long l=-247L, l1=-46275L, lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 122L);

        iArrFld[(Test.iFld >>> 1) % N] %= (int)(((120L * (Test.iFld + Test.iFld)) + iArrFld[(Test.iFld >>> 1) % N]) |
            1);
        dFld = Test.iFld;
        for (i6 = 9; i6 < 397; ++i6) {
            i7 += (-(Test.iFld++));
            Test.dArrFld[i6] -= 43;
            for (i8 = i6; i8 < 4; i8++) {
                b = (b = (b = (-8 >= (lArr1[i8 + 1]++))));
                Test.sFld *= (short)((by1++) + (192 + (fFld + i9)));
                l -= by1;
                i7 = iMeth();
                i7 += Math.abs(-7);
                Test.iFld -= ((iMeth() - i8) - Integer.reverseBytes(244 + (Test.sFld++)));
                l1 = 1;
                while (++l1 < 1) {
                    if (bMeth1(Test.iFld)) continue;
                    i7 = i6;
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + (b ? 1 : 0) + by1 + l + l1 + FuzzerUtils.checkSum(lArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        double d1=-111.111363, d2=81.123492;
        int i5=-21309, i27=-8, i28=6, i29=4, i30=-6, i31=-189, i32=-6235, i33=-56, i34=3, i35=229;
        float f1=99.771F, fArr[]=new float[N];
        boolean b2=false;
        byte by3=-107;
        long lArr3[]=new long[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(fArr, 103.320F);
        FuzzerUtils.init(lArr3, 92L);
        FuzzerUtils.init(sArr, (short)7495);

        Test.iFld = (int)((iMeth() + (2.654F + fArr[(-6 >>> 1) % N])) - ((Test.iFld + d1) + (Test.instanceCount - 0)));
        for (int i4 : iArrFld) {
            i5 = 63;
            while ((i5 -= 3) > 0) {
                iArrFld[i5 - 1] *= 3;
                if ((((-55789 * (-10 + d1)) * (Test.instanceCount - Test.instanceCount)) - ((-46 - (Test.instanceCount
                    - i4)) - (i5 + Test.instanceCount))) < f1) continue;
                f1 *= (Test.instanceCount++);
                if (bMeth() || b2) break;
                fArr[i5 - 1] -= Test.instanceCount;
            }
        }
        for (i27 = 3; i27 < 244; i27++) {
            for (i29 = 6; i29 < 104; i29++) {
                i28 += (int)Test.instanceCount;
            }
            Test.iFld = i28;
            for (d2 = i27; d2 < 104; ++d2) {
                for (i32 = 1; 1 > i32; ++i32) {
                    i31 += (((i32 * i32) + i31) - Test.iFld);
                    fArr[i32 - 1] = i29;
                    Test.instanceCount += (((i32 * i5) + i31) - Test.instanceCount);
                    i33 += i32;
                    Test.instanceCount = i27;
                }
                b2 = b2;
                by3 += (byte)(d2 * d2);
                Test.iFld >>= Test.iFld;
                i33 = (int)d1;
                i30 += (int)(d2 * d2);
            }
            i33 |= (int)Test.instanceCount;
            switch ((((3 >>> 1) % 2) * 5) + 120) {
            case 122:
                for (i34 = 3; i34 < 104; i34++) {
                    fFld *= fFld;
                    lArr3[i27 - 1] &= Test.sFld;
                    iArrFld[i27 - 1] >>= Test.sFld;
                }
            case 121:
                i30 += i27;
                break;
            default:
                sArr[i27 + 1][i27 - 1] = (short)3;
            }
        }

        FuzzerUtils.out.println("d1 i5 f1 = " + Double.doubleToLongBits(d1) + "," + i5 + "," +
            Float.floatToIntBits(f1));
        FuzzerUtils.out.println("b2 i27 i28 = " + (b2 ? 1 : 0) + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 d2 = " + i29 + "," + i30 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("by3 i34 i35 = " + by3 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("fArr lArr3 sArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(lArr3) + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld dFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.sFld fFld Test.dArrFld = " + Test.sFld + "," + Float.floatToIntBits(fFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth1_check_sum: " + bMeth1_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest bMeth
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  bMeth1 ->  bMeth1 bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth1 bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
