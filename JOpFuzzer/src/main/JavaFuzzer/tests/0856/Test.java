// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static boolean bFld=false;
    public static int iFld=6;
    public double dFld=81.13358;
    public float fFld=-82.399F;
    public volatile int iFld1=-51117;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9222);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i9) {

        int i10=-12, i11=140, i12=-56639, i13=8, i14=-13, i15=81, i16=-12, i17=-2;
        double d1=42.65795;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -229L);

        for (i10 = 2; i10 < 308; ++i10) {
            float f1=70.503F;
            i9 += (((i10 * f1) + Test.instanceCount) - f1);
        }
        for (i12 = 2; i12 < 364; i12++) {
            lArr[i12] *= i14;
            for (i15 = 5; i15 > 1; i15 -= 3) {
                i17 = 5;
                do {
                    i9 += (int)Test.instanceCount;
                    d1 += i10;
                    Test.iArrFld[i12 + 1] *= (int)14.16650;
                    i13 = i13;
                    i14 += i17;
                    i14 += i10;
                    i11 = i11;
                    i16 *= i13;
                    i16 *= i16;
                } while (--i17 > 0);
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i6, int i7, int i8) {

        int i18=14, i19=60852, i20=-8, i21=-4;
        float f2=22.395F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.4944);

        iMeth(i7);
        i6 += i8;
        for (i18 = 5; i18 < 138; ++i18) {
            switch (((i18 % 6) * 5) + 7) {
            case 29:
                if (Test.bFld) break;
            case 21:
                for (i20 = 1; 12 > i20; i20++) {
                    i19 = (int)Test.instanceCount;
                    dArr = dArr;
                    i8 = i20;
                }
                Test.instanceCount -= Test.instanceCount;
                break;
            case 36:
                Test.iArrFld[i18] = i19;
                break;
            case 27:
                Test.instanceCount += (((i18 * i18) + i19) - f2);
                Test.iArrFld[i18 + 1] *= i18;
                i19 *= i7;
                break;
            case 17:
                i6 += i18;
            case 9:
                i8 >>= i18;
                break;
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(long l, int i1, double d) {

        int i2=23, i3=-15808, i4=23, i5=34656, i22=-4799;
        float f=50.249F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -3407L);

        for (i2 = 9; i2 < 237; i2++) {
            i4 = 1;
            do {
                for (f = 1; f < 1; ++f) {
                    short s=32572;
                    vMeth1(i2, i5, i5);
                    try {
                        i3 = (i4 / -49049);
                        i5 = (i3 % 1235966750);
                        i5 = (i2 / i3);
                    } catch (ArithmeticException a_e) {}
                    lArr1[(int)(f + 1)] -= Test.instanceCount;
                    i1 += (int)f;
                    s = (short)i4;
                    Test.bFld = Test.bFld;
                }
                Test.iArrFld[i4] += i4;
                i5 <<= (int)l;
                Test.iArrFld[i4 - 1] += i4;
                try {
                    Test.iArrFld[i4] = (i4 / Test.iArrFld[i4]);
                    i3 = (i1 / -130);
                    i22 = (Test.iFld % -179);
                } catch (ArithmeticException a_e) {}
                Test.iFld = i4;
                i22 = i5;
            } while (++i4 < 7);
        }
        vMeth_check_sum += l + i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + i22 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-13883, i23=-12, i24=51;
        byte by=44;
        long lArr2[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr2, -3L);
        FuzzerUtils.init(fArr, 1.457F);

        i -= i;
        vMeth(Test.instanceCount, -122, dFld);
        lArr2[(Test.iFld >>> 1) % N] %= (i | 1);
        i23 = 388;
        do {
            i = -112;
            Test.iArrFld[i23] %= (int)(i23 | 1);
        } while (--i23 > 0);
        i24 = 1;
        do {
            Test.iFld += (((i24 * i23) + i23) - i24);
            fArr[i24] = Test.iFld;
            i += (int)(-13L + (i24 * i24));
            Test.iFld += i24;
            Test.iArrFld[i24 + 1] += i;
            lArr2 = FuzzerUtils.long1array(N, (long)10L);
            Test.iFld = (int)57293L;
            switch (((i24 % 7) * 5) + 90) {
            case 109:
                Test.iFld = 6;
                i -= (int)fFld;
                Test.iArrFld[i24] = i;
            case 124:
                Test.iFld += Test.iFld;
                break;
            case 110:
            case 97:
                fFld += i;
                Test.iArrFld[i24] += (int)Test.instanceCount;
                dFld += i;
                break;
            case 101:
                i += (-2 + (i24 * i24));
                Test.instanceCount *= 624524421334249508L;
                lArr2[i24 - 1] *= Test.iFld;
                break;
            case 99:
            case 122:
                i += by;
                Test.iFld += i24;
                break;
            }
        } while (++i24 < 202);
        Test.iFld = (int)fFld;
        i = i23;
        iFld1 -= -11;

        FuzzerUtils.out.println("i i23 i24 = " + i + "," + i23 + "," + i24);
        FuzzerUtils.out.println("by lArr2 fArr = " + by + "," + FuzzerUtils.checkSum(lArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.iFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.iFld);
        FuzzerUtils.out.println("dFld fFld iFld1 = " + Double.doubleToLongBits(dFld) + "," + Float.floatToIntBits(fFld)
            + "," + iFld1);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
