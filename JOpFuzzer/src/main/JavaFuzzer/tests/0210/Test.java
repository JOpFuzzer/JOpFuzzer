// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=6424791895674764265L;
    public static float fFld=1.492F;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 122);
        FuzzerUtils.init(Test.sArrFld, (short)-15003);
    }

    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f, int i5) {

        int i6=2, i7=-140, i8=1, i9=-20968, i10=-15, i11=13, i12=109, i13=-145, i14=245;
        short s=-31080;

        for (i6 = 14; i6 < 358; i6++) {
            for (i8 = 5; i8 > 1; i8 -= 2) {
                i9 -= i9;
                i5 >>= s;
                for (i10 = 1; i10 < 3; ++i10) {
                    if (true) break;
                }
                i5 *= 2;
                s = (short)i9;
                Test.instanceCount += i8;
                i11 = i12;
                Test.instanceCount >>>= i8;
                for (i13 = 1; i13 < 3; i13++) {
                    Test.instanceCount += i13;
                    i5 -= (int)Test.instanceCount;
                    i5 += (int)(-43.734F + (i13 * i13));
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + i9 + s + i10 + i11 + i12 + i13 + i14;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, int i4, long l1) {

        float f1=-87.432F;
        int i15=-43030, i16=-10, i17=0, i18=-54180, i19=-13, i20=-99;
        byte by=112;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1222575473972878520L);

        lArr[(i3 >>> 1) % N] |= ((iMeth(f1, i3) | Test.instanceCount) + i3);
        for (i15 = 1; i15 < 174; ++i15) {
            lArr[i15] = i3;
            i3 = i15;
            l1 -= by;
            if (b) {
                for (i17 = 1; i17 < 9; ++i17) {
                    i19 = 1;
                    do {
                        Test.iArrFld[i15 + 1] = i3;
                    } while (++i19 < 2);
                    if (i4 != 0) {
                        vMeth_check_sum += i3 + i4 + l1 + Float.floatToIntBits(f1) + i15 + i16 + by + i17 + i18 + i19 +
                            i20 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    switch (((3 >>> 1) % 2) + 55) {
                    case 55:
                        i20 = 1;
                        while (++i20 < 2) {
                            by += (byte)(-4264982615L + (i20 * i20));
                            i16 >>>= (int)l1;
                            i16 = (int)13L;
                        }
                        break;
                    case 56:
                        lArr[i15] = i17;
                    default:
                        i18 += (((i17 * i17) + i16) - l1);
                    }
                }
                vMeth_check_sum += i3 + i4 + l1 + Float.floatToIntBits(f1) + i15 + i16 + by + i17 + i18 + i19 + i20 +
                    (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
                return;
            } else if (b) {
                lArr[i15 + 1] <<= 4;
            } else if (true) {
                l1 = i3;
            }
        }
        vMeth_check_sum += i3 + i4 + l1 + Float.floatToIntBits(f1) + i15 + i16 + by + i17 + i18 + i19 + i20 + (b ? 1 :
            0) + FuzzerUtils.checkSum(lArr);
    }

    public static short sMeth(int i1) {

        long l=-37361L, lArr1[]=new long[N];
        int i2=-35588, i21=54408, i22=7, i23=62840, i24=6, i25=-26885, iArr1[][]=new int[N][N];
        float f2=-2.519F;
        double d=-99.83363;

        FuzzerUtils.init(iArr1, -6);
        FuzzerUtils.init(lArr1, -2L);

        switch (((Test.iArrFld[(i1 >>> 1) % N] >>> 1) % 8) + 67) {
        case 67:
            iArr1 = (iArr1 = iArr1);
            for (l = 11; l < 242; ++l) {
                vMeth(i2, i2, Test.instanceCount);
                i2 |= (int)l;
                for (i21 = 1; i21 < 7; ++i21) {
                    iArr1[i21 + 1][i21] -= (int)l;
                    for (i23 = 2; i23 > 1; i23--) {
                        i24 |= i22;
                        i2 = i1;
                        i1 += (((i23 * Test.instanceCount) + f2) - i24);
                        i1 += (13 + (i23 * i23));
                        Test.sArrFld[i23] *= (short)d;
                        i1 -= i2;
                        i1 = i21;
                    }
                }
            }
            break;
        case 68:
            i22 *= (int)Test.instanceCount;
            break;
        case 69:
            i24 = (int)l;
            break;
        case 70:
            d = i23;
        case 71:
            lArr1 = FuzzerUtils.long1array(N, (long)5564529681665271371L);
            break;
        case 72:
            i25 |= 5;
            break;
        case 73:
            Test.instanceCount = i21;
            break;
        case 74:
            Test.instanceCount >>= l;
            break;
        }
        long meth_res = i1 + l + i2 + i21 + i22 + i23 + i24 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) +
            i25 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=47308, i26=6, i27=-236, i28=11, i29=-61, i30=4082, i31=13, i32=-7, i33=-14, i34=21918, i35=58476,
            i36=-63, i37=-45225, iArr[][]=new int[N][N];
        float f3=-32.307F;
        long l2=42886L;
        double d1=115.54680;
        byte by1=67;

        FuzzerUtils.init(iArr, -1806);

        if (Test.bFld) {
            i = 1;
            while (++i < 188) {
                iArr[i][i] = (-sMeth(i));
                f3 -= Test.fFld;
            }
            i26 *= i26;
        } else if (true) {
            for (l2 = 4; l2 < 233; l2++) {
                iArr[(int)(l2)][(int)(l2 - 1)] = (int)1.958F;
                if (Test.bFld) {
                    if (Test.bFld) break;
                    for (i28 = 3; i28 < 110; i28 += 3) {
                        i26 *= i26;
                    }
                    iArr[(int)(l2)][(int)(l2 - 1)] <<= i28;
                    for (i30 = 4; i30 < 110; ++i30) {
                        try {
                            i31 = (i29 / i26);
                            i31 = (-244 / i28);
                            i26 = (i28 / i27);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount -= i26;
                        i31 += (i30 * i30);
                    }
                }
                i27 -= (int)d1;
                Test.instanceCount += i29;
                Test.instanceCount += l2;
            }
        } else if (Test.bFld) {
            for (i32 = 4; i32 < 220; i32++) {
                Test.instanceCount += (((i32 * l2) + i29) - i32);
                i33 += i32;
                for (i34 = 116; 4 < i34; i34--) {
                    by1 |= (byte)i35;
                    Test.instanceCount += (((i34 * i35) + Test.instanceCount) - Test.fFld);
                    i27 += -2523;
                    i33 = 115;
                }
                for (i36 = 1; i36 < 116; i36++) {
                    if (Test.bFld) break;
                    i31 += (-103 + (i36 * i36));
                }
            }
        }

        FuzzerUtils.out.println("i f3 i26 = " + i + "," + Float.floatToIntBits(f3) + "," + i26);
        FuzzerUtils.out.println("l2 i27 i28 = " + l2 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("d1 i32 i33 = " + Double.doubleToLongBits(d1) + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 by1 = " + i34 + "," + i35 + "," + by1);
        FuzzerUtils.out.println("i36 i37 iArr = " + i36 + "," + i37 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld Test.sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
