// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3590238344849026695L;
    public boolean bFld=true;
    public static volatile double dFld=-82.59570;
    public static float fFld=9.622F;
    public static boolean bFld1=false;
    public int iFld=7;
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1L);
        FuzzerUtils.init(Test.iArrFld, -1);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5, int i6) {

        int i7=-33, i8=112, iArr1[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];
        byte by1=98;

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, -22930);

        for (i7 = 15; i7 < 266; i7 += 2) {
            bArr[i7] = b;
            if (true) {
                if (b) {
                    i6 -= i5;
                    if (false) continue;
                    b = b;
                } else {
                    if (b) break;
                    i8 = (int)Test.instanceCount;
                    if (b) break;
                }
            }
            if (b) {
                Test.instanceCount -= i4;
                i8 += (i7 - i7);
                Test.instanceCount = by1;
            }
            iArr1[i7] += i5;
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) + by1 + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i3=-236, i9=-175, i10=-65071, i11=13938, i12=-95;
        float f1=-2.972F, fArr[]=new float[N];
        byte by2=65;

        FuzzerUtils.init(fArr, 51.843F);

        i3 = 130;
        vMeth1(i3, 36001, i3);
        for (f1 = 240; f1 > 10; --f1) {
            i10 = 1;
            do {
                Test.iArrFld[(int)(f1 + 1)] += i3;
                Test.dFld = i9;
                i3 += (((i10 * f1) + i3) - Test.instanceCount);
                i9 += (((i10 * i9) + i3) - i10);
                Test.fFld %= 7L;
                for (i11 = i10; i11 < 1; i11++) {
                    fArr[(int)(f1 - 1)] *= i10;
                    if (Test.bFld1) continue;
                    Test.instanceCount = (long)Test.fFld;
                    i3 -= by2;
                }
            } while (++i10 < 7);
            i9 *= (int)Test.instanceCount;
        }
        vMeth_check_sum += i3 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + by2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(long l) {

        int i2=14, i13=2, i14=-210, i15=5991, i16=-31731, i17=20814, i18=79, i19=61286;
        byte by3=-43;
        double d1=-1.43613;

        i2 = Integer.reverseBytes(i2);
        vMeth();
        for (i13 = 229; i13 > 9; --i13) {
            by3 *= (byte)i13;
        }
        for (i15 = 6; i15 < 377; i15 += 2) {
            Test.iArrFld[i15] >>>= i14;
            switch (((i15 % 5) * 5) + 60) {
            case 70:
                for (d1 = i15; d1 < 9; ++d1) {
                    i17 -= i16;
                    l += 70;
                    i17 = by3;
                    for (i18 = 1; 1 > i18; i18++) {
                        Test.fFld = i16;
                        i2 <<= i19;
                    }
                    i19 = i13;
                }
                break;
            case 68:
                i16 += i14;
                break;
            case 73:
                by3 += (byte)l;
            case 61:
                Test.iArrFld[i15 + 1] ^= i18;
                break;
            case 79:
                Test.instanceCount |= 2L;
                break;
            default:
                Test.bArrFld[i15 - 1] = Test.bFld1;
            }
        }
        long meth_res = l + i2 + i13 + i14 + by3 + i15 + i16 + Double.doubleToLongBits(d1) + i17 + i18 + i19;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-21.9238;
        int i=-6308, i1=0, i20=-7, i21=-4, i22=144, i23=-126, i24=71, i25=-10, i26=0, i27=77, i28=-52343, iArr[]=new
            int[N];
        byte by=-56;
        float f=0.43F, fArr1[][]=new float[N][N];
        short s=-8777;

        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(fArr1, -92.473F);

        d = 1;
        do {
            for (i = (int)(d); 79 > i; i++) {
                by *= (byte)(i1 = ((i - i) - i));
                i1 *= (int)(((Test.instanceCount - i) + (d - 1)) * (-6 + (i1 - i)));
                try {
                    i1 = (i1 / i1);
                    i1 = (104 / i);
                    i1 = (i1 / i1);
                } catch (ArithmeticException a_e) {}
                bFld = ((!(i != by)) || ((i1 != i) == (bFld = false)));
                iArr[i + 1] -= (int)(f = (i1 - (i1--)));
                iArr = (iArr = (iArr = (iArr = iArr)));
                by >>= (byte)(iMeth(Test.instanceCount) - i1);
                bFld = Test.bFld1;
                for (i20 = (int)(d); i20 < 1; i20++) {
                    Test.instanceCount += i;
                    if (Test.bFld1) continue;
                }
                Test.instanceCount += i;
            }
            i21 <<= iFld;
            iFld += i1;
            iFld = i;
        } while (++d < 317);
        switch (((i1 >>> 1) % 7) + 104) {
        case 104:
            fArr1[(219 >>> 1) % N][(i20 >>> 1) % N] += -47878;
            iFld *= (int)Test.instanceCount;
            for (i22 = 2; i22 < 121; i22++) {
                iFld -= (int)d;
                for (i24 = 13; i24 < 211; i24++) {
                    iFld += (i24 * i24);
                    for (i26 = i24; 2 > i26; ++i26) {
                        i21 = (int)Test.instanceCount;
                    }
                    Test.bArrFld[i24] = false;
                    Test.instanceCount >>= by;
                    Test.bArrFld[i22 - 1] = Test.bFld1;
                    f += i24;
                }
            }
            break;
        case 105:
            Test.iArrFld[(i24 >>> 1) % N] += (int)d;
        case 106:
            i25 *= s;
            break;
        case 107:
            dArrFld[(i >>> 1) % N] *= -8206382268580598465L;
        case 108:
            fArr1[(i28 >>> 1) % N][(i28 >>> 1) % N] *= 2572;
            break;
        case 109:
            by = (byte)Test.instanceCount;
        case 110:
            i23 += (int)f;
            break;
        }

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("by f i20 = " + by + "," + Float.floatToIntBits(f) + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 s i28 = " + i27 + "," + s + "," + i28);
        FuzzerUtils.out.println("iArr fArr1 = " + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount bFld Test.dFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld Test.bFld1 iFld = " + Float.floatToIntBits(Test.fFld) + "," + (Test.bFld1 ?
            1 : 0) + "," + iFld);
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
