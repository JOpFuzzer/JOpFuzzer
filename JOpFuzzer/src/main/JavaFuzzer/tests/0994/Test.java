// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-224L;
    public short sFld=4443;
    public static float fFld=0.221F;
    public static short sFld1=8361;
    public static volatile boolean bFld=false;
    public static byte byFld=-106;
    public static long lArrFld[]=new long[N];
    public volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 11L);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i15, int i16) {

        byte by1=-121;
        int i17=3, i18=11, i19=7, i20=-53087, iArr[][]=new int[N][N];
        double d1=31.122270;

        FuzzerUtils.init(iArr, -56941);

        Test.fFld -= Test.fFld;
        Test.instanceCount += i16;
        Test.instanceCount *= i15;
        by1 = (byte)Test.instanceCount;
        i15 = (int)Test.instanceCount;
        for (i17 = 15; i17 < 357; i17++) {
            iArr[i17 - 1][i17 + 1] = -4;
            d1 -= Test.instanceCount;
            Test.instanceCount = 4;
            iArr[i17 - 1][i17] = Test.sFld1;
            for (i19 = i17; i19 < 5; ++i19) {
                i20 = i20;
                iArr[i17 + 1][i17] = i16;
                try {
                    i18 = (i15 / -23425);
                    i16 = (113 / i20);
                    i20 = (i19 / i17);
                } catch (ArithmeticException a_e) {}
                Test.sFld1 = (short)i17;
            }
        }
        vMeth_check_sum += i15 + i16 + by1 + i17 + i18 + Double.doubleToLongBits(d1) + i19 + i20 +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i11, int i12, float f1) {

        int i13=6086, i14=14;
        double d2=-122.110260;
        byte byArr[]=new byte[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(byArr, (byte)-8);
        FuzzerUtils.init(sArr, (short)2704);

        i11 <<= ((byArr[(i12 >>> 1) % N]++) + (Math.max(i11, i11) - (--i11)));
        if (Test.bFld) {
            Test.instanceCount *= -238;
            i11 = -1;
            for (i13 = 2; 210 > i13; i13 += 3) {
                f1 += (i13 - i14);
                vMeth(i14, i11);
                i14 += i13;
                d2 += i11;
                i11 += (int)Test.instanceCount;
                Test.fFld -= Test.instanceCount;
                i12 |= i13;
            }
            sArr[(i14 >>> 1) % N] = (short)i12;
        } else {
            Test.lArrFld[(6 >>> 1) % N] *= i11;
        }
        i12 = (int)42009L;
        long meth_res = i11 + i12 + Float.floatToIntBits(f1) + i13 + i14 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public int iMeth(int i3, double d) {

        int i4=-191, i5=12, i6=-246, i7=4, i8=-9, i9=-230, i10=154;
        byte by=-55;
        boolean b=true;

        for (i4 = 12; i4 < 226; ++i4) {
            d = (d - ((i4 + i4) + (Test.instanceCount * i5)));
            i3 += i4;
            i6 = 1;
            while (++i6 < 8) {
                Test.instanceCount = ((Test.instanceCount++) * ((i5 *= (int)Test.instanceCount) +
                    8896277991536588842L));
                for (i7 = 1; i7 < 1; ++i7) {
                    i8 += (((i7 * i7) + i7) - Test.fFld);
                }
                by <<= (byte)Test.lArrFld[i4 - 1];
                if (b) {
                    i8 -= (int)Test.lArrFld[i6 + 1];
                    for (i9 = i6; 1 > i9; ++i9) {
                        Test.instanceCount = Integer.reverseBytes((int)((sFld - Test.instanceCount) * Math.max(i8,
                            i6)));
                        d = i5;
                        i8 += (((i9 * i9) + sFld) - Test.instanceCount);
                        Test.instanceCount -= (((Test.instanceCount % (i4 | 1)) - (Test.instanceCount -
                            Test.instanceCount)) * ((~(by - by)) - (-5 - lMeth(i4, 32, Test.fFld))));
                    }
                } else {
                    Test.instanceCount %= -39517;
                }
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + by + i9 + i10 + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=19, i1=8, i2=28453, i21=-2, i22=50134, i23=1, i24=-82, i25=139, i26=-63774, i27=0, i28=-7, i29=3, i30=6;
        long l=-14L;
        double d3=1.46170;

        for (i = 6; i < 251; ++i) {
            float f=81.657F;
            for (l = 103; 6 < l; l -= 3) {
                i1 >>= (int)(((--i2) + (i2--)) + ((l - sFld) * (i1 + i2)));
            }
            f *= ((iMeth(i2, d3) + Test.byFld) / (i | 1));
            for (i21 = i; i21 < 103; i21++) {
                i2 += (i21 * i21);
                i1 >>= (int)l;
                i2 = (int)Test.fFld;
            }
            i1 <<= i21;
            i2 = i21;
            i23 = 103;
            do {
                try {
                    i2 = (i23 % -1966288401);
                    i22 = (i21 % i23);
                    i22 = (-1340302751 / i);
                } catch (ArithmeticException a_e) {}
            } while (--i23 > 0);
            switch (((i1 >>> 1) % 1) + 90) {
            case 90:
                byArrFld[i] += (byte)102;
                for (i24 = 3; i24 < 103; ++i24) {
                    i1 = i25;
                }
                Test.instanceCount ^= i25;
                Test.instanceCount = i2;
                break;
            default:
                for (i26 = 3; i26 < 103; i26++) {
                    Test.instanceCount += (i26 * i26);
                    Test.lArrFld = Test.lArrFld;
                }
                if (Test.bFld) continue;
            }
            i28 = 1;
            while (++i28 < 103) {
                i27 += i21;
                for (i29 = 1; i29 < 1; ++i29) {
                    Test.sFld1 = (short)i28;
                    Test.instanceCount -= i25;
                }
            }
        }
        Test.instanceCount >>= 102;
        sFld = (short)i22;
        Test.instanceCount = i26;

        FuzzerUtils.out.println("i i1 l = " + i + "," + i1 + "," + l);
        FuzzerUtils.out.println("i2 d3 i21 = " + i2 + "," + Double.doubleToLongBits(d3) + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);

        FuzzerUtils.out.println("Test.instanceCount sFld Test.fFld = " + Test.instanceCount + "," + sFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld1 Test.bFld Test.byFld = " + Test.sFld1 + "," + (Test.bFld ? 1 : 0) + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.lArrFld byArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
