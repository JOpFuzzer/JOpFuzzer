// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public static short sFld=5791;
    public static int iFld=5;
    public static boolean bFld=false;
    public static long lFld=0L;
    public byte byFld=-66;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -170);
        FuzzerUtils.init(Test.byArrFld, (byte)35);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1) {

        int i2=3, i3=32231, i4=34861, i5=12;
        byte by=-16;
        float f1=-98.542F;
        double d=-27.3884;

        for (i2 = 14; i2 < 331; ++i2) {
            i3 *= (int)0L;
            i3 = -8;
            Test.sFld = (short)i3;
            Test.iArrFld[i2 - 1] = -96;
            i3 <<= i2;
            by += (byte)f1;
            Test.iArrFld[i2 + 1] -= (int)Test.instanceCount;
            if (false) {
                for (i4 = 1; i4 < 5; ++i4) {
                    f1 += (238 + (i4 * i4));
                    Test.iArrFld[i4 + 1] = by;
                    i1 += (i4 + i3);
                    d += i4;
                    Test.instanceCount /= (Test.instanceCount | 1);
                }
            } else {
                Test.instanceCount = -31899L;
            }
        }
        vMeth2_check_sum += i1 + i2 + i3 + by + Float.floatToIntBits(f1) + i4 + i5 + Double.doubleToLongBits(d);
    }

    public static void vMeth1() {

        int i6=-175, i7=-238, i8=6, i9=-60;
        float f2=19.753F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -75.859F);

        vMeth2(Test.iFld);
        for (i6 = 5; i6 < 334; i6++) {
            f2 -= -10;
            for (i8 = 1; i8 < 5; ++i8) {
                i9 = i9;
                Test.iFld += (i8 - f2);
                Test.iArrFld[i8 + 1] = (int)-72.83991;
            }
            if (Test.bFld) {
                if (i8 != 0) {
                    vMeth1_check_sum += i6 + i7 + Float.floatToIntBits(f2) + i8 + i9 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
            } else if (Test.bFld) {
                i9 += (i6 * i6);
                if (Test.bFld) break;
            } else {
                Test.iFld ^= i8;
                if (Test.bFld) {
                    fArr[i6 + 1] *= Test.instanceCount;
                    i9 = Test.iFld;
                } else if (Test.bFld) {
                    Test.iFld = i8;
                } else {
                    try {
                        Test.iFld = (i8 % 31);
                        i9 = (16105 % Test.iArrFld[i6 - 1]);
                        i9 = (i8 / i7);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + Float.floatToIntBits(f2) + i8 + i9 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(float f, int i, boolean b) {

        int i10=40115, i11=5, i12=-12, i13=-9316, i14=-213, i15=-201, i16=53447, i17=-1;

        vMeth1();
        for (i10 = 15; i10 < 257; i10++) {
            for (i12 = 1; i12 < 7; ++i12) {
                for (i14 = i10; i14 < 2; i14++) {
                    i13 = i10;
                    Test.iArrFld[i12] = 104;
                    if (Test.bFld) {
                        Test.instanceCount += i14;
                        i13 += (i14 * i14);
                        Test.iFld += i14;
                        Test.sFld -= (short)i11;
                    }
                }
                for (i16 = 1; 2 > i16; i16++) {
                    i17 -= i11;
                }
                f += (i12 * i12);
                i17 = i14;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        float f3=2.687F;
        int i18=13756, i19=-62351, i20=-60215, i21=-49, i22=-19574, i23=-77, i24=3, i25=38634, i26=9, i27=24496, i28=-4;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 0L);

        vMeth(f3, Test.iFld, Test.bFld);
        for (i18 = 279; i18 > 13; i18 -= 2) {
            Test.instanceCount = (long)f3;
        }
        for (i20 = 5; i20 < 203; ++i20) {
            i19 *= Test.iFld;
            Test.iFld >>= i20;
            Test.iFld = i19;
            switch ((i20 % 8) + 65) {
            case 65:
                Test.iFld += (i20 * i20);
                i21 -= 26;
                break;
            case 66:
                Test.iArrFld[i20 - 1] = (int)Test.lFld;
                Test.instanceCount += (i20 | Test.instanceCount);
                for (i22 = 5; i22 < 127; ++i22) {
                    byFld += (byte)(((i22 * Test.iFld) + Test.iFld) - Test.iFld);
                }
                Test.byArrFld[i20] >>= (byte)Test.instanceCount;
            case 67:
                Test.lFld += (221 + (i20 * i20));
                i19 = i18;
                break;
            case 68:
                for (i24 = 6; i24 < 127; ++i24) {
                    for (i26 = i20; i26 < 2; i26++) {
                        Test.instanceCount *= Test.instanceCount;
                        i25 = i19;
                        i23 = i25;
                        Test.iArrFld[i20 - 1] = i26;
                        if (Test.bFld) continue;
                    }
                    i28 = 1;
                    while (++i28 < 2) {
                        switch (((i24 % 3) * 5) + 74) {
                        case 83:
                            try {
                                Test.iArrFld[i20 + 1] = (i27 % i20);
                                i27 = (19442 / i24);
                                Test.iArrFld[i24] = (6781 / i21);
                            } catch (ArithmeticException a_e) {}
                            lArr[i20] -= -6084768545249834432L;
                            break;
                        case 89:
                            Test.lFld += (((i28 * f3) + i22) - i21);
                            Test.iFld >>>= i25;
                        case 76:
                            lArr = lArr;
                            break;
                        default:
                            Test.instanceCount += i28;
                        }
                    }
                }
                break;
            case 69:
                i25 >>= Test.iFld;
                break;
            case 70:
                if (Test.bFld) break;
                break;
            case 71:
                i27 += i20;
                break;
            case 72:
            default:
                i25 -= (int)Test.lFld;
            }
        }

        FuzzerUtils.out.println("f3 i18 i19 = " + Float.floatToIntBits(f3) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.iFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("Test.bFld Test.lFld byFld = " + (Test.bFld ? 1 : 0) + "," + Test.lFld + "," + byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.byArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
