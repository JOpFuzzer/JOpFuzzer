// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public static float fFld=1.454F;
    public long lFld=-233L;
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -8826406028495991799L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(int i, double d, float f) {


        i -= (int)Math.abs((Test.fFld - i) * (Test.fFld + i));
        vMeth_check_sum += i + Double.doubleToLongBits(d) + Float.floatToIntBits(f);
    }

    public static void vMeth1(int i4, float f1) {

        double d1=125.118906, d2=2.105431, dArr[]=new double[N];
        int i5=216, i6=-10, i7=46804, i8=-52780, i9=0;
        boolean b1=true;

        FuzzerUtils.init(dArr, -12.128907);

        d1 -= d1;
        f1 -= Test.instanceCount;
        for (d2 = 8; d2 < 228; ++d2) {
            if (b1) continue;
            switch ((int)((d2 % 10) + 112)) {
            case 112:
            case 113:
                i5 += (int)11L;
                break;
            case 114:
                Test.fFld += i4;
                f1 = i4;
                for (i6 = 1; i6 < 7; i6++) {
                    i7 += (((i6 * f1) + i4) - i7);
                    i7 = 5;
                }
                for (i8 = 7; i8 > d2; --i8) {
                    int i10=11;
                    i10 = 6684;
                    i10 += (((i8 * Test.instanceCount) + i5) - i6);
                    i7 = i5;
                }
                break;
            case 115:
                i7 *= i4;
                break;
            case 116:
                dArr[(int)(d2 - 1)] -= i4;
                break;
            case 117:
                Test.instanceCount >>>= i5;
                break;
            case 118:
                i5 = i6;
                break;
            case 119:
                i5 -= i4;
                break;
            case 120:
                if (i5 != 0) {
                    vMeth1_check_sum += i4 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) +
                        Double.doubleToLongBits(d2) + i5 + (b1 ? 1 : 0) + i6 + i7 + i8 + i9 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
                break;
            case 121:
                d1 = 16648;
                break;
            }
        }
        vMeth1_check_sum += i4 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) +
            i5 + (b1 ? 1 : 0) + i6 + i7 + i8 + i9 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth(boolean b) {

        int i2=54973, i3=26, i11=96, i12=63402, iArr[]=new int[N];
        long l=9206219262789246714L;
        double d3=0.89327;
        short s1=-4768, sArr[]=new short[N];
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)95);
        FuzzerUtils.init(iArr, -129);
        FuzzerUtils.init(sArr, (short)-3532);

        i2 = 1;
        while (++i2 < 145) {
            switch (((i2 % 9) * 5) + 97) {
            case 131:
                for (l = 11; l > i2; l--) {
                    Test.instanceCount *= l;
                    i3 += (int)(l * l);
                    byArr[(int)(l)][i2] = (byte)l;
                    vMeth1(i3, Test.fFld);
                    d3 *= i3;
                    i3 += (int)(((l * i3) + i3) - i3);
                    for (i11 = 1; i11 < 1; i11++) {
                        iArr[(int)(l)] >>>= i3;
                        Test.instanceCount >>>= s1;
                        if (b) break;
                    }
                    Test.instanceCount *= -23570;
                }
                break;
            case 142:
                i3 *= (int)l;
                break;
            case 121:
                i3 += i11;
                break;
            case 111:
                i12 -= i12;
                break;
            case 123:
            case 112:
                i12 = i3;
                break;
            case 127:
                i3 *= 6;
                break;
            case 122:
                i3 >>= i12;
            case 129:
                d3 += -58842;
                break;
            default:
                sArr[i2 - 1] = (short)28;
            }
        }
        long meth_res = (b ? 1 : 0) + i2 + l + i3 + Double.doubleToLongBits(d3) + i11 + i12 + s1 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth() {

        int i1=7;
        short s=-12968;

        vMeth((int)((i1 - (Test.instanceCount - s)) - Test.instanceCount), Double.longBitsToDouble(lMeth(true)),
            Test.fFld);
        vSmallMeth_check_sum += i1 + s;
    }

    public void mainTest(String[] strArr1) {

        double d4=45.65090;
        int i13=-132, i14=-35346, i15=58684, i16=82, i17=0, i18=46652, i19=-10, i20=-4, i21=7, i22=-147, i23=-2624,
            iArr1[][]=new int[N][N];
        short s2=10585;

        FuzzerUtils.init(iArr1, -4);

        Test.fFld *= (++Test.lArrFld[(-219 >>> 1) % N]);
        for (int smallinvoc=0; smallinvoc<828; smallinvoc++) vSmallMeth();
        d4 = 1;
        do {
            for (i13 = 64; i13 > 4; --i13) {
                Test.instanceCount = i14;
            }
        } while (++d4 < 392);
        i15 = 1;
        while ((i15 += 3) < 150) {
            i16 = 1;
            do {
                Test.instanceCount -= i13;
            } while (++i16 < 283);
            Test.fFld = 27530;
        }
        i17 = 1;
        while (++i17 < 219) {
            for (i18 = 6; i18 < 115; ++i18) {
                Test.instanceCount += Test.instanceCount;
                i19 = -1;
                for (i20 = 1; i20 < 2; ++i20) {
                    i19 += (int)Test.fFld;
                    iArr1[i20][i18] = -44396;
                }
                i19 += (((i18 * Test.fFld) + Test.instanceCount) - Test.instanceCount);
                Test.instanceCount += (i18 * i14);
                i19 = i18;
                i14 ^= i13;
                for (i22 = 1; i22 < 2; ++i22) {
                    iArr1[i22 - 1][i22 + 1] = i16;
                    iArr1[i18 - 1][i18] -= (int)-4240981259106195813L;
                    s2 = (short)94;
                    Test.instanceCount >>= i20;
                    i19 += (((i22 * i17) + i23) - Test.instanceCount);
                    Test.fFld += (i22 * i22);
                    i14 *= (int)85.111475;
                    iArr1[i22 - 1][i18] -= (int)Test.instanceCount;
                    lFld = i21;
                }
            }
        }

        FuzzerUtils.out.println("d4 i13 i14 = " + Double.doubleToLongBits(d4) + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("s2 iArr1 = " + s2 + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld lFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + lFld);
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
