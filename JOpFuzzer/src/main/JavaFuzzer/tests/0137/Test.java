// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-57100L;
    public static short sFld=-14800;
    public static boolean bFld=true;
    public static volatile long lFld=41108L;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4, long l2, int i5) {

        int i6=12, i7=10, i8=-64467, i9=41200, i10=13, i11=40349, i12=6;
        double d=-2.15091;
        float f1=-69.150F;
        short s=-25078, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)29521);

        for (i6 = 4; i6 < 201; ++i6) {
            for (i8 = 1; i8 < 8; i8++) {
                long l3=1L;
                for (i10 = 1; 2 > i10; ++i10) {
                    i11 = (int)l2;
                    sArr[i6] = (short)i9;
                }
                i11 *= (int)d;
                if (true) continue;
                f1 -= l3;
                i11 += (i8 | i9);
                Test.instanceCount <<= 12;
            }
            i9 = s;
            i5 = i6;
            i12 = 1;
            while (++i12 < 8) {
                i7 += (i12 ^ i5);
                Test.instanceCount = -9;
            }
        }
        long meth_res = i4 + l2 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f1) + s + i12 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l1, int i2) {

        float f=-34.181F, fArr[]=new float[N];
        int i3=165, i13=-103, iArr1[]=new int[N];
        byte by1=56;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -25730L);
        FuzzerUtils.init(iArr1, 6132);
        FuzzerUtils.init(fArr, 117.181F);

        for (f = 5; 156 > f; f++) {
            byte by=84;
            long l4=3661L;
            l1 += (long)(f + i2);
            lArr[(int)(f + 1)] <<= Math.abs((int)((long)(-(-63.40454 + (Test.instanceCount - i3))) << (++i2)));
            by += (byte)((iMeth(i2, l1, i2) + i2) * i2);
            i3 += (int)f;
            iArr1[(int)(f)] -= i3;
            l4 = Test.sFld;
            i13 = 1;
            do {
                fArr[i13] += i13;
                l4 &= i13;
                Test.bFld = Test.bFld;
                l4 = i13;
                i3 = i2;
                i3 += (i13 * i13);
                i3 >>= by1;
            } while (++i13 < 10);
        }
        vMeth1_check_sum += l1 + i2 + Float.floatToIntBits(f) + i3 + i13 + by1 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth(long l, int i1) {


        vMeth1(Test.instanceCount, i1);
        i1 -= i1;
        vMeth_check_sum += l + i1;
    }

    public void mainTest(String[] strArr1) {

        int i14=239, i15=-54371, i16=-8, i17=197, i18=-11, i19=4, i20=-7, i21=-198, i22=50, i23=12968, i24=-112,
            i25=52141, i26=-52322, iArr[]=new int[N];
        long l5=-4117044957L;
        double d1=-52.64111;
        float f2=0.98F;
        byte by2=100;

        FuzzerUtils.init(iArr, 45652);

        for (int i : iArr) {
            vMeth(Test.instanceCount, 47369);
            iArr[(i >>> 1) % N] = i;
            for (i14 = 2; i14 < 63; i14++) {
                i *= (int)111L;
            }
            for (i16 = 3; i16 < 63; i16++) {
                i17 *= i14;
                for (i18 = 1; i18 < 2; ++i18) {
                    l5 = -57858;
                }
            }
            i15 = (int)d1;
            i *= (int)Test.lFld;
            for (i20 = 63; i20 > 1; i20 -= 2) {
                switch (((i17 >>> 1) % 2) + 75) {
                case 75:
                    for (i22 = 1; i22 < 3; ++i22) {
                        l5 = -3055514628619961532L;
                        f2 *= i15;
                        i += (int)-60491L;
                    }
                    break;
                case 76:
                    i = (int)Test.lFld;
                    break;
                default:
                    iArr[i20 - 1] *= i15;
                    for (i24 = 1; i24 < 3; i24++) {
                        i21 = i22;
                    }
                    i21 <<= i22;
                }
            }
            i26 = 1;
            while (++i26 < 63) {
                i15 = i14;
                by2 += (byte)l5;
                i15 >>= (int)Test.lFld;
            }
            l5 = by2;
        }
        by2 *= (byte)i19;
        i21 += (int)f2;
        iArr[(i15 >>> 1) % N] = (int)Test.instanceCount;

        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("l5 d1 i20 = " + l5 + "," + Double.doubleToLongBits(d1) + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("f2 i24 i25 = " + Float.floatToIntBits(f2) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 by2 iArr = " + i26 + "," + by2 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lFld = " + Test.lFld);

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
