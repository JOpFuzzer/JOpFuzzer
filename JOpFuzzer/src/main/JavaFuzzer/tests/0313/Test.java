// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public static short sFld=-4854;
    public volatile int iFld=12;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 56413);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l, float f) {

        int i3=-11, i4=-14, i5=-31811, i6=97, i7=-3133, i8=29;
        boolean b=true;

        i3 = 28200;
        i4 = 1;
        while (++i4 < 179) {
            if (b) {
                i3 = i4;
                i3 *= i3;
                for (i5 = 9; i5 > 1; i5--) {
                    for (i7 = 1; 2 > i7; i7++) {
                        Test.sFld ^= (short)l;
                        f += i7;
                        switch (((i4 >>> 1) % 2) + 63) {
                        case 63:
                            i6 = (int)l;
                            i8 += (((i7 * i8) + l) - Test.instanceCount);
                            break;
                        case 64:
                            try {
                                Test.iArrFld[i4 + 1] = (i6 / i4);
                                i8 = (86 % i5);
                                i8 = (128 / i8);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount >>= 7;
                            f -= f;
                            break;
                        }
                    }
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0);
    }

    public static int iMeth1(int i2) {

        float f1=-99.92F;
        byte by=-105;
        int i9=4, i10=-106, iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr1, -11485);

        vMeth(Test.instanceCount, f1);
        by = (byte)f1;
        i2 += i2;
        i2 += i2;
        i2 = i2;
        i2 = i2;
        i2 *= i2;
        for (i9 = 23; i9 < 389; ++i9) {
            i10 = i9;
            iArr1[i9 + 1][i9] = -244;
            Test.instanceCount += Test.instanceCount;
            i2 *= (int)Test.instanceCount;
            if (i10 != 0) {
            }
            i10 += (((i9 * Test.instanceCount) + i9) - i2);
            Test.instanceCount = (long)f1;
        }
        long meth_res = i2 + Float.floatToIntBits(f1) + by + i9 + i10 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i) {

        int i1=-52883, i12=62, i13=-49021, i14=-176, i15=234, iArr[]=new int[N];
        double d=-1.61411;
        boolean b1=true;

        FuzzerUtils.init(iArr, 5);

        i1 = 1;
        while (++i1 < 386) {
            iArr[i1] = Math.min((int)(Test.instanceCount - iMeth1(i1)), i);
        }
        for (int i11 : iArr) {
            i = i;
            for (i12 = 1; i12 < 4; ++i12) {
                i11 += (-4 + (i12 * i12));
                i13 <<= (int)Test.instanceCount;
                i13 *= (int)d;
                Test.iArrFld[i12 + 1] = 23350;
                i11 = iFld;
                if (i12 != 0) {
                }
                for (i14 = 1; i14 < 2; ++i14) {
                    Test.iArrFld[i12 + 1] = (int)d;
                    iArr[i12 + 1] -= i11;
                    if (b1) break;
                }
            }
        }
        long meth_res = i + i1 + i12 + i13 + Double.doubleToLongBits(d) + i14 + i15 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f2=0.245F;
        int i16=19455, i17=-191, i18=43524, i19=51276, i20=80, i21=-8, i22=14819, i23=0, i24=65456;
        long l1=4403719850918935599L, lArr[]=new long[N];
        double d1=-2.12748, dArr[]=new double[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-5525);
        FuzzerUtils.init(lArr, -6372L);
        FuzzerUtils.init(dArr, -1.45963);

        Test.instanceCount >>>= iMeth(iFld);
        f2 = f2;
        i16 = 1;
        do {
            iFld += i16;
        } while (++i16 < 203);
        f2 = i16;
        sArr[(iFld >>> 1) % N] -= (short)i16;
        Test.sFld = (short)Test.instanceCount;
        for (i17 = 12; i17 < 298; i17 += 2) {
            lArr = lArr;
            Test.iArrFld[i17 - 1] = i16;
            for (l1 = 2; l1 < 175; ++l1) {
                i18 += (int)l1;
                i20 = 1;
                while (++i20 < 2) {
                    d1 *= i19;
                    if (true) {
                        Test.bFld = Test.bFld;
                    } else {
                        f2 = i19;
                    }
                    lArr = FuzzerUtils.long1array(N, (long)-3775787122L);
                }
                for (i21 = 1; 2 > i21; ++i21) {
                    Test.bFld = Test.bFld;
                    iFld += 0;
                    i19 += (i21 - i20);
                    i18 -= (int)3L;
                    i22 = i18;
                    i18 *= i22;
                    if (true) break;
                }
                for (i23 = 1; i23 < 2; i23++) {
                    Test.iArrFld[i17 + 1] = i17;
                    dArr[(int)(l1 + 1)] = i17;
                    lArr[(i17 >>> 1) % N] -= l1;
                }
            }
        }

        FuzzerUtils.out.println("f2 i16 i17 = " + Float.floatToIntBits(f2) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 l1 i19 = " + i18 + "," + l1 + "," + i19);
        FuzzerUtils.out.println("i20 d1 i21 = " + i20 + "," + Double.doubleToLongBits(d1) + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("sArr lArr dArr = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(lArr) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld iFld = " + Test.instanceCount + "," + Test.sFld + "," +
            iFld);
        FuzzerUtils.out.println("Test.bFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
