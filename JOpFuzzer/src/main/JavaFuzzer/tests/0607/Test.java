// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=7116922714021048389L;
    public int iFld=65;
    public static double dFld=0.87571;
    public static short sFld=-31990;
    public static boolean bFld=true;
    public float fArrFld[]=new float[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.43572);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static void vMeth1(int i, int i1) {

        int i2=31629, i3=-5;
        byte by=-118;

        for (i2 = 5; i2 < 149; i2++) {
            i3 += (i2 + i);
            i3 = 111;
        }
        by >>= (byte)(i * (Math.min(i3, -20805) + i3));
        i = (int)Test.instanceCount;
        vMeth1_check_sum += i + i1 + i2 + i3 + by;
    }

    public static byte byMeth(long l, int i6, float f1) {

        boolean b=true, bArr[]=new boolean[N];
        int i7=162, i8=-26114, i9=32509, i10=-83, i11=171, i12=23367, iArr1[]=new int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 222);
        FuzzerUtils.init(dArr, 0.114792);
        FuzzerUtils.init(bArr, false);

        iArr1[(i6 >>> 1) % N] *= i6;
        b = b;
        Test.sFld = (short)i6;
        i6 = i6;
        for (i7 = 4; i7 < 142; i7++) {
            for (i9 = 1; i9 < 11; i9 += 3) {
                dArr[i9] *= l;
            }
            iArr1[i7] += (int)1.12081;
            l += 7;
        }
        l += 59299;
        for (i11 = 3; i11 < 248; ++i11) {
            iArr1[i11 + 1] >>>= 9431;
            bArr = FuzzerUtils.boolean1array(N, (boolean)false);
            iArr1[i11] |= -4910;
        }
        long meth_res = l + i6 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(bArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public int iMeth(int i4) {

        float f2=-101.990F;
        int i13=-58636, i14=-53, iArr[]=new int[N];
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 9);
        FuzzerUtils.init(lArr1, -64239L);

        for (int i5 : iArr) {
            i4 *= (int)(iArr[(i4 >>> 1) % N] - (Math.abs(Test.dFld) + (iFld * Test.instanceCount)));
            try {
                i5 = (i5 / 184);
                i5 = (iFld % i5);
                iFld = (iFld / iFld);
            } catch (ArithmeticException a_e) {}
            i4 += byMeth(Test.instanceCount, i5, f2);
            for (i13 = 4; i13 > 1; i13--) {
                i5 -= i5;
                lArr1[i13 + 1] += i13;
                Test.instanceCount = i4;
                lArr1[i13 + 1] -= (long)Test.dFld;
                i14 <<= 12;
                Test.instanceCount += i5;
                i4 = iFld;
                i14 = i4;
                i5 -= -161;
                if (b1) break;
            }
        }
        long meth_res = i4 + Float.floatToIntBits(f2) + i13 + i14 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        int i15=-12, i16=4, i17=6, iArr2[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr2, 252);
        FuzzerUtils.init(sArr, (short)21013);

        vMeth1(iMeth(-247), iFld);
        iArr2[(-23508 >>> 1) % N] -= iFld;
        iFld |= 24477;
        i15 = 1;
        while (++i15 < 266) {
            fArrFld[i15] = 73.112F;
            Test.bFld = Test.bFld;
            iFld += 67;
            sArr = sArr;
            iFld = iFld;
            iFld = (int)Test.instanceCount;
            for (i16 = 1; i16 < 6; ++i16) {
                iArr2[i16] <<= iFld;
                if (Test.bFld) continue;
            }
            Test.instanceCount += i16;
            i17 -= iFld;
        }
        vMeth_check_sum += i15 + i16 + i17 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        float f=-1.544F;
        int i18=23189, i19=-13, i20=-1533, i21=12584, i22=-44302, i23=-246, i24=-32189, i25=1, iArr3[]=new int[N];
        byte by1=74;
        long l1=-2157934382L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, 766016512L);
        FuzzerUtils.init(iArr3, -35524);

        lArr[(iFld >>> 1) % N] = (long)(iFld - ((-(iFld * f)) - (Test.instanceCount++)));
        vMeth();
        iFld <<= iFld;
        iFld &= iFld;
        iFld += (int)Test.instanceCount;
        iFld &= iFld;
        for (i18 = 2; 197 > i18; i18++) {
            i19 -= iFld;
            for (i20 = 8; i20 < 129; i20++) {
                if (Test.bFld) break;
                for (i22 = 1; i22 < 2; i22 += 2) {
                    i23 <<= by1;
                    i19 = i22;
                    Test.dArrFld[i18] = i22;
                    iArr3[i20] += i22;
                    Test.instanceCount += -35;
                    i23 += (i22 ^ iFld);
                }
                f -= Test.instanceCount;
                switch (((i21 >>> 1) % 8) + 73) {
                case 73:
                    iArr3[i18] >>>= (int)Test.instanceCount;
                    f = (float)Test.dFld;
                    i21 += (i20 + i22);
                    i23 *= i22;
                case 74:
                    for (i24 = 2; i24 > 1; i24--) {
                        Test.sFld = (short)i23;
                        iArr3 = iArr3;
                        Test.dFld = Test.instanceCount;
                        iFld -= i22;
                        i23 += (int)(0.871F + (i24 * i24));
                        iFld -= i24;
                    }
                    break;
                case 75:
                    i21 -= (int)l1;
                    break;
                case 76:
                    iFld %= (int)((long)(f) | 1);
                    break;
                case 77:
                    l1 = l1;
                    break;
                case 78:
                    Test.instanceCount -= Test.sFld;
                    break;
                case 79:
                    i23 = i18;
                    break;
                case 80:
                    Test.dFld += iFld;
                    break;
                default:
                    i19 *= (int)f;
                }
            }
        }

        FuzzerUtils.out.println("f i18 i19 = " + Float.floatToIntBits(f) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 by1 i24 = " + i23 + "," + by1 + "," + i24);
        FuzzerUtils.out.println("i25 l1 lArr = " + i25 + "," + l1 + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld Test.bFld fArrFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
