// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=41029L;
    public int iFld=9;
    public static double dFld=-2.35613;
    public static float fFld=-8.92F;
    public long lFld=13L;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4836581462810023890L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, long l1, long l2) {

        int i3=-1, i4=2, i5=11302;
        float f1=92.939F;

        for (i3 = 3; i3 < 358; ++i3) {
            i2 -= i4;
            i2 += (((i3 * i3) + i4) - i3);
            i2 += i3;
            i2 += (i3 | i5);
            i2 += i3;
            f1 = i5;
            f1 *= i3;
            if (i5 != 0) {
                vMeth1_check_sum += i2 + l1 + l2 + i3 + i4 + i5 + Float.floatToIntBits(f1);
                return;
            }
            i5 += (int)Test.instanceCount;
            i2 -= i4;
        }
        vMeth1_check_sum += i2 + l1 + l2 + i3 + i4 + i5 + Float.floatToIntBits(f1);
    }

    public static int iMeth(float f, int i1, long l) {

        int i6=39437, i7=52588, i8=2, i9=-4, i10=2, i11=-4;
        float fArr[]=new float[N];
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(fArr, -2.446F);
        FuzzerUtils.init(byArr, (byte)25);

        vMeth1(i1, l, Test.instanceCount);
        for (i6 = 10; 262 > i6; ++i6) {
            for (i8 = 1; i8 < 6; i8 += 3) {
                fArr[i8] -= i8;
                i7 += (i8 + i1);
                Test.instanceCount *= Test.instanceCount;
                byArr[i8 + 1][i6 + 1] = (byte)l;
                i7 = (int)l;
                for (i10 = 1; 6 > i10; ++i10) {
                    i11 -= -3951;
                    Test.lArrFld = Test.lArrFld;
                    i9 += i8;
                    Test.lArrFld[i6 - 1] <<= i7;
                    i9 = i8;
                }
                i7 = i8;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + l + i6 + i7 + i8 + i9 + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        float f2=10.803F;
        int i12=6, i13=2, i14=-17211, i15=-14, iArr[][]=new int[N][N];
        double d=-116.61419;

        FuzzerUtils.init(iArr, -30);

        i = (int)(Test.instanceCount++);
        i = iMeth(f2, i, 8L);
        for (i12 = 12; i12 < 391; ++i12) {
            switch (((1 >>> 1) % 7) + 99) {
            case 99:
                i -= (int)-3509166192L;
                Test.instanceCount >>= i12;
                iArr[i12 + 1][i12 - 1] += (int)f2;
                f2 += (float)d;
                break;
            case 100:
                for (i14 = 1; 4 > i14; i14++) {
                    i15 = (int)134L;
                    Test.instanceCount ^= i;
                    i15 >>= i14;
                    f2 *= i13;
                    if (false) break;
                    i += (i14 * i14);
                }
                break;
            case 101:
                i13 *= 33;
                break;
            case 102:
                i15 += (i12 * i12);
                break;
            case 103:
                Test.lArrFld[i12 - 1] <<= 192;
            case 104:
                i15 /= (int)(i | 1);
                break;
            case 105:
                i = (int)d;
                break;
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f2) + i12 + i13 + Double.doubleToLongBits(d) + i14 + i15 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=-58638, i17=-7110, i18=-10, i19=12, i20=-203, i21=225, iArr1[]=new int[N];
        short s=-1273;
        boolean b=true;
        byte by=97, byArr1[][]=new byte[N][N];

        FuzzerUtils.init(iArr1, 1012);
        FuzzerUtils.init(byArr1, (byte)57);

        vMeth(iFld);
        for (i16 = 10; i16 < 199; i16++) {
            s += (short)(i16 * i16);
            if (b) break;
            Test.lArrFld[i16] >>= i17;
            try {
                i17 = (iFld / 194);
                i17 = (i17 / -779004198);
                iFld = (i17 % 3165);
            } catch (ArithmeticException a_e) {}
            i17 *= i17;
            i18 = 1;
            while (++i18 < 133) {
                Test.dFld = i17;
                for (i19 = 1; i19 < 1; ++i19) {
                    if (b) break;
                    if (true) break;
                    i17 += (i19 * i19);
                    iFld += (((i19 * by) + Test.fFld) - Test.fFld);
                    iArr1[i16] -= i19;
                    iFld = i18;
                    byArr1[i19 - 1] = FuzzerUtils.byte1array(N, (byte)-12);
                    i20 >>= (int)Test.instanceCount;
                    i20 -= (int)Test.instanceCount;
                    iArr1[i19] |= i17;
                }
                iFld += i18;
                i21 = 1;
                do {
                    Test.instanceCount += (i21 - lFld);
                    iFld = i20;
                    i20 = iFld;
                    iArr1[i16] = i19;
                    i17 -= (int)Test.fFld;
                    iFld = s;
                    iFld = (int)Test.fFld;
                    Test.instanceCount = -6L;
                } while (++i21 < 1);
            }
        }

        FuzzerUtils.out.println("i16 i17 s = " + i16 + "," + i17 + "," + s);
        FuzzerUtils.out.println("b i18 i19 = " + (b ? 1 : 0) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 by i21 = " + i20 + "," + by + "," + i21);
        FuzzerUtils.out.println("iArr1 byArr1 = " + FuzzerUtils.checkSum(iArr1) + "," + FuzzerUtils.checkSum(byArr1));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld lFld Test.lArrFld = " + Float.floatToIntBits(Test.fFld) + "," + lFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
