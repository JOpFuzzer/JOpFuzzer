// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=55L;
    public static double dFld=-2.60324;
    public static volatile short sFld=3463;
    public float fFld=0.82F;
    public int iFld=12;
    public static byte byFld=-122;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static volatile float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
        FuzzerUtils.init(Test.dArrFld, -44.40497);
        FuzzerUtils.init(Test.fArrFld, 0.75F);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1) {

        int i13=0, i14=208, i15=6;
        float f3=-123.636F, fArr[]=new float[N];
        boolean b=false;
        short s=-13044;
        byte by=-25;

        FuzzerUtils.init(fArr, -75.561F);

        Test.iArrFld = Test.iArrFld;
        for (i13 = 2; 286 > i13; i13++) {
            i14 = i13;
            fArr = FuzzerUtils.float1array(N, (float)2.53F);
            for (f3 = 1; f3 < 6; ++f3) {
                switch ((int)((f3 % 7) + 72)) {
                case 72:
                    if (b) continue;
                    i14 += 3;
                    break;
                case 73:
                    i15 <<= 185;
                    Test.instanceCount = l1;
                case 74:
                    Test.dFld *= 4679779920504064313L;
                    i14 += (int)Test.instanceCount;
                    i14 >>= i14;
                    break;
                case 75:
                    Test.instanceCount = (long)-2.350F;
                    s <<= by;
                case 76:
                    Test.iArrFld[i13 + 1] *= (int)27L;
                    break;
                case 77:
                    Test.iArrFld[(int)(f3 + 1)] += i15;
                case 78:
                    i14 *= 8;
                    break;
                }
            }
        }
        vMeth1_check_sum += l1 + i13 + i14 + Float.floatToIntBits(f3) + i15 + (b ? 1 : 0) + s + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i10, float f2) {

        int i11=-219, i12=7, i16=9, i17=234;
        double d1=0.85291;

        for (i11 = 264; i11 > 13; i11 -= 2) {
            i10 = (int)((-(i10 + 1.59706)) - ((i12 * Test.instanceCount) - d1));
            vMeth1(Test.instanceCount);
            Test.instanceCount = i10;
            if (i12 != 0) {
                vMeth_check_sum += i10 + Float.floatToIntBits(f2) + i11 + i12 + Double.doubleToLongBits(d1) + i16 + i17;
                return;
            }
            for (i16 = 1; i16 < 13; ++i16) {
                Test.sFld -= (short)d1;
            }
        }
        f2 = Test.instanceCount;
        i10 |= i10;
        i10 = i17;
        vMeth_check_sum += i10 + Float.floatToIntBits(f2) + i11 + i12 + Double.doubleToLongBits(d1) + i16 + i17;
    }

    public float fMeth(int i3, int i4, long l) {

        int i5=-56192, i6=-14, i7=-44759, i8=-151, i9=1974, i18=12, i19=-47575, i20=-99;

        for (i5 = 384; i5 > 17; i5 -= 3) {
            try {
                i3 = (Test.iArrFld[i5 - 1] / -160);
                i6 = (254 / Test.iArrFld[i5 + 1]);
                i6 = (Test.iArrFld[i5 - 1] % i5);
            } catch (ArithmeticException a_e) {}
            for (i7 = 13; 1 < i7; i7--) {
                i8 += i7;
                i9 += i7;
                switch (((i7 % 8) * 5) + 89) {
                case 123:
                    vMeth(i3, fFld);
                    break;
                case 128:
                    for (i18 = 2; i18 > i7; i18--) {
                        i6 >>= i9;
                        i3 %= -13877;
                        fFld = i19;
                        i6 = 7;
                        i20 *= i3;
                        i9 = (int)l;
                        Test.dArrFld[i18 + 1] = i7;
                    }
                    break;
                case 95:
                    Test.dFld += 226;
                    break;
                case 94:
                    i4 = i18;
                    break;
                case 115:
                    Test.instanceCount += i4;
                    break;
                case 118:
                    fFld = Test.instanceCount;
                case 112:
                    i4 += i9;
                case 103:
                    Test.iArrFld[i7 + 1] >>= i6;
                }
            }
        }
        long meth_res = i3 + i4 + l + i5 + i6 + i7 + i8 + i9 + i18 + i19 + i20;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-120.844F;
        int i=23612, i1=-54745, i2=-1, i21=-42, i22=146, i23=11, i24=91, i25=1;
        double d=-68.111628;
        boolean b1=true;

        for (f = 9; f < 270; f++) {
            float f1=77.633F;
            f1 += (f - i);
            for (i1 = 3; i1 < 96; i1++) {
                Test.instanceCount -= i2;
                i = (int)((Math.min(i1, i) + (-(i - d))) + fMeth(i1, i2, Test.instanceCount));
                f1 += (i1 * i2);
            }
            fFld -= 0.44F;
            for (i21 = 5; i21 < 96; i21 += 3) {
                Test.instanceCount += i21;
                i23 = 1;
                do {
                    i2 += i21;
                    Test.sFld = (short)1.483F;
                    Test.instanceCount = i21;
                    Test.iArrFld[i21] -= i23;
                    if (b1) break;
                    i2 = (int)122.373F;
                    try {
                        Test.iArrFld[(int)(f)] = (Test.iArrFld[i21] / 11776);
                        i = (1630 % i22);
                        Test.iArrFld[i21 + 1] = (8821 / Test.iArrFld[i23 - 1]);
                    } catch (ArithmeticException a_e) {}
                } while (++i23 < 4);
                for (i24 = (int)(f); 4 > i24; ++i24) {
                    Test.fArrFld[(int)(f - 1)][i24 - 1] = -1;
                    i22 += (((i24 * i) + iFld) - Test.instanceCount);
                    f1 += i24;
                    i2 *= (int)Test.instanceCount;
                    if (b1) {
                        Test.iArrFld[i21] = i23;
                        Test.fArrFld[i24][(iFld >>> 1) % N] *= Test.byFld;
                        i += i24;
                        i += i24;
                    } else if (b1) {
                        i2 = (int)118.94F;
                    } else if (b1) {
                        iFld = i24;
                        f1 += -23;
                    } else {
                        Test.instanceCount = (long)Test.dFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 d i21 = " + i2 + "," + Double.doubleToLongBits(d) + "," + i21);
        FuzzerUtils.out.println("i22 i23 b1 = " + i22 + "," + i23 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i24 i25 = " + i24 + "," + i25);

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("fFld iFld Test.byFld = " + Float.floatToIntBits(fFld) + "," + iFld + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.dArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
