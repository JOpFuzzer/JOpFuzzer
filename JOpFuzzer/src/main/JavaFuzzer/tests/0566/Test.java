// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1315575700L;
    public float fFld=2.682F;
    public static short sFld=25018;
    public static byte byFld=38;
    public double dFld=2.124274;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static long lArrFld1[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -35.358F);
        FuzzerUtils.init(Test.iArrFld, -19889);
        FuzzerUtils.init(Test.lArrFld, -5L);
        FuzzerUtils.init(Test.lArrFld1, -9L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i9=-19950, i10=-36440, i11=47032;
        long l2=-6608409231797556734L;
        double d=-1.93550, d1=-8.88328;
        float f1=1.576F, f2=-83.617F;
        byte by1=84;
        boolean b=false;

        Test.fArrFld[(i9 >>> 1) % N] = -236L;
        for (l2 = 1; l2 < 307; l2++) {
            i10 |= (int)l2;
            d = 1;
            while (++d < 5) {
                i10 <<= i9;
                f1 += (float)(d - by1);
                d1 = f1;
                by1 += (byte)(((d * i9) + i10) - i10);
                i9 ^= (int)-7L;
                for (f2 = 1; f2 < 1; ++f2) {
                    switch ((int)(((f2 % 9) * 5) + 87)) {
                    case 97:
                        Test.iArrFld[(int)(f2)] -= (int)196L;
                        i10 += i11;
                        by1 &= (byte)Test.instanceCount;
                        i9 = i9;
                    case 111:
                    case 88:
                        Test.instanceCount >>>= Test.instanceCount;
                    case 121:
                        if (b) continue;
                        break;
                    case 109:
                        i9 += (-131 + (f2 * f2));
                        break;
                    case 131:
                        i11 += 10;
                        break;
                    case 112:
                        b = false;
                        break;
                    case 90:
                        if (b) break;
                        break;
                    case 108:
                        i10 *= -43;
                        break;
                    }
                }
            }
        }
        vMeth2_check_sum += i9 + l2 + i10 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + by1 +
            Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + i11 + (b ? 1 : 0);
    }

    public static void vMeth1(int i6, long l, long l1) {

        int i7=12168, i8=75, i12=-148, i13=41634, i14=5, i15=-8, i16=177;
        float f3=73.462F;
        short s=-9390;

        for (i7 = 7; i7 < 236; ++i7) {
            vMeth2();
            for (i12 = 1; i12 < 7; i12++) {
                f3 *= 13;
                Test.iArrFld[i12 - 1] -= s;
                i8 /= -13722;
                i8 += i12;
                i8 -= (int)Test.instanceCount;
            }
            i14 = 1;
            while (++i14 < 7) {
                for (i15 = 1; 1 > i15; i15++) {
                    i6 /= (int)(Test.instanceCount | 1);
                    i13 = i8;
                    i13 >>= 2;
                    i16 += (((i15 * f3) + i6) - l1);
                    i6 <<= (int)3946L;
                }
            }
        }
        vMeth1_check_sum += i6 + l + l1 + i7 + i8 + i12 + i13 + Float.floatToIntBits(f3) + s + i14 + i15 + i16;
    }

    public static void vMeth(int i2, int i3) {

        float f=2.785F, f4=-1.316F;
        byte by=-26;
        int i4=239, i5=-3, i17=28537, i19=-3, i20=-5, i21=57283, i22=35749;
        boolean b1=false, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, true);

        f += ((by--) * ((i3--) * (-i3)));
        for (i4 = 2; i4 < 341; ++i4) {
            vMeth1(i3, Test.instanceCount, Test.instanceCount);
        }
        Test.lArrFld[(i2 >>> 1) % N] >>= i3;
        Test.instanceCount = i4;
        for (f4 = 2; f4 < 285; ++f4) {
            Test.iArrFld[(int)(f4 + 1)] = i5;
            b1 = b1;
            for (i19 = 1; i19 < 6; ++i19) {
                i3 += (int)-2179574655L;
                i20 *= i5;
                for (i21 = 1; 2 > i21; i21++) {
                    Test.iArrFld[i21] = i22;
                    i2 += (int)(4484139352791929122L + (i21 * i21));
                    bArr = bArr;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f) + by + i4 + i5 + Float.floatToIntBits(f4) + i17 + (b1 ? 1
            : 0) + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=60786, i1=10, i23=12441, i24=-93, i25=-54131, i26=-228, i27=46736, i28=-49111, i29=2;
        boolean b2=true;
        long l3=13732L, l4=8910593228762930065L;

        for (i = 4; i < 201; i += 2) {
            vMeth(i1, i1);
            try {
                i1 = (686291086 / Test.iArrFld[i]);
                i1 = (61005 % i);
                Test.iArrFld[i] = (i1 / -54);
            } catch (ArithmeticException a_e) {}
            i1 = i1;
        }
        for (i23 = 3; i23 < 139; ++i23) {
            switch ((((i1 >>> 1) % 8) * 5) + 56) {
            case 63:
                i24 = (int)Test.instanceCount;
                break;
            case 87:
                for (i25 = 9; i25 < 184; ++i25) {
                    i1 = -169;
                    for (i27 = i23; i27 < 2; i27++) {
                        i26 += (((i27 * fFld) + i25) - i28);
                        i26 = (int)Test.instanceCount;
                        i24 *= i28;
                        i26 /= (int)((long)(fFld) | 1);
                        b2 = b2;
                        b2 = false;
                    }
                }
                Test.instanceCount *= Test.instanceCount;
                Test.instanceCount >>= Test.instanceCount;
                i1 -= i28;
            case 96:
                i28 %= (int)(Test.instanceCount | 1);
                if (b2) break;
                for (l3 = 184; l3 > 6; l3--) {
                    i26 += (int)l3;
                    l4 = 1;
                    do {
                        switch ((i23 % 10) + 34) {
                        case 34:
                            b2 = b2;
                            i26 -= i;
                            break;
                        case 35:
                            i26 <<= Test.sFld;
                            b2 = b2;
                            fFld -= i26;
                            break;
                        case 36:
                            i24 >>= i;
                            break;
                        case 37:
                        case 38:
                            i29 >>= (int)2412842804L;
                            break;
                        case 39:
                            Test.byFld *= (byte)dFld;
                            break;
                        case 40:
                            dFld += i25;
                            break;
                        case 41:
                            Test.instanceCount = Test.sFld;
                            break;
                        case 42:
                            Test.lArrFld = Test.lArrFld1[(int)(l4)];
                            break;
                        case 43:
                            i24 += (int)l4;
                            break;
                        default:
                            Test.instanceCount >>= -57917;
                        }
                    } while (++l4 < 2);
                }
                break;
            case 81:
                i26 += (((i23 * fFld) + i27) - i29);
                break;
            case 74:
                i28 <<= i25;
                break;
            case 90:
                try {
                    i29 = (i24 / Test.iArrFld[i23]);
                    Test.iArrFld[i23] = (i26 % 174);
                    i26 = (i23 % Test.iArrFld[i23 - 1]);
                } catch (ArithmeticException a_e) {}
                break;
            case 66:
                i29 += (i23 * i23);
                break;
            case 80:
                try {
                    Test.iArrFld[i23 - 1] = (i25 / Test.iArrFld[i23 + 1]);
                    Test.iArrFld[i23] = (Test.iArrFld[i23 - 1] / -31);
                    i26 = (242791948 % i25);
                } catch (ArithmeticException a_e) {}
            }
        }

        FuzzerUtils.out.println("i i1 i23 = " + i + "," + i1 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 b2 = " + i27 + "," + i28 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("l3 i29 l4 = " + l3 + "," + i29 + "," + l4);

        FuzzerUtils.out.println("Test.instanceCount fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld dFld Test.fArrFld = " + Test.byFld + "," + Double.doubleToLongBits(dFld) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld Test.lArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld1));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
