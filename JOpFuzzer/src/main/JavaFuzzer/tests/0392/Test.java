// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-38L;
    public static float fFld=1.743F;
    public static int iFld=-190;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i8) {

        int i9=47645, i10=41445, i11=-2, i12=-23849, i13=36585, iArr[]=new int[N];
        double d1=-57.64534;
        float fArr[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, -52.593F);
        FuzzerUtils.init(iArr, 9);
        FuzzerUtils.init(bArr, false);

        fArr[(i8 >>> 1) % N] = i8;
        i9 = 1;
        do {
            iArr[i9 - 1] -= (int)Test.fFld;
            for (i10 = 4; 1 < i10; i10--) {
                boolean b=true;
                if (b) continue;
                i8 += (i10 * i10);
                Test.instanceCount += (i10 * Test.instanceCount);
                for (i12 = 2; i12 > 1; i12--) {
                    bArr[i9 - 1] = b;
                    if (i11 != 0) {
                    }
                    iArr[i10] -= i13;
                    i8 -= -78;
                    Test.fFld += Test.instanceCount;
                    try {
                        Test.iFld = (Test.iFld % -62059);
                        i11 = (i9 % 102);
                        iArr[i9] = (Test.iFld % i8);
                    } catch (ArithmeticException a_e) {}
                    d1 = i9;
                }
            }
        } while (++i9 < 378);
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(bArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(double d, int i4) {

        int i5=-24617, i6=12, i7=147, i14=-6, iArr1[]=new int[N];
        float f=0.525F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 46.120832);
        FuzzerUtils.init(iArr1, -63745);

        d -= Test.fFld;
        dArr[(i4 >>> 1) % N] -= (i4++);
        i4 >>= (int)((Test.fFld - dArr[(i4 >>> 1) % N]) * (Test.instanceCount++));
        i5 = 1;
        do {
            for (i6 = i5; i6 < 5; ++i6) {
                i4 = (i5 - (Integer.reverseBytes(i6) + i7));
                i7 -= (int)(Math.min((int)(d + -44648), (int)(i6 + Test.instanceCount)) / -55L);
                switch (((((4 - byMeth(Test.iFld)) >>> 1) % 2) * 5) + 71) {
                case 72:
                    Test.iFld += -4;
                    break;
                case 79:
                    for (f = i5; f < 1; f++) {
                        i14 -= i4;
                        iArr1 = iArr1;
                        Test.iFld += (int)((long)f ^ i4);
                        i7 += -82;
                    }
                    i7 += (((i6 * i4) + Test.iFld) - f);
                    break;
                }
            }
        } while (++i5 < 355);
        long meth_res = Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i=-129, i1=230, i2=-49605, i3=21816, i15=7, i16=42691, iArr2[]=new int[N];
        double d2=-61.114920, dArr1[]=new double[N];
        boolean b1=true;

        FuzzerUtils.init(iArr2, -7121);
        FuzzerUtils.init(dArr1, 75.59609);

        for (i = 9; i < 201; i++) {
            for (i2 = 1; i2 < 8; i2++) {
                i3 >>= i1;
                i3 += (((i2 * Test.instanceCount) + Test.instanceCount) - i2);
                Test.instanceCount = (i1--);
                i1 <<= (iMeth(d2, i) + i);
                i3 = (int)-38.37177;
                if (b1) continue;
            }
            if (b1) continue;
            iArr2[i - 1] = (int)l;
            dArr1[i - 1] = 204;
            i3 &= (int)-17485L;
            for (i15 = 1; i15 < 8; i15++) {
                dArr1[i15] -= l;
                try {
                    iArr2[i15 + 1] = (i1 / i16);
                    i16 = (Test.iFld % iArr2[i15 + 1]);
                    i1 = (iArr2[i - 1] / 939677057);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth_check_sum += l + i + i1 + i2 + i3 + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) + i15 + i16 +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {

        int i17=-182, i18=9, i19=11113, i20=-17099, i21=167, iArr3[]=new int[N];
        byte by=48;
        double d3=-82.29778, dArr2[]=new double[N];
        boolean b2=false;
        short sArr[]=new short[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(dArr2, 2.77271);
        FuzzerUtils.init(iArr3, -41276);
        FuzzerUtils.init(sArr, (short)-7285);
        FuzzerUtils.init(fArr1, 19.915F);

        vMeth(Test.instanceCount);
        i17 = 1;
        do {
            by = by;
            switch (((i17 % 5) * 5) + 123) {
            case 130:
                dArr2 = FuzzerUtils.double1array(N, (double)69.3907);
                Test.iFld *= (int)Test.instanceCount;
                Test.iFld += (13019 + (i17 * i17));
                break;
            case 145:
                i18 = 1;
                while (++i18 < 81) {
                    Test.instanceCount = -13;
                    Test.iFld = (int)Test.instanceCount;
                    iArr3[i17 - 1] = Test.iFld;
                }
                break;
            case 133:
                if (b2) {
                    Test.iFld += (i17 * i17);
                } else if (b2) {
                    i19 = 1;
                    do {
                        Test.iFld += Test.iFld;
                        d3 = Test.fFld;
                        for (i20 = i17; i20 < 1; ++i20) {
                            sArr[(i21 >>> 1) % N] += (short)Test.fFld;
                            i21 = i21;
                            i21 &= i17;
                            iArr3[i17 + 1] = i21;
                            fArr1[i17] -= Test.fFld;
                            try {
                                i21 = (i19 % 13594);
                                i21 = (i17 % -150);
                                iArr3[i19] = (-1987733544 / i20);
                            } catch (ArithmeticException a_e) {}
                            iArr3[i20] ^= i18;
                            iArr3[i20] -= (int)d3;
                        }
                        Test.iFld = i18;
                        iArr3[i19] -= i18;
                        Test.instanceCount += (i19 * i19);
                        Test.instanceCount = i18;
                    } while (++i19 < 81);
                    i21 += i19;
                } else {
                    Test.fFld = 8;
                }
            case 144:
                fArr1[i17 + 1] += i18;
            case 147:
            default:
                Test.instanceCount %= (i17 | 1);
            }
        } while (++i17 < 310);

        FuzzerUtils.out.println("i17 by i18 = " + i17 + "," + by + "," + i18);
        FuzzerUtils.out.println("i19 d3 i20 = " + i19 + "," + Double.doubleToLongBits(d3) + "," + i20);
        FuzzerUtils.out.println("i21 b2 dArr2 = " + i21 + "," + (b2 ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)));
        FuzzerUtils.out.println("iArr3 sArr fArr1 = " + FuzzerUtils.checkSum(iArr3) + "," + FuzzerUtils.checkSum(sArr)
            + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
