// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-37922L;
    public static int iFld=-9366;
    public int iFld1=-5;
    public static volatile boolean bFld=true;
    public static short sFld=4577;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 166);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i1=-13, i2=-50, i3=-13379, i4=-125, i5=6, i6=7646;
        float f5=-79.196F, f6=-1.410F;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 3040073029790772808L);
        FuzzerUtils.init(dArr, -25.30426);

        for (i1 = 7; i1 < 130; ++i1) {
            f5 += f5;
            for (f6 = 1; f6 < 13; f6++) {
                i2 *= (int)Test.instanceCount;
                lArr = lArr;
                i3 += (int)(((f6 * i1) + Test.instanceCount) - Test.instanceCount);
                f5 *= i2;
                try {
                    Test.iFld = (Test.iFld / i1);
                    Test.iArrFld[i1] = (Test.iArrFld[i1] / i2);
                    Test.iFld = (i4 % i1);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = Test.instanceCount;
                i3 += (int)f6;
            }
        }
        for (i5 = 10; 172 > i5; ++i5) {
            dArr[i5] = i5;
            i3 = (int)Test.instanceCount;
            Test.instanceCount += Test.iFld;
            Test.bFld = Test.bFld;
        }
        long meth_res = i1 + i2 + Float.floatToIntBits(f5) + Float.floatToIntBits(f6) + i3 + i4 + i5 + i6 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f3, float f4) {

        int i7=-13, i8=30970, i9=8724, i10=37217, i11=-44744, i12=143;

        Test.bFld = (Test.bFld = (iMeth1() >= Test.sFld));
        i7 = 1;
        while (++i7 < 174) {
            for (i8 = 1; i8 < 9; ++i8) {
                byte by2=-21;
                switch ((i7 % 1) + 105) {
                case 105:
                    i9 -= (int)f3;
                    switch ((i8 % 3) + 100) {
                    case 100:
                        f4 += by2;
                        for (i10 = i8; i10 < 2; i10 += 2) {
                            i9 = 2;
                            Test.iFld %= (int)(Test.iFld | 1);
                            Test.iFld += i7;
                        }
                        i12 = 1;
                        do {
                            Test.iArrFld = Test.iArrFld;
                            Test.instanceCount += (((i12 * Test.sFld) + i8) - Test.instanceCount);
                            i9 = i10;
                        } while (++i12 < 2);
                        break;
                    case 101:
                        i9 = i7;
                        break;
                    case 102:
                        Test.iFld >>= i8;
                        break;
                    }
                    break;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f3) + Float.floatToIntBits(f4) + i7 + i8 + i9 + i10 + i11 + i12;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(float f2) {

        byte by1=-99;
        int i13=-19, i14=9, i15=10, i16=4, i17=1, i18=-65090, i19=-7;
        double d=-8.12699, dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -48.109500);

        by1 <<= (byte)((++Test.iFld) - iMeth(f2, f2));
        for (i13 = 10; i13 < 163; i13 += 3) {
            for (i15 = i13; i15 < 30; ++i15) {
                Test.iFld = (int)d;
                if (Test.bFld) break;
                for (i17 = 1; i17 < 1; ++i17) {
                    i18 += i16;
                    dArr1 = dArr1;
                    i14 >>>= i16;
                    i16 = 33818;
                    Test.iArrFld[i17] = i17;
                    Test.iArrFld[i17 + 1] *= (int)1515849018L;
                    dArr1[i15 - 1] = i19;
                }
                Test.bFld = Test.bFld;
                i18 = i14;
            }
        }
        long meth_res = Float.floatToIntBits(f2) + by1 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d) + i17 + i18
            + i19 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-30.355F, f1=0.465F, f7=0.706F, f8=9.367F;
        int i=-3, i20=-87, i21=-2, i22=-139, i23=-4, i24=102;
        byte by=-9;
        long l=7459896612171067741L;
        double d1=88.2320, dArr2[]=new double[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr2, -108.40160);

        Test.iFld += (++Test.iFld);
        bArr[(Test.iFld >>> 1) % N] = true;
        for (f = 12; f < 338; f++) {
            Test.iArrFld[(int)(f - 1)] = (int)((f * (iFld1 * 7787565008550323684L)) + (++i));
            f1 = (by++);
            try {
                iFld1 = (-578029080 % Test.iFld);
                i = (i / 25742);
                i = (Test.iArrFld[(int)(f)] / i);
            } catch (ArithmeticException a_e) {}
            f1 = (float)dMeth(f);
            for (l = 2; l < 77; l += 2) {
                Test.iArrFld[(int)(f)] *= i20;
                i >>>= i;
                for (i21 = (int)(l); i21 < 3; ++i21) {
                    Test.iArrFld = Test.iArrFld;
                    dArr2[(int)(l)] -= l;
                    f1 = i20;
                    by += (byte)i21;
                    dArr2[i21 + 1] -= 5;
                    if (Test.bFld) break;
                }
                for (i23 = 1; i23 < 3; ++i23) {
                    i24 %= (int)((long)(d1) | 1);
                    i20 &= 180;
                }
                f7 = 3;
                do {
                    f1 *= i21;
                    i22 *= (int)f7;
                    iFld1 = Test.iFld;
                    Test.sFld -= (short)f8;
                    switch (((0 >>> 1) % 3) + 75) {
                    case 75:
                        iFld1 += (-13 + (f7 * f7));
                    case 76:
                        Test.iArrFld[(int)(f)] -= i22;
                        i24 = i;
                        i *= (int)l;
                        break;
                    case 77:
                        i20 = -14;
                        break;
                    }
                } while (--f7 > 0);
            }
        }

        FuzzerUtils.out.println("f i f1 = " + Float.floatToIntBits(f) + "," + i + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("by l i20 = " + by + "," + l + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 d1 f7 = " + i24 + "," + Double.doubleToLongBits(d1) + "," +
            Float.floatToIntBits(f7));
        FuzzerUtils.out.println("f8 bArr dArr2 = " + Float.floatToIntBits(f8) + "," + FuzzerUtils.checkSum(bArr) + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld iFld1 = " + Test.instanceCount + "," + Test.iFld + "," +
            iFld1);
        FuzzerUtils.out.println("Test.bFld Test.sFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
