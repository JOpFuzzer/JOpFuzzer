// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4728465525029360182L;
    public short sFld=-23546;
    public float fFld=50.126F;
    public static double dArrFld[]=new double[N];
    public byte byArrFld[]=new byte[N];
    public int iArrFld[]=new int[N];
    public volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.2293);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4) {

        int i5=-8, i6=61307, i7=-102, i8=9, i9=-9, i10=-9, i11=17, iArr[][]=new int[N][N];
        double d1=-124.34944;
        float f=0.393F;
        byte by1=-27;

        FuzzerUtils.init(iArr, -2);

        iArr = iArr;
        i5 ^= (int)Test.instanceCount;
        d1 -= i4;
        for (i6 = 332; i6 > 7; i6--) {
            i7 *= i7;
            d1 = i5;
            for (i8 = 1; i8 < 5; i8++) {
                for (i10 = 1; 2 > i10; ++i10) {
                    iArr[i6 + 1][i10 - 1] -= 92;
                    i9 *= (int)Test.instanceCount;
                    i5 = i5;
                    f += (((i10 * i8) + i7) - i5);
                    i7 += (((i10 * by1) + i5) - Test.instanceCount);
                    i7 <<= i6;
                    i7 += (i10 | Test.instanceCount);
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + i10 + i11 +
            Float.floatToIntBits(f) + by1 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(byte by) {

        short s=16083;
        int i12=-10, i13=-7, i14=64, i15=-11, i16=13, iArr1[]=new int[N];
        long l=1623404916L;

        FuzzerUtils.init(iArr1, 93);

        s += (short)Test.instanceCount;
        vMeth1(-13);
        i12 = 7;
        l = 1;
        while (++l < 156) {
            i13 = 1;
            do {
                Test.instanceCount ^= by;
                Test.dArrFld[i13 - 1] = -30664;
                by = (byte)l;
            } while (++i13 < 10);
            i12 += (int)(((l * i12) + i13) - Test.instanceCount);
            i12 -= (int)5591815189249174457L;
            for (i14 = 1; i14 < 10; ++i14) {
                i12 += by;
                i16 = 2;
                do {
                    iArr1[i14 - 1] = i12;
                    Test.instanceCount &= i12;
                } while (--i16 > 0);
            }
        }
        vMeth_check_sum += by + s + i12 + l + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth() {

        byte by2=-25;
        int i17=4, i18=-6, i19=0, i20=-64458, i21=1, i22=-11694, iArr2[][]=new int[N][N];
        long l1=-63598L;
        float f1=0.1021F;
        double d2=-112.56031;

        FuzzerUtils.init(iArr2, 12);

        vMeth(by2);
        for (i17 = 3; 153 > i17; i17++) {
            for (l1 = 1; l1 < 11; l1++) {
                by2 += (byte)(l1 * i19);
                f1 += (((l1 * l1) + i17) - i18);
                i18 &= i19;
                iArr2[i17 - 1][i17 - 1] <<= i17;
            }
            if (false) break;
            for (d2 = 11; d2 > 1; --d2) {
                for (i21 = 1; i21 < 2; i21++) {
                    i19 *= 231;
                    f1 = i20;
                }
                i20 = by2;
                try {
                    i18 = (i20 / -199);
                    i19 = (i19 / i20);
                    i20 = (24713 % i21);
                } catch (ArithmeticException a_e) {}
                i18 = i21;
            }
        }
        long meth_res = by2 + i17 + i18 + l1 + i19 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + i20 + i21
            + i22 + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-2.6605, dArr[][]=new double[N][N];
        int i=-43860, i1=227, i2=9, i3=38120, i23=32835, i24=12, i25=49724, i26=209;
        byte by3=-126;
        long lArr[][]=new long[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr, 0.100247);
        FuzzerUtils.init(lArr, -2L);
        FuzzerUtils.init(sArr, (short)-31017);

        d = i;
        i1 = 1;
        do {
            Test.instanceCount += i1;
            for (i2 = 7; i2 < 120; ++i2) {
                Test.dArrFld[i2 - 1] = ((byArrFld[i2 + 1] *= (byte)(i *= i1)) * (i1 * (iArrFld[i1 - 1]++)));
                Test.instanceCount += (i2 | i2);
                i3 &= (int)(((i3 - i2) * lMeth()) - 11367);
                i3 += i2;
                Test.instanceCount += (i2 * i2);
                for (i23 = 1; i23 < 2; i23++) {
                    byArrFld[i2 + 1] = (byte)i23;
                }
                sFld = (short)Test.instanceCount;
                switch (((i1 % 9) * 5) + 77) {
                case 93:
                    for (i25 = 1; 2 > i25; ++i25) {
                        iArrFld[i1] >>= i2;
                        i -= (int)Test.instanceCount;
                        dArr[i1][i2] -= i;
                        i26 %= (int)(i1 | 1);
                        switch (((i3 >>> 1) % 2) + 75) {
                        case 75:
                            i3 += i24;
                            break;
                        case 76:
                            fFld *= i24;
                            iArrFld[i1 + 1] = i3;
                            break;
                        }
                        fFld = i23;
                        i26 = i24;
                    }
                    break;
                case 79:
                case 102:
                case 87:
                case 99:
                    i3 -= i23;
                    fArrFld[i1 - 1] = Test.instanceCount;
                    lArr[i1][i2] = i26;
                    fFld -= -150;
                    break;
                case 117:
                    by3 += (byte)(i2 | i26);
                    i = (int)Test.instanceCount;
                    break;
                case 95:
                    i26 -= sFld;
                case 116:
                    lArr[i2 - 1][i2 + 1] = -62073;
                case 103:
                    sArr[i2] = (short)-58268L;
                    break;
                default:
                    Test.instanceCount -= Test.instanceCount;
                }
            }
        } while (++i1 < 209);

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 i23 = " + i2 + "," + i3 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("by3 dArr lArr = " + by3 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount sFld fFld = " + Test.instanceCount + "," + sFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.dArrFld byArrFld iArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(byArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
