// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=195705477L;
    public static short sFld=-3786;
    public static boolean bFld=true;
    public volatile double dFld=86.66793;
    public static volatile byte byFld=-18;
    public int iArrFld[]=new int[N];

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static long lMeth(int i1, int i2, boolean b) {

        float f=-60.628F;

        f = (++i2);
        long meth_res = i1 + i2 + (b ? 1 : 0) + Float.floatToIntBits(f);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i6) {

        int i7=12, i8=-1;
        float f2=21.241F;

        for (i7 = 17; i7 < 384; i7++) {
            Test.instanceCount -= (long)f2;
        }
        vMeth1_check_sum += i6 + i7 + i8 + Float.floatToIntBits(f2);
    }

    public static void vMeth(int i4, int i5) {

        float f1=-1.470F;
        int i9=-221, i10=-23, i11=102, i12=0, i13=-3, i14=-216, iArr[]=new int[N];
        byte by=10;
        double d1=1.75744;
        long l1=34654L;
        boolean b1=false;

        FuzzerUtils.init(iArr, 68);

        i4 *= (int)(((i5 + -79L) - (Test.instanceCount - f1)) + i4);
        vMeth1(7);
        for (i9 = 3; i9 < 377; ++i9) {
            Test.instanceCount = Test.instanceCount;
            by -= by;
            i4 = i11;
        }
        d1 -= i9;
        for (l1 = 18; l1 < 393; ++l1) {
            for (i13 = 1; 5 > i13; ++i13) {
                iArr[(int)(l1)] = by;
                if (b1) continue;
                iArr[(int)(l1 - 1)] |= i4;
                Test.sFld ^= (short)-8;
                i14 += i10;
                Test.instanceCount += (i13 * i13);
            }
        }
        vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f1) + i9 + i10 + by + i11 + Double.doubleToLongBits(d1) + l1
            + i12 + i13 + i14 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth1(double d, int i3) {

        int i15=33339, i16=-7, i17=161, i18=63637, i19=165;

        vMeth(7, i3);
        Test.instanceCount = i3;
        d -= i3;
        for (i15 = 353; i15 > 11; --i15) {
            i17 = 5;
            do {
                Test.instanceCount += (-14 + (i17 * i17));
                Test.instanceCount = i17;
                for (i18 = 1; 1 > i18; i18++) {
                    i19 = (int)Test.instanceCount;
                    switch (((i17 >>> 1) % 1) + 119) {
                    case 119:
                    default:
                        Test.sFld = (short)i15;
                        i16 += 105;
                        d -= i19;
                        i16 += (int)Test.instanceCount;
                    }
                    Test.bFld = Test.bFld;
                }
            } while (--i17 > 0);
        }
        long meth_res = Double.doubleToLongBits(d) + i3 + i15 + i16 + i17 + i18 + i19;
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=7L, lArr[]=new long[N];
        int i=156, i20=9099, i21=175, i22=28249, i23=5;
        double d2=-70.66263, d3=0.101903;
        float f3=-6.215F;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)6298);
        FuzzerUtils.init(lArr, 6L);

        for (l = 6; l < 156; l++) {
            lMeth(++i, i, true);
            i -= (++i);
            i >>= (int)((i >>>= (i - i)) * Double.longBitsToDouble(lMeth1(dFld, i)));
        }
        switch (((i >>> 1) % 1) + 37) {
        case 37:
            i = i;
        }
        iArrFld[(i >>> 1) % N] = (int)Test.instanceCount;
        i20 = 146;
        do {
            i = i20;
            i = (int)l;
            i = (int)l;
            for (d2 = 6; d2 < 172; ++d2) {
                dFld *= i;
                i |= i20;
                i22 = 1;
                while (++i22 < 2) {
                    i = -53454;
                    i += (i22 - i22);
                    Test.instanceCount += (i22 | i);
                    sArr[i22 + 1][i22] -= (short)Test.instanceCount;
                    lArr[i20] *= i20;
                    i21 += (((i22 * i) + f3) - Test.sFld);
                    i = (int)dFld;
                    Test.instanceCount = i;
                    i += (((i22 * Test.byFld) + Test.byFld) - i20);
                }
                for (d3 = i20; d3 < 2; d3 += 3) {
                    Test.instanceCount |= i20;
                    if (Test.bFld) continue;
                    Test.sFld = (short)l;
                    iArrFld[(int)(d2 - 1)] &= i23;
                    i21 ^= 3646;
                }
            }
        } while (--i20 > 0);

        FuzzerUtils.out.println("l i i20 = " + l + "," + i + "," + i20);
        FuzzerUtils.out.println("d2 i21 i22 = " + Double.doubleToLongBits(d2) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("f3 d3 i23 = " + Float.floatToIntBits(f3) + "," + Double.doubleToLongBits(d3) + "," +
            i23);
        FuzzerUtils.out.println("sArr lArr = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("dFld Test.byFld iArrFld = " + Double.doubleToLongBits(dFld) + "," + Test.byFld + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 mainTest
//DEBUG  vMeth ->  vMeth lMeth1 mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
