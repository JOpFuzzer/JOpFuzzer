// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=76L;
    public static int iFld=-57968;
    public static short sFld=-7034;
    public static float fFld=2.551F;
    public static int iFld1=-12;
    public boolean bFld=false;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1) {

        int i2=4839, i3=14, i4=3, i5=5, i6=15062;
        long l1=11L, lArr[]=new long[N];
        float f1=-58.700F;
        short s=18484;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -115.62286);
        FuzzerUtils.init(lArr, -2540820873030731640L);

        i2 = 1;
        while (++i2 < 221) {
            l1 = 1;
            do {
                Test.iFld += (int)l1;
            } while (++l1 < 7);
            f1 += Test.iFld;
            dArr[i2 - 1] += 56233;
        }
        Test.iFld >>>= (int)Test.instanceCount;
        s |= (short)i1;
        dArr[(i2 >>> 1) % N] -= i1;
        lArr[(215 >>> 1) % N] = i2;
        for (i3 = 2; i3 < 372; i3++) {
            for (i5 = 1; i5 < 5; i5++) {
                boolean b=true;
                i4 *= (int)-2461763036286418293L;
                if (b) break;
                f1 = Test.instanceCount;
                Test.iFld = i3;
            }
        }
        vMeth2_check_sum += i1 + i2 + l1 + Float.floatToIntBits(f1) + s + i3 + i4 + i5 + i6 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(float f, long l, int i) {

        float f2=1.745F;
        int i7=-52120, iArr[]=new int[N];
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -92);
        FuzzerUtils.init(lArr1, -1L);

        vMeth2(Test.iFld);
        i = (int)l;
        i = -30477;
        Test.iFld *= i;
        for (f2 = 11; 355 > f2; ++f2) {
            if (b1) {
                iArr[(int)(f2 + 1)] = Test.iFld;
                Test.iFld = Test.iFld;
                i7 += (int)l;
            } else if (b1) {
                i += (int)(((f2 * f2) + Test.sFld) - Test.iFld);
            } else if (b1) {
                lArr1[(int)(f2 + 1)] = 80;
                i += (int)f2;
                vMeth1_check_sum += Float.floatToIntBits(f) + l + i + Float.floatToIntBits(f2) + i7 + (b1 ? 1 : 0) +
                    FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
                return;
            } else {
                i = i;
                i7 += Test.iFld;
            }
            lArr1 = FuzzerUtils.long1array(N, (long)-8L);
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + l + i + Float.floatToIntBits(f2) + i7 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth() {


        vMeth1(Test.fFld, Test.instanceCount, Test.iFld1);
        vMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        double d=42.12277, d1=12.124978;
        int i8=8, i9=53560, i10=-61, i11=-5133, i12=-2, i13=3153, i14=11, iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr1, -5);

        Test.iFld += (++Test.iFld);
        vMeth();
        d -= Test.instanceCount;
        i8 = 1;
        do {
            Test.iFld1 += (((i8 * Test.instanceCount) + Test.iFld) - Test.iFld1);
            iArr1[i8][i8 + 1] <<= Test.iFld;
            for (i9 = 4; i9 < 72; ++i9) {
                try {
                    Test.iFld1 = (i8 / -1661249839);
                    i10 = (38 % iArr1[i8][i8 + 1]);
                    i10 = (35509 % iArr1[i9][i9]);
                } catch (ArithmeticException a_e) {}
                Test.iFld1 = i10;
                Test.fFld *= Test.iFld1;
                Test.sFld >>>= (short)7;
                Test.iFld1 = (int)-1.588F;
            }
            i11 = 1;
            do {
                switch ((i11 % 2) + 69) {
                case 69:
                    Test.sFld = (short)Test.instanceCount;
                    break;
                case 70:
                    Test.iFld1 = i9;
                    break;
                default:
                    try {
                        Test.iFld1 = (i8 % i8);
                        Test.iFld = (iArr1[i8][i11 - 1] / i10);
                        iArr1[i8 + 1][i11 - 1] = (1595080646 % i11);
                    } catch (ArithmeticException a_e) {}
                    iArr1[i8 + 1][i8 + 1] = (int)d;
                }
                if (bFld) break;
                for (d1 = 1; d1 < 1; ++d1) {
                    Test.instanceCount += (long)(d1 * d1);
                    i12 >>>= i10;
                    Test.iFld = i10;
                }
                if (bFld) continue;
                for (i13 = i8; 1 > i13; ++i13) {
                    byte by=56;
                    Test.fFld += (((i13 * i9) + i9) - Test.fFld);
                    iArr1[i11][i11 - 1] += by;
                    Test.fFld *= Test.instanceCount;
                    iArr1[i13][i13 + 1] <<= i8;
                    bFld = bFld;
                }
            } while (++i11 < 72);
        } while (++i8 < 350);

        FuzzerUtils.out.println("d i8 i9 = " + Double.doubleToLongBits(d) + "," + i8 + "," + i9);
        FuzzerUtils.out.println("i10 i11 d1 = " + i10 + "," + i11 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld Test.iFld1 bFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.iFld1 +
            "," + (bFld ? 1 : 0));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
