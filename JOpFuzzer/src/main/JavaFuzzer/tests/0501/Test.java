// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3575288445318181620L;
    public double dFld=0.88152;
    public float fFld=-2.578F;
    public volatile int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public static long lArrFld[][]=new long[N][N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -541863100L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(int i, long l, int i1) {

        int iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, -24918);

        i1 -= ((--iArr[(i >>> 1) % N][(-12 >>> 1) % N]) << 202);
        vMeth_check_sum += i + l + i1 + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth() {

        int i2=13;

        i2 -= Math.min((-(i2 + 115)) - (i2 * i2), Integer.reverseBytes(i2 - i2));
        long meth_res = i2;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        double d1=100.16964;
        int i11=-227;

        d1 = i11;
        i11 = -8;
        vMeth1_check_sum += Double.doubleToLongBits(d1) + i11;
    }

    public static int iMeth1(double d, short s, float f1) {

        int i5=-6, i6=-13, i7=-45003, i8=139, i9=12, i10=-16395, i12=12, i13=-253;
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 11L);

        for (i5 = 2; i5 < 121; i5++) {
            if (b1) {
                f1 += (((i5 * i5) + i6) - s);
                for (i7 = 1; i7 < 13; ++i7) {
                    d = (i6 + (i8 = (--i6)));
                    for (i9 = 1; i9 < 2; ++i9) {
                        if (Math.abs(lArr[i9 - 1]) >= Math.min(i5, i9)) continue;
                        i8 += i9;
                        Test.instanceCount >>= (((i7 / (i8 | 1)) + Test.instanceCount) * (++i8));
                        i6 = (int)Math.abs(--Test.instanceCount);
                        i10 = (int)f1;
                        vMeth1();
                    }
                    for (i12 = 1; i12 < 2; i12++) {
                        if (false) break;
                        b1 = b1;
                    }
                }
            } else {
                d = i6;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + s + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + i12
            + i13 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(float f) {

        int i3=12, i4=6, i14=-196, i15=-43037, i16=-245, i17=5;
        boolean b=true;
        byte by=2;

        vMeth((int)((++iArrFld[(-88 >>> 1) % N]) - lMeth()), Test.instanceCount, -96);
        i3 = 1;
        while (++i3 < 132) {
            if (b) break;
            Test.instanceCount += (long)((dArrFld[i3 + 1] - (++i4)) + (-47919 - iMeth1(dFld, (short)(32159), f)));
            i4 >>= i3;
            for (i14 = i3; i14 < 12; i14++) {
                by += (byte)f;
                by = (byte)-7497;
                dArrFld[i3 - 1] *= Test.instanceCount;
                i4 += (int)-1.16026;
            }
            i4 = i14;
        }
        for (i16 = 4; i16 < 156; ++i16) {
            Test.lArrFld[i16 - 1][i16] >>>= i4;
            i4 *= (int)f;
            i15 += i4;
        }
        long meth_res = Float.floatToIntBits(f) + i3 + (b ? 1 : 0) + i4 + i14 + i15 + by + i16 + i17;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i18=34, i19=7, i20=46, iArr1[][]=new int[N][N];
        double d2=-41.70457;
        long l1=-2481245456L;
        boolean b2=true, bArr[]=new boolean[N];
        short s1=11157;

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, -2);

        vMeth((int)(lMeth() * iMeth(fFld)), Test.instanceCount, i18);
        d2 = 1;
        while (++d2 < 201) {
            fArrFld[(int)(d2)] *= i18;
            iArrFld = iArrFld;
            l1 = 1;
            while (++l1 < 125) {
                i18 += (-17615 + (l1 * l1));
                Test.instanceCount <<= i18;
                switch ((int)((d2 % 1) + 37)) {
                case 37:
                    i18 &= i18;
                    fArrFld[(int)(d2 - 1)] *= i18;
                    for (i19 = 1; i19 < 1; ++i19) {
                        switch ((int)((l1 % 7) + 79)) {
                        case 79:
                            Test.instanceCount += 164;
                            i20 += i18;
                            bArr[(int)(l1)] = b2;
                            break;
                        case 80:
                            i20 = (int)-5L;
                            i20 += (i19 | Test.instanceCount);
                            Test.instanceCount += (long)fFld;
                            i20 += i19;
                            break;
                        case 81:
                            iArrFld[(int)(d2 - 1)] *= (int)fFld;
                            i18 = i19;
                            break;
                        case 82:
                            iArrFld[(int)(d2 - 1)] = i18;
                            break;
                        case 83:
                            i18 -= i19;
                            i18 = i20;
                            break;
                        case 84:
                            i20 *= i19;
                            i20 = (int)Test.instanceCount;
                            Test.instanceCount |= l1;
                            iArrFld[(int)(d2 - 1)] |= i19;
                            break;
                        case 85:
                            i20 = i19;
                            break;
                        default:
                            if (b2) break;
                        }
                    }
                    break;
                default:
                    iArr1[(i20 >>> 1) % N][(int)(l1 - 1)] = s1;
                }
            }
        }

        FuzzerUtils.out.println("i18 d2 l1 = " + i18 + "," + Double.doubleToLongBits(d2) + "," + l1);
        FuzzerUtils.out.println("i19 i20 b2 = " + i19 + "," + i20 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("s1 bArr iArr1 = " + s1 + "," + FuzzerUtils.checkSum(bArr) + "," +
            FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount dFld fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("iArrFld dArrFld Test.lArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest iMeth
//DEBUG  lMeth ->  lMeth mainTest iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
