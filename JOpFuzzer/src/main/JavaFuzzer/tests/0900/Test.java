// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=11L;
    public static boolean bFld=false;
    public static float fFld=1.821F;
    public double dFld=79.56640;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d2, long l) {

        int i9=32824, i10=-3, i11=71, i12=-9, i13=-110, i14=95;
        byte by1=41;
        double d3=-6.34370;
        float f1=-1.598F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -84L);

        i9 = 1;
        do {
            Test.iArrFld[i9 - 1] *= by1;
            l = i9;
            for (i10 = 1; 4 > i10; ++i10) {
                Test.bFld = false;
            }
            for (i12 = i9; 4 > i12; ++i12) {
                Test.instanceCount += (i12 - i10);
                for (d3 = 1; 1 > d3; ++d3) {
                    Test.iArrFld[(int)(d3 + 1)] <<= i10;
                    Test.bFld = Test.bFld;
                    i11 = (int)f1;
                    f1 += i12;
                    lArr = lArr;
                    l *= 191;
                    i11 += (-4 + (d3 * d3));
                }
            }
        } while (++i9 < 377);
        vMeth1_check_sum += Double.doubleToLongBits(d2) + l + i9 + by1 + i10 + i11 + i12 + i13 +
            Double.doubleToLongBits(d3) + i14 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i2, int i3) {

        int i4=-17677, i5=-244, i6=-8, i7=69, i8=-45, i15=65181, i16=8, i17=10508, i18=8;
        double d1=2.18079, dArr[]=new double[N];
        float f=0.358F;
        short s=-31895;
        byte by=85;
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, 19.81445);
        FuzzerUtils.init(lArr1, 6388439057792698436L);

        for (i4 = 10; i4 < 283; i4++) {
            i6 = 1;
            while (++i6 < 6) {
                d1 += Math.min(35607L, (Test.instanceCount--) % ((Test.instanceCount * i3) | 1));
                f += (++f);
                dArr[i4 - 1] -= (f - ((s = (short)10L) + (++by)));
            }
            by = (byte)40243;
        }
        for (i7 = 18; 356 > i7; i7++) {
            vMeth1(d1, -7L);
            for (i15 = 1; i15 < 5; ++i15) {
                if (i16 != 0) {
                    vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) +
                        s + by + i7 + i8 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))
                        + FuzzerUtils.checkSum(lArr1);
                    return;
                }
                f = Test.instanceCount;
                Test.instanceCount += (((i15 * i3) + i4) - Test.instanceCount);
                for (i17 = 1; i17 < 2; i17++) {
                    lArr1[i17] += 41489;
                }
            }
            i3 >>= i5;
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + s + by + i7
            + i8 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(double d) {

        int i1=14, i19=63, i20=225, i21=-38157, i22=-253, i23=0;
        byte by2=-19;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(lArr2, -9L);

        i1 = (Test.iArrFld[(i1 >>> 1) % N] - Test.iArrFld[(i1 >>> 1) % N]);
        vMeth(i1, i1);
        by2 = (byte)i1;
        i19 = 1;
        while (++i19 < 362) {
            lArr2[i19][i19 + 1] -= (long)d;
            for (i20 = 1; i20 < 5; ++i20) {
                i1 += i1;
            }
            Test.bFld = Test.bFld;
        }
        i21 += i19;
        Test.instanceCount /= 2;
        Test.fFld += i19;
        for (i22 = 16; i22 < 370; i22++) {
            if (Test.bFld) {
                Test.instanceCount ^= 12;
                i21 <<= i19;
            } else if (Test.bFld) {
                i1 <<= i1;
            } else {
                lArr2[i22 + 1][i22] += i1;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i1 + by2 + i19 + i20 + i21 + i22 + i23 +
            FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-7768, iArr[]=new int[N];
        byte by3=-4;
        long lArr3[][]=new long[N][N];

        FuzzerUtils.init(iArr, -11);
        FuzzerUtils.init(lArr3, 9L);

        iArr[(i >>> 1) % N] *= iMeth(dFld);
        lArr3[(i >>> 1) % N] = lArr3[(7 >>> 1) % N];
        Test.instanceCount = i;
        fArrFld = fArrFld;
        i = i;
        lArr3[(i >>> 1) % N][(5 >>> 1) % N] += (long)dFld;
        i <<= i;
        by3 -= (byte)i;

        FuzzerUtils.out.println("i by3 iArr = " + i + "," + by3 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("lArr3 = " + FuzzerUtils.checkSum(lArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("dFld Test.iArrFld fArrFld = " + Double.doubleToLongBits(dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
