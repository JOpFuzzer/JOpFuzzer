// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4129834530028720479L;
    public static float fFld=115.876F;
    public static volatile int iFld=11;
    public static byte byFld=-19;
    public short sFld=9155;

    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, long l, int i1) {

        double d=57.130244;
        int i2=237, i3=82, i4=-14, i5=-1, i6=-12, i7=-101;
        float fArr[]=new float[N];
        short sArr[][]=new short[N][N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(fArr, -67.271F);
        FuzzerUtils.init(sArr, (short)-12241);
        FuzzerUtils.init(lArr, -12968L);

        d = f;
        for (i2 = 258; i2 > 13; i2--) {
            switch ((i2 % 3) + 124) {
            case 124:
                for (i4 = i2; i4 < 7; ++i4) {
                    l = i4;
                    l += Test.instanceCount;
                    i1 *= i4;
                    i3 = i1;
                    f = -6372;
                    fArr[i2] = 13;
                }
                d -= i5;
                for (i6 = 1; i6 < 7; i6++) {
                    i7 += 25756;
                    i1 <<= i7;
                    i1 <<= i4;
                }
                break;
            case 125:
                sArr = sArr;
                break;
            case 126:
                if (false) break;
            default:
                lArr[i2 - 1][i2 - 1] += (long)d;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + l + i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + i6 + i7
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i8=-203, i9=52, i10=16307, i11=8, i12=-2, i13=-42675, i14=3, i15=214;
        double d1=-75.15585;
        short s=-17998, sArr1[]=new short[N];
        byte by=-77;

        FuzzerUtils.init(sArr1, (short)6961);

        vMeth1(Test.fFld, Test.instanceCount, Test.iFld);
        for (i8 = 12; 390 > i8; ++i8) {
            Test.iFld += (i8 * i8);
            Test.iFld += (int)Test.fFld;
            i9 += Test.iFld;
            Test.iFld -= Test.iFld;
            Test.iFld += (int)d1;
            d1 += i9;
            for (i10 = i8; i10 < 4; i10++) {
                for (i12 = 1; 1 > i12; i12++) {
                    s /= (short)(i13 | 1);
                    sArr1[i10] = (short)i9;
                }
                for (i14 = i10; i14 < 1; ++i14) {
                    Test.instanceCount += by;
                    Test.iFld -= i12;
                }
            }
        }
        vMeth_check_sum += i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 + s + i14 + i15 + by +
            FuzzerUtils.checkSum(sArr1);
    }

    public short sMeth(int i) {

        int i16=-4, i17=49028, i18=32788, i19=152, i20=165, i21=-177, i22=11, i23=-191, i24=-11214;

        vMeth();
        for (i16 = 9; i16 < 172; ++i16) {
            switch ((i16 % 7) + 115) {
            case 115:
                for (i18 = i16; 10 > i18; i18++) {
                    i19 = (int)Test.fFld;
                    Test.iFld -= i19;
                    Test.instanceCount = i16;
                    i += (((i18 * i19) + i16) - Test.instanceCount);
                    i17 += (((i18 * i) + i17) - Test.iFld);
                    for (i20 = 1; i20 < 1; ++i20) {
                        i21 += i21;
                        Test.byFld = (byte)i19;
                    }
                    for (i22 = 1; i22 < 1; i22++) {
                        i21 += i22;
                        i *= i21;
                    }
                }
                break;
            case 116:
                Test.fFld -= -1.659F;
            case 117:
                i17 = (int)Test.instanceCount;
                break;
            case 118:
                Test.instanceCount -= i23;
                break;
            case 119:
                Test.byFld += (byte)i19;
            case 120:
                i24 = i19;
                break;
            case 121:
                Test.byFld = (byte)Test.iFld;
                break;
            }
        }
        long meth_res = i + i16 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + i24;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d2=2.111584;
        int i25=47077, i26=-41408, i27=-47478, i28=-143, i29=254, i30=-14, i31=3, i32=163, i33=4, iArr[]=new int[N];
        float f1=-47.482F;
        boolean b=true;

        FuzzerUtils.init(iArr, 61077);

        Test.instanceCount *= sMeth(Test.iFld);
        d2 = Test.byFld;
        iArr[(Test.iFld >>> 1) % N] %= (int)(Test.iFld | 1);
        for (i25 = 10; i25 < 237; i25++) {
            Test.instanceCount ^= Test.iFld;
            for (f1 = 1; f1 < 111; f1++) {
                for (i28 = 2; i28 > 1; --i28) {
                    i27 += (((i28 * Test.fFld) + i26) - i25);
                    Test.instanceCount += (i28 | Test.instanceCount);
                    Test.iFld = 186;
                    Test.instanceCount = i28;
                    iArr[(int)(f1 - 1)] |= (int)Test.instanceCount;
                    iArr[i25] -= Test.byFld;
                    sFld += (short)(((i28 * i28) + f1) - Test.instanceCount);
                    sFld += (short)(i28 * Test.iFld);
                }
                i30 = 1;
                do {
                    Test.instanceCount = i29;
                    i29 |= (int)Test.instanceCount;
                    i27 = Test.iFld;
                } while (++i30 < 2);
                Test.instanceCount &= i28;
                Test.instanceCount <<= i30;
            }
            iArr[i25 + 1] -= i25;
            i27 -= (int)Test.instanceCount;
            i31 = 1;
            do {
                Test.instanceCount += (i31 - f1);
                switch (((-7 >>> 1) % 6) + 48) {
                case 48:
                    if (b) continue;
                    break;
                case 49:
                    for (i32 = 1; i32 < 3; i32++) {
                        b = b;
                        Test.fFld += (-1.422F + (i32 * i32));
                    }
                    break;
                case 50:
                    i33 = i28;
                    break;
                case 51:
                    i33 <<= i26;
                case 52:
                    i33 %= -2;
                case 53:
                    if (false) continue;
                default:
                    Test.iFld += (i31 * i31);
                }
            } while ((i31 += 2) < 111);
        }

        FuzzerUtils.out.println("d2 i25 i26 = " + Double.doubleToLongBits(d2) + "," + i25 + "," + i26);
        FuzzerUtils.out.println("f1 i27 i28 = " + Float.floatToIntBits(f1) + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("b i32 i33 = " + (b ? 1 : 0) + "," + i32 + "," + i33);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld sFld = " + Test.byFld + "," + sFld);

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
