// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=62L;
    public static byte byFld=103;
    public static double dFld=-118.23197;
    public short sFld=10056;
    public volatile int iFld=-30;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -11);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=66;

        i3 = (int)-183598632L;
        vMeth2_check_sum += i3;
    }

    public static void vMeth1() {

        int i4=44582;
        byte by=90;
        double d=0.99402;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.131F);

        vMeth2();
        fArr[(i4 >>> 1) % N] -= Test.instanceCount;
        i4 -= i4;
        by = (byte)i4;
        Test.instanceCount <<= i4;
        i4 ^= (int)Test.instanceCount;
        i4 = i4;
        Test.instanceCount *= -173L;
        fArr[(i4 >>> 1) % N] /= ((long)(d) | 1);
        Test.iArrFld[(i4 >>> 1) % N] >>= (int)Test.instanceCount;
        vMeth1_check_sum += i4 + by + Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i2) {

        float f=72.110F;
        int i5=6657, i6=3, i7=37691;
        double d1=83.91653, d2=1.40176;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 248L);

        Test.iArrFld[(i2 >>> 1) % N] = (-(++i2));
        vMeth1();
        f += 227;
        i2 -= i2;
        Test.instanceCount = Test.instanceCount;
        i5 = 1;
        while (++i5 < 152) {
            switch (((i5 % 6) * 5) + 79) {
            case 101:
                d1 = 1;
                while (++d1 < 10) {
                    lArr = lArr;
                    if (b) break;
                    for (i6 = 1; i6 < 1; ++i6) {
                        Test.instanceCount = -227;
                        if (b) {
                            d2 += i7;
                            Test.byFld += (byte)(((i6 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                        } else {
                            i2 = 113;
                        }
                    }
                }
                break;
            case 97:
                Test.instanceCount = i5;
            case 96:
                i2 += (((i5 * i2) + Test.byFld) - i5);
            case 81:
                i2 >>= i6;
                break;
            case 108:
                i2 -= Test.byFld;
            case 86:
                i2 = 0;
            }
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f) + i5 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + i6 + i7 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=36935, i1=-14, i8=35845, i9=7, i10=130, i11=-43247, i12=0;
        float f1=-1.233F, fArr1[]=new float[N];
        boolean b1=false;

        FuzzerUtils.init(fArr1, -19.775F);

        for (i = 3; i < 144; ++i) {
            vMeth(7);
            for (i8 = 9; i8 < 178; ++i8) {
                f1 = i1;
                for (i10 = i8; i10 < 2; i10++) {
                    i1 += (((i10 * i1) + Test.byFld) - i8);
                }
                i9 += (int)Test.instanceCount;
                i12 = 1;
                do {
                    Test.iArrFld[i] = i8;
                    Test.dFld *= f1;
                    Test.instanceCount = sFld;
                    switch ((i8 % 2) + 45) {
                    case 45:
                        if (b1) continue;
                        iFld &= (int)Test.instanceCount;
                        sFld = (short)f1;
                        i9 *= Test.byFld;
                        break;
                    case 46:
                        b1 = b1;
                        i1 *= (int)f1;
                        try {
                            i9 = (17424 / Test.iArrFld[i8 - 1]);
                            iFld = (Test.iArrFld[i] % -249);
                            i1 = (-185 % Test.iArrFld[i + 1]);
                        } catch (ArithmeticException a_e) {}
                    default:
                        i9 = (int)Test.dFld;
                    }
                    iFld += (-11 + (i12 * i12));
                    i9 += (((i12 * i1) + f1) - i1);
                    Test.iArrFld[i12 + 1] -= i8;
                    Test.dFld += 0;
                } while (++i12 < 2);
                i11 += i8;
                Test.instanceCount = iFld;
                sFld = (short)i8;
                fArr1[i8 + 1] += f1;
                iFld += (i8 - i9);
            }
            if (false) continue;
        }

        FuzzerUtils.out.println("i i1 i8 = " + i + "," + i1 + "," + i8);
        FuzzerUtils.out.println("i9 f1 i10 = " + i9 + "," + Float.floatToIntBits(f1) + "," + i10);
        FuzzerUtils.out.println("i11 i12 b1 = " + i11 + "," + i12 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("sFld iFld Test.iArrFld = " + sFld + "," + iFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
