// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3141193899092879028L;
    public static float fFld=-122.18F;
    public static boolean bFld=false;
    public byte byFld=87;

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3) {

        int i4=-11, i5=-55579, i6=-35876, i7=-54752, i8=15300, iArr1[][]=new int[N][N];
        boolean b=false;

        FuzzerUtils.init(iArr1, 7);

        if (true) {
            i3 -= -17291;
            if (b) {
                i4 = 1;
                while (++i4 < 204) {
                    Test.instanceCount = i4;
                    i3 = 10;
                    i3 += (i4 * i4);
                    for (i5 = i4; 8 > i5; i5++) {
                        for (i7 = 1; i7 < 1; ++i7) {
                            try {
                                i6 = (2045326281 / iArr1[i5 - 1][i5]);
                                i8 = (i8 % i6);
                                i8 = (i6 % iArr1[i7][i7 - 1]);
                            } catch (ArithmeticException a_e) {}
                            i6 <<= -12;
                            Test.fFld = i8;
                            i6 = i8;
                            Test.instanceCount = i7;
                            i3 += i7;
                        }
                    }
                }
            } else if (b) {
                i6 -= i6;
            } else if (b) {
                b = true;
            } else {
                i6 += (int)Test.instanceCount;
            }
        } else if (b) {
            i8 -= i5;
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i9=15744, i10=26518, i11=224, i12=-2, i13=-169, i14=9039, i15=-32129, i16=10, iArr2[]=new int[N];
        boolean b1=false;
        short s=12108;
        double d2=-1.19242;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4801789309993537682L);
        FuzzerUtils.init(iArr2, -172);

        vMeth1(i9);
        for (i10 = 9; 318 > i10; i10++) {
            i9 = (int)Test.instanceCount;
            for (i12 = 5; i12 > i10; i12--) {
                i9 += (((i12 * i11) + Test.instanceCount) - Test.instanceCount);
            }
            if (b1) continue;
            lArr[i10] <<= s;
            iArr2[i10 - 1] = i13;
            Test.instanceCount += (long)Test.fFld;
            i13 -= i9;
            i11 >>= i11;
            for (i14 = i10; i14 < 5; ++i14) {
                Test.instanceCount += (i14 ^ i16);
                if (i13 != 0) {
                    vMeth_check_sum += i9 + i10 + i11 + i12 + i13 + (b1 ? 1 : 0) + s + i14 + i15 + i16 +
                        Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
                    return;
                }
                i13 = (int)d2;
            }
        }
        vMeth_check_sum += i9 + i10 + i11 + i12 + i13 + (b1 ? 1 : 0) + s + i14 + i15 + i16 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
    }

    public static double dMeth(double d1, int i2) {

        int i17=-64, i18=13, i19=-136, i20=-185, i21=-3, i22=-32;
        short s1=-6943, s2=-24942;
        float f=2.284F;
        double d3=-42.59038;

        vMeth();
        for (i17 = 7; i17 < 299; i17++) {
            s1 = (short)69;
            for (i19 = 1; i19 < 6; i19++) {
                i20 += (((i19 * i2) + i17) - s2);
                i2 += (((i19 * Test.instanceCount) + Test.instanceCount) - i20);
                i2 -= (int)Test.instanceCount;
                s1 >>>= (short)-20277;
                Test.fFld -= i2;
            }
            for (f = 6; 1 < f; f -= 3) {
                for (d3 = 6; d3 > 1; d3--) {
                    Test.instanceCount >>>= i2;
                    Test.fFld *= i20;
                    if (i21 != 0) {
                    }
                    i21 += -64697;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i2 + i17 + i18 + s1 + i19 + i20 + s2 + Float.floatToIntBits(f) +
            i21 + Double.doubleToLongBits(d3) + i22;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-190, i1=-66, i23=63303, i24=-6, i25=111, i26=-127, i27=22631, i28=-49237, i29=-4805, i30=0, i31=24347,
            i32=6, iArr[]=new int[N];
        double d=0.84985;
        long l=-7738498975725285306L, lArr1[]=new long[N];
        float fArr[]=new float[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 27);
        FuzzerUtils.init(fArr, -1.1010F);
        FuzzerUtils.init(lArr1, -178L);
        FuzzerUtils.init(sArr, (short)-14533);

        for (i = 2; i < 181; i++) {
            d -= (i + (i1 = (--iArr[(3 >>> 1) % N])));
            i1 /= (int)(i | 1);
            iArr[i - 1] -= (int)(((iArr[i] *= (int)Test.fFld) + (145 * (Test.instanceCount >> -7))) * dMeth(d, i1));
            i23 = 1;
            do {
                i1 = 50856;
                for (l = 1; l < 1; l++) {
                    i1 >>= (int)l;
                    fArr[i - 1] -= i;
                    i1 = 24227;
                    i1 >>>= i1;
                    if (Test.bFld) break;
                }
                try {
                    i1 = (i / 47159);
                    i1 = (-469653576 % i23);
                    i1 = (-177 % i);
                } catch (ArithmeticException a_e) {}
            } while (++i23 < 140);
            i24 = (int)-172L;
        }
        for (i25 = 359; i25 > 16; i25--) {
            i26 = (int)Test.instanceCount;
            switch ((i25 % 6) + 12) {
            case 12:
                lArr1[i25] <<= Test.instanceCount;
                i1 += (-178 + (i25 * i25));
                break;
            case 13:
                if (Test.bFld) break;
                Test.instanceCount = i26;
            case 14:
                for (i27 = 1; 73 > i27; i27++) {
                    sArr[i27 - 1] *= (short)i;
                    Test.instanceCount = i25;
                    i28 += (i27 * i27);
                }
                for (i29 = 2; i29 < 73; ++i29) {
                    i26 <<= -21;
                    for (i31 = 2; i31 > 1; --i31) {
                        i32 -= byFld;
                    }
                    i1 -= -161;
                }
                break;
            case 15:
                i24 = (int)-9L;
                break;
            case 16:
                i1 <<= (int)l;
                break;
            case 17:
                iArr[i25 - 1] = (int)d;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i23 l i24 = " + i23 + "," + l + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 iArr = " + i31 + "," + i32 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("fArr lArr1 sArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("byFld = " + byFld);

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
