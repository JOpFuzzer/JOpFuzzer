// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-36636L;
    public static volatile boolean bFld=true;
    public static short sFld=28051;
    public static int iFld=214;
    public static byte byFld=-7;
    public double dFld=-27.5303;
    public static volatile long lArrFld[]=new long[N];
    public static long lArrFld1[][]=new long[N][N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 235L);
        FuzzerUtils.init(Test.lArrFld1, -6L);
        FuzzerUtils.init(Test.dArrFld, 1.20738);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7, int i8, int i9) {

        long l=14L, l1=5689981468755817459L;
        int i10=5, i11=126, i12=212, i13=3836, i14=-13, i15=96, iArr1[]=new int[N];
        double d=0.27062;

        FuzzerUtils.init(iArr1, 2004);

        for (l = 5; 228 > l; ++l) {
            i7 *= -108;
            i10 = i7;
        }
        Test.instanceCount = Test.instanceCount;
        for (i11 = 378; i11 > 17; i11 -= 3) {
            if (Test.bFld) {
                i13 = 1;
                while (++i13 < 13) {
                    if (Test.bFld) continue;
                    for (i14 = 1; 1 > i14; ++i14) {
                        byte by1=-116;
                        l1 += i9;
                        by1 = (byte)-48523;
                        i15 = i11;
                        d += i7;
                    }
                    i7 += (int)(-52545L + (i13 * i13));
                    Test.sFld = (short)i15;
                }
            } else if (true) {
                iArr1[i11 - 1] += (int)l1;
            }
        }
        vMeth2_check_sum += i7 + i8 + i9 + l + i10 + i11 + i12 + i13 + i14 + i15 + l1 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i6, float f) {

        int i16=43235, i17=-17518, i18=5, i19=-5;
        double d1=-92.88973;

        vMeth2(-14, i6, i6);
        i16 = 1;
        while (++i16 < 182) {
            Test.lArrFld[i16 + 1] <<= Test.instanceCount;
            for (i17 = i16; i17 < 9; ++i17) {
                f += i17;
                switch (((i16 >>> 1) % 4) + 57) {
                case 57:
                    if (Test.bFld) break;
                    Test.sFld += (short)i16;
                    break;
                case 58:
                    for (d1 = 1; d1 < 1; ++d1) {
                        Test.lArrFld1[i17 + 1][i16] = Test.instanceCount;
                    }
                    i19 += (-143 + (i17 * i17));
                    break;
                case 59:
                    i18 -= (int)Test.instanceCount;
                    break;
                case 60:
                    Test.iFld = 9453;
                    Test.byFld = (byte)Test.sFld;
                    i18 -= (int)1.128744;
                    break;
                }
            }
        }
        vMeth1_check_sum += i6 + Float.floatToIntBits(f) + i16 + i17 + i18 + Double.doubleToLongBits(d1) + i19;
    }

    public static void vMeth(short s, int i1) {

        int i2=-159, i3=-4910, i4=-9, i5=206, i20=-6, iArr[]=new int[N];
        boolean b=false, bArr[]=new boolean[N];
        float f1=-68.872F;
        long l2=93L, lArr[]=new long[N];

        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(lArr, 4L);
        FuzzerUtils.init(bArr, false);

        s <<= (short)(iArr[(i1 >>> 1) % N]++);
        for (i2 = 3; i2 < 296; i2++) {
            byte by=-70;
            if (b) {
                for (i4 = 6; i4 > i2; --i4) {
                    Test.instanceCount <<= (i3--);
                    i5 /= (int)(((i5 = (s * i3)) + (--lArr[i2 + 1])) | 1);
                }
                vMeth_check_sum += s + i1 + i2 + i3 + i4 + i5 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i20 + l2 +
                    FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
                return;
            }
            bArr[i2] = bArr[i2 - 1];
            Test.instanceCount += (((i2 * i3) + by) - Test.instanceCount);
        }
        vMeth1(10800, f1);
        i5 = (int)f1;
        if (Test.bFld) {
            i3 *= (int)2.30045;
            i20 = 1;
            while (++i20 < 395) {
                Test.dArrFld[i20] -= 24071;
            }
            Test.iFld = -14;
        } else {
            Test.iFld <<= (int)l2;
        }
        vMeth_check_sum += s + i1 + i2 + i3 + i4 + i5 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i20 + l2 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-164, i21=-15, i22=-215, i23=64403, i24=-6369, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -195);

        i = 1;
        do {
            vMeth((short)(-27718), Test.iFld);
            i21 = 1;
            while (++i21 < 93) {
                i22 = 1;
                do {
                    Test.iFld += i22;
                } while (++i22 < 1);
                Test.sFld += (short)(((i21 * i21) + Test.iFld) - i);
            }
            switch ((Test.iFld >>> 1) % 6) {
            case 0:
                Test.instanceCount += Test.iFld;
                break;
            case 1:
                Test.instanceCount *= i;
                Test.iFld += i;
                Test.iFld += (int)3800440540L;
                Test.iFld = Test.iFld;
                break;
            case 2:
                for (i23 = 5; i23 < 93; i23 += 2) {
                    iArr2[i23 - 1] = Test.iFld;
                    iArr2[i + 1] *= i24;
                    Test.iFld += (1 + (i23 * i23));
                    i24 >>= i;
                }
                iArr2[i] += (int)dFld;
                Test.instanceCount *= 49;
                break;
            case 3:
                Test.instanceCount = i;
                break;
            case 4:
                switch ((((i >>> 1) % 10) * 5) + 36) {
                case 60:
                    i24 = i22;
                    break;
                case 59:
                    Test.iFld = i23;
                    Test.bFld = Test.bFld;
                    break;
                case 84:
                    Test.byFld = (byte)33;
                    break;
                case 54:
                    switch ((i % 2) + 104) {
                    case 104:
                    case 105:
                        i24 += (i * Test.iFld);
                        break;
                    }
                    Test.instanceCount = Test.iFld;
                    try {
                        i24 = (i / 87);
                        Test.iFld = (i / i21);
                        Test.iFld = (-283431904 % i);
                    } catch (ArithmeticException a_e) {}
                    Test.sFld += (short)(((i * Test.sFld) + i21) - Test.iFld);
                case 41:
                    dFld -= 1;
                    break;
                case 45:
                    Test.iFld -= 7466;
                    break;
                case 46:
                    Test.byFld = (byte)59496;
                case 56:
                    Test.instanceCount >>= i21;
                case 81:
                    Test.instanceCount += (i * i22);
                    break;
                case 47:
                    iArr2[i - 1] += i21;
                default:
                    if (Test.bFld) continue;
                }
            case 5:
                Test.iFld = (int)Test.instanceCount;
                break;
            }
        } while (++i < 271);

        FuzzerUtils.out.println("i i21 i22 = " + i + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 iArr2 = " + i23 + "," + i24 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.sFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld Test.byFld dFld = " + Test.iFld + "," + Test.byFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.lArrFld Test.lArrFld1 Test.dArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
