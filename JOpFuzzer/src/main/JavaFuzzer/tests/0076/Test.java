// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=60L;
    public static float fFld=-117.464F;
    public static volatile double dFld=65.128369;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 133);
        FuzzerUtils.init(Test.fArrFld, 76.112F);
    }

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l2) {

        int i7=-44934;

        i7 = i7;
        long meth_res = l2 + i7;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(byte by1, double d, int i3) {

        boolean b=false;
        long l1=-3082881204L, lArr[]=new long[N];
        int i5=126, i6=-236, i8=-81, i9=7, i10=10, i11=-11;

        FuzzerUtils.init(lArr, 2803489044611503371L);

        for (int i4 : Test.iArrFld) {
            i3 >>= (i3 >>= i4);
            switch ((((((int)(4282160376L * Math.max(Test.instanceCount, Test.instanceCount))) >>> 1) % 10) * 5) + 64) {
            case 102:
                i4 = (--i3);
                Test.instanceCount &= (-i3);
                break;
            case 77:
                switch (((-64870 >>> 1) % 2) + 26) {
                case 26:
                    if (b && (((l1 - i4) - -10684) == (++Test.iArrFld[(2 >>> 1) % N]))) break;
                    for (i5 = 4; 1 < i5; i5 -= 3) {
                        i4 += (int)(-1354378389867102012L + (i5 * i5));
                        i6 -= -25497;
                        i3 <<= iMeth(Test.instanceCount);
                        for (i8 = 4; i8 > 1; i8--) {
                            l1 += (3 + (i8 * i8));
                        }
                        i6 += i5;
                    }
                case 27:
                    i10 *= -1326;
                    break;
                default:
                    try {
                        i4 = (i6 / 5946);
                        i9 = (188 % i9);
                        i11 = (i6 % -1366627991);
                    } catch (ArithmeticException a_e) {}
                }
            case 106:
                i6 /= (int)(i9 | 1);
                break;
            case 104:
                Test.instanceCount += i5;
                break;
            case 96:
                Test.fFld += by1;
                break;
            case 112:
                Test.fArrFld[(-226 >>> 1) % N] = i5;
            case 75:
                i9 = i6;
                break;
            case 113:
                i10 <<= i5;
                break;
            case 99:
                lArr[(i3 >>> 1) % N] &= -77;
                break;
            case 107:
                Test.fFld = Test.instanceCount;
            default:
                i6 += i9;
            }
        }
        long meth_res = by1 + Double.doubleToLongBits(d) + i3 + (b ? 1 : 0) + l1 + i5 + i6 + i8 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(lArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(long l, int i) {

        int i1=-3, i2=-14, i12=13, i13=-63315, i14=8662, i15=19728;
        byte by=101;
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -9L);

        for (i1 = 121; i1 > 1; --i1) {
            if (i1 != 0) {
                vMeth_check_sum += l + i + i1 + i2 + by + (b1 ? 1 : 0) + i12 + i13 + i14 + i15 +
                    FuzzerUtils.checkSum(lArr1);
                return;
            }
            by = (byte)((++i) - sMeth(by, Test.dFld, i));
            lArr1[i1] *= -211L;
            if (b1) continue;
            i2 += i2;
            Test.fFld += i1;
        }
        by >>>= (byte)i1;
        lArr1[(i2 >>> 1) % N] &= l;
        for (i12 = 8; i12 < 198; ++i12) {
            switch (((i12 % 6) * 5) + 106) {
            case 132:
                i13 += (i12 + i1);
                for (i14 = 1; i14 < 8; i14++) {
                    i13 = i15;
                    Test.fFld += i14;
                }
                break;
            case 131:
                i13 = i15;
                break;
            case 107:
            case 133:
                i13 -= (int)l;
            case 109:
                i15 = i13;
                break;
            case 112:
                i15 = (int)Test.instanceCount;
                break;
            }
        }
        vMeth_check_sum += l + i + i1 + i2 + by + (b1 ? 1 : 0) + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i16=-232;

        vMeth(Test.instanceCount, i16);

        FuzzerUtils.out.println("i16 = " + i16);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
