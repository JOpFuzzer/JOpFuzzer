// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-14841L;
    public static byte byFld=44;
    public int iFld=9;
    public static short sFld=-6217;
    public static double dFld=2.53253;
    public static int iFld1=-12;
    public long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -77.487F);
        FuzzerUtils.init(Test.dArrFld, 0.6835);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(boolean b1) {

        int i6=158, i7=160, i8=-12552, i9=25491, iArr2[]=new int[N];
        float f1=-2.659F, f2=-32.347F;

        FuzzerUtils.init(iArr2, -32250);

        i6 = 1;
        do {
            Test.iFld1 ^= (int)Test.instanceCount;
            try {
                Test.iFld1 = (Test.iFld1 / iArr2[i6]);
                Test.iFld1 = (-3 / Test.iFld1);
                Test.iFld1 = (Test.iFld1 % 25105);
            } catch (ArithmeticException a_e) {}
        } while (++i6 < 163);
        f1 *= 74;
        Test.dFld -= 30025;
        Test.fArrFld[(Test.iFld1 >>> 1) % N] += Test.instanceCount;
        for (f2 = 5; f2 < 153; f2++) {
            for (i8 = 1; 11 > i8; ++i8) {
                i7 += (int)(6148382878777155991L + (i8 * i8));
                i9 = i7;
                iArr2 = iArr2;
                Test.instanceCount ^= i8;
                Test.instanceCount *= i8;
                iArr2[i8] -= Test.iFld1;
                i9 *= 2;
            }
        }
        vMeth1_check_sum += (b1 ? 1 : 0) + i6 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i7 + i8 + i9 +
            FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(int i5) {

        boolean b2=true;
        int i10=17402, i11=3, i12=-68, i13=13, i14=-81, i15=-14, i16=-11;

        if (b2) {
            Test.dFld *= (i5++);
        } else if (b2) {
            vMeth1(b2);
            if (b2) {
                i10 = 1;
                while (++i10 < 167) {
                    i5 = (int)Test.instanceCount;
                }
                Test.instanceCount = i5;
                i11 = 1;
                do {
                    Test.iFld1 = Test.byFld;
                    for (i12 = 1; i12 < 5; i12++) {
                        for (i14 = 2; i14 > 1; --i14) {
                            Test.instanceCount -= i16;
                            Test.instanceCount = i13;
                            Test.instanceCount >>= i13;
                            if (Test.iFld1 != 0) {
                                vMeth_check_sum += i5 + (b2 ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15 + i16;
                                return;
                            }
                        }
                    }
                } while (++i11 < 327);
            } else if (b2) {
                Test.instanceCount = i10;
            }
        } else if (b2) {
            Test.dArrFld[(i10 >>> 1) % N] = 12;
        } else {
            i15 = i12;
        }
        vMeth_check_sum += i5 + (b2 ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15 + i16;
    }

    public long lMeth(int i2, boolean b) {

        int i3=-30274, i4=-187, i17=-97, i18=4, i19=162, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 141);

        for (i3 = 13; i3 < 324; i3 += 3) {
            Test.byFld -= (byte)iFld;
            i4 = (int)(lArrFld[i3 + 1]++);
            Test.sFld <<= (short)(i4--);
            try {
                iFld = (i2 / -194);
                iArr1[i3] = (i3 % i2);
                i2 = (iFld / -3882);
            } catch (ArithmeticException a_e) {}
        }
        vMeth(-19601);
        i2 |= (int)Test.instanceCount;
        Test.iFld1 <<= (int)-127L;
        for (i17 = 8; i17 < 383; i17++) {
            Test.byFld *= (byte)i3;
            lArrFld[i17 + 1] <<= Test.iFld1;
            if (b) break;
        }
        i19 = 1;
        while (++i19 < 395) {
            iFld *= i17;
            Test.instanceCount += i19;
        }
        long meth_res = i2 + (b ? 1 : 0) + i3 + i4 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=79.43321, d1=47.35700;
        int i=95, i1=31, i20=5, i21=-26202, i22=-2, i23=-16191, i24=244, i25=6, iArr[]=new int[N];
        float f=89.230F;
        boolean b3=false;

        FuzzerUtils.init(iArr, 23);

        d += Test.byFld;
        iArr[(iFld >>> 1) % N] <<= ((iArr[(iFld >>> 1) % N] * (iFld--)) * (-(iFld + iFld)));
        for (i = 11; i < 184; ++i) {
            f = lMeth(iFld, true);
        }
        iFld += (int)f;
        for (i20 = 6; i20 < 129; i20++) {
            for (i22 = 5; i22 < 204; ++i22) {
                if (b3) break;
                lArrFld[i22] = i22;
                i1 -= (int)Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                i1 %= (int)((long)(f) | 1);
                Test.iFld1 -= Test.iFld1;
                i24 <<= i20;
                iFld += (((i22 * i22) + Test.instanceCount) - Test.instanceCount);
            }
            i23 -= (int)f;
            Test.instanceCount += i20;
            d = i1;
            Test.sFld = (short)iFld;
            d *= i22;
            Test.iFld1 = Test.iFld1;
        }
        i21 = (int)Test.instanceCount;
        Test.instanceCount *= i24;
        for (d1 = 7; d1 < 140; ++d1) {
            f *= Test.instanceCount;
            i24 += i;
            i23 = i22;
            i23 = (int)d;
            Test.instanceCount += (long)(d1 * d1);
            Test.byFld *= (byte)i23;
        }

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("f i20 i21 = " + Float.floatToIntBits(f) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 b3 = " + i22 + "," + i23 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("i24 d1 i25 = " + i24 + "," + Double.doubleToLongBits(d1) + "," + i25);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld iFld = " + Test.instanceCount + "," + Test.byFld + "," +
            iFld);
        FuzzerUtils.out.println("Test.sFld Test.dFld Test.iFld1 = " + Test.sFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld1);
        FuzzerUtils.out.println("lArrFld Test.fArrFld Test.dArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
