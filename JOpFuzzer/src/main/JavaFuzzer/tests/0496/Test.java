// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public static boolean bFld=false;
    public int iFld=-4;
    public static float fFld=1.988F;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -99L);
        FuzzerUtils.init(Test.iArrFld, -153);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l, float f1, long l1) {

        int i5=3, i6=156, i7=65356, i8=135, i9=48;
        float f2=-124.518F;
        byte by=-1;
        double d=-97.100459;
        short s=12176;

        f1 += 34084;
        i5 += i5;
        for (f2 = 12; f2 < 384; ++f2) {
            switch (((i5 >>> 1) % 5) + 25) {
            case 25:
                f1 += f2;
                for (i7 = 1; i7 < 5; ++i7) {
                    i9 = (int)l1;
                    by = by;
                    switch ((i7 % 6) + 81) {
                    case 81:
                    case 82:
                        i5 += i6;
                        i6 &= i7;
                        break;
                    case 83:
                        switch ((int)((f2 % 2) + 115)) {
                        case 115:
                            i8 -= (int)1.45F;
                        case 116:
                            l1 += (long)d;
                            break;
                        }
                        break;
                    case 84:
                        i9 = i6;
                        break;
                    case 85:
                        i8 += (((i7 * i9) + i9) - i9);
                        break;
                    case 86:
                        l += (((i7 * i5) + i9) - i5);
                        break;
                    default:
                        l += (5L + (i7 * i7));
                    }
                }
                break;
            case 26:
            case 27:
                f1 = l;
            case 28:
                s <<= (short)i5;
                break;
            case 29:
                f1 -= -232;
                break;
            }
        }
        long meth_res = l + Float.floatToIntBits(f1) + l1 + i5 + Float.floatToIntBits(f2) + i6 + i7 + i8 + i9 + by +
            Double.doubleToLongBits(d) + s;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i3, int i4) {

        float f3=0.691F, f4=0.891F, fArr[]=new float[N];
        int i10=191, i11=128, i12=-52, i13=147, i14=-14;
        double d1=0.97774, dArr[][]=new double[N][N];
        byte by1=-3;

        FuzzerUtils.init(fArr, -111.555F);
        FuzzerUtils.init(dArr, 2.17694);

        fMeth(Test.instanceCount, f3, Test.instanceCount);
        for (i10 = 325; i10 > 9; i10--) {
            f3 += i11;
            try {
                i11 = (i10 / i3);
                i4 = (i4 % -148);
                Test.iArrFld[i10] = (-190 / i4);
            } catch (ArithmeticException a_e) {}
            i12 = 1;
            while (++i12 < 5) {
                for (i13 = 1; i13 < 1; ++i13) {
                    if (false) {
                        fArr[i10] *= i12;
                        dArr[i12][i10 + 1] += i13;
                        i14 += (87 + (i13 * i13));
                        vMeth_check_sum += i3 + i4 + Float.floatToIntBits(f3) + i10 + i11 + i12 + i13 + i14 +
                            Double.doubleToLongBits(d1) + by1 + Float.floatToIntBits(f4) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    } else if (Test.bFld) {
                        d1 += f3;
                        switch ((((i14 >>> 1) % 7) * 5) + 63) {
                        case 96:
                            i11 <<= i11;
                            Test.instanceCount -= Test.instanceCount;
                            i4 += (int)-8204866950503024508L;
                            break;
                        case 76:
                            d1 -= by1;
                            break;
                        case 75:
                            i4 -= (int)Test.instanceCount;
                            break;
                        case 64:
                            Test.iArrFld[(i4 >>> 1) % N] *= (int)Test.instanceCount;
                        case 85:
                            i14 += i13;
                            break;
                        case 91:
                            if (Test.bFld) break;
                            break;
                        case 73:
                            Test.lArrFld[i12 - 1] *= i11;
                        default:
                            Test.instanceCount -= i3;
                        }
                    } else {
                        f4 += (-23 + (i13 * i13));
                    }
                }
            }
        }
        vMeth_check_sum += i3 + i4 + Float.floatToIntBits(f3) + i10 + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(d1) + by1 + Float.floatToIntBits(f4) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public int iMeth(boolean b, float f) {

        float f5=-33.661F;
        int i15=61022, i16=-44, i17=-7, i18=27979, i19=9, i20=7, i21=-10;
        byte by2=-44;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -24.120599);

        vMeth(iFld, iFld);
        for (f5 = 14; f5 < 261; f5++) {
            Test.iArrFld[(int)(f5 - 1)] -= iFld;
            for (i16 = (int)(f5); i16 < 7; ++i16) {
                i17 = by2;
                Test.iArrFld[(int)(f5 + 1)] += i15;
                if (b) {
                    for (i18 = 1; 1 > i18; ++i18) {
                        dArr1[(int)(f5)] += i15;
                        f *= i18;
                        iFld >>= by2;
                    }
                } else {
                    f = 2971;
                    for (i20 = 1; i20 < 1; i20++) {
                        if (b) break;
                        Test.instanceCount += -6;
                    }
                }
            }
        }
        long meth_res = (b ? 1 : 0) + Float.floatToIntBits(f) + Float.floatToIntBits(f5) + i15 + i16 + i17 + by2 + i18
            + i19 + i20 + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i1=-33483, i2=12998, i22=146, i23=-3, i24=-28, i25=-25, i26=196, i27=-237, i28=-32, i29=8, i30=189;
        short s1=-30680;
        double dArr2[]=new double[N];

        FuzzerUtils.init(dArr2, -32.109732);

        Test.instanceCount >>= (i--);
        for (i1 = 21; i1 < 358; ++i1) {
            i = (int)(-49 + (++Test.instanceCount));
            Test.lArrFld[i1 - 1] *= Math.abs((long)(iMeth(Test.bFld, Test.fFld) + Test.fFld));
            Test.instanceCount -= i2;
            for (i22 = 2; i22 < 75; i22++) {
                i2 += i1;
                i2 += (i22 * i22);
            }
            Test.instanceCount = i;
            if (Test.bFld) {
                switch (((i >>> 1) % 4) + 29) {
                case 29:
                    for (i24 = 4; 75 > i24; ++i24) {
                        iFld = i22;
                        i25 += -47264;
                    }
                    for (i26 = 3; i26 < 75; ++i26) {
                        Test.instanceCount += i26;
                        switch ((((i27 >>> 1) % 2) * 5) + 26) {
                        case 27:
                            i2 += (i26 * i26);
                            for (i28 = 1; 2 > i28; ++i28) {
                                dArr2[i28] = i1;
                                Test.instanceCount += (i28 ^ Test.instanceCount);
                                Test.iArrFld[i1] *= -32200;
                                Test.lArrFld[i1 + 1] |= i1;
                                Test.instanceCount += iFld;
                            }
                            break;
                        case 30:
                            Test.fFld = i26;
                        }
                        Test.iArrFld[i26 - 1] >>= -35326;
                        s1 = (short)i27;
                        i30 = 1;
                        while (++i30 < 2) {
                            i29 -= 166;
                            iFld -= 3742;
                        }
                    }
                    break;
                case 30:
                    i = i1;
                    break;
                case 31:
                    Test.iArrFld[i1 + 1] = -26566;
                case 32:
                    Test.instanceCount += (((i1 * i25) + i24) - i29);
                    break;
                }
            } else {
                if (Test.bFld) break;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 s1 = " + i28 + "," + i29 + "," + s1);
        FuzzerUtils.out.println("i30 dArr2 = " + i30 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld iFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0)
            + "," + iFld);
        FuzzerUtils.out.println("Test.fFld Test.lArrFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
