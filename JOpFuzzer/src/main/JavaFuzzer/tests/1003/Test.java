// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7482152433537436523L;
    public static byte byFld=-98;
    public long lFld=-6262365616153445953L;
    public static float fFld=-57.703F;
    public static int iFld=-4;
    public static int iFld1=-88;

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(short s, int i10) {

        int i11=5, i12=36225, i13=49056, i14=-33, i15=232, i16=-246;
        boolean b=false;

        Test.fFld = s;
        Test.instanceCount = Test.instanceCount;
        i10 &= s;
        for (i11 = 17; 374 > i11; ++i11) {
            for (i13 = 1; 5 > i13; i13++) {
                i12 >>= i13;
                for (i15 = 1; i15 < 2; i15++) {
                    i16 ^= i14;
                    if (b) continue;
                    Test.fFld *= s;
                    i16 -= i16;
                    i14 += (i15 - i15);
                    i16 >>= i13;
                }
                i10 += (((i13 * i11) + Test.fFld) - i11);
                i12 *= i16;
            }
        }
        long meth_res = s + i10 + i11 + i12 + i13 + i14 + i15 + i16 + (b ? 1 : 0);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(float f) {

        int i17=33173, i18=-56, i19=-5, i20=4, iArr1[]=new int[N];
        long l1=0L;
        double d1=-1.25080;

        FuzzerUtils.init(iArr1, -8);

        iArr1[(8374 >>> 1) % N] += iMeth2((short)(26169), i17);
        Test.instanceCount -= Test.instanceCount;
        i17 |= i17;
        i17 = (int)l1;
        i17 = i17;
        for (i18 = 14; i18 < 307; ++i18) {
            i20 = 1;
            while (++i20 < 6) {
                d1 -= Test.instanceCount;
                i19 += (i20 * i20);
                Test.iFld *= Test.iFld;
                iArr1[i20 - 1] = i20;
                i19 = -9;
                i19 = i19;
                Test.fFld += (16047L + (i20 * i20));
                i19 -= i17;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i17 + l1 + i18 + i19 + i20 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i7, long l, int i8) {

        int i9=37962, i21=-56271, i22=5, i23=-12, i24=-10, iArr2[][]=new int[N][N];
        boolean b1=true;
        double d2=-93.37285;
        short s1=21863;

        FuzzerUtils.init(iArr2, 10183);

        i9 = 1;
        do {
            iMeth1(Test.fFld);
            Test.iFld = (int)l;
            try {
                i7 = (-13798 % i8);
                Test.iFld = (10 % i7);
                i7 = (-143 % i9);
            } catch (ArithmeticException a_e) {}
            try {
                i7 = (586675247 % iArr2[i9][i9]);
                iArr2[i9 + 1][i9] = (37 / Test.iFld);
                i7 = (13903 / i7);
            } catch (ArithmeticException a_e) {}
            for (i21 = 1; i21 < 6; i21++) {
                if (i8 != 0) {
                }
                for (i23 = 1; i23 < 2; ++i23) {
                    if (b1) break;
                    i24 >>= i22;
                    Test.instanceCount = 38936;
                    i8 = i22;
                    d2 %= (i8 | 1);
                    iArr2[i23][i23 + 1] -= Test.iFld;
                }
                Test.instanceCount ^= s1;
            }
        } while (++i9 < 278);
        long meth_res = i7 + l + i8 + i9 + i21 + i22 + i23 + i24 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2) + s1 +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=4, i1=44575, i2=232, i3=3, i4=11879, i5=-204, i6=-138, i25=14, iArr[]=new int[N];
        double d=-2.9422, d3=-2.66185;
        short s2=-28073, sArr[]=new short[N];

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(sArr, (short)-20262);

        i -= (++iArr[(i >>> 1) % N]);
        for (i1 = 4; i1 < 311; i1++) {
            for (i3 = i1; i3 < 82; i3++) {
                for (d = 1; d > i1; d -= 2) {
                    Test.byFld = (byte)(((2482222333753249278L - (Test.instanceCount + Test.instanceCount)) &
                        (Test.instanceCount * i3)) + (--i5));
                    iArr[i3 - 1] -= i6;
                    i2 = (int)(((d * i) + i6) - i1);
                    lFld = (long)((iArr[i3]++) * d);
                    iMeth(i2, Test.instanceCount, i4);
                    sArr[(Test.iFld1 >>> 1) % N] = (short)54739;
                    Test.iFld1 -= i5;
                    iArr[(int)(d)] = -38129;
                    i += i;
                    Test.iFld += (int)(d * d);
                }
                Test.iFld |= (int)Test.instanceCount;
                switch ((i3 % 1) + 97) {
                case 97:
                    Test.iFld1 = i3;
                    i6 = s2;
                    try {
                        i6 = (227 % i5);
                        Test.iFld1 = (-2197 / Test.iFld1);
                        i2 = (283139663 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    try {
                        iArr[i3 - 1] = (-44436 % i4);
                        Test.iFld = (-57999 % Test.iFld);
                        i2 = (i2 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    break;
                default:
                    i2 -= i6;
                }
                iArr[i1 - 1] += i;
                Test.iFld1 = Test.iFld;
                d3 = Test.instanceCount;
                lFld ^= i1;
                i4 *= i5;
            }
        }
        Test.fFld = lFld;
        i25 = 1;
        do {
            i = i3;
            i6 -= i5;
        } while (++i25 < 209);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 d = " + i3 + "," + i4 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i5 i6 s2 = " + i5 + "," + i6 + "," + s2);
        FuzzerUtils.out.println("d3 i25 iArr = " + Double.doubleToLongBits(d3) + "," + i25 + "," +
            FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld lFld = " + Test.instanceCount + "," + Test.byFld + "," +
            lFld);
        FuzzerUtils.out.println("Test.fFld Test.iFld Test.iFld1 = " + Float.floatToIntBits(Test.fFld) + "," + Test.iFld
            + "," + Test.iFld1);

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
