// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-77L;
    public static int iFld=-15530;
    public static double dFld=0.2728;
    public int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.4F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d) {

        float f1=1.840F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-25);

        byArr[(Test.iFld >>> 1) % N] += (byte)f1;
        vMeth1_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(int i2) {

        short s=19856;
        float f=2.572F, fArr[]=new float[N];
        double d1=55.81529, d2=1.26986;
        int i3=14, i4=-5367, i5=-14, i6=-28385, iArr[][]=new int[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 200);
        FuzzerUtils.init(lArr, -992305388681136497L);
        FuzzerUtils.init(fArr, -33.78F);

        s -= (short)(Test.instanceCount++);
        f -= (((Test.instanceCount = Test.instanceCount) - (iArr[(i2 >>> 1) % N][(i2 >>> 1) % N]--)) - ((-(i2 + i2)) *
            (++lArr[(i2 >>> 1) % N])));
        f += i2;
        vMeth1(d1);
        i3 = 1;
        while (++i3 < 374) {
            for (i4 = 1; i4 < 5; i4++) {
                Test.iFld += (((i4 * Test.instanceCount) + Test.iFld) - f);
                for (d2 = 2; d2 > 1; --d2) {
                    if (i6 != 0) {
                        vMeth_check_sum += i2 + s + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i3 + i4 +
                            i5 + Double.doubleToLongBits(d2) + i6 + FuzzerUtils.checkSum(iArr) +
                            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    i6 *= i5;
                    fArr[(int)(d2 + 1)] = i4;
                    if (i5 != 0) {
                        vMeth_check_sum += i2 + s + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i3 + i4 +
                            i5 + Double.doubleToLongBits(d2) + i6 + FuzzerUtils.checkSum(iArr) +
                            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                }
                if (false) continue;
                i5 |= i2;
                i6 += (((i4 * i6) + Test.instanceCount) - Test.iFld);
            }
        }
        vMeth_check_sum += i2 + s + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i3 + i4 + i5 +
            Double.doubleToLongBits(d2) + i6 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth(int i, long l, int i1) {

        float fArr1[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr1, 63.486F);
        FuzzerUtils.init(lArr1, -9133041079831989726L);

        vMeth(i1);
        fArr1 = fArr1;
        vSmallMeth_check_sum += i + l + i1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i7=36873, i8=0, i9=-184, i10=12, i11=-16, i12=-10, i13=49, i14=-3;
        byte by=-75;
        float f3=0.644F;
        long lArr2[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr2, -56L);
        FuzzerUtils.init(bArr, true);

        iArrFld = (iArrFld = (iArrFld = iArrFld));
        for (int smallinvoc=0; smallinvoc<888; smallinvoc++) vSmallMeth(-13, Test.instanceCount, Test.iFld);
        iArrFld[(Test.iFld >>> 1) % N] -= 66;
        lArr2[(-17 >>> 1) % N] = Test.iFld;
        Test.iFld -= -51416;
        for (i7 = 4; i7 < 391; ++i7) {
            for (i9 = 3; i9 < 65; i9++) {
                i11 = 1;
                while (++i11 < 2) {
                    Test.iFld = i10;
                    Test.instanceCount = by;
                }
                Test.iFld -= Test.iFld;
                i12 = 2;
                do {
                    i8 += (i12 | Test.instanceCount);
                    i10 = Test.iFld;
                    Test.iFld = -13476;
                } while ((i12 -= 3) > 0);
                Test.instanceCount += (long)f3;
                i10 = Test.iFld;
                Test.instanceCount = i9;
                i10 *= (int)f3;
                for (i13 = 2; i13 > 1; --i13) {
                    i14 = (int)Test.dFld;
                    Test.instanceCount += i13;
                    i10 += (149 + (i13 * i13));
                    iArrFld = iArrFld;
                    lArr2[i7] = i11;
                }
                i8 = i8;
            }
            bArr = bArr;
            f3 += Test.instanceCount;
        }
        by >>= (byte)i9;
        Test.iFld -= Test.iFld;

        FuzzerUtils.out.println("i7 i8 i9 = " + i7 + "," + i8 + "," + i9);
        FuzzerUtils.out.println("i10 i11 by = " + i10 + "," + i11 + "," + by);
        FuzzerUtils.out.println("i12 f3 i13 = " + i12 + "," + Float.floatToIntBits(f3) + "," + i13);
        FuzzerUtils.out.println("i14 lArr2 bArr = " + i14 + "," + FuzzerUtils.checkSum(lArr2) + "," +
            FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iArrFld Test.fArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
