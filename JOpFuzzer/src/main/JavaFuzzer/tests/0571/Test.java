// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=822739751L;
    public static byte byFld=-31;
    public static volatile double dFld=2.35248;
    public static boolean bFld=false;
    public static int iFld=-12;
    public float fFld=-14.493F;
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)13);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i) {

        int i1=-2, i2=-8, i3=-12, i4=-48037, i5=-32, i6=-183;
        boolean b=false;

        for (i1 = 15; i1 < 283; ++i1) {
            i += Test.byFld;
            for (i3 = i1; 6 > i3; i3++) {
                if (i2 != 0) {
                }
                Test.instanceCount += (i3 * i3);
                i2 = i1;
                Test.instanceCount += (((i3 * Test.instanceCount) + Test.instanceCount) - i4);
                Test.instanceCount -= Test.instanceCount;
            }
            for (i5 = i1; i5 < 6; i5 += 2) {
                if (b) break;
                if (b) continue;
                Test.dFld += Test.instanceCount;
                i6 += i6;
                Test.instanceCount += (i5 * i5);
                if (i3 != 0) {
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth() {

        int i7=36, i8=29436, i9=-185, i10=-12589, i11=-14, iArr[][]=new int[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -15998);
        FuzzerUtils.init(lArr, 12L);

        sMeth(i7);
        i7 = i7;
        for (i8 = 2; 121 > i8; i8++) {
            for (i10 = 1; i10 < 13; i10++) {
                Test.instanceCount += i10;
            }
            iArr[i8 - 1] = FuzzerUtils.int1array(N, (int)-166);
            if (Test.bFld) continue;
            lArr = lArr;
            i7 -= (int)Test.instanceCount;
            i9 = i11;
            Test.byFld = (byte)Test.instanceCount;
            if (Test.bFld) continue;
            Test.instanceCount += i8;
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        int i12=238, i13=-34959, i14=-13439, iArr1[]=new int[N];
        short s=31229;
        float f=1.108F;

        FuzzerUtils.init(iArr1, 197);

        iMeth();
        Test.iFld |= Test.iFld;
        for (i12 = 12; 199 > i12; i12 += 3) {
            switch ((i12 % 7) + 40) {
            case 40:
            case 41:
                iArr1[i12 + 1] = -240;
                break;
            case 42:
                Test.instanceCount |= Test.iFld;
                Test.iFld += (((i12 * Test.iFld) + i12) - i13);
                iArr1[i12 - 1] <<= i12;
                Test.byArrFld[i12 + 1] *= (byte)i13;
                break;
            case 43:
                s += (short)(-242 + (i12 * i12));
                i14 = 1;
                do {
                    iArr1[i12] = (int)Test.instanceCount;
                    iArr1[i12] >>= (int)Test.instanceCount;
                    Test.instanceCount <<= Test.instanceCount;
                    f += 1101259491L;
                } while ((i14 += 3) < 25);
                break;
            case 44:
                Test.iFld *= 38;
                break;
            case 45:
                i13 += (((i12 * f) + i13) - f);
            case 46:
                s >>>= (short)Test.iFld;
                break;
            }
        }
        vMeth_check_sum += i12 + i13 + s + i14 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i15=-34, i16=22469, i17=140, i18=-59195, i19=59324, i20=12963, i21=14, i22=-49, iArr2[]=new int[N];
        double d=0.101432, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.2843);
        FuzzerUtils.init(iArr2, -13188);

        vMeth();
        dArr[(Test.iFld >>> 1) % N] = Test.iFld;
        iArr2[(-165 >>> 1) % N] += i15;
        Test.iFld = Test.iFld;
        Test.instanceCount -= Test.instanceCount;
        for (i16 = 16; i16 < 258; ++i16) {
            for (i18 = 5; i18 < 104; ++i18) {
                for (d = 1; d < 2; d++) {
                    i15 += (int)(((d * i16) + i17) - fFld);
                    if (Test.bFld) {
                        i17 -= 9;
                    } else if (Test.bFld) {
                        Test.dFld = i19;
                    } else if (Test.bFld) {
                        iArr2[i16 - 1] -= Test.iFld;
                        i15 += (int)((long)d ^ i19);
                    } else {
                        i15 += (int)(d + fFld);
                        iArr2[i18] = (int)Test.instanceCount;
                    }
                    fFld += Test.instanceCount;
                    fFld += (float)d;
                    i20 += i15;
                    fFld -= 31246;
                    if (Test.bFld) {
                        i19 = i20;
                        Test.instanceCount = i19;
                        iArr2[(int)(d)] <<= (int)Test.instanceCount;
                    }
                }
                iArr2[i18 - 1] /= (int)(Test.iFld | 1);
                iArr2[i18] *= i20;
                for (i21 = 1; i21 < 2; ++i21) {
                    Test.dFld += 1.67965;
                    Test.byFld *= (byte)-82;
                    i22 += i21;
                }
            }
        }

        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 d = " + i18 + "," + i19 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("dArr iArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.iFld fFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.byArrFld = " + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
