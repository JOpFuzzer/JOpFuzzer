// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public static double dFld=1.72005;
    public static volatile int iFld=-10263;
    public long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vMeth1(int i2, long l1) {

        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.509F);

        fArr[(i2 >>> 1) % N] *= (i2++);
        vMeth1_check_sum += i2 + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1(long l2, double d) {

        int i4=-46147;
        float f1=115.809F;

        i4 *= (int)f1;
        long meth_res = l2 + Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i3, float f) {

        boolean b=false;
        short s=-22264;
        int i6=34772, i7=-206, i8=209, iArr1[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, 64389);
        FuzzerUtils.init(byArr, (byte)108);

        Test.instanceCount *= iMeth1(Test.instanceCount, Test.dFld);
        for (int i5 : iArr1) {
            b = b;
            i5 >>= (int)Test.instanceCount;
            i5 = (int)Test.instanceCount;
            s = (short)i3;
            i3 -= i3;
            iArr1 = iArr1;
            if (b) continue;
        }
        i6 = 214;
        do {
            i3 -= 47;
            for (i7 = 1; 8 > i7; ++i7) {
                Test.instanceCount = i3;
                Test.instanceCount >>= i3;
                byArr[(i7 >>> 1) % N] = (byte)i3;
            }
        } while (--i6 > 0);
        long meth_res = i3 + Float.floatToIntBits(f) + (b ? 1 : 0) + s + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, int i1, long l) {

        byte by=-110;
        float f2=0.408F;
        int i9=211, i10=14, i11=-10, i12=50486, iArr[][]=new int[N][N];
        long l3=-3337712249671942804L;
        boolean b1=true;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -24285);
        FuzzerUtils.init(sArr, (short)-8470);

        i -= (int)(iArr[(-16346 >>> 1) % N][(i1 >>> 1) % N] <<= (int)((--l) * l));
        i = Math.abs(iArr[(i1 >>> 1) % N][(i1 >>> 1) % N] = by);
        if (b1) {
            vMeth1(iMeth(i, f2), l);
        } else if (b1) {
            for (i9 = 10; i9 < 335; i9++) {
                for (i11 = 1; i11 < 5; i11++) {
                    switch ((i9 % 10) + 58) {
                    case 58:
                        if (Test.iFld != 0) {
                            vMeth_check_sum += i + i1 + l + by + Float.floatToIntBits(f2) + i9 + i10 + i11 + i12 + l3 +
                                (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
                            return;
                        }
                        i12 &= (int)Test.instanceCount;
                        lArrFld[i11 - 1] = 38961;
                        break;
                    case 59:
                        lArrFld[i9 - 1] = l3;
                        break;
                    case 60:
                        sArr[i11] = (short)i12;
                        l *= l;
                        f2 *= f2;
                        by -= (byte)-19680;
                        break;
                    case 61:
                        lArrFld[i11 - 1] = i9;
                        break;
                    case 62:
                        i1 = i1;
                        break;
                    case 63:
                        i10 += (int)l;
                    case 64:
                        iArr[i9 + 1][i11 - 1] -= i;
                        break;
                    case 65:
                        l &= l3;
                        break;
                    case 66:
                        i12 = Test.iFld;
                    case 67:
                        f2 *= 24;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + l + by + Float.floatToIntBits(f2) + i9 + i10 + i11 + i12 + l3 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i13=2, i14=8638, i15=227, i16=-12, i17=-65308, i18=-1, i19=29198, i20=-13032, iArr2[]=new int[N];
        boolean b2=false, bArr[]=new boolean[N];
        float f3=-92.941F;

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr2, 38680);

        vMeth(Test.iFld, Test.iFld, Test.instanceCount);
        for (i13 = 13; i13 < 382; i13++) {
            i14 = (int)Test.instanceCount;
            i14 += 13143;
            Test.iFld -= (int)-2394000746L;
            i14 = (int)735967853191227915L;
            lArrFld[i13 - 1] >>= Test.instanceCount;
            bArr[i13 + 1] = true;
            Test.instanceCount += -56063;
            Test.instanceCount -= i13;
        }
        Test.iFld = (int)Test.instanceCount;
        Test.instanceCount = i13;
        i14 = i13;
        for (i15 = 353; i15 > 7; i15--) {
            for (i17 = 73; 1 < i17; i17--) {
                if (b2) {
                    i14 += i17;
                    Test.instanceCount -= -57636;
                    Test.dFld += Test.instanceCount;
                    i18 -= (int)Test.dFld;
                }
                Test.iFld <<= i17;
                for (i19 = 1; 2 > i19; ++i19) {
                    iArr2[i17] *= i16;
                    i20 >>>= i17;
                }
                f3 *= i19;
                iArr2[i17] <<= i17;
                b2 = b2;
            }
            i14 /= (int)(i14 | 1);
            f3 += i17;
        }
        Test.instanceCount = i20;

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("b2 i19 i20 = " + (b2 ? 1 : 0) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("f3 bArr iArr2 = " + Float.floatToIntBits(f3) + "," + FuzzerUtils.checkSum(bArr) + ","
            + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
