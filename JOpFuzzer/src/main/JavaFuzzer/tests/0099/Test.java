// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=191L;
    public double dFld=14.79476;
    public static volatile short sFld=28666;
    public static long lFld=11678L;
    public static float fFld=1.510F;
    public int iFld=-12;
    public static volatile float fFld1=0.693F;
    public static boolean bFld=true;
    public int iArrFld[][]=new int[N][N];
    public static volatile int iArrFld1[][]=new int[N][N];
    public float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -3);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4) {

        int i5=138, i6=-811, i7=-9, i8=-14, i9=-21846, i10=26, iArr[]=new int[N];
        byte by=-122;
        boolean b=true;
        float f=2.807F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 35973L);
        FuzzerUtils.init(iArr, -43898);

        i4 -= i4;
        for (i5 = 357; 19 < i5; i5--) {
            for (i7 = 5; i7 > 1; i7 -= 3) {
                lArr[i7 - 1] = i5;
                for (i9 = 1; i9 < 5; ++i9) {
                    i10 ^= i9;
                    i4 += (i9 * i9);
                    i8 |= i6;
                    i8 = Test.sFld;
                    Test.instanceCount = Test.instanceCount;
                    i10 *= by;
                    Test.instanceCount += Test.lFld;
                }
                iArr[i7 - 1] += i4;
                b = true;
                lArr[i5] *= (long)f;
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + by + (b ? 1 : 0) + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth() {

        int i11=145, i12=36974, i13=9, i14=-12, i15=4638;
        byte by1=-34;
        boolean b1=false;

        vMeth1(i11);
        switch (((99 >>> 1) % 2) + 1) {
        case 1:
            for (i12 = 3; i12 < 389; i12++) {
                by1 -= (byte)i13;
                i13 >>= i13;
                Test.sFld = (short)104;
                i11 = i12;
                for (i14 = 4; i14 > 1; i14 -= 2) {
                    switch (((i14 % 3) * 5) + 54) {
                    case 66:
                        i15 >>= (int)Test.lFld;
                        switch (((i11 >>> 1) % 5) + 117) {
                        case 117:
                            i15 += (((i14 * i11) + i13) - Test.instanceCount);
                            i11 -= (int)-55.44156;
                            break;
                        case 118:
                            i15 += -27379;
                            i13 += (((i14 * i13) + i13) - by1);
                            break;
                        case 119:
                            i15 += i15;
                            break;
                        case 120:
                            if (b1) break;
                        case 121:
                            Test.iArrFld1[i12 + 1][i12] -= (int)Test.instanceCount;
                            break;
                        }
                    case 59:
                        i15 *= 141;
                        break;
                    case 58:
                        i13 = -7955;
                        break;
                    }
                }
            }
            break;
        case 2:
            i13 -= i14;
        default:
            Test.lFld += i14;
        }
        long meth_res = i11 + i12 + i13 + by1 + i14 + i15 + (b1 ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(int i1, int i2) {

        int i3=-169, i16=-3, i17=-114, i18=-9, i19=-64536, i20=-122, i23=-49194, i24=238, iArr1[]=new int[N];
        boolean b2=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)88);
        FuzzerUtils.init(iArr1, 198);

        i3 = 1;
        while (++i3 < 377) {
            byte by2=-1;
            int i26=-47984;
            i1 += (i3 * i3);
            i2 = (int)Math.min(lMeth(), Test.instanceCount);
            i16 = 1;
            while (++i16 < 4) {
                i1 = (int)643256079246205348L;
                Test.lFld = i1;
                i1 *= (int)Test.instanceCount;
            }
            switch (i3 + 80) {
            case 80:
                for (i17 = 1; i17 < 4; ++i17) {
                    i1 -= i2;
                    for (i19 = 1; i19 < 2; ++i19) {
                        Test.instanceCount += (long)Test.fFld;
                        Test.instanceCount -= i16;
                        i1 = i19;
                        byArr[i3 - 1] = (byte)i2;
                    }
                }
            case 81:
                i20 += i3;
                break;
            case 82:
                i20 -= i20;
            case 83:
                Test.fFld -= i19;
                break;
            case 84:
                iArrFld[i3 + 1][i3 + 1] = (int)Test.fFld;
                break;
            case 85:
                if (b2) break;
                break;
            case 86:
            case 87:
                i20 *= -11;
                break;
            case 88:
                Test.instanceCount *= (long)1.84304;
                break;
            case 89:
                i20 /= -25541;
                break;
            case 90:
                Test.lFld *= i3;
                break;
            case 91:
                fArrFld[i3 - 1] = Test.fFld;
                break;
            case 92:
            case 93:
                i20 <<= i3;
                break;
            case 94:
                Test.sFld += (short)i18;
                break;
            case 95:
                Test.sFld -= (short)i19;
            case 96:
                Test.iArrFld1[i3 - 1][i3 - 1] = Test.sFld;
                break;
            case 97:
                by2 += (byte)i19;
            case 98:
                i2 <<= i2;
                break;
            case 99:
                try {
                    i18 = (59861 / i20);
                    i2 = (i1 % -46);
                    i20 = (i16 / -33698);
                } catch (ArithmeticException a_e) {}
                break;
            case 100:
                i18 = i2;
                break;
            case 101:
                Test.iArrFld1[i3 - 1][i3 + 1] <<= i18;
                break;
            case 102:
            case 103:
                Test.fFld *= i3;
                break;
            case 104:
                by2 += (byte)i3;
            case 105:
                i20 -= i1;
                break;
            case 106:
                Test.instanceCount = i16;
                break;
            case 107:
                dFld = Test.instanceCount;
            case 108:
                Test.fFld += i1;
                break;
            case 109:
                Test.instanceCount = Test.lFld;
                break;
            case 110:
                Test.instanceCount += (i3 * i3);
                break;
            case 111:
                Test.iArrFld1[i3][i3 - 1] = i18;
                break;
            case 112:
                i23 -= (int)Test.lFld;
                break;
            case 113:
                i23 = by2;
                break;
            case 114:
                Test.iArrFld1[i3][i3] /= 117;
                break;
            case 115:
                lArrFld[i3 + 1] <<= 13L;
                break;
            case 116:
                i1 <<= (int)Test.instanceCount;
                break;
            case 117:
                dFld += i1;
                break;
            case 118:
                i18 *= i20;
                break;
            case 119:
                lArrFld[i3] = i24;
            case 120:
                by2 ^= (byte)-12;
                break;
            case 121:
                Test.fFld -= -212;
                break;
            case 122:
                i26 >>>= -29629;
            case 123:
                i18 += i24;
                break;
            case 124:
                by2 += (byte)(((i3 * i1) + i19) - Test.instanceCount);
            case 125:
                dFld = dFld;
            case 126:
                i20 = 32686;
                break;
            case 127:
                dFld *= Test.fFld;
                break;
            case 128:
                i2 += (((i3 * Test.fFld) + Test.instanceCount) - Test.instanceCount);
            case 129:
                Test.sFld = (short)iFld;
                break;
            case 130:
                if (i16 != 0) {
                    vMeth_check_sum += i1 + i2 + i3 + i16 + i17 + i18 + i19 + i20 + (b2 ? 1 : 0) + i23 + i24 +
                        FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
                    return;
                }
            case 131:
                lArrFld[i3 + 1] ^= i20;
            case 132:
                iArrFld[i3][i3] -= (int)Test.instanceCount;
                break;
            case 133:
                dFld = Test.lFld;
            case 134:
                i18 = (int)-700697543L;
                break;
            case 135:
                Test.lFld += i17;
                break;
            case 136:
                i20 -= (int)Test.lFld;
                break;
            case 137:
                Test.instanceCount += (i3 * i3);
                break;
            case 138:
                Test.fFld -= i20;
                break;
            case 139:
                i26 -= (int)Test.instanceCount;
                break;
            case 140:
                Test.lFld += (long)(88.513F + (i3 * i3));
                break;
            case 141:
                i1 += (i3 - Test.fFld);
            case 142:
            case 143:
                i18 += (33641 + (i3 * i3));
                break;
            case 144:
                i1 -= 47029;
                break;
            case 145:
                b2 = b2;
                break;
            case 146:
                i20 |= by2;
                break;
            case 147:
                Test.instanceCount += (i3 - Test.lFld);
                break;
            case 148:
                i20 >>= i23;
                break;
            case 149:
                iFld &= i19;
                break;
            default:
                try {
                    i20 = (-20907 / iArr1[i3 - 1]);
                    i2 = (i18 % i1);
                    i18 = (i19 % i20);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i16 + i17 + i18 + i19 + i20 + (b2 ? 1 : 0) + i23 + i24 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-2133, i29=27943, i30=-64654, i31=0, i32=-11, i33=26525, i34=-10;
        byte by3=14;

        i = 1;
        while (++i < 255) {
            iArrFld[i + 1][i] -= (int)((dFld--) - (++iArrFld[i][i - 1]));
            vMeth(0, i29);
            iArrFld[i - 1][i] *= iFld;
        }
        Test.iArrFld1[(i >>> 1) % N][(iFld >>> 1) % N] = i29;
        iFld >>>= 62541;
        i29 = (int)Test.instanceCount;
        for (i30 = 20; 398 > i30; i30++) {
            for (i32 = 4; 67 > i32; ++i32) {
                dFld -= Test.fFld1;
                Test.fFld -= by3;
                i29 += (i32 ^ i);
                i33 += (i32 * i32);
                i29 |= Test.sFld;
                switch (((i32 % 2) * 5) + 30) {
                case 38:
                    i33 |= -1;
                    Test.instanceCount += by3;
                case 39:
                    i34 = 1;
                    do {
                        i31 -= (int)dFld;
                        switch (((-8 >>> 1) % 4) + 47) {
                        case 47:
                            iArrFld[i32] = FuzzerUtils.int1array(N, (int)244);
                            i31 += -235;
                            i33 ^= i29;
                            switch ((((i >>> 1) % 7) * 5) + 21) {
                            case 44:
                                fArrFld[(i34 >>> 1) % N] *= i32;
                                break;
                            case 45:
                                by3 <<= (byte)-8;
                                break;
                            case 43:
                                iFld |= i32;
                                i31 -= i29;
                                Test.bArrFld[i32] = Test.bFld;
                                iArrFld[i30 + 1][i34 + 1] -= iFld;
                                break;
                            case 23:
                                Test.instanceCount <<= i34;
                                break;
                            case 40:
                                i29 = Test.sFld;
                                break;
                            case 37:
                            case 50:
                                iFld += i34;
                            default:
                                if (Test.bFld) break;
                            }
                            break;
                        case 48:
                            i33 = i30;
                        case 49:
                            i33 += (int)Test.fFld1;
                        case 50:
                            Test.fFld = Test.lFld;
                        }
                    } while (++i34 < 2);
                    break;
                default:
                    dFld *= -107.22571;
                }
            }
        }

        FuzzerUtils.out.println("i i29 i30 = " + i + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("by3 i34 = " + by3 + "," + i34);

        FuzzerUtils.out.println("Test.instanceCount dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.lFld Test.fFld iFld = " + Test.lFld + "," + Float.floatToIntBits(Test.fFld) + ","
            + iFld);
        FuzzerUtils.out.println("Test.fFld1 Test.bFld iArrFld = " + Float.floatToIntBits(Test.fFld1) + "," + (Test.bFld
            ? 1 : 0) + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 fArrFld lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.bArrFld = " + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
