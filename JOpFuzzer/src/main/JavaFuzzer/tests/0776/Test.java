// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3605372051405683897L;
    public static byte byFld=50;
    public static volatile double dFld=39.51056;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b, double d) {

        int i2=0, i4=-184, i5=-204, i6=51;
        float f=0.545F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-84);

        i2 = 1;
        do {
            int i3=-37953;
            Test.instanceCount = (long)f;
            i3 = i2;
            i4 = 12;
            do {
                i3 = i3;
                for (i5 = 1; i5 < 1; ++i5) {
                    switch (((i4 % 6) * 5) + 57) {
                    case 66:
                        i6 = (int)0L;
                        if (b) continue;
                        i3 = i5;
                        break;
                    case 69:
                        i6 *= 44351;
                        break;
                    case 58:
                        byArr[i2 - 1] >>= (byte)59;
                        i3 = -32112;
                    case 75:
                        Test.byFld = (byte)-56703;
                        break;
                    case 60:
                    case 68:
                        i6 >>= (int)Test.instanceCount;
                    default:
                        i6 = i5;
                    }
                }
            } while (--i4 > 0);
        } while (++i2 < 134);
        vMeth2_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d) + i2 + Float.floatToIntBits(f) + i4 + i5 + i6 +
            FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth1() {

        int i=29220, i1=1, i7=172;
        float f1=-1.306F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -101.376F);

        for (i = 162; i > 10; i -= 2) {
            boolean b1=false;
            i1 *= -9;
            vMeth2(b1, Test.dFld);
            i7 = 1;
            while (++i7 < 20) {
                Test.instanceCount %= ((long)(Test.dFld) | 1);
                i1 = (int)Test.instanceCount;
                fArr[i + 1] *= i1;
                if (false) {
                    i1 *= i;
                } else {
                    Test.instanceCount = 57820;
                    i1 += (((i7 * i1) + i1) - i7);
                    f1 = Test.instanceCount;
                }
            }
            i1 *= -5311;
            if (i1 != 0) {
                vMeth1_check_sum += i + i1 + i7 + Float.floatToIntBits(f1) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
        }
        Test.dFld -= 8753;
        vMeth1_check_sum += i + i1 + i7 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth() {

        int i8=32, i9=-50539, iArr[]=new int[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr, -28569);
        FuzzerUtils.init(fArr1, 0.966F);

        vMeth1();
        for (i8 = 4; i8 < 169; i8++) {
            boolean b2=false;
            i9 >>= i9;
            try {
                i9 = (i9 % 17099);
                i9 = (-11 / i9);
                i9 = (i9 % i8);
            } catch (ArithmeticException a_e) {}
            iArr[i8] -= i8;
            i9 += i9;
            if (b2) break;
            Test.instanceCount += (((i8 * i8) + i9) - i8);
            Test.dFld -= i9;
            i9 -= i9;
            i9 = 3040;
            fArr1[i8] -= (float)Test.dFld;
        }
        iArr = FuzzerUtils.int1array(N, (int)24891);
        i9 *= (int)-90L;
        i9 = 88;
        vMeth_check_sum += i8 + i9 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i10=135, i11=-147, i12=210, i13=52, i14=54124, i15=-43, i16=-86, i17=20501, iArr1[]=new int[N];
        float f2=-7.137F;
        short s=-13215;
        double d1=1.99776, dArr[]=new double[N];
        boolean b3=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -100.39727);
        FuzzerUtils.init(lArr, -2150787965L);
        FuzzerUtils.init(iArr1, 4);

        vMeth();
        for (i10 = 15; i10 < 274; ++i10) {
            Test.instanceCount -= Test.instanceCount;
            f2 += 38933;
            i11 >>= i10;
            f2 += (float)Test.dFld;
        }
        Test.instanceCount = i11;
        for (i12 = 11; i12 < 180; i12++) {
            i13 *= (int)Test.dFld;
        }
        i13 = i13;
        dArr[(i12 >>> 1) % N] = i11;
        i14 = 1;
        while (++i14 < 324) {
            switch ((i14 % 2) + 104) {
            case 104:
                lArr[(i14 >>> 1) % N] = s;
                i11 >>= 135;
                if (b3) {
                    for (d1 = i14; d1 < 78; ++d1) {
                        for (i16 = 1; i16 < 1; ++i16) {
                            Test.instanceCount = 176;
                            i15 &= (int)-13L;
                            iArr1[i16 + 1] = -5252;
                            i17 -= 5;
                            lArr[i14] += i13;
                            i17 %= (int)(Test.instanceCount | 1);
                            i13 *= (int)12L;
                            i17 -= i10;
                        }
                        lArr[i14 - 1] -= i11;
                        i15 = (int)-1.101159;
                        s = Test.byFld;
                        Test.dFld += -9165;
                    }
                }
            case 105:
            }
        }

        FuzzerUtils.out.println("i10 i11 f2 = " + i10 + "," + i11 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("s d1 i15 = " + s + "," + Double.doubleToLongBits(d1) + "," + i15);
        FuzzerUtils.out.println("i16 i17 b3 = " + i16 + "," + i17 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("dArr lArr iArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Double.doubleToLongBits(Test.dFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
