// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1926858222L;
    public static short sFld=19120;
    public static float fFld=1.76F;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7) {

        float f1=-73.782F;
        double d=-79.4360, dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 0.130373);

        dArr1[(i7 >>> 1) % N] = f1;
        d -= i7;
        long meth_res = i7 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i6) {

        double d1=-83.83400, d2=27.10231;
        int i8=180, i9=62197, i10=-12527, i11=-38331, i12=-44, iArr1[]=new int[N];
        byte by=1;

        FuzzerUtils.init(iArr1, -6);

        Test.instanceCount -= iMeth(i6);
        for (d1 = 5; d1 < 190; d1++) {
            i8 *= i6;
            by += (byte)d1;
            for (i9 = 1; i9 < 9; ++i9) {
                for (i11 = 1; i11 < 2; i11++) {
                    Test.fFld -= i12;
                    i6 = (int)2.234F;
                    Test.instanceCount += i11;
                    iArr1[i11] += 11;
                    i6 -= (int)Test.instanceCount;
                    d2 = Test.instanceCount;
                    i10 -= -57532;
                    i8 &= by;
                    iArr1[(int)(d1 + 1)] += 29830;
                }
            }
        }
        vMeth1_check_sum += i6 + Double.doubleToLongBits(d1) + i8 + by + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i2, int i3, int i4) {

        float f=-1.732F, fArr[]=new float[N];
        int i5=-127, i13=210, iArr[]=new int[N];
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -63872);
        FuzzerUtils.init(dArr, -104.75955);
        FuzzerUtils.init(fArr, -23.1019F);
        FuzzerUtils.init(lArr, 94L);

        i2 = Math.abs((int)((i4 + i4) * (112.126967 * (0.518F * (++iArr[(i2 >>> 1) % N])))));
        i4 -= (int)((-dArr[(i3 >>> 1) % N]) + ((i3 * Test.sFld) - (++i4)));
        i3 = (int)(((-(i4 + i4)) + (--iArr[(i3 >>> 1) % N])) - ((++i3) * Test.instanceCount));
        i4 *= (int)((Test.instanceCount - (i3 - 9)) + (fArr[(i3 >>> 1) % N] * (-(--i2))));
        for (f = 13; f < 360; f++) {
            vMeth1(-164);
            i4 += i2;
            i13 = 1;
            do {
                Test.sFld = (short)Test.instanceCount;
                i4 = -227;
                i5 += i13;
                iArr[(int)(f)] = -4;
                i2 = (int)Test.instanceCount;
                iArr[(int)(f - 1)] = i13;
                lArr = lArr;
            } while (++i13 < 5);
        }
        vMeth_check_sum += i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + i13 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-33715, i1=-115, i14=-116, i15=94, i16=-51, i17=156, i18=6, i20=22802, i21=-21053;
        long l=-2279334812L;
        byte by1=-18, byArr[]=new byte[N];
        double d3=85.24212;
        float fArr1[]=new float[N];

        FuzzerUtils.init(byArr, (byte)-68);
        FuzzerUtils.init(fArr1, -93.1017F);

        for (i = 206; i > 10; i--) {
            vMeth(i, -165, i1);
            Test.iArrFld[i] -= (int)Test.instanceCount;
            i1 *= i1;
            i14 = 1;
            while (++i14 < 128) {
                for (i15 = 1; i15 < 1; i15++) {
                    i1 += (i15 ^ i1);
                    Test.instanceCount = -92;
                    i1 += (int)l;
                    i1 += (((i15 * i1) + Test.fFld) - i1);
                    Test.instanceCount >>= i15;
                }
                Test.iArrFld[i] -= (int)Test.instanceCount;
                Test.bFld = Test.bFld;
                i1 -= i;
                byArr[i14 - 1] *= (byte)l;
                i1 *= i1;
            }
            i1 = i;
            fArr1[i + 1] = i1;
            i16 += i;
            Test.iArrFld = Test.iArrFld;
            l = Test.instanceCount;
            i16 <<= -95;
        }
        for (i17 = 8; i17 < 367; ++i17) {
            by1 += (byte)i17;
            d3 = i;
            for (i20 = i17; i20 < 70; i20++) {
                Test.instanceCount += 9;
                i21 = i1;
                i21 += i17;
                i16 <<= -22938;
            }
        }

        FuzzerUtils.out.println("i i1 i14 = " + i + "," + i1 + "," + i14);
        FuzzerUtils.out.println("i15 i16 l = " + i15 + "," + i16 + "," + l);
        FuzzerUtils.out.println("i17 i18 by1 = " + i17 + "," + i18 + "," + by1);
        FuzzerUtils.out.println("d3 i20 i21 = " + Double.doubleToLongBits(d3) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("byArr fArr1 = " + FuzzerUtils.checkSum(byArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
