// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static double dFld=-48.108961;
    public static short sFld=-28710;
    public byte byFld=117;
    public static volatile float fFld=0.499F;
    public static int iFld=19952;

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i9, byte by1) {

        int i10=123, i11=-7, i12=144, i13=3, i14=-11, i15=51, i16=194, i17=-54, i18=-88, iArr1[]=new int[N];
        short s=-20619;
        float f2=-27.427F, fArr1[]=new float[N];

        FuzzerUtils.init(iArr1, -39229);
        FuzzerUtils.init(fArr1, 25.267F);

        for (i10 = 1; i10 < 321; ++i10) {
            iArr1[i10 + 1] = i10;
            switch ((i10 % 2) + 58) {
            case 58:
                s += (short)i10;
                s -= (short)i11;
                i11 &= 121;
                if (i11 != 0) {
                    vMeth_check_sum += i9 + by1 + i10 + i11 + s + i12 + i13 + Float.floatToIntBits(f2) + i14 + i15 +
                        i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                    return;
                }
                break;
            case 59:
                by1 = (byte)i10;
                break;
            }
            for (i12 = 1; i12 < 5; i12++) {
                fArr1[i12 + 1] *= i10;
            }
        }
        for (f2 = 13; 313 > f2; f2++) {
            for (i15 = 1; i15 < 6; i15++) {
                for (i17 = i15; i17 < 2; ++i17) {
                    s += (short)(-14 + (i17 * i17));
                    i9 -= i18;
                }
            }
        }
        vMeth_check_sum += i9 + by1 + i10 + i11 + s + i12 + i13 + Float.floatToIntBits(f2) + i14 + i15 + i16 + i17 +
            i18 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static int iMeth1(float f1, int i8) {

        byte by2=14;
        short s1=11420;
        int i19=-138, iArr2[]=new int[N];
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -9.944F);
        FuzzerUtils.init(iArr2, 116);

        i8 -= (int)(fArr[(i8 >>> 1) % N] + ((f1 - i8) / ((i8 - Test.instanceCount) | 1)));
        vMeth(i8, by2);
        s1 *= (short)i8;
        i8 = (int)Test.dFld;
        i8 = i8;
        fArr = fArr;
        i8 -= (int)Test.instanceCount;
        Test.instanceCount = Test.instanceCount;
        i19 = 1;
        while (++i19 < 206) {
            i8 <<= i8;
            iArr2[i19 + 1] = i8;
            i8 = i8;
            if (b) {
                i8 += i19;
                Test.instanceCount <<= Test.instanceCount;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i8 + by2 + s1 + i19 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i1) {

        byte by=107;
        int i2=66, i3=8, i4=-184, i5=-15096, i6=-179, i7=78, iArr[][]=new int[N][N];
        float f=-74.75F, fArr2[]=new float[N];
        short s2=2675;
        boolean b1=false;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -3062316280601886479L);
        FuzzerUtils.init(iArr, -1);
        FuzzerUtils.init(fArr2, 1.141F);

        Test.instanceCount = (i1 - (++i1));
        lArr[(i1 >>> 1) % N][(67 >>> 1) % N] += (long)((i1 += (-24 - (by * i1))) + (iArr[(i1 >>> 1) % N][(i2 >>> 1) %
            N] + (Test.instanceCount * f)));
        Test.instanceCount += (Test.instanceCount - ((64 + (i2 - i1)) + Math.abs(i1)));
        for (i3 = 15; i3 < 388; i3++) {
            i5 = 5;
            do {
                for (i6 = 1; i6 < 1; i6++) {
                    Test.instanceCount = (long)((iMeth1(1.139F, i2) - f) + 74.107615);
                    fArr2 = fArr2;
                    i7 <<= i2;
                    i2 += (((i6 * i1) + i6) - Test.instanceCount);
                    s2 &= (short)i5;
                    Test.instanceCount = 4530397715328494411L;
                    if (b1) break;
                    Test.instanceCount += i2;
                    Test.dFld += 5723807221737544688L;
                }
            } while (--i5 > 0);
        }
        long meth_res = i1 + by + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + s2 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=174, i20=-58395, i21=-129, i22=-207, i23=-12868, i24=-3, i25=-4, i26=-9, i27=-17433, iArr3[]=new int[N];
        boolean b3=true;
        long l=12L;

        FuzzerUtils.init(iArr3, 192);

        i >>>= iMeth(-162);
        for (i20 = 16; 313 > i20; i20++) {
            i21 = i;
            Test.instanceCount += i;
            i -= 1;
            switch ((i20 % 6) + 16) {
            case 16:
                for (i22 = 3; i22 < 85; i22++) {
                    for (i24 = 1; i24 < 2; ++i24) {
                        boolean b2=false;
                        i25 *= (int)Test.instanceCount;
                        Test.instanceCount *= i21;
                        i21 += Test.sFld;
                        i26 = i23;
                        if (b2) break;
                        i26 -= (int)-49434L;
                        i23 -= byFld;
                    }
                    if (b3) {
                        b3 = b3;
                        for (l = 1; l < 2; ++l) {
                            Test.fFld *= -10;
                            Test.fFld -= -2.727F;
                            i26 = i27;
                            Test.instanceCount -= Test.sFld;
                            Test.fFld += 2999643326758743780L;
                            i25 += (int)l;
                            i21 ^= i22;
                            i25 += (int)(l ^ l);
                            Test.instanceCount -= l;
                            i21 += (int)l;
                        }
                        i25 -= (int)l;
                    } else {
                    }
                    i += (int)-1.857F;
                }
                break;
            case 17:
                iArr3 = iArr3;
            case 18:
                i -= i23;
                break;
            case 19:
                i -= Test.iFld;
                break;
            case 20:
                i = 159;
                break;
            case 21:
                Test.fFld += 154L;
                break;
            }
        }

        FuzzerUtils.out.println("i i20 i21 = " + i + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 b3 = " + i25 + "," + i26 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("l i27 iArr3 = " + l + "," + i27 + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("byFld Test.fFld Test.iFld = " + byFld + "," + Float.floatToIntBits(Test.fFld) + "," +
            Test.iFld);

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
