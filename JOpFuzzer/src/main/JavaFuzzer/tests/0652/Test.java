// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static int iFld=13;
    public static volatile double dFld=-44.65113;
    public volatile byte byFld=-73;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 45060L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        boolean b=false;

        b = b;
        vMeth1_check_sum += (b ? 1 : 0);
    }

    public static void vMeth() {

        float f1=2.429F;
        int i4=7, i5=-41608, i6=37, i7=-11;
        short s=31232, sArr[]=new short[N];
        byte by=-7;
        double d=-1.4541;

        FuzzerUtils.init(sArr, (short)6274);

        Test.iFld = (int)(f1 - (++Test.iFld));
        for (i4 = 8; i4 < 311; i4++) {
            i5 = (int)(((Test.instanceCount - i4) + (s >>> Test.iFld)) - Math.min(by * i4, i4));
        }
        for (i6 = 11; i6 < 262; ++i6) {
            i7 += (i6 + Test.instanceCount);
            sArr = (sArr = (sArr = (sArr = sArr)));
            i5 -= (int)(Test.instanceCount++);
            vMeth1();
            f1 += Test.instanceCount;
            d *= 36583;
        }
        d = i6;
        i5 += (int)-110L;
        vMeth_check_sum += Float.floatToIntBits(f1) + i4 + i5 + s + by + i6 + i7 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth(float f) {

        int i2=-131, i3=21969, i8=-100, i9=207, i10=37238, i11=5701, iArr[][]=new int[N][N];
        boolean b1=true;
        byte by2=15;

        FuzzerUtils.init(iArr, 6);

        for (i2 = 241; 11 < i2; --i2) {
            vMeth();
            Test.instanceCount += (long)Test.dFld;
            for (i8 = 1; i8 < 7; ++i8) {
                Test.iFld -= (int)Test.instanceCount;
            }
            f -= i3;
            i3 -= i9;
            i9 = (int)Test.instanceCount;
            switch ((i2 % 9) + 102) {
            case 102:
                if (b1) break;
                Test.iFld = i3;
                iArr[i2 + 1][i2 + 1] = i3;
                break;
            case 103:
                for (i10 = 1; i10 < 7; ++i10) {
                    byte by1=71;
                    by1 += (byte)(((i10 * i11) + i11) - Test.iFld);
                    Test.instanceCount += (((i10 * i2) + i9) - i10);
                }
                break;
            case 104:
                Test.instanceCount = -13L;
                break;
            case 105:
                if (b1) break;
                break;
            case 106:
                i11 = 28953;
            case 107:
                f -= i9;
                break;
            case 108:
                Test.instanceCount = -30611;
                break;
            case 109:
                if (i9 != 0) {
                }
            case 110:
                Test.instanceCount ^= i9;
                break;
            default:
                by2 += (byte)(1936822592L + (i2 * i2));
            }
        }
        long meth_res = Float.floatToIntBits(f) + i2 + i3 + i8 + i9 + (b1 ? 1 : 0) + i10 + i11 + by2 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=136, i1=284, i12=117, i13=-230, i14=6869, i15=18659, i16=-169, i17=-54440, i18=11, i19=-240, i20=-9915,
            iArr1[]=new int[N];
        float f2=0.508F;
        boolean b2=false;

        FuzzerUtils.init(iArr1, 13);

        for (i = 7; i < 137; i++) {
            try {
                i1 = (i1 / -244);
                i1 = (-40687 % i1);
                i1 = (-280208830 / i);
            } catch (ArithmeticException a_e) {}
            i1 /= (int)((iMeth(f2) >>> Test.iFld) | 1);
            i12 = 1;
            while (++i12 < 193) {
                f2 *= Test.instanceCount;
            }
            i1 -= (int)Test.instanceCount;
            for (i13 = 9; i13 < 193; ++i13) {
                for (i15 = i; i15 < 2; i15++) {
                    iArr1 = iArr1;
                    Test.instanceCount += Test.iFld;
                    Test.dFld = -13277590L;
                    f2 += i15;
                    i16 %= (int)-7.825F;
                    i1 -= (int)Test.instanceCount;
                }
                i14 = i15;
                for (i17 = i13; i17 < 2; i17++) {
                    Test.iFld += (i17 | Test.iFld);
                }
                Test.iFld = (int)f2;
                for (i19 = 1; 2 > i19; ++i19) {
                    i20 += i19;
                    iArr1[i + 1] = i13;
                    Test.dFld -= Test.instanceCount;
                    byFld += (byte)i15;
                    i18 -= (int)1.704F;
                    Test.instanceCount = i1;
                    byFld = (byte)i14;
                    b2 = b2;
                    i1 -= i19;
                    Test.dFld = i1;
                }
                if (b2) continue;
            }
        }

        FuzzerUtils.out.println("i i1 f2 = " + i + "," + i1 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("b2 iArr1 = " + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("byFld Test.lArrFld = " + byFld + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
