// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-82L;
    public int iFld=-13;
    public short sFld=3646;
    public static volatile float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 49.808F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, long l) {

        long l1=-492373507825420634L, lArr1[]=new long[N];
        int i6=0, i7=34231, i8=-38, i9=164, iArr1[]=new int[N];
        float f1=-2.337F;
        short s=-6628;
        double d1=0.84115;
        boolean b=true;

        FuzzerUtils.init(lArr1, -3946697388L);
        FuzzerUtils.init(iArr1, -12);

        i5 &= (int)l;
        lArr1[(i5 >>> 1) % N] -= i5;
        Test.fArrFld[(i5 >>> 1) % N] = i5;
        for (l1 = 334; l1 > 8; l1 -= 3) {
            Test.instanceCount += (long)(-1.83F + (l1 * l1));
            i7 = 1;
            do {
                for (i8 = (int)(l1); i8 < 1; i8++) {
                    iArr1[(int)(l1 + 1)] -= i8;
                    f1 = i8;
                    iArr1[i8] -= i5;
                    s += (short)(i8 + i7);
                    s += (short)d1;
                    if (b) {
                    } else if (b) {
                        iArr1 = FuzzerUtils.int1array(N, (int)7);
                        if (i9 != 0) {
                            vMeth1_check_sum += i5 + l + l1 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + s +
                                Double.doubleToLongBits(d1) + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1) +
                                FuzzerUtils.checkSum(iArr1);
                            return;
                        }
                    } else {
                        Test.instanceCount += (((i8 * i9) + i8) - i8);
                    }
                }
            } while (++i7 < 14);
        }
        vMeth1_check_sum += i5 + l + l1 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + s +
            Double.doubleToLongBits(d1) + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i=10026, i1=7, i2=-168, i3=-4, i4=51467, iArr[]=new int[N];
        float f=-1.764F;
        double d=-116.92637;
        byte by=-47;
        long lArr[]=new long[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(lArr, -7L);
        FuzzerUtils.init(sArr, (short)-25777);
        FuzzerUtils.init(iArr, 18709);

        for (i = 5; 364 > i; i++) {
            i1 *= (int)(((-58 - i) * (Test.instanceCount - i)) - (i1--));
            for (i2 = i; i2 < 5; i2++) {
                Test.instanceCount += (long)Double.longBitsToDouble(lArr[i2 + 1]);
                Test.instanceCount += (i2 * i2);
                switch (((i2 % 1) * 5) + 109) {
                case 112:
                    f = ((long)((f - i2) - Math.max(i, 14)) << i2);
                    switch ((i2 % 2) + 59) {
                    case 59:
                        i1 += (int)Test.instanceCount;
                        i4 = 1;
                        while (++i4 < 1) {
                            i1 ^= (int)((sArr[i + 1][i2]--) * ((-lArr[i2 - 1]) - i1));
                            Test.instanceCount *= -2;
                            iArr[i2 + 1] += (int)(((i4 + i2) + (i3 * i4)) + ((d + by) + (f - Test.instanceCount)));
                            i3 *= (int)494873876L;
                            vMeth1(i2, Test.instanceCount);
                        }
                        break;
                    case 60:
                        i3 = (int)d;
                        break;
                    }
                    break;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Float.floatToIntBits(f) + i4 + Double.doubleToLongBits(d) + by +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth() {

        short s1=11406;

        vMeth();
        Test.instanceCount >>= s1;
        vSmallMeth_check_sum += s1;
    }

    public void mainTest(String[] strArr1) {

        float f2=0.977F;
        double d2=2.42004, dArr[]=new double[N];
        int i10=47448, i11=-34829, i12=-7121, i13=-11, i14=-14, i15=-121, i16=-22258;
        byte by1=-53;
        boolean b1=true;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(lArr2, -5984992812386547178L);
        FuzzerUtils.init(dArr, 0.86803);

        for (int smallinvoc=0; smallinvoc<143; smallinvoc++) vSmallMeth();
        iFld -= iFld;
        iFld *= iFld;
        f2 = iFld;
        iFld += iFld;
        switch ((((iFld >>> 1) % 1) * 5) + 114) {
        case 117:
            d2 = iFld;
            for (i10 = 5; 133 > i10; ++i10) {
                i11 += by1;
                i11 += i10;
                iFld = -56;
                d2 *= f2;
            }
            break;
        default:
            i12 = 1;
            while (++i12 < 261) {
                for (i13 = 2; i13 < 96; i13++) {
                    if (true) continue;
                    for (i15 = 2; i15 > 1; --i15) {
                        switch (((i13 % 2) * 5) + 102) {
                        case 111:
                            i16 += (i15 + i16);
                            f2 += (((i15 * Test.instanceCount) + i14) - f2);
                            iArrFld[i12 - 1] *= sFld;
                            break;
                        case 104:
                            Test.instanceCount = i12;
                            lArr2[(iFld >>> 1) % N][i15 - 1] = i15;
                            b1 = true;
                            by1 = (byte)i11;
                            break;
                        default:
                            Test.instanceCount |= i16;
                            i14 += (((i15 * i13) + f2) - i15);
                        }
                        f2 -= Test.instanceCount;
                        dArr[i13] *= 0;
                        i16 = (int)Test.instanceCount;
                        iFld += (21 + (i15 * i15));
                    }
                }
            }
        }

        FuzzerUtils.out.println("f2 d2 i10 = " + Float.floatToIntBits(f2) + "," + Double.doubleToLongBits(d2) + "," +
            i10);
        FuzzerUtils.out.println("i11 by1 i12 = " + i11 + "," + by1 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 b1 lArr2 = " + i16 + "," + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount iFld sFld = " + Test.instanceCount + "," + iFld + "," + sFld);
        FuzzerUtils.out.println("Test.fArrFld iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))
            + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
