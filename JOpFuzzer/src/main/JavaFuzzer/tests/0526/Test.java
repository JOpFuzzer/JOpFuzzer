// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=4022913072L;
    public static short sFld=19364;
    public static volatile byte byArrFld[][]=new byte[N][N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)39);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, int i4, long l) {

        int i5=-200, i6=-31545, i7=5, iArr[]=new int[N];
        long l1=-220L;
        float f=0.1016F, f1=1.939F;
        short s=13990;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.65101);
        FuzzerUtils.init(iArr, 60143);

        for (i5 = 17; i5 < 290; ++i5) {
            for (l1 = 1; l1 < 6; l1++) {
                f = 1;
                while (++f < 2) {
                    dArr[i5] -= i3;
                    i4 = (int)126L;
                    i3 >>= (int)123L;
                    switch ((i5 % 10) + 79) {
                    case 79:
                        i3 *= i5;
                    case 80:
                        i7 += (int)f;
                    case 81:
                        dArr[(int)(f - 1)] += 0;
                        break;
                    case 82:
                        i7 *= i7;
                        break;
                    case 83:
                        Test.instanceCount += (long)f;
                        l = i7;
                        f1 = i5;
                        break;
                    case 84:
                        try {
                            i3 = (i4 / 1560828134);
                            iArr[(int)(f)] = (i7 / iArr[i5]);
                            iArr[(int)(l1)] = (-593275531 % i6);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 85:
                        i7 -= i6;
                    case 86:
                        s = (short)i7;
                        break;
                    case 87:
                        f1 *= i5;
                    case 88:
                        Test.byArrFld[(int)(l1 + 1)][i5 + 1] = (byte)l;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i3 + i4 + l + i5 + i6 + l1 + i7 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static float fMeth(int i1, int i2) {

        int i8=1, i9=8, i10=14, i11=6, i12=-77, i13=4, i14=-53654, i15=-71, iArr1[][]=new int[N][N];
        double d1=1.83906;
        float f2=-1.302F;
        byte by=-58;

        FuzzerUtils.init(iArr1, -2);

        vMeth(-228, -38738, -185L);
        for (i8 = 4; i8 < 284; ++i8) {
            for (i10 = 1; i10 < 6; ++i10) {
                for (i12 = 1; i12 < 2; ++i12) {
                    if (i10 != 0) {
                    }
                    i2 = -92;
                    i11 %= (int)(Test.instanceCount | 1);
                }
                i11 = i2;
                Test.instanceCount -= (long)d1;
                f2 += ((long)i10 | (long)by);
                i11 -= -9;
                for (i14 = 1; i14 < 2; ++i14) {
                    iArr1[i10][i10] *= i8;
                    iArr1[i10 - 1][i14 + 1] = -6;
                    i13 -= (int)d1;
                }
            }
        }
        long meth_res = i1 + i2 + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f2) + by + i14 + i15 + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vSmallMeth(double d) {

        int i16=-101;

        fMeth(i16, i16);
        i16 += i16;
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + i16;
    }

    public void mainTest(String[] strArr1) {

        int i=42595, i17=-8, i18=1371, i19=-152, i20=-235, i21=-22901, i22=-102, i23=-120, i24=-8, iArr2[]=new int[N];
        double d2=124.106336, d3=-117.39393, dArr1[]=new double[N];
        float f3=0.97F, fArr[]=new float[N];
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, -2.826F);
        FuzzerUtils.init(iArr2, -186);
        FuzzerUtils.init(dArr1, 2.102794);
        FuzzerUtils.init(bArr, true);

        i = (++i);
        try {
            for (int smallinvoc=0; smallinvoc<967; smallinvoc++) vSmallMeth(d2);
            for (i17 = 3 - 400; 155 > i17; i17++) {
                if (b) {
                    Test.sFld = (short)-17812;
                    f3 = Test.instanceCount;
                } else if (b) {
                    fArr[i17 - 1] = i17;
                    iArr2[i17 + 1] += i18;
                    dArr1[i17 - 1] -= i18;
                    for (i19 = i17; i19 < 63; i19++) {
                        fArr[i19] -= f3;
                        iArr2[i17 + 1] -= i18;
                    }
                } else if (b) {
                    for (i21 = 1 - 400; i21 < 63; i21++) {
                        i = i21;
                        iArr2[i17] = (int)Test.instanceCount;
                        dArr1[i21] -= Test.instanceCount;
                        i += (i21 * i21);
                        i18 = (int)d3;
                        Test.instanceCount = 6L;
                        for (i23 = 1; i23 < (1 + 400); i23++) {
                            Test.instanceCount -= i21;
                            i18 = i;
                            if (b) continue;
                            if (b) {
                                f3 = i20;
                                bArr[i23 - 1] = b;
                                f3 += (((i23 * i) + i) - i24);
                            } else {
                                i24 -= (int)Test.instanceCount;
                                i = (int)Test.instanceCount;
                            }
                        }
                    }
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            Test.instanceCount ^= i22;
        }

        FuzzerUtils.out.println("i d2 i17 = " + i + "," + Double.doubleToLongBits(d2) + "," + i17);
        FuzzerUtils.out.println("i18 f3 i19 = " + i18 + "," + Float.floatToIntBits(f3) + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("d3 i23 i24 = " + Double.doubleToLongBits(d3) + "," + i23 + "," + i24);
        FuzzerUtils.out.println("b fArr iArr2 = " + (b ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("dArr1 bArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," +
            FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.byArrFld = " + Test.instanceCount + "," + Test.sFld
            + "," + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth fMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
