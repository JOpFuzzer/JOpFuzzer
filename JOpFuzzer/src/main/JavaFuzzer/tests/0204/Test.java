// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=1615459314L;
    public static int iFld=-238;
    public static short sFld=-7165;
    public static volatile int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -3678);
        FuzzerUtils.init(Test.lArrFld, -7636472517834169476L);
        FuzzerUtils.init(Test.fArrFld, 0.840F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i7=-7, i8=-36, i9=90, i10=-8, i11=24420;
        boolean b=true;
        float f1=-2.1001F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.50135);

        i7 = 1;
        while ((i7 += 3) < 182) {
            dArr[i7 + 1] += i7;
            for (i8 = i7; i8 < 26; ++i8) {
                i9 -= i9;
                if (b) break;
                i9 *= i8;
                try {
                    Test.iFld = (30512 / i7);
                    Test.iFld = (39318 / i9);
                    Test.iFld = (i9 % Test.iFld);
                } catch (ArithmeticException a_e) {}
            }
            Test.iArrFld[i7] -= 193;
            for (i10 = 1; 26 > i10; ++i10) {
                i9 += (int)(1041706123L + (i10 * i10));
                Test.iFld += i11;
                Test.fArrFld = Test.fArrFld;
                i11 += i10;
                i9 -= Test.iFld;
                f1 += (((i10 * i11) + f1) - i10);
            }
        }
        long meth_res = i7 + i8 + i9 + (b ? 1 : 0) + i10 + i11 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i3, int i4, int i5) {

        float f=1.959F;
        boolean b1=true;
        int i12=1, i13=22724, i14=157;
        byte by=59;
        double d1=2.103690, d2=2.80629;

        i3 >>>= (int)(Test.lArrFld[(i5 >>> 1) % N] + ((i4 - Test.instanceCount) - (i4 + Test.instanceCount)));
        for (int i6 : Test.iArrFld) {
            f *= lMeth();
            if (b1) break;
            for (i12 = 1; i12 < 4; i12++) {
                i6 %= (int)(i12 | 1);
                i6 = i6;
                Test.iFld -= 127;
                i3 = (int)f;
                by += (byte)Test.instanceCount;
                for (d1 = i12; d1 < 2; d1++) {
                    Test.iArrFld[(int)(d1)] <<= i13;
                    Test.instanceCount >>= Test.instanceCount;
                    d2 = i6;
                    i4 += (int)(d1 * d1);
                }
            }
        }
        long meth_res = i3 + i4 + i5 + Float.floatToIntBits(f) + (b1 ? 1 : 0) + i12 + i13 + by +
            Double.doubleToLongBits(d1) + i14 + Double.doubleToLongBits(d2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d) {

        int i1=84, i2=-3, i15=10;
        short s=3157;
        float f2=0.491F, f3=0.978F;
        long l=4290981029L;

        for (i1 = 17; i1 < 348; i1++) {
            s <<= (short)(iMeth(i1, -160, i2) - Test.instanceCount);
            switch ((i1 % 6) + 113) {
            case 113:
                Test.iFld += i2;
                for (f2 = 1; f2 < 5; ++f2) {
                    s = (short)154;
                    Test.lArrFld[i1 - 1] = (long)f2;
                    i2 = i2;
                    switch ((i1 % 5) + 124) {
                    case 124:
                        Test.iArrFld[(int)(f2)] = i15;
                        l = 1;
                        while (++l < 2) {
                            i2 >>= i1;
                            Test.iFld += (int)l;
                            i15 <<= Test.iFld;
                            s = (short)Test.instanceCount;
                        }
                        break;
                    case 125:
                        Test.iFld |= i1;
                    case 126:
                        i15 = Test.iFld;
                        break;
                    case 127:
                        Test.iFld += i1;
                        break;
                    case 128:
                        i15 &= i2;
                        break;
                    }
                }
                break;
            case 114:
            case 115:
                f3 *= i2;
            case 116:
                f3 -= i2;
            case 117:
            case 118:
                i15 -= (int)d;
            default:
                f3 -= i15;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i1 + i2 + s + Float.floatToIntBits(f2) + i15 + l +
            Float.floatToIntBits(f3);
    }

    public void mainTest(String[] strArr3) {

        int i=3, i17=-149, i18=-44271, i19=-39452, i20=59848;
        double d3=-53.125823;
        byte by1=39;
        float f4=-2.136F, f5=2.320F, fArr[][]=new float[N][N];
        long l1=-179L;

        FuzzerUtils.init(fArr, 12.905F);

        fArr[(i >>> 1) % N][(i >>> 1) % N] = Test.iArrFld[(-53526 >>> 1) % N];
        vMeth(d3);
        for (int i16 : Test.iArrFld) {
            for (i17 = 1; i17 < 63; i17++) {
                i16 = i16;
                d3 *= -5;
                i += (i17 * i17);
                switch (((-106 >>> 1) % 5) + 6) {
                case 6:
                    by1 -= (byte)f4;
                    f5 = 1;
                    while (++f5 < 2) {
                        Test.instanceCount = 3;
                        Test.iFld <<= (int)98L;
                        Test.sFld += (short)f5;
                        try {
                            i18 = (82 / Test.iFld);
                            i18 = (Test.iArrFld[(int)(f5 + 1)] % i);
                            Test.iFld = (i17 % 14715);
                        } catch (ArithmeticException a_e) {}
                        Test.iFld += (int)(((f5 * i17) + i18) - i17);
                        Test.iFld += i16;
                        Test.instanceCount *= Test.instanceCount;
                        i18 = 0;
                        Test.lArrFld[(int)(f5 - 1)] = Test.iFld;
                    }
                    break;
                case 7:
                    i += i18;
                    break;
                case 8:
                    Test.instanceCount += (((i17 * i18) + Test.instanceCount) - i);
                    i += i17;
                    for (i19 = 1; i19 < 2; i19 += 2) {
                        i <<= (int)Test.instanceCount;
                        Test.iArrFld[i17] *= Test.sFld;
                        i = Test.sFld;
                        Test.instanceCount += i18;
                        i18 = i18;
                    }
                    break;
                case 9:
                    i += (int)d3;
                    f4 += (float)d3;
                case 10:
                    i18 |= 9794;
                    break;
                default:
                    Test.iFld |= (int)l1;
                }
            }
        }

        FuzzerUtils.out.println("i d3 i17 = " + i + "," + Double.doubleToLongBits(d3) + "," + i17);
        FuzzerUtils.out.println("i18 by1 f4 = " + i18 + "," + by1 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("f5 i19 i20 = " + Float.floatToIntBits(f5) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("l1 fArr = " + l1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
