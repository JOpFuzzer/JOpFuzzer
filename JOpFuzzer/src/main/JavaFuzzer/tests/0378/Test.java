// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public volatile int iFld=2052;
    public volatile double dFld=-32.57959;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -91);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(double d1, boolean b1, long l) {

        int i11=57913, i12=1, i13=58900, i14=14, i15=-173, iArr[]=new int[N];
        float f=121.515F;
        byte by1=72;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 53861);
        FuzzerUtils.init(lArr, -799577921L);

        for (i11 = 3; 171 > i11; i11 += 3) {
            iArr[i11] = i11;
            i12 += (i11 ^ i11);
            i12 &= i12;
            Test.instanceCount += (i11 * i11);
        }
        i13 = 1;
        while (++i13 < 381) {
            i12 += (((i13 * i12) + f) - i12);
            switch ((((i11 >>> 1) % 2) * 5) + 73) {
            case 75:
                i12 >>>= (int)8L;
                break;
            case 78:
                i12 = i11;
                i14 = 1;
                while (++i14 < 4) {
                    iArr[i13] += by1;
                    i15 = 1;
                    do {
                        iArr[i15 + 1] = i13;
                        lArr[(i11 >>> 1) % N] = l;
                    } while (++i15 < 1);
                }
                break;
            default:
                i12 /= (int)(Test.instanceCount | 1);
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + l + i11 + i12 + i13 + Float.floatToIntBits(f) +
            i14 + by1 + i15 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(int i4, int i5) {

        int i6=-8, i7=-49037, i8=4, i9=35408, i10=-166, i16=93;
        double d=-7.98751;
        byte by=45;
        boolean b=false;
        short s=11780;
        float f1=58.442F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -48.165F);

        for (i6 = 4; i6 < 322; ++i6) {
            for (d = 1; d < 5; d++) {
                for (i9 = 2; i6 < i9; --i9) {
                    fArr[i9 + 1] *= by;
                    b = bMeth(d, b, 537463849L);
                    i10 -= i9;
                    i10 -= i6;
                    try {
                        Test.iArrFld[i9] = (i4 / 1890426647);
                        i8 = (1764613865 % i5);
                        i4 = (i4 % i10);
                    } catch (ArithmeticException a_e) {}
                    i7 ^= i10;
                }
                Test.instanceCount *= i10;
                i8 += (int)(((d * s) + i5) - Test.instanceCount);
                i10 += (int)(((d * i5) + i8) - f1);
            }
            i16 = 1;
            while (++i16 < 5) {
                Test.instanceCount -= i5;
                f1 /= -202;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + by + (b ? 1 : 0) + s +
            Float.floatToIntBits(f1) + i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1) {

        int i2=-32020, i3=-30856, i17=47792, i18=220, i19=-12, i20=14197;
        float f2=-2.835F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.44758);

        for (i2 = 3; i2 < 354; i2++) {
            switch ((i2 % 6) + 121) {
            case 121:
                i = (int)(iMeth(i, i2) | Test.instanceCount);
                break;
            case 122:
                for (i17 = i2; i17 < 5; ++i17) {
                    switch ((i17 % 4) + 109) {
                    case 109:
                    case 110:
                        i18 = (int)Test.instanceCount;
                        i = (int)Test.instanceCount;
                        i -= i18;
                        Test.iArrFld = Test.iArrFld;
                    case 111:
                        i = 200;
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 112:
                        for (i19 = 1; i19 < 1; i19++) {
                            i20 *= (int)f2;
                            dArr[i19 + 1] += i17;
                            i20 = i18;
                        }
                    }
                }
                break;
            case 123:
                i18 = 49719;
            case 124:
                f2 = -90;
                break;
            case 125:
                i20 >>>= i18;
                break;
            case 126:
                f2 += i1;
                break;
            default:
                i1 += (i2 * i2);
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=3, i22=8, i23=8, i24=22603, i25=209, i26=-222, i27=-96, i28=-98, i29=-240;
        float f3=-2.191F;
        byte by2=93;
        boolean b2=true;
        short s1=-13004;

        vMeth(iFld, 245);
        iFld = iFld;
        for (i21 = 5; i21 < 169; ++i21) {
            Test.iArrFld[i21 - 1] = iFld;
            for (f3 = 153; f3 > i21; f3--) {
                Test.iArrFld[i21] <<= -11;
                Test.iArrFld[i21 + 1] += by2;
            }
            Test.instanceCount = Test.instanceCount;
            b2 = b2;
            i22 = i21;
            Test.instanceCount = Test.instanceCount;
            if (b2) break;
            iFld = i23;
        }
        Test.instanceCount = i23;
        if (b2) {
            i23 = i23;
            s1 = (short)13;
            iFld *= -49;
            for (i24 = 23; i24 < 369; ++i24) {
                i25 ^= i24;
                for (i26 = i24; i26 < 73; ++i26) {
                    dFld *= s1;
                    for (i28 = 1; 1 > i28; i28++) {
                        float f4=-1.1005F;
                        Test.instanceCount += (24 + (i28 * i28));
                        i27 += (int)dFld;
                        f4 += f3;
                        i27 += (int)(-4434766379817518017L + (i28 * i28));
                        f4 -= i29;
                        s1 >>= (short)i21;
                        Test.instanceCount >>= Test.instanceCount;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i21 i22 f3 = " + i21 + "," + i22 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i23 by2 b2 = " + i23 + "," + by2 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("s1 i24 i25 = " + s1 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 = " + i29);

        FuzzerUtils.out.println("Test.instanceCount iFld dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
