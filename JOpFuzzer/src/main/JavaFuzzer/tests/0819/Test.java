// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4540125447002024064L;
    public static double dFld=0.77234;
    public static volatile float fFld=116.380F;
    public static int iFld=0;
    public static short sFld=-7700;
    public long lFld=-16L;
    public byte byFld=-88;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -35094);
        FuzzerUtils.init(Test.fArrFld, -20.427F);
        FuzzerUtils.init(Test.lArrFld, 101L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, long l) {

        int i5=-7, i6=38, i7=50, i8=66, i9=-134, i10=10;
        short s=-25211;
        byte by=-59;
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (i5 = 14; i5 < 331; i5++) {
            f1 = i6;
        }
        try {
            Test.dFld += i5;
        }
        catch (UserDefinedExceptionTest exc1) {
            for (i7 = 9; i7 < 227; i7++) {
                l *= i7;
                i9 = 1;
                while (++i9 < 7) {
                    i8 -= 1;
                    if (false) break;
                    i10 = 1;
                    while (++i10 < 1) {
                        s += (short)(((i10 * Test.instanceCount) + i9) - i5);
                        switch (((i7 % 9) * 5) + 57) {
                        case 97:
                            i6 = i10;
                            f1 += (i10 * i10);
                            i8 = by;
                        case 73:
                            i8 = i6;
                        case 84:
                            f1 = f1;
                            break;
                        case 102:
                            Test.fArrFld[i7] *= i6;
                            break;
                        case 88:
                            bArr[i9] = b;
                            break;
                        case 91:
                            Test.iArrFld[i10 + 1] = i8;
                        case 94:
                        case 86:
                            Test.dFld = i5;
                            break;
                        case 64:
                            i6 &= i8;
                            break;
                        default:
                            i8 += 213;
                        }
                    }
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + l + i5 + i6 + i7 + i8 + i9 + i10 + s + by + (b ? 1 : 0) +
            FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i3, int i4) {

        int i11=13, i12=1, i13=-1, i14=171;
        double d=-2.112304;

        i3 >>= (int)((long)((++Test.dFld) + Math.abs(Test.instanceCount)) & (Test.instanceCount >>>= (long)(-(-5876L *
            (Test.dFld - i4)))));
        Test.instanceCount >>= i3;
        vMeth1(Test.fFld, Test.instanceCount);
        i11 = 1;
        while (++i11 < 149) {
            Test.instanceCount += (long)Test.dFld;
            for (i12 = i11; i12 < 11; i12++) {
                i3 += (i12 * i12);
                Test.iFld <<= (int)-1337342327L;
                Test.sFld = (short)Test.iFld;
                i4 *= i13;
                for (d = 1; 1 < d; --d) {
                    Test.lArrFld[i11 - 1] += -239;
                    i14 = i11;
                    i13 &= i3;
                    Test.instanceCount *= 14489L;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + i11 + i12 + i13 + Double.doubleToLongBits(d) + i14;
    }

    public static int iMeth() {

        int i15=-3, i16=-209, i17=-8, i18=14, iArr[][]=new int[N][N];
        byte by1=-111;

        FuzzerUtils.init(iArr, 65339);

        vMeth(Test.iFld, -61004);
        i15 = 1;
        do {
            Test.fFld -= Test.instanceCount;
            for (i16 = 8; i16 > 1; i16--) {
                i18 = 1;
                while (++i18 < 2) {
                    Test.fFld *= by1;
                    i17 -= (int)Test.fFld;
                    Test.instanceCount += Test.iFld;
                    iArr = iArr;
                    Test.sFld = (short)2206091618L;
                    iArr[i18 + 1] = FuzzerUtils.int1array(N, (int)-220);
                    switch (((i16 >>> 1) % 3) + 27) {
                    case 27:
                        i17 -= -54;
                        Test.iFld -= (int)Test.instanceCount;
                        Test.instanceCount *= (long)1.393F;
                        break;
                    case 28:
                    case 29:
                        Test.iFld = i17;
                        break;
                    }
                }
            }
        } while (++i15 < 205);
        long meth_res = i15 + i16 + i17 + i18 + by1 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-185, i1=-13, i2=2438, i19=155, i20=12, i21=46212, i22=-17025;
        float f=0.726F, f2=-1.126F;
        boolean b1=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.93413);

        for (i = 7; i < 200; i++) {
            i2 = 1;
            do {
                Test.instanceCount -= (((Test.iArrFld[i]++) - (i - 4)) >> (long)((f + Test.instanceCount) +
                    (Test.iArrFld[i2]++)));
                Test.iArrFld[i] = ((i1--) % ((++i1) | 1));
                i1 = (int)((Test.instanceCount - (-13 + (-(i1 - f)))) - ((f = Test.instanceCount) + iMeth()));
                i1 += (((i2 * i2) + lFld) - lFld);
                lFld += (((i2 * Test.iFld) + Test.iFld) - i2);
                Test.sFld &= (short)lFld;
                dArr[i + 1] += Test.iFld;
            } while (++i2 < 130);
            byFld = (byte)i;
            Test.iFld += (i * i);
            Test.iFld -= (int)lFld;
        }
        lFld = Test.iFld;
        lFld = i2;
        lArrFld1[(i2 >>> 1) % N] += (long)-66.30243;
        for (i19 = 6; i19 < 167; ++i19) {
            switch ((((Test.iFld >>> 1) % 7) * 5) + 65) {
            case 78:
                f2 = 1;
                while (++f2 < 156) {
                    switch ((i19 % 10) + 94) {
                    case 94:
                        for (i21 = 1; f2 < i21; i21 -= 2) {
                            switch (((i >>> 1) % 5) + 65) {
                            case 65:
                                Test.iFld += i21;
                                Test.instanceCount /= (Test.iFld | 1);
                            case 66:
                                lFld = 15700;
                                byFld += (byte)(((i21 * i21) + Test.instanceCount) - i20);
                            case 67:
                                switch ((int)((f2 % 3) + 91)) {
                                case 91:
                                    Test.iArrFld[i19] -= (int)f2;
                                    i1 += (int)f2;
                                    i22 = (int)Test.instanceCount;
                                    b1 = Test.bFld;
                                    break;
                                case 92:
                                    lFld -= i;
                                    break;
                                case 93:
                                    Test.instanceCount += (((i21 * i2) + Test.fFld) - Test.sFld);
                                }
                                break;
                            case 68:
                                try {
                                    i1 = (Test.iFld % -58629);
                                    Test.iFld = (49772 % i20);
                                    Test.iArrFld[i21 - 1] = (59817 % Test.iFld);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 69:
                                Test.instanceCount *= i20;
                            default:
                                Test.fFld += Test.iFld;
                            }
                        }
                    case 95:
                        i22 += (64396 + (f2 * f2));
                    case 96:
                        try {
                            Test.iArrFld[(int)(f2 - 1)] = (-10 % i2);
                            Test.iFld = (i2 % -126);
                            Test.iFld = (i / 17094);
                        } catch (ArithmeticException a_e) {}
                    case 97:
                        i20 += (int)f2;
                        break;
                    case 98:
                        Test.iArrFld[i19 + 1] -= i19;
                        break;
                    case 99:
                        i20 = (int)Test.instanceCount;
                    case 100:
                        i22 = -90;
                        break;
                    case 101:
                        Test.iArrFld[(int)(f2 - 1)] = (int)Test.instanceCount;
                        break;
                    case 102:
                        i20 = (int)0L;
                    case 103:
                        if (false) continue;
                        break;
                    default:
                        Test.iArrFld[i19] = (int)Test.instanceCount;
                    }
                }
                break;
            case 73:
                i20 = i22;
                break;
            case 89:
                i20 = (int)lFld;
                break;
            case 66:
                i22 -= (int)Test.instanceCount;
                break;
            case 82:
                i22 += i19;
                break;
            case 97:
                i20 -= (int)lFld;
                break;
            case 100:
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-85);
                break;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("f i19 i20 = " + Float.floatToIntBits(f) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("f2 i21 i22 = " + Float.floatToIntBits(f2) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("b1 dArr = " + (b1 ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld Test.sFld lFld = " + Test.iFld + "," + Test.sFld + "," + lFld);
        FuzzerUtils.out.println("byFld Test.bFld Test.iArrFld = " + byFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld Test.lArrFld lArrFld1 = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld) +
            "," + FuzzerUtils.checkSum(lArrFld1));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
