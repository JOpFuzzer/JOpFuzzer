// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=6081944909526987236L;
    public static boolean bFld=true;
    public static byte byFld=-27;
    public static volatile int iFld=40547;
    public static float fFld=2.831F;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8, int i9, boolean b) {

        byte by=75;
        long l1=-290138051026873501L, lArr1[]=new long[N];
        int i10=19874, i11=236, i12=-4, iArr1[][]=new int[N][N];
        float f=81.364F, fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 223);
        FuzzerUtils.init(fArr, 77.49F);
        FuzzerUtils.init(lArr1, -61L);

        i8 += by;
        for (l1 = 8; l1 < 142; l1++) {
            switch ((int)(((l1 % 9) * 5) + 36)) {
            case 42:
                if (b) continue;
                i11 = 1;
                while (++i11 < 12) {
                    Test.instanceCount *= Test.instanceCount;
                    i12 = 1;
                    do {
                        i10 <<= i12;
                        iArr1[i12 + 1] = FuzzerUtils.int1array(N, (int)7682);
                        iArr1[i12 + 1][i12] >>= 25992;
                        if (b) {
                            iArr1[i11 - 1][i12] += (int)Test.instanceCount;
                        }
                        f += f;
                        i8 -= (int)l1;
                        fArr = FuzzerUtils.float1array(N, (float)-2.287F);
                    } while ((i12 += 2) < 1);
                }
                break;
            case 43:
                lArr1[(int)(l1 - 1)] = -4291476303524321998L;
                break;
            case 59:
                if (b) continue;
                break;
            case 63:
                i9 = i12;
            case 53:
                i9 -= i12;
                break;
            case 76:
            case 46:
                Test.instanceCount *= Test.instanceCount;
                break;
            case 60:
                f -= i8;
            case 37:
                iArr1[(int)(l1 + 1)][(int)(l1 - 1)] <<= i8;
                break;
            }
        }
        vMeth2_check_sum += i8 + i9 + (b ? 1 : 0) + by + l1 + i10 + i11 + i12 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth1(double d, int i4) {

        int i5=-157, i6=-10, i7=0, i13=9, i14=4, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -27848L);
        FuzzerUtils.init(iArr, -77);

        lArr[(i4 >>> 1) % N] *= ((iArr[(116 >>> 1) % N]--) - (lArr[(i4 >>> 1) % N] + (--i4)));
        for (i5 = 11; i5 < 281; i5++) {
            i7 = 6;
            do {
                vMeth2(i4, i6, Test.bFld);
                for (i13 = 1; i13 < 1; i13++) {
                    i6 &= i5;
                    if (true) continue;
                    switch (((i13 % 4) * 5) + 2) {
                    case 21:
                        i6 += (-124 + (i13 * i13));
                        Test.instanceCount += Test.instanceCount;
                        i6 += (i13 * i13);
                        break;
                    case 6:
                        Test.byFld = (byte)i5;
                        i4 = i14;
                        i14 = -19;
                    case 10:
                        i14 = i5;
                        break;
                    case 13:
                        i14 += (8 + (i13 * i13));
                        break;
                    default:
                        if (Test.bFld) break;
                    }
                }
            } while (--i7 > 0);
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i13 + i14 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l) {

        double d1=-71.8497;
        int i15=20866, i16=44921, i17=-3666, iArr2[][]=new int[N][N];
        float f1=98.180F;
        short s=-32564, sArr[]=new short[N];

        FuzzerUtils.init(iArr2, 166);
        FuzzerUtils.init(sArr, (short)6179);

        vMeth1(d1, Test.iFld);
        Test.iFld &= Test.iFld;
        for (i15 = 5; i15 < 175; i15++) {
            f1 = 1;
            do {
                l = Test.instanceCount;
                Test.fFld = l;
                switch ((int)(((f1 % 7) * 5) + 5)) {
                case 37:
                    s = (short)f1;
                case 10:
                    switch ((((Test.iFld >>> 1) % 9) * 5) + 71) {
                    case 93:
                        Test.iFld = Test.iFld;
                        Test.iFld += (int)Test.instanceCount;
                        break;
                    case 78:
                        try {
                            Test.iFld = (iArr2[(int)(f1)][(int)(f1)] / i15);
                            Test.iFld = (-241 / i16);
                            i16 = (i16 % 8570);
                        } catch (ArithmeticException a_e) {}
                        i16 = 183;
                        Test.instanceCount = i16;
                        sArr[(int)(f1 - 1)] = (short)-125;
                    case 98:
                        iArr2[(int)(f1 - 1)][i15 - 1] = (int)l;
                    case 88:
                        d1 += i16;
                        break;
                    case 103:
                    case 104:
                        i16 += (int)Test.instanceCount;
                        break;
                    case 81:
                        Test.byFld -= (byte)-2.109022;
                        break;
                    case 86:
                        Test.instanceCount = l;
                        break;
                    case 79:
                        Test.fFld *= Test.iFld;
                    }
                    break;
                case 15:
                    Test.instanceCount += (long)(((f1 * i17) + l) - i16);
                    break;
                case 25:
                    i17 = i16;
                    break;
                case 6:
                    Test.iFld += (int)f1;
                case 21:
                    if (Test.iFld != 0) {
                        vMeth_check_sum += l + Double.doubleToLongBits(d1) + i15 + i16 + Float.floatToIntBits(f1) + s +
                            i17 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
                        return;
                    }
                case 34:
                    i16 = Test.iFld;
                    break;
                }
            } while (++f1 < 9);
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d1) + i15 + i16 + Float.floatToIntBits(f1) + s + i17 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-8765, i1=-5, i2=-152, i3=149, i18=14, i19=6, i20=23552, i21=-44, i22=-12;
        double d3=-2.20668;
        byte byArr[]=new byte[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(byArr, (byte)28);
        FuzzerUtils.init(lArr2, -8L);

        Test.instanceCount >>>= (-i);
        for (i1 = 17; i1 < 272; i1++) {
            i3 = 1;
            do {
                switch (((((140 + (++byArr[(11 >>> 1) % N])) >>> 1) % 8) * 5) + 51) {
                case 89:
                    vMeth(Test.instanceCount);
                    for (i18 = 1; i18 > 1; i18 -= 3) {
                        Test.iFld = (int)Test.instanceCount;
                    }
                    lArr2[(i19 >>> 1) % N] = i18;
                    break;
                case 75:
                    i19 += (((i3 * i19) + Test.fFld) - Test.fFld);
                    for (i20 = 1; i20 < 1; ++i20) {
                        double d2=-25.35340;
                        d2 %= 2L;
                        try {
                            iArrFld[i20] = (-905320709 / iArrFld[i1]);
                            i21 = (i / 2000389660);
                            iArrFld[i1] = (i1 / -552682430);
                        } catch (ArithmeticException a_e) {}
                        switch ((i1 % 6) + 107) {
                        case 107:
                            Test.fFld *= 60542L;
                            Test.iFld <<= Test.iFld;
                            Test.instanceCount *= i1;
                            i2 -= (int)d2;
                            break;
                        case 108:
                            i21 *= i18;
                            Test.instanceCount = i3;
                            Test.fFld *= i2;
                        case 109:
                            i2 = i3;
                            i = Test.iFld;
                            i22 += i20;
                            if (Test.bFld) break;
                            break;
                        case 110:
                            iArrFld = iArrFld;
                        case 111:
                            Test.instanceCount %= (i1 | 1);
                            iArrFld[i1 - 1] <<= i19;
                            break;
                        case 112:
                            Test.instanceCount += i20;
                            i22 = i2;
                            i22 <<= 94;
                        }
                    }
                    break;
                case 81:
                    Test.instanceCount *= i2;
                    break;
                case 57:
                    d3 = i20;
                case 59:
                case 56:
                    Test.instanceCount = (long)Test.fFld;
                    break;
                case 64:
                    Test.instanceCount = i2;
                case 85:
                    i2 -= (int)d3;
                    break;
                default:
                    iArrFld[i3] <<= -8396;
                }
            } while (++i3 < 99);
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i18 i19 = " + i3 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("d3 byArr lArr2 = " + Double.doubleToLongBits(d3) + "," + FuzzerUtils.checkSum(byArr) +
            "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.byFld = " + Test.instanceCount + "," + (Test.bFld ?
            1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iFld Test.fFld iArrFld = " + Test.iFld + "," + Float.floatToIntBits(Test.fFld) +
            "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
