// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5004019266219040720L;
    public static volatile float fFld=2.66F;
    public volatile int iFld=107;
    public static volatile int iArrFld[]=new int[N];
    public long lArrFld[][]=new long[N][N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -127);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i5=-27531, i6=14, i7=31464, i8=77, i9=-12;
        boolean b=true;
        byte by=-116;
        float f1=-29.206F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4030928089L);

        i5 = 1;
        while (++i5 < 310) {
            for (i6 = 1; 5 > i6; i6++) {
                Test.instanceCount += (i6 - i7);
                b = b;
                for (i8 = 1; i8 < 2; ++i8) {
                    Test.instanceCount |= i8;
                    i9 = 8188;
                    i9 <<= by;
                    f1 += i7;
                    switch ((i8 % 2) + 1) {
                    case 1:
                        Test.iArrFld = Test.iArrFld;
                        i9 += (i8 + f1);
                        Test.instanceCount = i8;
                        lArr[i8 - 1] -= i9;
                        break;
                    case 2:
                        i7 -= i7;
                        break;
                    }
                }
            }
        }
        long meth_res = i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 + by + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1, int i2) {

        int i3=-68, i4=152, i10=-4, i11=-67, i12=61911;
        float f2=102.240F;
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 12L);

        for (i3 = 8; 178 > i3; i3++) {
            Test.instanceCount ^= iMeth();
            i2 += (((i3 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
            Test.instanceCount = -54172;
            f2 += 6;
            lArr1[(i4 >>> 1) % N] >>= i3;
            for (i10 = 1; i10 < 9; ++i10) {
                i2 = i11;
            }
            i12 = 1;
            do {
                try {
                    i2 = (i1 % i3);
                    i2 = (7 % Test.iArrFld[i3 + 1]);
                    i11 = (i % i10);
                } catch (ArithmeticException a_e) {}
            } while (++i12 < 9);
            i4 = i10;
            if (b1) {
                i11 -= (int)-712L;
                Test.iArrFld[i3 + 1] *= i1;
                Test.instanceCount += (i3 * i4);
            } else {
                i1 += (i3 * i3);
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + Float.floatToIntBits(f2) + i10 + i11 + i12 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vSmallMeth(float f) {

        int i13=6177;

        vMeth(i13, i13, -34416);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i13;
    }

    public void mainTest(String[] strArr1) {

        byte by1=-62;
        int i14=5, i15=60, i16=-53494, i17=3, i18=-56, i19=-13458, i20=26056;
        double d=0.20687;
        boolean b2=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -77.86F);

        for (int smallinvoc=0; smallinvoc<948; smallinvoc++) vSmallMeth(Test.fFld);
        iFld += by1;
        for (i14 = 15; i14 < 381; ++i14) {
            switch (((i15 >>> 1) % 2) + 35) {
            case 35:
                lArrFld[i14][i14] = Test.instanceCount;
                i15 -= (int)-5038737386589889798L;
                Test.iArrFld = Test.iArrFld;
            case 36:
                if (b2) {
                    i15 += (((i14 * i14) + iFld) - iFld);
                    d -= d;
                } else {
                    i15 += (int)Test.fFld;
                    lArrFld[i14 - 1] = FuzzerUtils.long1array(N, (long)-1597285435L);
                    Test.instanceCount ^= i14;
                }
                lArrFld[i14][i14 + 1] = i16;
                iFld -= 13;
                break;
            }
            i17 = 1;
            while (++i17 < 69) {
                Test.instanceCount += -241;
                lArrFld[i17][i14] = 3860912345257066988L;
                sArrFld[i17] += (short)d;
                Test.instanceCount += (long)99.254F;
                Test.instanceCount += i17;
                i18 = 1;
                do {
                    Test.iArrFld[i17] = (int)-5L;
                    i16 >>= i15;
                } while (++i18 < 1);
            }
            Test.instanceCount = -215;
            iFld += (int)Test.fFld;
            b2 = b2;
        }
        for (i19 = 22; i19 < 382; i19++) {
            fArr[i19] = i20;
            i16 = i16;
        }

        FuzzerUtils.out.println("by1 i14 i15 = " + by1 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("d b2 i16 = " + Double.doubleToLongBits(d) + "," + (b2 ? 1 : 0) + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 fArr = " + i20 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + iFld);
        FuzzerUtils.out.println("Test.iArrFld lArrFld sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld) + "," + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
