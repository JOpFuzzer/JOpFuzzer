// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2994741118L;
    public int iFld=-36287;
    public static double dFld=2.97231;
    public static byte byFld=-83;
    public static float fFld=-1.390F;
    public int iFld1=-221;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 10);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(short s1, int i4, int i5) {

        double d=-48.53823;
        boolean b1=true;

        i4 += i5;
        switch (((i5 >>> 1) % 2) + 73) {
        case 73:
            Test.instanceCount -= (long)d;
            for (int i6 : Test.iArrFld) {
                Test.instanceCount = i5;
                b1 = b1;
                Test.byFld *= (byte)Test.instanceCount;
                Test.iArrFld[(i5 >>> 1) % N] *= (int)Test.instanceCount;
                i6 *= (int)Test.instanceCount;
                switch ((((i5 >>> 1) % 5) * 5) + 75) {
                case 91:
                    i4 = (int)Test.instanceCount;
                    i5 *= (int)Test.instanceCount;
                    break;
                case 82:
                    i5 = (int)5L;
                    Test.fFld -= Test.fFld;
                    break;
                case 88:
                    Test.iArrFld[(i6 >>> 1) % N] *= s1;
                    break;
                case 93:
                    i4 *= (int)Test.instanceCount;
                case 92:
                    if (i6 != 0) {
                    }
                    break;
                default:
                    i5 <<= i5;
                }
            }
            break;
        case 74:
            i4 ^= Test.byFld;
            break;
        default:
            Test.fFld = i5;
        }
        long meth_res = s1 + i4 + i5 + Double.doubleToLongBits(d) + (b1 ? 1 : 0);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth() {

        int i=-18111, i1=-14, i2=52580, i3=9, i8=-8;
        short s=2184;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6482796789062342177L);

        for (i = 165; i > 3; i--) {
            i1 ^= (Test.iArrFld[i]--);
            i1 += i;
            i1 *= (--i1);
            i1 += (i * Test.instanceCount);
        }
        for (i2 = 1; i2 < 242; i2++) {
            Test.dFld -= Math.abs(Test.instanceCount++);
            i3 = (int)(((lArr[i2 - 1]--) - (s++)) - byMeth(s, i, i1));
            i8 = 1;
            do {
                i1 >>= i3;
                switch (((i2 % 1) * 5) + 114) {
                case 117:
                    i3 -= (int)Test.instanceCount;
                    break;
                }
                try {
                    i1 = (i2 % 246);
                    i1 = (32238 % i);
                    Test.iArrFld[i8 - 1] = (i / i2);
                } catch (ArithmeticException a_e) {}
            } while (++i8 < 7);
        }
        i1 = i;
        i1 = i;
        vMeth_check_sum += i + i1 + i2 + i3 + s + i8 + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(long l, boolean b) {

        int i9=-9, i10=45, i11=-4, i12=3010, i13=-8;
        long l1=-2929590467L;
        double dArr[]=new double[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(dArr, -81.118821);
        FuzzerUtils.init(bArr, false);

        vMeth();
        i9 -= i9;
        for (double d1 : dArr) {
            i9 -= (int)Test.instanceCount;
            Test.fFld += -23;
            try {
                i9 = (-1737825154 % i9);
                i9 = (i9 / -221);
                i10 = (i9 % -1687491991);
            } catch (ArithmeticException a_e) {}
            for (l1 = 1; l1 < 4; ++l1) {
                dArr[(int)(l1 - 1)] -= i9;
                for (i12 = 1; i12 < 2; i12++) {
                    i11 = Test.byFld;
                    i9 *= 26513;
                }
                Test.iArrFld[(int)(l1 - 1)] = -224;
                Test.iArrFld = Test.iArrFld;
                bArr[(int)(l1 + 1)] = false;
                if (b) continue;
            }
        }
        long meth_res = l + (b ? 1 : 0) + i9 + i10 + l1 + i11 + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b2=true;
        int i14=-179, i15=130, i16=-8, i17=-2, i18=58, i19=9, i20=3, i21=-10989;
        short s2=17754;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.589F);

        iFld -= (int)lMeth(Test.instanceCount, b2);
        for (i14 = 18; i14 < 375; ++i14) {
            iFld -= iFld;
            Test.instanceCount = 896578623L;
            Test.instanceCount <<= s2;
            i15 = (int)-2.264F;
            for (i16 = 1; i16 < 71; i16++) {
                iFld -= (int)Test.instanceCount;
            }
            iFld = -52508;
            Test.fFld *= 3;
        }
        i17 += (int)Test.instanceCount;
        Test.iArrFld = Test.iArrFld;
        fArr[(i17 >>> 1) % N] -= i15;
        try {
            iFld = i16;
            i17 += (int)Test.instanceCount;
            iFld = i16;
            iFld = (int)Test.fFld;
            i15 += Test.byFld;
        }
        catch (NullPointerException exc1) {
            for (i18 = 20; i18 < 378; ++i18) {
                for (i20 = 1; 70 > i20; ++i20) {
                    i21 += (int)Test.fFld;
                    i19 += i20;
                    switch (((i18 % 7) * 5) + 18) {
                    case 36:
                        Test.iArrFld[i20 + 1] += (int)Test.instanceCount;
                        switch (((i18 % 6) * 5) + 12) {
                        case 21:
                            i19 -= i17;
                            b2 = b2;
                            break;
                        case 40:
                            iFld -= iFld;
                            Test.byFld += (byte)(((i20 * i21) + Test.instanceCount) - i21);
                            break;
                        case 33:
                            if (b2) break;
                            break;
                        case 17:
                            i17 >>= -8;
                            break;
                        case 29:
                            i15 = (int)185L;
                            break;
                        case 14:
                            Test.iArrFld[i20 + 1] += i18;
                        default:
                            i15 -= Test.byFld;
                        }
                        break;
                    case 31:
                        Test.instanceCount >>>= Test.instanceCount;
                        break;
                    case 28:
                        i17 *= i19;
                        break;
                    case 20:
                        Test.dFld = Test.fFld;
                        break;
                    case 23:
                        iFld1 -= s2;
                        break;
                    case 33:
                        Test.fFld += (((i20 * i18) + Test.instanceCount) - i19);
                        break;
                    case 51:
                        iFld = (int)Test.fFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("b2 i14 i15 = " + (b2 ? 1 : 0) + "," + i14 + "," + i15);
        FuzzerUtils.out.println("s2 i16 i17 = " + s2 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 fArr = " + i21 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld Test.fFld iFld1 = " + Test.byFld + "," + Float.floatToIntBits(Test.fFld) +
            "," + iFld1);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
