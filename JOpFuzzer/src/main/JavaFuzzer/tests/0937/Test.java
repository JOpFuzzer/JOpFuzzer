// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=59L;
    public static int iFld=22764;
    public static boolean bFld=true;
    public static byte byFld=30;
    public static short sFld=-21794;
    public long lArrFld[]=new long[N];

    public static long vMeth2_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l) {

        int i15=-24391, i16=4, i17=-65237, i18=-4;
        byte by=-29, byArr[][]=new byte[N][N];
        double d2=91.56322;
        float f3=-2.711F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -38.224F);
        FuzzerUtils.init(byArr, (byte)0);

        Test.instanceCount += Test.iFld;
        Test.iFld <<= (int)l;
        for (i15 = 5; i15 < 306; ++i15) {
            fArr1[i15] = by;
            byArr[i15 + 1][i15 - 1] -= (byte)d2;
            switch ((i15 % 1) + 116) {
            case 116:
                for (i17 = 1; i17 < 5; i17++) {
                    by >>= (byte)i17;
                    i18 ^= -5;
                    Test.bFld = Test.bFld;
                    Test.iFld = i16;
                    i16 = (int)-31452L;
                    i18 = Test.iFld;
                    Test.iFld >>= Test.iFld;
                }
                break;
            default:
                f3 += i15;
            }
        }
        long meth_res = l + i15 + i16 + by + Double.doubleToLongBits(d2) + i17 + i18 + Float.floatToIntBits(f3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i12) {

        int i13=3, i14=-181, i19=28975, i20=-43008, i21=3, i22=-118, i23=-26887, iArr[]=new int[N];
        double d3=0.8278;

        FuzzerUtils.init(iArr, -7);

        for (i13 = 21; i13 < 342; i13++) {
            i12 += i13;
            lMeth(-244L);
            i14 += i13;
            iArr[i13 + 1] = -49;
        }
        for (d3 = 5; d3 < 132; d3++) {
            for (i20 = 1; i20 < 12; ++i20) {
                Test.instanceCount += 5;
                Test.instanceCount -= 18;
                i14 += i20;
                for (i22 = 1; i22 < 2; ++i22) {
                    i14 -= (int)Test.instanceCount;
                    Test.instanceCount = 3;
                    Test.instanceCount |= i13;
                    Test.instanceCount &= i20;
                }
            }
        }
        long meth_res = i12 + i13 + i14 + Double.doubleToLongBits(d3) + i19 + i20 + i21 + i22 + i23 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2(float f2, int i8, int i9) {

        int i10=-6502, i11=13418, i24=-11;
        short s=-32471;
        double d4=2.73288;

        for (i10 = 4; i10 < 193; i10++) {
            i9 += i10;
            Test.bFld = (Test.bFld = (i8 > (-13 & (Test.iFld + s))));
            iMeth(i9);
            i24 = 1;
            while (++i24 < 8) {
                i11 *= i11;
                d4 = Test.instanceCount;
                Test.iFld += (((i24 * i9) + f2) - Test.instanceCount);
            }
            Test.byFld &= (byte)Test.iFld;
            d4 += i10;
            i9 += i8;
            Test.iFld &= i10;
            if (true) {
                i8 = (int)Test.instanceCount;
                Test.instanceCount += i10;
                vMeth2_check_sum += Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + s + i24 +
                    Double.doubleToLongBits(d4);
                return;
            } else if (Test.bFld) {
                Test.instanceCount += i10;
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + s + i24 + Double.doubleToLongBits(d4);
    }

    public void mainTest(String[] strArr3) {

        float f4=-95.634F, f5=2.207F;
        int i25=-2, i26=11, i27=-8, i28=-12807, i29=16056, i30=8, i31=0, i32=-29224, i33=-52330, iArr1[][]=new
            int[N][N];

        FuzzerUtils.init(iArr1, 72);

        Test.iFld = (-((Test.iFld * Test.iFld) - Test.iFld));
        vMeth2(f4, Test.iFld, Test.iFld);
        i25 = 1;
        do {
            Test.instanceCount = 4L;
            Test.iFld *= Test.sFld;
            i26 = 1;
            while (++i26 < 163) {
                Test.iFld = Test.iFld;
                Test.iFld |= Test.iFld;
                Test.iFld += -48;
                f4 *= -7;
                lArrFld[i26 + 1] += -5;
                for (i27 = 1; 1 > i27; i27 += 2) {
                    Test.iFld += i27;
                    iArr1[i26 - 1][i25] += (int)-71.527F;
                }
                iArr1[i26][i25 + 1] -= i28;
                Test.instanceCount = Test.iFld;
            }
            switch ((((i28 >>> 1) % 1) * 5) + 59) {
            case 60:
                for (i29 = 163; i29 > 9; i29 -= 2) {
                    iArr1[i29][i29 - 1] = i27;
                    i28 += (int)Test.instanceCount;
                    for (i31 = 1; i31 < 3; i31++) {
                        lArrFld[i25 - 1] = Test.instanceCount;
                        i30 &= Test.iFld;
                    }
                    f4 -= f4;
                    for (f5 = 1; f5 < 3; f5++) {
                        i33 = i31;
                        if (Test.bFld) {
                            if (false) continue;
                            lArrFld[(int)(f5 + 1)] = (long)1.765F;
                            lArrFld[(int)(f5)] = i27;
                        } else {
                            i33 = -184;
                        }
                    }
                }
                break;
            default:
                Test.instanceCount -= (long)f4;
            }
        } while (++i25 < 154);

        FuzzerUtils.out.println("f4 i25 i26 = " + Float.floatToIntBits(f4) + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("f5 i33 iArr1 = " + Float.floatToIntBits(f5) + "," + i33 + "," +
            FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld Test.sFld lArrFld = " + Test.byFld + "," + Test.sFld + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth2 ->  vMeth2 mainTest
//DEBUG  iMeth ->  iMeth vMeth2 mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth2 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
