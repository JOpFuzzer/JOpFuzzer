// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1546072685792564718L;
    public static volatile short sFld=-30086;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 7L);
        FuzzerUtils.init(Test.fArrFld, 1.512F);
        FuzzerUtils.init(Test.dArrFld, 1.11964);
    }

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long sMeth1_check_sum = 0;

    public static short sMeth1(int i5) {

        float f3=1.291F;
        int i6=-76, i7=199, i8=30, i9=-203, i10=-36, iArr1[]=new int[N];
        byte by=30;
        double d1=0.25403;

        FuzzerUtils.init(iArr1, -14);

        for (f3 = 22; f3 < 363; f3 += 3) {
            iArr1[(int)(f3)] = by;
            Test.instanceCount += i5;
            Test.lArrFld[(int)(f3)] = -253L;
            i5 *= i5;
        }
        for (i7 = 305; 8 < i7; i7--) {
            d1 = i8;
            i8 /= (int)(i5 | 1);
            if (i8 != 0) {
            }
            for (i9 = 1; i9 < 6; ++i9) {
                i10 = (int)185L;
                iArr1[i7] += (int)1.72245;
                iArr1[i7] -= (int)Test.instanceCount;
                i6 += i8;
                i10 /= (int)(Test.instanceCount | 1);
            }
        }
        long meth_res = i5 + Float.floatToIntBits(f3) + i6 + by + i7 + i8 + Double.doubleToLongBits(d1) + i9 + i10 +
            FuzzerUtils.checkSum(iArr1);
        sMeth1_check_sum += meth_res;
        return (short)meth_res;
    }

    public static short sMeth() {

        int i1=-4, i2=14, i3=-19, i4=-246, i11=53702, i12=-19366, iArr[]=new int[N];
        double d=-5.66670;
        float f2=115.81F;
        boolean b=false;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -16659);
        FuzzerUtils.init(byArr, (byte)107);

        i1 = 1;
        do {
            iArr[(51998 >>> 1) % N] *= (int)(Test.instanceCount * 4L);
            i2 += (int)Test.instanceCount;
            i2 = ((i2++) * (iArr[i1]++));
            d = (++f2);
            f2 += i1;
            byArr[i1] -= (byte)(((++f2) + i1) / ((Test.instanceCount = Math.max(50169, i1)) | 1));
        } while (++i1 < 269);
        if (b) {
            for (i3 = 11; i3 < 300; i3++) {
                i2 += (i3 * i3);
                i4 -= sMeth1(i3);
                Test.lArrFld[i3 - 1] -= i3;
                i11 = 1;
                do {
                    i4 += (((i11 * Test.instanceCount) + i2) - Test.instanceCount);
                    i12 = (int)-558710830L;
                } while (++i11 < 6);
            }
        } else if (true) {
            Test.instanceCount = Test.instanceCount;
        }
        long meth_res = i1 + i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i3 + i4 + i11 + i12 + (b ? 1
            : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(short s) {

        float f1=-1.498F;
        int i=16725, i13=-3, i14=-44437, i15=56638, iArr2[]=new int[N];
        double d2=86.75960;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(iArr2, -11);
        FuzzerUtils.init(byArr1, (byte)-36);

        f1 = (((i--) * i) - (sMeth() - Test.instanceCount));
        i13 = 1;
        while (++i13 < 181) {
            for (i14 = 1; i14 < 9; ++i14) {
                i -= i;
                Test.instanceCount <<= i15;
                Test.dArrFld = Test.dArrFld;
                Test.lArrFld[i13 - 1] = i13;
                try {
                    iArr2[i14] = (i15 % iArr2[i14]);
                    i15 = (-839617476 / i13);
                    i = (i % i15);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = 37892;
                i += (i14 * i14);
                Test.instanceCount = Test.instanceCount;
                d2 = 2;
                do {
                    i = (int)Test.instanceCount;
                    byArr1[(int)(d2 + 1)] -= (byte)i;
                    if (i13 != 0) {
                        vMeth_check_sum += s + Float.floatToIntBits(f1) + i + i13 + i14 + i15 +
                            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr1);
                        return;
                    }
                } while ((d2 -= 3) > 0);
            }
        }
        vMeth_check_sum += s + Float.floatToIntBits(f1) + i + i13 + i14 + i15 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr1);
    }

    public void mainTest(String[] strArr1) {

        float f=-1.337F;
        byte by1=30;
        int i16=-22491, i17=32888, i18=115, i19=5, i20=48, i21=11, i22=161, i23=22614, iArr3[]=new int[N];
        boolean b1=true;
        double d3=0.121276;

        FuzzerUtils.init(iArr3, 1);

        Test.instanceCount *= (long)f;
        vMeth(Test.sFld);
        Test.instanceCount += by1;
        iArr3[(i16 >>> 1) % N] += i16;
        for (i17 = 20; i17 < 393; i17++) {
            i18 += (i17 | by1);
            if (b1) {
                Test.lArrFld[i17 + 1] = i16;
            } else {
                if (b1) break;
            }
            for (i19 = 3; i19 < 68; ++i19) {
                Test.sFld = (short)Test.instanceCount;
                d3 -= i20;
                i20 += (((i19 * f) + f) - i21);
                switch (((i17 % 7) * 5) + 17) {
                case 30:
                    iArr3[i19 - 1] = (int)f;
                    Test.lArrFld[i17 - 1] = i21;
                    i16 -= 0;
                    if (b1) break;
                    break;
                case 20:
                    f = i19;
                    i20 <<= 21;
                case 22:
                    i20 = (int)-30L;
                    if (b1) continue;
                    for (i22 = 1; i22 < 2; i22 += 3) {
                        Test.instanceCount = -17;
                        i18 += i21;
                        by1 = (byte)13683;
                        iArr3[i17 + 1] = (int)Test.instanceCount;
                        i21 *= i23;
                        b1 = true;
                        i23 += (((i22 * f) + i18) - f);
                    }
                    break;
                case 18:
                    f += (i19 * i19);
                    break;
                case 36:
                    Test.instanceCount <<= i16;
                case 31:
                    i18 = 51;
                case 23:
                    i16 += (19270 + (i19 * i19));
                    break;
                }
            }
        }

        FuzzerUtils.out.println("f by1 i16 = " + Float.floatToIntBits(f) + "," + by1 + "," + i16);
        FuzzerUtils.out.println("i17 i18 b1 = " + i17 + "," + i18 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i19 i20 d3 = " + i19 + "," + i20 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.lArrFld = " + Test.instanceCount + "," + Test.sFld +
            "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.fArrFld Test.dArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("sMeth1_check_sum: " + sMeth1_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  sMeth1 ->  sMeth1 sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
