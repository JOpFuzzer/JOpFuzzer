// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2912903177L;
    public static float fFld=0.789F;
    public double dFld=0.76348;
    public static boolean bFld=true;
    public static short sFld=-15487;
    public static float fArrFld[]=new float[N];
    public static volatile int iArrFld[]=new int[N];
    public static volatile long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -33.922F);
        FuzzerUtils.init(Test.iArrFld, 12);
        FuzzerUtils.init(Test.lArrFld, 0L);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, byte by) {

        int i7=11, i8=-3, i9=-11, i10=-19054, i11=-25284, iArr1[][]=new int[N][N];
        float f2=1.751F, f3=0.100F;
        double d=6.57171;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, 2);

        i7 = i7;
        for (f2 = 8; f2 < 351; f2++) {
            for (f3 = 5; f3 > 1; f3--) {
                bArr[(int)(f3)][(int)(f2)] = Test.bFld;
                iArr1[(int)(f3)][(int)(f2 + 1)] = i9;
                i8 += -207;
                Test.fFld = i7;
                for (i10 = 1; i10 < 2; i10++) {
                    Test.fArrFld[i10] *= i11;
                    switch ((i10 % 4) + 25) {
                    case 25:
                        switch (((i10 % 2) * 5) + 86) {
                        case 89:
                            iArr1[(int)(f2 - 1)][(int)(f3 + 1)] = i11;
                            if (i8 != 0) {
                                vMeth_check_sum += l1 + by + i7 + Float.floatToIntBits(f2) + i8 +
                                    Float.floatToIntBits(f3) + i9 + i10 + i11 + Double.doubleToLongBits(d) +
                                    FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
                                return;
                            }
                            break;
                        case 90:
                            iArr1[(int)(f2 - 1)][i10] ^= i9;
                            i7 <<= by;
                            break;
                        default:
                            iArr1[(int)(f3 - 1)] = iArr1[i10];
                        }
                        break;
                    case 26:
                        i9 *= (int)f2;
                    case 27:
                        Test.fFld += (i10 * i10);
                        break;
                    case 28:
                        d -= i10;
                        break;
                    default:
                        i7 = -40623;
                    }
                }
            }
        }
        vMeth_check_sum += l1 + by + i7 + Float.floatToIntBits(f2) + i8 + Float.floatToIntBits(f3) + i9 + i10 + i11 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(float f1) {

        int i12=5909, i13=-40641, i14=14, i15=3, iArr2[]=new int[N];
        float f4=-55.730F;
        long l2=-4313L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -11L);
        FuzzerUtils.init(iArr2, 3);

        vMeth(-7687909298686045094L, (byte)(18));
        for (i12 = 2; i12 < 315; i12++) {
            if (true) {
                Test.instanceCount += i12;
            } else if (Test.bFld) {
                if (Test.bFld) {
                    f4 = 1;
                    while (++f4 < 5) {
                        l2 = 1;
                        do {
                            i13 += (int)(l2 * l2);
                        } while (--l2 > 0);
                        if (i13 != 0) {
                        }
                        if (Test.bFld) break;
                        for (i14 = 1; 1 > i14; ++i14) {
                            i13 += (i14 ^ i15);
                            lArr = lArr;
                            i13 |= i14;
                            Test.instanceCount = i12;
                        }
                    }
                } else {
                    iArr2[i12] &= i12;
                }
            } else {
                i13 = i15;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i12 + i13 + Float.floatToIntBits(f4) + l2 + i14 + i15 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(long l, int i4) {

        int i5=63984, i6=-1, i16=-2, i17=-62256;
        short s=-31868;

        for (i5 = 275; i5 > 4; i5 -= 2) {
            i6 = Math.min(iMeth(Test.fFld), -179);
            i16 = 1;
            while (++i16 < 12) {
                Test.instanceCount >>= 27465;
                i6 = i5;
                i6 = (int)l;
                Test.iArrFld[i16] = i4;
                i4 >>= (int)Test.instanceCount;
                switch (((i5 % 9) * 5) + 127) {
                case 170:
                    i4 -= -11;
                    i6 = (int)Test.instanceCount;
                    break;
                case 167:
                case 157:
                    i17 = 1;
                    while (++i17 < 1) {
                        i6 = i6;
                        Test.iArrFld[i16] += i6;
                        i6 -= i5;
                    }
                    break;
                case 149:
                    s &= (short)18839;
                    break;
                case 158:
                    if (Test.bFld) break;
                case 140:
                    l ^= Test.instanceCount;
                case 166:
                    try {
                        i4 = (-64001 / i16);
                        i6 = (i6 / i17);
                        i6 = (-144 / Test.iArrFld[i16 + 1]);
                    } catch (ArithmeticException a_e) {}
                case 142:
                    l *= Test.instanceCount;
                    break;
                case 163:
                    Test.instanceCount *= i4;
                    break;
                default:
                    i6 -= (int)Test.fFld;
                }
            }
        }
        long meth_res = l + i4 + i5 + i6 + i16 + i17 + s;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=40788, i2=2, i3=-62, i18=-6, i19=-242, i20=-176, i21=-24310, i22=-20, iArr[][]=new int[N][N];
        float f=-28.851F, f5=-3.885F;
        byte by1=-84;

        FuzzerUtils.init(iArr, 74);

        for (i = 205; i > 5; --i) {
            Test.fFld += (i * i);
            i1 >>= Math.max((i + i) + (--i1), Math.max(i, (int)(-(i1 - dFld))));
            i1 >>= (int)(iArr[i][i + 1] - (i1 - (Test.fFld + i1)));
        }
        for (f = 6; f < 278; ++f) {
            i2 <<= i3;
            if ((i1 + iArr[(int)(f)][(int)(f + 1)]) != (lMeth(-6560243023731845469L, i3) * i3)) break;
            for (i18 = (int)(f); 92 > i18; ++i18) {
                for (i20 = 1; i20 < 1; ++i20) {
                    i21 -= i19;
                    i21 += i1;
                    i19 -= 233;
                    by1 += (byte)i20;
                    i21 = (int)Test.instanceCount;
                    Test.lArrFld[(int)(f)][i18] |= by1;
                    Test.iArrFld[i18 - 1] = i1;
                }
                for (f5 = 1; f5 < 1; f5++) {
                    Test.fFld += i18;
                    switch (((i18 % 3) * 5) + 54) {
                    case 56:
                        Test.fFld -= i19;
                        break;
                    case 60:
                        i3 += (int)(f5 * f5);
                        i3 = i19;
                        break;
                    case 65:
                        i2 += (int)f5;
                        break;
                    default:
                        Test.bFld = Test.bFld;
                        i3 += (int)(f5 * i2);
                        Test.instanceCount = Test.instanceCount;
                        i2 += i3;
                    }
                    Test.sFld += (short)i21;
                    Test.fFld = i3;
                    i2 >>= i;
                }
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i2 i3 i18 = " + i2 + "," + i3 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("by1 f5 i22 = " + by1 + "," + Float.floatToIntBits(f5) + "," + i22);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.bFld Test.sFld Test.fArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.sFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
