// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=1119524467L;
    public static float fFld=111.500F;
    public static float fFld1=124.991F;
    public int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.3831);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, int i4) {

        int i5=0, i6=64612, i7=88, iArr1[]=new int[N];
        byte by=-54;
        double d=0.17976;
        long l2=-10795L;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 116.87F);
        FuzzerUtils.init(iArr1, 0);

        i3 = (int)-3601517682L;
        for (i5 = 229; i5 > 4; i5 -= 3) {
            by += (byte)i5;
            fArr[i5 - 1] -= (float)d;
            i3 -= -178;
            i3 *= by;
            for (l2 = 1; l2 < 21; ++l2) {
                d += i5;
                i3 += (int)l2;
                i3 = i7;
                Test.fFld -= 6036L;
                i7 = i7;
                iArr1[i5] = (int)Test.instanceCount;
            }
            i4 = by;
            i4 -= i6;
        }
        vMeth2_check_sum += i3 + i4 + i5 + i6 + by + Double.doubleToLongBits(d) + l2 + i7 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i2, boolean b, short s) {

        int i8=-13, i9=3, i10=57709, i11=-10, iArr[]=new int[N], iArr2[][]=new int[N][N];
        double d1=1.31717;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -2317138045747863286L);
        FuzzerUtils.init(iArr, 184);
        FuzzerUtils.init(iArr2, -20995);
        FuzzerUtils.init(byArr, (byte)53);

        Test.fFld = ((lArr[(i2 >>> 1) % N]--) - iArr[(-27164 >>> 1) % N]);
        vMeth2(i2, i2);
        Test.instanceCount = i2;
        i8 = 1;
        do {
            Test.instanceCount *= i2;
            for (i9 = 1; i9 < 4; ++i9) {
                i11 = 1;
                do {
                    if (b) {
                        i2 -= (int)d1;
                        iArr2 = iArr2;
                    } else {
                        i2 -= (int)Test.instanceCount;
                        i10 *= (int)Test.fFld;
                        i10 >>= (int)Test.instanceCount;
                    }
                    i2 += (int)Test.instanceCount;
                    byArr[i9 + 1] -= (byte)Test.instanceCount;
                } while (++i11 < 2);
            }
        } while (++i8 < 397);
        vMeth1_check_sum += i2 + (b ? 1 : 0) + s + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(byArr);
    }

    public void vMeth(long l, int i1, long l1) {

        boolean b1=true;
        short s1=-12036;
        long l3=-252151545883650204L, lArr1[]=new long[N];
        int i12=-72;
        byte by1=-120;

        FuzzerUtils.init(lArr1, -3201827995L);

        vMeth1(i1, b1, s1);
        i1 += i1;
        lArr1[(i1 >>> 1) % N] = i1;
        for (l3 = 16; 298 > l3; ++l3) {
            i1 = i12;
            iArrFld[(int)(l3 + 1)] *= (int)Test.fFld;
            i1 += (int)(l3 * l3);
            l1 = i1;
            try {
                i1 = (-2079720501 / iArrFld[(int)(l3 + 1)]);
                i1 = (iArrFld[(int)(l3 + 1)] % i12);
                iArrFld[(int)(l3 + 1)] = (i12 % i12);
            } catch (ArithmeticException a_e) {}
            i12 <<= 14;
            i1 = i12;
        }
        by1 = (byte)91.340F;
        vMeth_check_sum += l + i1 + l1 + (b1 ? 1 : 0) + s1 + l3 + i12 + by1 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-88, i13=-30417, i14=-10, i15=-20, i16=-14, i17=-8;
        float f=-21.344F;

        i = (int)f;
        vMeth(Test.instanceCount, i, Test.instanceCount);
        for (i13 = 8; i13 < 249; i13++) {
            Test.instanceCount *= i;
            iArrFld = iArrFld;
            i = i13;
            Test.fFld *= Test.fFld;
            Test.dArrFld[i13] -= 56.613F;
            i14 = i;
        }
        Test.instanceCount >>= i13;
        for (i15 = 10; i15 < 186; ++i15) {
            iArrFld[i15 + 1] <<= i13;
            i17 = 143;
            do {
                if (true) continue;
                i16 = i16;
                Test.fFld -= i13;
            } while (--i17 > 0);
            Test.fFld1 *= i;
            iArrFld[i15 - 1] = i13;
            switch (((i15 % 4) * 5) + 108) {
            case 128:
                Test.dArrFld[i15] = i14;
                i |= i;
                i += (int)Test.fFld;
                i14 -= (int)42.53636;
                break;
            case 119:
                i14 = 0;
                i16 *= (int)Test.instanceCount;
            case 126:
                Test.instanceCount += i13;
                Test.instanceCount += i13;
                Test.instanceCount -= -11;
                Test.instanceCount += (i15 * i15);
            case 117:
                i16 += (((i15 * Test.instanceCount) + Test.instanceCount) - i16);
                break;
            default:
                i -= (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i f i13 = " + i + "," + Float.floatToIntBits(f) + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 = " + i17);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.fFld1 = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Float.floatToIntBits(Test.fFld1));
        FuzzerUtils.out.println("iArrFld Test.dArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
