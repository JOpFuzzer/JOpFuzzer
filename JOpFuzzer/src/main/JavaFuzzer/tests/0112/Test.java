// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-26031L;
    public volatile int iFld=25303;
    public static float fFld=0.336F;
    public static double dFld=-9.24837;
    public byte byFld=115;
    public static int iArrFld[]=new int[N];
    public volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -57);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i10, int i11) {

        int i12=-58625, i13=-204, i14=57569, i15=6, i16=14, i17=-50890, i18=12;
        boolean b=false;

        Test.iArrFld[(i11 >>> 1) % N] >>= i10;
        i12 = 1;
        while (++i12 < 397) {
            if (i10 != 0) {
                vMeth1_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + (b ? 1 : 0);
                return;
            }
        }
        Test.fFld -= i11;
        Test.fFld += -1.160F;
        for (i13 = 19; 363 > i13; i13++) {
            i15 = 1;
            while (++i15 < 5) {
                i10 += i15;
                i10 = i10;
                try {
                    i10 = (i13 / -776836113);
                    Test.iArrFld[i13 + 1] = (i13 / 46113);
                    i16 = (i14 / i16);
                } catch (ArithmeticException a_e) {}
                i14 = i11;
                for (i17 = 1; i17 < 1; ++i17) {
                    Test.instanceCount >>= i15;
                    i14 = i16;
                    if (b) break;
                }
            }
        }
        vMeth1_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + (b ? 1 : 0);
    }

    public static int iMeth(int i7) {

        float f1=0.708F;
        int i8=2, i9=-23587, i19=-11, i20=18402;
        double d1=32.30662, dArr[]=new double[N];
        short s=-13153;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4175700343L);
        FuzzerUtils.init(dArr, 47.32585);

        lArr[(i7 >>> 1) % N] |= (long)(((i7 + i7) - dArr[(i7 >>> 1) % N]) - ((i7 * f1) * (i7 - -32)));
        for (i8 = 17; i8 < 272; ++i8) {
            vMeth1(-57631, 8);
            i9 += (int)Test.fFld;
            Test.instanceCount += i8;
        }
        for (d1 = 255; 6 < d1; --d1) {
            if (b1) {
                i7 <<= i19;
                i9 *= 25407;
            } else if (b1) {
                i19 = (int)Test.instanceCount;
            } else if (b1) {
                Test.dFld -= s;
                Test.dFld -= i8;
                Test.instanceCount += -94;
                b1 = b1;
            }
            i7 += i20;
        }
        long meth_res = i7 + Float.floatToIntBits(f1) + i8 + i9 + Double.doubleToLongBits(d1) + i19 + s + (b1 ? 1 : 0)
            + i20 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, int i1, int i2) {

        double d=2.101707;
        int i3=57, i4=5831, i5=58576, i6=1, i21=14;
        float f=-2.607F;
        short s1=23869;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 36684L);

        d = Test.instanceCount;
        for (i3 = 2; i3 < 220; ++i3) {
            for (i5 = 7; i5 > 1; i5 -= 3) {
                i4 -= (int)(++f);
                iFld = (i2 = 32);
                iMeth(i6);
                Test.instanceCount -= i3;
                i4 += -41491;
                lArr1[i5 + 1] = i5;
            }
            i21 = 1;
            do {
                i1 = (int)Test.instanceCount;
                byFld <<= (byte)i3;
                i += i2;
                byFld += (byte)(((i21 * i5) + Test.instanceCount) - i3);
                s1 += (short)i4;
            } while (++i21 < 7);
        }
        vMeth_check_sum += i + i1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i21
            + s1 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        float f2=12.726F;
        int i22=-53590, i23=66, i24=-18434, i25=12, i26=-56928, i27=-82;
        boolean b2=false;
        short s2=17639, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)23204);

        iFld = (++iFld);
        vMeth(iFld, iFld, iFld);
        for (f2 = 15; f2 < 355; f2++) {
            Test.instanceCount /= (i22 | 1);
            iFld += 53;
            iFld = i22;
            for (i23 = 4; i23 < 74; ++i23) {
                lArrFld[(int)(f2)] &= i23;
                i25 = 1;
                do {
                    Test.instanceCount <<= i25;
                    if (false) {
                        i22 += i25;
                    } else {
                        b2 = b2;
                        Test.instanceCount += (i25 | i24);
                    }
                    iFld *= i23;
                    sArr[i23 + 1] >>= (short)Test.instanceCount;
                    Test.dFld /= -98;
                    Test.fFld *= i22;
                    Test.fFld *= (float)Test.dFld;
                    Test.instanceCount += (long)f2;
                } while (++i25 < 2);
                for (i26 = 1; 2 > i26; ++i26) {
                    i24 = i24;
                    i22 = i26;
                    byFld = (byte)i24;
                    Test.dFld += -1907;
                    s2 += (short)Test.instanceCount;
                    i24 = i25;
                }
                if (b2) continue;
                Test.dFld -= iFld;
                Test.iArrFld[(int)(f2 + 1)] += iFld;
            }
        }

        FuzzerUtils.out.println("f2 i22 i23 = " + Float.floatToIntBits(f2) + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 b2 = " + i24 + "," + i25 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i26 i27 s2 = " + i26 + "," + i27 + "," + s2);
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld byFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + byFld +
            "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
