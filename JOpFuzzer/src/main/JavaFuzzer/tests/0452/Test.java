// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=94L;
    public float fFld=2.849F;
    public static float fFld1=0.969F;
    public static boolean bFld=false;
    public static int iFld=16298;
    public static volatile int iArrFld[][]=new int[N][N];
    public volatile long lArrFld[]=new long[N];
    public static boolean bArrFld[]=new boolean[N];
    public static double dArrFld[][]=new double[N][N];
    public short sArrFld[]=new short[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.dArrFld, 0.109360);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i10, long l, int i11) {

        int i12=-3, i13=18565, i14=-14, i15=-196, i16=-49734;
        byte by=39;
        short s=18612;

        for (i12 = 8; i12 < 224; i12++) {
            by += (byte)(i12 + i10);
            i14 = 1;
            do {
                if (Test.bFld) break;
                by = (byte)i12;
                i10 -= i12;
                for (i15 = i14; i15 < 1; i15++) {
                    long l1=-9056611532493601872L;
                    i11 *= i16;
                    Test.instanceCount = l;
                    i11 = (int)66.908F;
                    l1 /= (i10 | 1);
                }
            } while (++i14 < 7);
            i11 += (i12 * i12);
            Test.fFld1 = s;
            l += i14;
            if (Test.bFld) continue;
        }
        long meth_res = i10 + l + i11 + i12 + i13 + by + i14 + i15 + i16 + s;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        int i7=-41416, i8=-7, i9=67, i17=198, i18=-233;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -70.7628);
        FuzzerUtils.init(lArr, -11L);

        for (i7 = 12; i7 < 226; i7++) {
            i9 = 8;
            while (--i9 > 0) {
                i8 |= (int)(lMeth(i8, Test.instanceCount, 69) * Test.instanceCount);
                i8 += (10412 + (i9 * i9));
                Test.instanceCount = i9;
                switch ((i9 % 4) + 29) {
                case 29:
                    for (i17 = 1; i17 < 1; i17++) {
                        i8 -= (int)Test.instanceCount;
                        i8 -= -19746;
                        Test.iArrFld[i17 - 1][i17 + 1] /= (int)(i18 | 1);
                    }
                    i18 &= i18;
                    break;
                case 30:
                    Test.fFld1 -= Test.instanceCount;
                    Test.fFld1 -= Test.instanceCount;
                    Test.fFld1 = -74L;
                    dArr[i7 - 1] += -19529;
                    break;
                case 31:
                    lArr[i7] = Test.instanceCount;
                    break;
                case 32:
                    try {
                        i8 = (44924 / i8);
                        i8 = (i7 / 24654);
                        i18 = (85 % i17);
                    } catch (ArithmeticException a_e) {}
                    break;
                default:
                    lArr[i7 + 1] -= i18;
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i17 + i18 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i3, int i4) {

        int i5=10429, i6=7, i19=-59, i20=64, i21=56502, i22=-10399, i23=-85;
        boolean b=false;
        double d=-2.48694;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(byArr1, (byte)89);

        for (i5 = 16; i5 < 304; ++i5) {
            b = (((i4++) > (i5 * i3)) || (Test.bArrFld[i5] = (i6 <= i5)));
        }
        Test.fFld1 -= (float)((-(d * i5)) + 44.23648);
        vMeth1();
        for (i19 = 7; i19 < 344; i19++) {
            Test.iArrFld[i19 - 1][i19] -= (int)1074009304L;
            for (i21 = 1; i21 < 5; ++i21) {
                i20 -= i4;
            }
        }
        i23 = 1;
        while (++i23 < 393) {
            byArr1[i23] -= (byte)i22;
            Test.iArrFld[i23][i23 - 1] -= i3;
            d = -4;
            Test.dArrFld = Test.dArrFld;
            i20 += i23;
            Test.fFld1 *= i19;
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i19 + i20 + i21 + i22 + i23 +
            FuzzerUtils.checkSum(byArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-30305, i1=22178, i2=-4, i24=34, i25=73, i26=-44096, i27=7349, i28=8, i29=-67;
        short s2=-27617;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-127);

        for (i = 17; i < 351; i++) {
            i2 /= (int)(((Test.iArrFld[i][i] + Integer.reverseBytes(i1)) - 14799) | 1);
            fFld += (i + fFld);
        }
        i2 *= (int)(((i * Test.instanceCount) * (-51.66711 * (-(-(-byArr[(i >>> 1) % N]))))) - (Test.instanceCount =
            (i2 += -9176)));
        Test.instanceCount = (long)(((i1 + fFld) * (i2 - i2)) - (lArrFld[(i2 >>> 1) % N]--));
        vMeth(45753, i2);
        Test.instanceCount = i;
        i1 &= i2;
        i1 -= (int)Test.instanceCount;
        sArrFld = FuzzerUtils.short1array(N, (short)24575);
        for (i24 = 267; i24 > 3; i24 -= 2) {
            for (i26 = 11; i26 < 190; i26++) {
                short s1=14560;
                i2 = -4;
                s1 += (short)(55.826F + (i26 * i26));
                Test.fFld1 = Test.instanceCount;
                Test.fFld1 += i2;
                Test.instanceCount += (long)fFld;
            }
            Test.iArrFld[i24][i24 + 1] = i26;
            Test.iArrFld[i24][i24 + 1] -= 116;
            s2 *= (short)i1;
            fFld -= i2;
            Test.instanceCount += (((i24 * Test.fFld1) + i28) - fFld);
            Test.iFld = i1;
            i25 += (int)fFld;
            i29 = 1;
            while (++i29 < 190) {
                fArrFld[i29 + 1] = 201;
                Test.instanceCount -= Test.iFld;
                i25 = -100;
                Test.iFld += (-39366 + (i29 * i29));
                if (Test.bFld) break;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 s2 i28 = " + i27 + "," + s2 + "," + i28);
        FuzzerUtils.out.println("i29 byArr = " + i29 + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.fFld1 = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Float.floatToIntBits(Test.fFld1));
        FuzzerUtils.out.println("Test.bFld Test.iFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld Test.bArrFld Test.dArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(Test.bArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("sArrFld fArrFld = " + FuzzerUtils.checkSum(sArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
