// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-17663L;
    public static double dFld=2.42584;
    public static volatile float fFld=-32.501F;
    public static byte byFld=46;
    public static volatile short sFld=-12351;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 87);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        int i13=56218;

        i13 = 64836;
        long meth_res = i13;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(long l, int i10, boolean b) {

        byte by1=-51, byArr[]=new byte[N];
        int i11=-4, i12=13, i14=-51944, i15=190, i16=-14, iArr[][]=new int[N][N];
        float f=0.803F;

        FuzzerUtils.init(byArr, (byte)96);
        FuzzerUtils.init(iArr, 75);

        b = (((1 + (i10 * Test.instanceCount)) > (2L + (by1 - 229L))) && b);
        for (i11 = 5; i11 < 236; i11++) {
            byArr[i11 + 1] = (byte)(fMeth() - l);
            i14 = 1;
            while (++i14 < 7) {
                iArr[i11 - 1][i14 + 1] = i11;
                i10 = i12;
                i10 -= i14;
                if (i10 != 0) {
                    vMeth1_check_sum += l + i10 + (b ? 1 : 0) + by1 + i11 + i12 + i14 + i15 + i16 +
                        Float.floatToIntBits(f) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
                    return;
                }
                for (i15 = 1; i15 < 1; ++i15) {
                    Test.dFld -= 3;
                    Test.dFld += i10;
                    f = i12;
                    f -= i14;
                    l -= (long)f;
                    Test.instanceCount <<= i14;
                }
            }
        }
        vMeth1_check_sum += l + i10 + (b ? 1 : 0) + by1 + i11 + i12 + i14 + i15 + i16 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(int i2, int i3) {

        int i4=59, i5=22, i6=53373, i7=48632, i8=-175, i9=-86, iArr1[][]=new int[N][N];
        byte by=-32;
        short s=-15430;

        FuzzerUtils.init(iArr1, -185);

        for (i4 = 16; i4 < 370; ++i4) {
            i6 = 1;
            while (++i6 < 5) {
                i7 = 1;
                while (++i7 < 1) {
                    Test.instanceCount = (i3++);
                    Test.instanceCount = ((i7 + (7 - (i6 * Test.instanceCount))) + Test.instanceCount);
                    i3 += (i7 * i7);
                    i5 += (i2 % (by | 1));
                    Test.instanceCount += (-((i7 * i2) * Test.instanceCount));
                    s += (short)(i7 + i4);
                }
            }
            i8 = 1;
            do {
                i9 += (int)(-488313172L + (i8 * i8));
                i2 -= (int)(Test.instanceCount - ((i5--) + (i9 >> i6)));
                vMeth1(Test.instanceCount, i7, false);
                iArr1[i8][i4] >>= (int)Test.instanceCount;
                Test.instanceCount = (long)Test.fFld;
            } while (++i8 < 5);
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + by + s + i8 + i9 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-19578, i1=232, i17=28462, i18=-57568, i19=36, i20=1, i21=-26751;
        double d=-2.67314, dArr[]=new double[N];
        boolean b1=true, bArr[]=new boolean[N];
        float fArr[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(dArr, 0.18209);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, -2.11F);
        FuzzerUtils.init(lArr, -30749L);

        for (i = 5; i < 397; ++i) {
            i1 <<= (i1++);
            d += (-(++Test.instanceCount));
            vMeth(i1, 158);
            for (i17 = 1; i17 < 64; i17++) {
                i18 += Test.byFld;
                i19 = 1;
                do {
                    Test.instanceCount = 14L;
                    dArr[i17] -= i;
                    i18 = (int)Test.instanceCount;
                    i1 = i19;
                    Test.instanceCount <<= Test.instanceCount;
                    i18 -= (int)Test.instanceCount;
                    bArr[i19 + 1] = false;
                    Test.instanceCount += (((i19 * i17) + i) - i18);
                } while (++i19 < 2);
                i18 += i17;
                Test.fFld = Test.byFld;
                for (i20 = 1; 2 > i20; i20++) {
                    Test.iArrFld[i20] = (int)Test.dFld;
                    fArr[i17 - 1] *= -25742;
                    lArr[i20] = lArr[i20 - 1];
                    Test.iArrFld[i17 - 1] = i21;
                    try {
                        i1 = (i / Test.iArrFld[i17 - 1]);
                        i1 = (i % -1718622303);
                        i18 = (i1 % i20);
                    } catch (ArithmeticException a_e) {}
                    switch (((i19 >>> 1) % 7) + 41) {
                    case 41:
                        Test.instanceCount = 23070L;
                        lArr[i][i - 1] = i19;
                        break;
                    case 42:
                        d = Test.instanceCount;
                        i21 += (i20 - i19);
                        break;
                    case 43:
                        Test.byFld *= (byte)i21;
                    case 44:
                        i1 += i1;
                        break;
                    case 45:
                        i18 = i1;
                        break;
                    case 46:
                        Test.instanceCount = i20;
                        break;
                    case 47:
                        Test.sFld += (short)i;
                        break;
                    default:
                        if (b1) break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 b1 = " + i20 + "," + i21 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("dArr bArr fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(bArr) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld Test.sFld Test.iArrFld = " + Test.byFld + "," + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
