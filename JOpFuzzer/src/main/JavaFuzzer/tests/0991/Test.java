// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=1442991606L;
    public static boolean bFld=false;
    public static byte byFld=32;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2L);
        FuzzerUtils.init(Test.iArrFld, -9);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i5=9, i6=-11, i7=57994, i8=-3, i9=177, i10=-41342;
        float f1=-20.593F, f2=9.508F, fArr[]=new float[N];
        short s=26722;

        FuzzerUtils.init(fArr, -1.266F);

        i5 += (int)-35.108515;
        i5 = (int)f1;
        i5 += (int)Test.instanceCount;
        for (i6 = 3; i6 < 187; i6++) {
            i8 = 1;
            do {
                switch (((i8 % 6) * 5) + 27) {
                case 37:
                    i7 = i8;
                    for (f2 = 1; f2 < 1; f2++) {
                        int i11=246;
                        i5 += (int)((long)f2 | i7);
                        if (i7 != 0) {
                            vMeth1_check_sum += i5 + Float.floatToIntBits(f1) + i6 + i7 + i8 + Float.floatToIntBits(f2)
                                + i9 + i10 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                        Test.instanceCount <<= 56788;
                        Test.instanceCount = i10;
                        Test.iArrFld[(int)(f2)] = i7;
                        i11 += (8461 + (f2 * f2));
                    }
                    fArr[i8 + 1] = i10;
                    break;
                case 51:
                    i10 += (i8 + s);
                    break;
                case 40:
                    f1 -= -14L;
                case 32:
                    i10 += i5;
                case 33:
                    i10 >>= i9;
                    break;
                case 54:
                    Test.iArrFld[i6 + 1] -= i7;
                    break;
                default:
                    if (Test.bFld) break;
                }
            } while (++i8 < 9);
        }
        vMeth1_check_sum += i5 + Float.floatToIntBits(f1) + i6 + i7 + i8 + Float.floatToIntBits(f2) + i9 + i10 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth() {

        int i3=-2, i4=-16202, i12=30690, i13=-12, i14=0, i15=-182;
        double d1=-1.24280, d2=-57.16739;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (i3 = 17; i3 < 341; i3 += 2) {
            Test.bFld = bArr[i3];
        }
        vMeth1();
        for (d1 = 10; 349 > d1; d1++) {
            Test.instanceCount += (-62 + (d1 * d1));
            i12 = i4;
            Test.iArrFld[(int)(d1)] -= i3;
            i12 += (int)d1;
            Test.iArrFld[(int)(d1 - 1)] /= (int)((long)(d1) | 1);
            for (d2 = 1; d2 < 5; d2++) {
                i4 <<= i12;
                for (i14 = 1; i14 < 2; ++i14) {
                    Test.instanceCount <<= i14;
                    i4 = i13;
                    Test.byFld += (byte)Test.instanceCount;
                }
            }
        }
        long meth_res = i3 + i4 + Double.doubleToLongBits(d1) + i12 + Double.doubleToLongBits(d2) + i13 + i14 + i15 +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i1=13, i2=4, i16=-49669, i17=-16, i18=-24228;
        byte by=49;
        float f=-2.851F;
        double d3=1.123357;

        for (i1 = 11; 221 > i1; ++i1) {
            by = (byte)i1;
            Test.lArrFld[i1 - 1] *= ((long)((i2 - f) - (f - f)) | iMeth());
            for (i16 = 1; 8 > i16; ++i16) {
                f += (i16 * i16);
                i2 = (int)f;
                d3 = 1;
                while (++d3 < 2) {
                    switch ((int)((d3 % 2) + 3)) {
                    case 3:
                        Test.instanceCount |= -46;
                        l += (long)(d3 - i16);
                        break;
                    case 4:
                        i18 += (int)d3;
                        break;
                    }
                    f *= i1;
                    Test.iArrFld[i16] = i18;
                    try {
                        i18 = (3992 % i16);
                        i2 = (i1 % -851890503);
                        i17 = (i16 % 1634753729);
                    } catch (ArithmeticException a_e) {}
                    i17 = 60466;
                }
            }
        }
        vMeth_check_sum += l + i1 + i2 + by + Float.floatToIntBits(f) + i16 + i17 + Double.doubleToLongBits(d3) + i18;
    }

    public void mainTest(String[] strArr1) {

        int i=-73, i19=247, i20=25355, i21=35690, i22=50, i23=-28062, i24=-191, i25=5;
        double d=-2.105124, d4=-2.81887;
        short s1=-23122;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -1.590F);

        i = (int)(Test.lArrFld[(i >>> 1) % N] * (--d));
        vMeth(Test.instanceCount);
        for (float f3 : fArr1) {
            for (i19 = 63; 3 < i19; --i19) {
                i += (i19 | Test.byFld);
                i20 /= (int)(i19 | 1);
                i = i19;
                Test.instanceCount -= s1;
                for (i21 = 1; i21 < 2; ++i21) {
                    Test.instanceCount += (((i21 * i22) + Test.instanceCount) - i);
                    i20 += (int)Test.instanceCount;
                    d -= -37;
                    Test.iArrFld[i21 - 1] += (int)Test.instanceCount;
                    Test.iArrFld[i21 + 1] = (int)Test.instanceCount;
                }
                Test.instanceCount = i21;
                fArr1[i19] += f3;
                Test.iArrFld[i19] >>= i;
                Test.iArrFld[i19 - 1] += i;
            }
            i22 = i20;
            i20 -= i19;
            switch (((i20 >>> 1) % 2) + 15) {
            case 15:
                for (i23 = 2; i23 < 63; ++i23) {
                    i20 += (((i23 * f3) + Test.byFld) - i21);
                    i24 = (int)Test.instanceCount;
                    for (d4 = i23; d4 < 2; ++d4) {
                        i25 += (int)d4;
                        Test.iArrFld[(int)(d4 + 1)] &= i22;
                        i22 = i22;
                        i25 = (int)Test.instanceCount;
                        Test.iArrFld[i23 + 1] = (int)Test.instanceCount;
                    }
                }
                break;
            case 16:
                Test.iArrFld[(56020 >>> 1) % N] = i;
                break;
            }
        }

        FuzzerUtils.out.println("i d i19 = " + i + "," + Double.doubleToLongBits(d) + "," + i19);
        FuzzerUtils.out.println("i20 s1 i21 = " + i20 + "," + s1 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("d4 i25 fArr1 = " + Double.doubleToLongBits(d4) + "," + i25 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.byFld = " + Test.instanceCount + "," + (Test.bFld ?
            1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
