// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4123310828L;
    public static int iFld=210;
    public static volatile boolean bFld=true;
    public static volatile double dFld=-13.105387;
    public static byte byFld=-69;
    public static volatile int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7);
        FuzzerUtils.init(Test.lArrFld, 4082109160L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i7=-216, i8=-30250, i9=41, i10=15017, i11=-7, iArr1[]=new int[N];
        float f1=-31.234F, fArr[]=new float[N];
        short s=3287;

        FuzzerUtils.init(iArr1, -184);
        FuzzerUtils.init(fArr, 0.369F);

        iArr1[(i7 >>> 1) % N] = i7;
        fArr[(i7 >>> 1) % N] = Test.instanceCount;
        for (i8 = 294; i8 > 15; i8--) {
            i7 += i8;
            for (i10 = 1; i10 < 6; i10++) {
                i9 += (int)f1;
                switch ((i10 % 5) + 5) {
                case 5:
                    switch ((i10 % 9) + 20) {
                    case 20:
                        i9 += (((i10 * Test.iFld) + i10) - i9);
                        Test.bFld = false;
                        break;
                    case 21:
                        Test.instanceCount <<= 194L;
                        break;
                    case 22:
                        Test.dFld += Test.instanceCount;
                        break;
                    case 23:
                        iArr1[i10 - 1] = i10;
                        Test.iFld += i9;
                        break;
                    case 24:
                    case 25:
                        f1 += i11;
                        break;
                    case 26:
                        f1 += (i10 - i11);
                    case 27:
                        Test.dFld = Test.dFld;
                        break;
                    case 28:
                        Test.instanceCount &= i11;
                        break;
                    }
                    break;
                case 6:
                    Test.instanceCount -= Test.instanceCount;
                    break;
                case 7:
                    Test.iFld *= i9;
                    break;
                case 8:
                    if (i9 != 0) {
                    }
                    break;
                case 9:
                    Test.iFld -= s;
                    break;
                default:
                    i7 += Test.iFld;
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + s + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(float f, int i5) {

        int i6=-10, i12=2, iArr[]=new int[N];
        long l=-9L;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -185);
        FuzzerUtils.init(bArr, false);

        i6 = 1;
        do {
            f = ((Math.max(i6, i6) + (iArr[i6 + 1]++)) / ((Test.instanceCount--) | 1));
            f += (i6 * i5);
            f += ((lMeth() + i12) * i5);
            l = 1;
            while (++l < 5) {
                iArr[i6 - 1] -= i6;
                iArr = FuzzerUtils.int1array(N, (int)61202);
                if (Test.bFld) break;
                bArr[i6 - 1] = true;
                if (Test.iFld != 0) {
                    vMeth1_check_sum += Float.floatToIntBits(f) + i5 + i6 + i12 + l + FuzzerUtils.checkSum(iArr) +
                        FuzzerUtils.checkSum(bArr);
                    return;
                }
                iArr[i6] = i5;
                i5 -= 225;
            }
            i5 += i6;
            i5 <<= Test.iFld;
            Test.instanceCount -= i5;
        } while (++i6 < 325);
        vMeth1_check_sum += Float.floatToIntBits(f) + i5 + i6 + i12 + l + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(bArr);
    }

    public void vMeth(int i3, boolean b) {

        int i4=42173, i13=148, i14=-14, i15=221, i16=-5;
        float f2=1.206F;
        short s1=26531;

        i4 = 1;
        while (++i4 < 209) {
            vMeth1(f2, i3);
            f2 += (-109 + (i4 * i4));
            Test.instanceCount = -11;
        }
        for (i13 = 3; i13 < 343; ++i13) {
            i3 += (-14 + (i13 * i13));
            for (i15 = 1; i15 < 5; i15++) {
                Test.byFld = (byte)i14;
                try {
                    i3 = (i3 % i14);
                    Test.iFld = (-252 / i16);
                    i16 = (i15 % -110);
                } catch (ArithmeticException a_e) {}
                if (b) break;
                s1 = s1;
                Test.iFld -= (int)Test.instanceCount;
                Test.byFld = (byte)-240;
            }
            Test.iFld = 5;
            Test.instanceCount = -70;
        }
        vMeth_check_sum += i3 + (b ? 1 : 0) + i4 + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + s1;
    }

    public void mainTest(String[] strArr1) {

        int i=10, i1=-9, i2=21, i17=-1, i18=46692, i19=-3, i20=-9, i21=-39627, i22=49500, i23=-48489;
        double d=-95.101800;
        float f3=0.210F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 0.827F);

        i = 1;
        while (++i < 348) {
            for (i1 = 2; i1 < 72; i1++) {
                vMeth(227, Test.bFld);
                i2 += (int)Test.instanceCount;
                i2 = -14572;
            }
            fArr1[i] -= (float)Test.dFld;
            i2 %= (int)(Test.instanceCount | 1);
        }
        for (i17 = 12; i17 < 356; ++i17) {
            fArr1[i17 - 1] = -250;
            i2 += i2;
            i18 >>= Test.iFld;
        }
        for (d = 13; 251 > d; d++) {
            for (i20 = 1; i20 < 106; ++i20) {
                Test.instanceCount += i20;
                Test.iFld += Test.byFld;
                for (i22 = 1; i22 < 2; ++i22) {
                    i19 += (i22 + i2);
                    switch ((i20 % 7) + 123) {
                    case 123:
                        f3 += (i22 + Test.instanceCount);
                        Test.iFld += (int)Test.instanceCount;
                        f3 = i23;
                        Test.instanceCount += (((i22 * i17) + i19) - Test.instanceCount);
                        break;
                    case 124:
                        f3 += i22;
                        Test.dFld = Test.instanceCount;
                        if (Test.bFld) {
                            Test.dFld %= (i23 | 1);
                            fArr1[i20] -= f3;
                        }
                        break;
                    case 125:
                        Test.iArrFld[(int)(d)] += (int)Test.instanceCount;
                        break;
                    case 126:
                        Test.iArrFld[i22] -= i22;
                        if (Test.bFld) continue;
                        break;
                    case 127:
                        i18 -= (int)Test.dFld;
                        break;
                    case 128:
                        Test.instanceCount -= i21;
                        break;
                    case 129:
                        Test.lArrFld[(i1 >>> 1) % N] <<= i;
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i17 i18 d = " + i17 + "," + i18 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 f3 = " + i22 + "," + i23 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld Test.byFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Test.byFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
