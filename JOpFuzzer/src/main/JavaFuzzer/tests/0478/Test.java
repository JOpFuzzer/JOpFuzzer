// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2871881142L;
    public static int iFld=5;
    public static short sFld=636;
    public static long lArrFld[][]=new long[N][N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 50L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l1, int i5, int i6) {

        float f1=0.600F;
        short s1=-10158;
        int i7=6, i8=157, i9=-59599, i10=45, i11=-1, i12=-9, iArr[]=new int[N];
        double d=36.129739;
        byte by=-31;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(lArr1, 8074703971929715L);

        Test.instanceCount += (long)f1;
        iArr[(i5 >>> 1) % N] <<= s1;
        for (i7 = 175; i7 > 2; i7--) {
            l1 += (((i7 * l1) + l1) - i6);
            i9 = 1;
            do {
                i5 += (int)d;
                iArr[i9 + 1] = (int)Test.instanceCount;
                i8 += (((i9 * i7) + i9) - i10);
                for (i11 = 1; i11 < 3; ++i11) {
                    lArr1 = lArr1;
                    f1 -= Test.instanceCount;
                    l1 -= (long)d;
                }
                i6 -= by;
                lArr1[i7] *= 16;
                i6 += (i9 * i9);
            } while ((i9 += 2) < 9);
        }
        long meth_res = l1 + i5 + i6 + Float.floatToIntBits(f1) + s1 + i7 + i8 + i9 + Double.doubleToLongBits(d) + i10
            + i11 + i12 + by + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(boolean b) {

        int i2=9118, i3=13, i4=43925, i13=-56451, i14=48, i15=29020, iArr1[]=new int[N];
        float f=0.129F;
        byte by1=89;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4980254688349820545L);
        FuzzerUtils.init(iArr1, 11);

        for (i2 = 11; 222 > i2; ++i2) {
            if (i3 != 0) {
            }
            for (f = 1; f < 8; f++) {
                i4 ^= Math.min(i3, iMeth1(-14L, i2, i3));
                for (i13 = 1; i13 < 2; ++i13) {
                    i4 += (int)f;
                    try {
                        i3 = (96 / i13);
                        i3 = (i14 / Test.iFld);
                        i4 = (iArr1[i13 - 1] / i13);
                    } catch (ArithmeticException a_e) {}
                }
                i15 = 1;
                do {
                    if (b) {
                        if (b) {
                            i3 += (-2848 + (i15 * i15));
                        }
                        Test.iFld = (int)62568L;
                        Test.instanceCount -= Test.instanceCount;
                    }
                    by1 += (byte)(i15 + i13);
                    iArr1[i15] <<= i15;
                } while (++i15 < 2);
            }
        }
        long meth_res = (b ? 1 : 0) + i2 + i3 + Float.floatToIntBits(f) + i4 + i13 + i14 + i15 + by1 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(short s) {

        int i=86, i1=-2, i16=-100, i17=-18009, i18=-44331, iArr2[][]=new int[N][N];
        boolean b1=true;
        float f2=84.7F;
        byte by2=117;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 60.4843);
        FuzzerUtils.init(iArr2, 9);

        for (i = 14; i < 320; i++) {
            dArr[(i1 >>> 1) % N] = (55489 * iMeth(b1));
            Test.lArrFld = Test.lArrFld;
            iArr2[i][i - 1] -= (int)f2;
            i16 = 1;
            while (++i16 < 5) {
                switch ((i % 8) + 81) {
                case 81:
                    Test.instanceCount += i16;
                    break;
                case 82:
                    Test.iFld = s;
                    break;
                case 83:
                    for (i17 = i; i17 < 1; ++i17) {
                        Test.iFld |= i1;
                        f2 += 19867;
                        f2 = f2;
                    }
                    break;
                case 84:
                    i1 = (int)Test.instanceCount;
                    iArr2[i16 + 1][i] += i;
                    Test.iFld -= Test.iFld;
                    break;
                case 85:
                    i1 >>= (int)Test.instanceCount;
                    break;
                case 86:
                    iArr2[i16 - 1][i16 - 1] += i17;
                    break;
                case 87:
                    dArr = dArr;
                    break;
                case 88:
                    Test.iFld += by2;
                    break;
                }
            }
        }
        vMeth_check_sum += s + i + i1 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) + i16 + i17 + i18 + by2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        float f3=-1.63F, f4=1.1006F;
        int i19=-5, i20=-6, i21=30823, i22=-251, i23=-57576, i24=31016, i25=162, i26=-18663, i27=9, iArr3[][]=new
            int[N][N];
        long l2=-2600940399570189103L;
        byte by3=-60;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr3, -10);
        FuzzerUtils.init(bArr, true);

        vMeth(Test.sFld);
        Test.instanceCount = Test.iFld;
        f3 += Test.instanceCount;
        for (i19 = 3; i19 < 234; i19++) {
            i20 = (int)l2;
            for (i21 = 2; 109 > i21; i21 += 2) {
                double d1=-1.16534;
                i20 += (int)l2;
                Test.iFld *= (int)d1;
                for (i23 = i19; i23 < 3; i23++) {
                    Test.lArrFld[i23 - 1][i23 - 1] >>>= Test.iFld;
                }
                Test.instanceCount = -2662858379L;
                for (i25 = 1; 3 > i25; i25 += 2) {
                    Test.instanceCount = Test.sFld;
                    Test.iFld = by3;
                    iArr3[i25 + 1] = iArr3[i25];
                    i26 += i23;
                    bArr = FuzzerUtils.boolean1array(N, (boolean)true);
                    try {
                        Test.iFld = (-93 / i25);
                        iArr3[i19][i21] = (156 % iArr3[i21][i25 + 1]);
                        i20 = (i25 / -9533);
                    } catch (ArithmeticException a_e) {}
                }
                i20 >>= (int)l2;
                switch (((i22 >>> 1) % 7) + 15) {
                case 15:
                case 16:
                    i24 -= i23;
                    Test.iFld &= (int)Test.instanceCount;
                    sArrFld = sArrFld;
                    switch (((i19 % 6) * 5) + 113) {
                    case 123:
                        i27 = 1;
                        do {
                            switch (((i21 >>> 1) % 10) + 59) {
                            case 59:
                                Test.iFld = Test.iFld;
                                i20 -= (int)l2;
                                iArr3[i21 - 1][i27 + 1] = i25;
                                iArr3[i27][i19 + 1] = i27;
                                break;
                            case 60:
                                f3 = i23;
                                break;
                            case 61:
                                by3 += (byte)Test.iFld;
                                break;
                            case 62:
                                i20 += (84 + (i27 * i27));
                                break;
                            case 63:
                                iArr3[i19][i19] -= (int)l2;
                                break;
                            case 64:
                                i26 -= Test.sFld;
                                break;
                            case 65:
                                Test.lArrFld[i27 - 1][i27] = -2521779254L;
                            case 66:
                                i26 *= i26;
                                break;
                            case 67:
                                i26 += (i27 * i27);
                                break;
                            case 68:
                                Test.sFld = (short)i22;
                                break;
                            default:
                                i22 += i27;
                            }
                        } while (++i27 < 3);
                        break;
                    case 119:
                        f3 -= f3;
                        break;
                    case 142:
                        Test.instanceCount += -44896;
                        break;
                    case 114:
                        i20 += (((i21 * f4) + i19) - f4);
                        break;
                    case 138:
                        i26 += (((i21 * Test.sFld) + i19) - Test.sFld);
                    case 133:
                        i26 += (int)f4;
                        break;
                    default:
                        i24 -= i25;
                    }
                    break;
                case 17:
                    Test.instanceCount = i24;
                    break;
                case 18:
                    i22 += i20;
                    break;
                case 19:
                case 20:
                    f3 += i21;
                    break;
                case 21:
                    i26 |= by3;
                default:
                    iArr3[i19][i21 - 1] += i27;
                }
            }
        }

        FuzzerUtils.out.println("f3 i19 i20 = " + Float.floatToIntBits(f3) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("l2 i21 i22 = " + l2 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 by3 i27 = " + i26 + "," + by3 + "," + i27);
        FuzzerUtils.out.println("f4 iArr3 bArr = " + Float.floatToIntBits(f4) + "," + FuzzerUtils.checkSum(iArr3) + ","
            + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.lArrFld sArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
