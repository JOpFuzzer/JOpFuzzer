// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=14206L;
    public static int iFld=59884;
    public static double dFld=29.32594;
    public static byte byFld=-125;
    public boolean bFld=true;
    public static float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 26.944F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, long l) {

        float f1=-1.282F;
        int i6=-595, i7=-33402, i8=11, i9=-65407, i10=-44746, iArr[][]=new int[N][N], iArr1[][]=new int[N][N];
        double d=7.81086, dArr[]=new double[N];
        boolean b=true;
        short s=28366;

        FuzzerUtils.init(iArr, 1);
        FuzzerUtils.init(iArr1, -240);
        FuzzerUtils.init(dArr, -25.55058);

        iArr[(i5 >>> 1) % N][(Test.iFld >>> 1) % N] = (int)Test.instanceCount;
        for (f1 = 13; f1 < 208; ++f1) {
            switch ((int)((f1 % 8) + 64)) {
            case 64:
                i6 -= i5;
                if (b) {
                    try {
                        i5 = (iArr1[(int)(f1)][(int)(f1 - 1)] / -178);
                        i6 = (Test.iFld / Test.iFld);
                        Test.iFld = (i6 % i5);
                    } catch (ArithmeticException a_e) {}
                    dArr[(int)(f1)] = i6;
                } else if (b) {
                    d += 553;
                    for (i7 = 1; i7 < 8; i7++) {
                        for (i9 = 1; i9 < 2; i9++) {
                            i8 = i9;
                            Test.iFld = i6;
                            i10 *= Test.iFld;
                            i8 >>= (int)l;
                            Test.iFld >>= 12381;
                        }
                    }
                }
            case 65:
                s += (short)f1;
            case 66:
                i5 >>>= (int)l;
                break;
            case 67:
                l = i5;
                break;
            case 68:
                i10 >>= i7;
                break;
            case 69:
                iArr1[(int)(f1)][(int)(f1)] += i8;
                break;
            case 70:
                Test.iFld -= (int)f1;
                break;
            case 71:
            default:
                i5 = Test.iFld;
            }
        }
        long meth_res = i5 + l + Float.floatToIntBits(f1) + i6 + Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + (b ?
            1 : 0) + s + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i1=-11, i2=-29271, i3=90, i4=14, i11=7, i12=41023;
        byte by=-120;
        short s1=-18556;
        float f2=1.71F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 10319L);

        for (i1 = 16; i1 < 278; i1++) {
            for (i3 = 1; i3 < 6; i3++) {
                Test.instanceCount += i3;
                lArr[i1 + 1] <<= Math.abs(iMeth(i1, -6760L) - by);
                Test.fArrFld[i3] *= s1;
            }
            i2 *= (int)f2;
            f2 += i3;
            i4 += (int)(-18009L + (i1 * i1));
            Test.iFld = (int)Test.instanceCount;
            Test.iFld = i2;
            for (i11 = 1; i11 < 6; i11++) {
                Test.iFld *= i2;
                i12 += (-38 + (i11 * i11));
                Test.iFld *= 25791;
                Test.dFld -= -4;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + by + s1 + Float.floatToIntBits(f2) + i11 + i12 +
            FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(float f, int i) {

        long l1=8L;
        int i13=82, i14=1, i15=-1, iArr2[]=new int[N];
        short s2=25221;

        FuzzerUtils.init(iArr2, 10);

        vMeth();
        for (l1 = 232; l1 > 11; l1--) {
            for (i14 = 1; i14 < 7; i14++) {
                i13 += i14;
                s2 += (short)i;
                f = Test.instanceCount;
                switch ((int)((l1 % 1) + 33)) {
                case 33:
                    Test.byFld >>= (byte)Test.instanceCount;
                    i13 <<= Test.iFld;
                    i13 |= (int)Test.instanceCount;
                    Test.fArrFld[(int)(l1 + 1)] = i13;
                default:
                    iArr2[(int)(l1 - 1)] += -95;
                    i15 &= (int)Test.instanceCount;
                }
            }
            iArr2[(int)(l1 - 1)] = (int)Test.dFld;
            s2 += (short)l1;
        }
        long meth_res = Float.floatToIntBits(f) + i + l1 + i13 + i14 + i15 + s2 + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f3=24.170F;
        int i17=-7, i18=62589, i19=5, i20=-114, i21=36, i22=18, i23=-9990, iArr3[][]=new int[N][N], iArr4[]=new int[N];
        long l2=-2L;
        short s3=32721;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr3, 5);
        FuzzerUtils.init(iArr4, 8);
        FuzzerUtils.init(bArr, true);

        Test.iFld = (int)lMeth(f3, Test.iFld);
        iArr3[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] *= (int)Test.instanceCount;
        for (int i16 : iArr4) {
            for (i17 = 63; i17 > 2; i17 -= 2) {
                if (true) break;
                Test.instanceCount *= i17;
            }
            Test.dFld -= Test.instanceCount;
        }
        Test.fArrFld[(i18 >>> 1) % N] += Test.instanceCount;
        iArr4[(144 >>> 1) % N] = -133;
        for (i19 = 4; i19 < 186; i19++) {
            Test.dFld = Test.iFld;
            i21 = 1;
            while (++i21 < 138) {
                Test.byFld ^= (byte)i20;
                for (i22 = 1; i22 < 1; ++i22) {
                    iArr4[i22] *= (int)l2;
                    bArr[i22 - 1] = bFld;
                    iArr4[i21 - 1] += (int)Test.instanceCount;
                    s3 += (short)Test.instanceCount;
                    l2 -= i18;
                    l2 = (long)Test.dFld;
                }
                i20 <<= 5;
                Test.iFld = 28118;
                lArrFld[i19 + 1] = l2;
                Test.iFld = (int)l2;
                lArrFld[i21 - 1] <<= l2;
            }
            Test.iFld = (int)-1.484F;
            i23 += (i19 * i19);
        }
        Test.iFld &= i19;
        f3 %= (i19 | 1);
        l2 += (long)f3;

        FuzzerUtils.out.println("f3 i17 i18 = " + Float.floatToIntBits(f3) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 l2 = " + i22 + "," + i23 + "," + l2);
        FuzzerUtils.out.println("s3 iArr3 iArr4 = " + s3 + "," + FuzzerUtils.checkSum(iArr3) + "," +
            FuzzerUtils.checkSum(iArr4));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld bFld Test.fArrFld = " + Test.byFld + "," + (bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
