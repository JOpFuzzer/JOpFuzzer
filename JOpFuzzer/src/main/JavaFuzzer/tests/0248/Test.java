// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2991817493694667888L;
    public static short sFld=21111;
    public float fFld=-2.813F;
    public static int iFld=-1;
    public static int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];
    public volatile long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -49105);
        FuzzerUtils.init(Test.fArrFld, 13.28F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f, boolean b, byte by) {

        int i3=33931, i4=13, i5=88;
        double d=-120.96861;
        float f1=114.800F;
        short s=-12000;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6L);

        i3 += i3;
        d = 1;
        do {
            lArr[(int)(d + 1)] = -85409423L;
            Test.instanceCount += by;
            f1 = 1;
            do {
                for (i4 = 1; f1 < i4; --i4) {
                    f = Test.instanceCount;
                    Test.instanceCount *= i5;
                    b = true;
                    i5 = -143;
                    by |= (byte)Test.instanceCount;
                    Test.iArrFld[i4][(int)(f1 + 1)] *= -12;
                    i5 *= s;
                }
            } while (++f1 < 8);
        } while (++d < 202);
        Test.iArrFld[(i5 >>> 1) % N][(i3 >>> 1) % N] = (int)Test.instanceCount;
        lArr[(i4 >>> 1) % N] <<= i3;
        vMeth2_check_sum += Float.floatToIntBits(f) + (b ? 1 : 0) + by + i3 + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f1) + i4 + i5 + s + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i1) {

        int i2=12, i6=58437, i7=-1, i8=-210;
        float f2=2.775F;
        boolean b1=true;
        byte by1=-11;
        short s1=20212;

        i2 = 1;
        while (++i2 < 373) {
            vMeth2(f2, b1, by1);
            Test.iArrFld[i2 + 1][i2] += (int)Test.instanceCount;
            by1 &= (byte)-44828;
            Test.instanceCount += (i2 - f2);
            i6 = 1;
            do {
                Test.instanceCount >>= i2;
                Test.iArrFld[i6 + 1][i6 + 1] += s1;
                i1 += (i6 * i6);
            } while ((i6 += 2) < 5);
            for (i7 = 1; i7 < 5; ++i7) {
                i8 = i6;
                i1 += (((i7 * Test.instanceCount) + i6) - i7);
                i8 += (i7 * i7);
                by1 += (byte)(205 + (i7 * i7));
                i1 = i1;
            }
        }
        vMeth1_check_sum += i1 + i2 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + by1 + i6 + s1 + i7 + i8;
    }

    public static void vMeth(int i, long l) {

        int i9=-24877, i10=-250, i11=-65, i12=109;
        float f3=42.967F, f4=-45.750F;
        double d1=-112.119480;

        vMeth1(i);
        for (i9 = 16; i9 < 375; ++i9) {
            i = (int)Test.instanceCount;
            Test.instanceCount = (long)79.281F;
            if (true) break;
            f3 += (i9 * i9);
            i *= (int)l;
        }
        f3 *= i9;
        i10 -= 3;
        Test.instanceCount *= i10;
        for (d1 = 11; d1 < 272; ++d1) {
            for (f4 = 6; f4 > 1; f4--) {
                f3 += 0.1F;
                i12 >>= i10;
                i12 = i12;
            }
        }
        vMeth_check_sum += i + l + i9 + i10 + Float.floatToIntBits(f3) + Double.doubleToLongBits(d1) + i11 +
            Float.floatToIntBits(f4) + i12;
    }

    public void mainTest(String[] strArr1) {

        int i13=-25, i14=-22885, i15=-1, i16=99, i17=-55592, i18=130, i19=12, i20=-138, i21=-9, i22=-9;
        byte by2=-111;
        boolean b2=true;
        double d2=-42.125453;

        vMeth(i13, Test.instanceCount);
        i13 += i13;
        i13 = Test.sFld;
        for (i14 = 2; i14 < 253; i14++) {
            for (i16 = 100; i16 > 1; --i16) {
                i13 += i16;
                by2 = (byte)i14;
                Test.iArrFld[i14] = Test.iArrFld[i14];
                Test.instanceCount = (long)fFld;
                Test.fArrFld[i14 + 1] += 160;
                i15 += (i16 + by2);
            }
            i17 -= (int)Test.instanceCount;
            Test.iArrFld[i14][i14 - 1] = i14;
            Test.instanceCount = Test.sFld;
            i18 = 1;
            do {
                by2 += (byte)(((i18 * i16) + i14) - i17);
                i13 <<= i15;
            } while (++i18 < 100);
            i15 = i13;
            for (i19 = 100; i19 > 5; i19--) {
                lArrFld = lArrFld;
                i21 = 1;
                while (++i21 < 2) {
                    if (b2) continue;
                    i20 = i19;
                    i20 += (int)fFld;
                    i15 = (int)Test.instanceCount;
                    i15 -= (int)d2;
                }
            }
            i22 = 1;
            while (++i22 < 100) {
                Test.instanceCount += (12 + (i22 * i22));
                i20 += (((i22 * i17) + Test.iFld) - i21);
                i13 = i22;
            }
        }

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 by2 = " + i16 + "," + i17 + "," + by2);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 b2 d2 = " + i21 + "," + (b2 ? 1 : 0) + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i22 = " + i22);

        FuzzerUtils.out.println("Test.instanceCount Test.sFld fFld = " + Test.instanceCount + "," + Test.sFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.iFld Test.iArrFld Test.fArrFld = " + Test.iFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
