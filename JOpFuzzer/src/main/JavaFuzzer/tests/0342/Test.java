// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-222L;
    public static volatile long lFld=-7L;
    public static volatile boolean bFld=false;
    public byte byFld=-127;
    public volatile boolean bArrFld[][]=new boolean[N][N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static void vMeth(int i4, int i5) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -62972);

        Test.instanceCount *= (-(Test.instanceCount - (iArr[(i5 >>> 1) % N] *= i5)));
        vMeth_check_sum += i4 + i5 + FuzzerUtils.checkSum(iArr);
    }

    public static byte byMeth() {

        int i11=-10, i12=5, i13=13917, i14=4, i15=7, iArr2[]=new int[N];
        float f1=-1.986F;
        short s1=21371;
        boolean b1=false;

        FuzzerUtils.init(iArr2, -33422);

        for (i11 = 9; i11 < 158; ++i11) {
            long l=3931923641L;
            iArr2[i11] %= (int)((long)(f1) | 1);
            switch ((i11 % 10) + 91) {
            case 91:
            case 92:
                i13 = 1;
                while (++i13 < 11) {
                    i12 = i11;
                    i12 >>>= 16030;
                    switch (((i13 % 5) * 5) + 66) {
                    case 90:
                        i12 += (int)Test.instanceCount;
                        for (i14 = 1; i14 > 1; i14--) {
                            s1 += (short)(i14 * i14);
                            switch (((i13 % 4) * 5) + 41) {
                            case 46:
                            case 45:
                                if (b1) continue;
                                f1 = 10;
                                Test.instanceCount += (i14 - Test.instanceCount);
                                i15 = i12;
                                break;
                            case 53:
                                i15 += i12;
                                break;
                            case 44:
                                i15 = (int)Test.instanceCount;
                                break;
                            }
                        }
                        break;
                    case 89:
                        i15 *= (int)2203716580L;
                        break;
                    case 78:
                        f1 -= i13;
                        break;
                    case 72:
                        i15 -= (int)Test.instanceCount;
                        break;
                    case 74:
                        i15 = i14;
                        break;
                    }
                }
            case 93:
                i15 -= -18150;
            case 94:
                if (b1) break;
                break;
            case 95:
                i15 = 13105;
            case 96:
                f1 += (i11 + i12);
                break;
            case 97:
                l >>= i15;
                break;
            case 98:
                i15 += 14639;
                break;
            case 99:
                i12 *= (int)Test.instanceCount;
                break;
            case 100:
                i15 = i14;
                break;
            default:
                i15 *= (int)Test.lFld;
            }
        }
        long meth_res = i11 + i12 + Float.floatToIntBits(f1) + i13 + i14 + i15 + s1 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth() {

        int i6=4, i7=3, i8=19, i9=129, i10=-190, iArr1[]=new int[N];
        double d1=-2.9712, dArr[]=new double[N];
        byte by=-24;
        short s=6728;
        boolean b=true;

        FuzzerUtils.init(iArr1, 0);
        FuzzerUtils.init(dArr, -8.10223);

        if (b) {
            i6 ^= 5;
            for (i7 = 17; 305 > i7; i7++) {
                for (i9 = 1; 6 > i9; i9++) {
                    float f=84.536F;
                    i8 -= (int)((i6 *= (int)1254123593321037983L) * (--Test.instanceCount));
                    f = (f--);
                    d1 = Math.min(Test.instanceCount++, (long)((++d1) - (Test.instanceCount * Test.instanceCount)));
                    i6 -= (int)(Integer.reverseBytes((int)(d1 - i10)) * (--f));
                    by += (byte)((Math.abs(i8) - Long.reverseBytes(Test.instanceCount)) + ((i10 %= (int)(s | 1)) *
                        (Test.instanceCount--)));
                    by = (byte)(++Test.instanceCount);
                    Test.instanceCount = (long)(iArr1[i9] * dArr[i9 - 1]);
                    try {
                        i10 = (-225 / i6);
                        i8 = (-265048431 / i7);
                        iArr1[i9 + 1] = (44098 % i8);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        iArr1[(46980 >>> 1) % N] += (i10++);
        i8 = byMeth();
        Test.instanceCount <<= Test.lFld;
        long meth_res = i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + by + s + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i2, int i3, double d) {


        vMeth(iMeth(), i3);
        vSmallMeth_check_sum += i2 + i3 + Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i1=0, i16=-27479, i17=6, i18=-1, i19=167;
        double d2=117.8008;
        float f2=32.26F, fArr[]=new float[N];
        short s2=6201;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 26.502F);
        FuzzerUtils.init(lArr, 2254084037L);

        for (i = 5; i < 191; ++i) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(i1, -49778, -74.49678);
            i1 += (int)(1.762F + (i * i));
            Test.instanceCount ^= 32;
            for (i16 = 135; i16 > 8; --i16) {
                i17 = i1;
                d2 += i16;
                i1 &= i1;
                bArrFld[i16 - 1] = bArrFld[i];
                if (true) break;
                Test.instanceCount += (i16 - i);
                f2 += i16;
                for (i18 = 1; 2 > i18; ++i18) {
                    bArrFld[i18 + 1][i - 1] = Test.bFld;
                    i19 -= 50712;
                    f2 += i18;
                    fArr[i + 1] += i;
                    i19 = -11;
                    if (Test.bFld) {
                        Test.lFld -= i19;
                    } else if (Test.bFld) {
                        lArr[i] = (long)f2;
                        i19 -= i17;
                    } else if (Test.bFld) {
                        s2 += (short)(i18 * i16);
                        i1 += (i18 + i17);
                        byFld += (byte)i18;
                        bArrFld[i - 1][i18] = Test.bFld;
                    } else {
                        f2 += 9;
                        i17 += i16;
                        Test.lFld += i18;
                    }
                    i17 += (14 + (i18 * i18));
                }
            }
        }

        FuzzerUtils.out.println("i i1 i16 = " + i + "," + i1 + "," + i16);
        FuzzerUtils.out.println("i17 d2 f2 = " + i17 + "," + Double.doubleToLongBits(d2) + "," +
            Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i18 i19 s2 = " + i18 + "," + i19 + "," + s2);
        FuzzerUtils.out.println("fArr lArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.lFld Test.bFld = " + Test.instanceCount + "," + Test.lFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("byFld bArrFld = " + byFld + "," + FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  byMeth ->  byMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
