// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-6743868284712201788L;
    public volatile short sFld=30119;
    public float fFld=-2.41F;
    public static boolean bFld=false;
    public static double dFld=51.55853;
    public static float fFld1=1.343F;
    public static volatile byte byFld=-85;
    public static long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -14L);
    }

    public static long bMeth_check_sum = 0;
    public static long bMeth1_check_sum = 0;
    public static long bMeth2_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static boolean bMeth(int i5, int i6, int i7) {

        int iArr1[]=new int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -10);
        FuzzerUtils.init(dArr, 0.47529);

        i7 -= (int)(iArr1[(-133 >>> 1) % N] * (2.656F + (dArr[(i6 >>> 1) % N]++)));
        long meth_res = i5 + i6 + i7 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(int i11, long l2) {

        int i12=175, i13=-13450, i14=38232, i15=-3, i16=24535, iArr3[]=new int[N];
        long l3=-10L;
        float f=55.999F, f1=-16.917F;

        FuzzerUtils.init(iArr3, 245);

        for (i12 = 7; i12 < 238; ++i12) {
            for (l3 = 1; l3 < 7; l3++) {
                f += (((l3 * i12) + i12) - i12);
                if (Test.bFld) break;
                i13 *= i13;
                i14 = (int)Test.dFld;
                i11 += (int)(l3 * i11);
                Test.dFld = 147L;
                l2 = (long)f1;
            }
            for (i15 = 1; 7 > i15; ++i15) {
                Test.instanceCount >>= Test.instanceCount;
                f1 = (float)Test.dFld;
                iArr3[i15] *= i11;
                try {
                    iArr3[i12] = (136 / i15);
                    i14 = (18902 / i15);
                    iArr3[i15 - 1] = (-1753996676 % i11);
                } catch (ArithmeticException a_e) {}
                i16 = i16;
            }
        }
        vMeth_check_sum += i11 + l2 + i12 + i13 + l3 + i14 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i15 +
            i16 + FuzzerUtils.checkSum(iArr3);
    }

    public static boolean bMeth2(byte by, long l1) {

        int i10=-178, i17=-52454, i18=-5, i19=-44844, iArr2[]=new int[N];
        short s1=-20276;
        boolean bArr1[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -104);
        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(lArr, 4L);

        i10 -= (int)((l1 + (i10 - i10)) * (iArr2[(i10 >>> 1) % N]++));
        i10 -= i10;
        bArr1[(i10 >>> 1) % N] = (bArr1[(i10 >>> 1) % N] = ((++by) >= i10));
        vMeth(-4156, 2590259321L);
        i10 *= (int)Test.fFld1;
        i17 = 1;
        while (++i17 < 311) {
            switch (((i10 >>> 1) % 1) + 48) {
            case 48:
                if (Test.bFld) {
                    i10 %= (int)(i10 | 1);
                    for (i18 = 5; i18 > i17; i18--) {
                        s1 *= (short)9L;
                        iArr2[i17 - 1] = i18;
                        if (Test.bFld) {
                            lArr[i17 - 1] = i19;
                            i10 -= (int)Test.fFld1;
                        } else {
                            i10 += 29383;
                        }
                    }
                } else if (Test.bFld) {
                    Test.bFld = Test.bFld;
                } else if (Test.bFld) {
                    i10 += (((i17 * i17) + i17) - i18);
                }
            }
        }
        long meth_res = by + l1 + i10 + i17 + i18 + i19 + s1 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(bArr1) + FuzzerUtils.checkSum(lArr);
        bMeth2_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static boolean bMeth1() {

        double d1=-2.110552, d2=4.73599;
        int i8=12, i9=-208, i20=223, i21=-6, i22=252, i23=-186, iArr4[]=new int[N];
        short s=-10851, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-4392);
        FuzzerUtils.init(iArr4, 56230);

        sArr = (sArr = (sArr = sArr));
        d1 += (((i8 * s) + (13 + (i8 + d1))) - i8);
        i9 = 1;
        while (++i9 < 372) {
            if (bMeth2(Test.byFld, Test.instanceCount)) continue;
            for (i20 = 1; 5 > i20; i20++) {
                i21 += (i20 * i20);
                Test.instanceCount += i8;
                Test.byFld >>= (byte)i8;
                iArr4[i20 - 1] -= i8;
                i21 *= s;
                for (d2 = 1; d2 < 2; d2++) {
                    switch (i20 % 2) {
                    case 0:
                        Test.fFld1 *= Test.fFld1;
                        Test.instanceCount += (long)(d2 * i8);
                        i22 -= i9;
                        break;
                    case 1:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    default:
                        iArr4[i9] *= i23;
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i8 + s + i9 + i20 + i21 + Double.doubleToLongBits(d2) + i22 + i23
            + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr4);
        bMeth1_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-89, i1=-35, i2=14, i3=21303, i4=-27801, i24=66, i25=62970, i26=-45987, i27=58615, i28=-13895, iArr[]=new
            int[N];
        long l=-111L;
        double d=-41.125145;
        boolean b=false, b1=false, bArr[]=new boolean[N];
        float fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr, -40.605F);
        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr, (byte)-39);

        Test.lArrFld = (Test.lArrFld = (Test.lArrFld = (Test.lArrFld = FuzzerUtils.long1array(N,
            (long)-5238998251566685342L))));
        for (i = 254; i > 15; --i) {
            for (i2 = 4; i2 < 105; i2++) {
                l = 1;
                do {
                    sFld *= (short)(--fArr[(int)(l - 1)]);
                    fFld += (iArr[(int)(l + 1)] + ((-(-Math.abs(i1))) * (sFld - i4)));
                    if (bArr[(int)(l + 1)] = bMeth((int)(-64 * (l + d)), i1--, (int)(Math.min(7, i3) | l))) continue;
                    b = (Test.bFld = bMeth1());
                    i4 *= i3;
                    i3 -= (int)Test.instanceCount;
                    Test.byFld += (byte)(l - i3);
                    i1 = i3;
                } while (++l < 2);
                dArrFld[i2 - 1] = d;
                byArr[i2 - 1] -= (byte)i1;
                Test.dFld += i2;
                i3 = (int)-51057L;
                i24 = i;
                i1 += (i2 ^ i1);
            }
        }
        i25 = 1;
        do {
            i26 = 1;
            while (++i26 < 116) {
                i3 *= i4;
                for (i27 = 1; i27 < 1; i27 += 3) {
                    try {
                        iArr[i25 - 1] = (i2 / 201);
                        i28 = (i27 % -28846);
                        i24 = (i26 / -96496604);
                    } catch (ArithmeticException a_e) {}
                    if (false) {
                        Test.lArrFld[i27 + 1] -= -17133;
                        dArrFld[i27 + 1] = l;
                        i4 >>= i;
                        if (b1) continue;
                    } else if (b) {
                        i24 += (12566 + (i27 * i27));
                        i24 -= i2;
                    } else if (true) {
                        i3 &= (int)Test.instanceCount;
                    }
                }
            }
        } while (++i25 < 217);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 l i4 = " + i3 + "," + l + "," + i4);
        FuzzerUtils.out.println("d b i24 = " + Double.doubleToLongBits(d) + "," + (b ? 1 : 0) + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 b1 fArr = " + i28 + "," + (b1 ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("iArr bArr byArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(bArr) +
            "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount sFld fFld = " + Test.instanceCount + "," + sFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.bFld Test.dFld Test.fFld1 = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld1));
        FuzzerUtils.out.println("Test.byFld Test.lArrFld dArrFld = " + Test.byFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth2_check_sum: " + bMeth2_check_sum);
        FuzzerUtils.out.println("bMeth1_check_sum: " + bMeth1_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  bMeth1 ->  bMeth1 mainTest
//DEBUG  bMeth2 ->  bMeth2 bMeth1 mainTest
//DEBUG  vMeth ->  vMeth bMeth2 bMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
