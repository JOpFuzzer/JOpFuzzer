// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=23389L;
    public boolean bFld=false;
    public float fFld=62.813F;
    public static int iFld=-12;
    public long lFld=1663323896L;
    public short sFld=17064;
    public static double dFld=1.106686;
    public static volatile byte byFld=117;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[][]=new float[N][N];
    public volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -18);
        FuzzerUtils.init(Test.fArrFld, 68.989F);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i8=3, i9=9, i10=45425, i11=-12, i12=44188, iArr1[]=new int[N];
        boolean b=true;
        float f=-1.1014F, f1=-60.572F;

        FuzzerUtils.init(iArr1, 32216);

        Test.instanceCount += Test.instanceCount;
        i8 = 1;
        do {
            if (i8 != 0) {
            }
            i9 = i9;
            iArr1 = iArr1;
            if (b) break;
            i10 -= (int)Test.instanceCount;
            if (false) break;
        } while (++i8 < 185);
        i10 *= i10;
        f -= i10;
        for (f1 = 14; f1 < 287; f1++) {
            f += f1;
            i10 = i8;
            i12 -= 14;
            iArr1 = iArr1;
        }
        long meth_res = i8 + i9 + (b ? 1 : 0) + i10 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i11 + i12 +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i5, byte by) {

        int i6=-95, i7=-1, i13=89, i14=-20476, i15=-219;

        for (i6 = 227; 7 < i6; i6 -= 3) {
            i5 -= iMeth1();
            i7 -= i7;
            i7 += i7;
            i7 += -246;
        }
        fFld *= Test.instanceCount;
        i7 -= (int)Test.instanceCount;
        i13 = 1;
        while (++i13 < 225) {
            i5 >>= i6;
            for (i14 = 1; i14 < 7; ++i14) {
                Test.instanceCount *= i6;
                i15 <<= i7;
                i5 *= i6;
                i5 += (i14 * i14);
                Test.iArrFld[i14 - 1] >>= (int)Test.instanceCount;
            }
        }
        long meth_res = i5 + by + i6 + i7 + i13 + i14 + i15;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth() {

        short s=-29551;
        byte by1=-122;
        int i16=54759, i17=-40944, i18=-75, i19=13, i20=13, i21=9, i22=-100;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.85017);

        s *= (short)iMeth(Test.iFld, by1);
        for (i16 = 15; i16 < 245; i16++) {
            lFld += i17;
            Test.iArrFld[i16] = (int)fFld;
        }
        dArr[(17958 >>> 1) % N] = lFld;
        for (i18 = 6; i18 < 176; i18++) {
            i20 = 1;
            while (++i20 < 9) {
                for (i21 = 1; i21 < 1; ++i21) {
                    switch ((i21 % 3) + 27) {
                    case 27:
                        i19 &= i22;
                        if (bFld) break;
                        i22 -= (int)fFld;
                        break;
                    case 28:
                    case 29:
                        if (bFld) break;
                        i19 += (int)lFld;
                        break;
                    default:
                        i19 += (i21 | i21);
                    }
                }
            }
        }
        long meth_res = s + by1 + i16 + i17 + i18 + i19 + i20 + i21 + i22 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-177, i1=13, i2=14, i3=-2, i4=-174, i23=-17067, i24=-17268, i25=189, i26=119, iArr[]=new int[N];
        double d=1.114189;

        FuzzerUtils.init(iArr, -249);

        for (i = 5; i < 143; ++i) {
            for (d = 2; d < 182; d += 2) {
                if (bFld) break;
                fFld -= (Test.instanceCount * ((iArr[(int)(d - 1)]--) - Math.abs(i)));
                iArr = (iArr = (iArr = iArr));
                i1 = (int)d;
                for (i3 = 1; i3 < 3; i3++) {
                    i1 ^= (int)(-9 * Test.instanceCount);
                    i1 += (-10 + (i3 * i3));
                    Test.instanceCount *= (long)((--fFld) - (Integer.reverseBytes(i4) + (~(long)(fFld + 48377))));
                    i2 += (int)lMeth();
                    sFld *= (short)-34;
                    i4 = sFld;
                    i1 >>= (int)Test.instanceCount;
                    lFld >>= i1;
                    Test.fArrFld[(int)(d + 1)][(int)(d)] = 254L;
                }
                fFld *= i1;
                Test.instanceCount += (long)(((d * fFld) + i) - i1);
                i1 += (-239 + (d * d));
                Test.instanceCount += (long)(d + sFld);
                i1 *= 1;
            }
            Test.dFld = Test.iFld;
            for (i23 = 9; 182 > i23; i23++) {
                iArr[i] -= (int)lFld;
                for (i25 = 1; i25 < 2; i25++) {
                    i26 += (int)62.101772;
                    Test.byFld >>>= (byte)i1;
                    byArrFld[i25 + 1] = (byte)i25;
                    Test.iArrFld = Test.iArrFld;
                    if (false) break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 iArr = " + i26 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount bFld fFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.iFld lFld sFld = " + Test.iFld + "," + lFld + "," + sFld);
        FuzzerUtils.out.println("Test.dFld Test.byFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Test.byFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld byArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
