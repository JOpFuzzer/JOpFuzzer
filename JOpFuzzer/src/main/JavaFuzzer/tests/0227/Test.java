// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-9171826520663872447L;
    public static double dFld=1.40517;
    public static float fFld=-1.998F;
    public byte byFld=-77;
    public static short sFld=-31383;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static volatile double dArrFld[]=new double[N];
    public static int iArrFld1[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -12240);
        FuzzerUtils.init(Test.lArrFld, -4127417715L);
        FuzzerUtils.init(Test.dArrFld, -1.7480);
        FuzzerUtils.init(Test.iArrFld1, 2);
        FuzzerUtils.init(Test.sArrFld, (short)-11167);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=232, i3=1, i4=0, i5=25152;
        boolean b=true;
        double d=-2.91787;
        float f1=-1.106F;

        for (i2 = 2; i2 < 171; i2++) {
            Test.dFld += -9171688050459353485L;
            for (i4 = 1; i4 < 9; i4++) {
                i3 = 9;
                if (b) break;
                switch ((i2 % 4) + 44) {
                case 44:
                case 45:
                    i3 = (int)-32.621F;
                    d = 2;
                    while (--d > 0) {
                        i3 += (int)d;
                        i3 += (int)d;
                    }
                    i5 += i4;
                    break;
                case 46:
                    i3 *= (int)Test.instanceCount;
                    f1 += (i4 - i5);
                    break;
                case 47:
                    try {
                        Test.iArrFld[i2 + 1] = (i2 / 36992);
                        i3 = (i3 / -24);
                        i5 = (i4 / i3);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[i4 - 1] -= i5;
                    break;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + (b ? 1 : 0) + Double.doubleToLongBits(d) + Float.floatToIntBits(f1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i1=-39929, i6=0, i7=80, i8=-33, i9=4, i10=60260;
        float f2=0.792F;

        i1 += Short.reverseBytes((short)(i1 + iMeth()));
        i1 *= i1;
        Test.instanceCount = Test.instanceCount;
        Test.dFld = Test.instanceCount;
        i6 = 1;
        while (++i6 < 232) {
            boolean b1=true;
            i1 += (int)Test.instanceCount;
            switch ((i6 % 8) + 41) {
            case 41:
                if (b1) {
                    for (i7 = i6; i7 < 7; i7++) {
                        Test.iArrFld[i7 + 1] -= i6;
                        Test.fFld = i9;
                        Test.instanceCount = i1;
                    }
                    b1 = b1;
                    Test.fFld += (((i6 * i8) + i7) - i7);
                }
                i9 &= i9;
                break;
            case 42:
                i1 = i6;
                break;
            case 43:
                Test.fFld = (float)-2.41693;
                break;
            case 44:
                if (b1) break;
                break;
            case 45:
                f2 += i10;
                break;
            case 46:
                if (i10 != 0) {
                    vMeth1_check_sum += i1 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + i10;
                    return;
                }
            case 47:
                Test.lArrFld[i6] = i7;
                break;
            case 48:
                i9 = (int)f2;
            }
        }
        vMeth1_check_sum += i1 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + i10;
    }

    public static void vMeth(float f, int i) {

        int i12=28, i13=-9646, i14=14, i15=-9, i16=13, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 4);

        iArr = (iArr = (iArr = (Test.iArrFld = Test.iArrFld)));
        vMeth1();
        i12 = 1;
        do {
            boolean b2=false;
            b2 = b2;
            for (i13 = 1; 7 > i13; ++i13) {
                iArr[i12] = (int)Test.instanceCount;
                Test.instanceCount += (-47555L + (i13 * i13));
                for (i15 = 1; i15 < 2; ++i15) {
                    Test.instanceCount = -2L;
                    i += i15;
                    i14 >>= i12;
                    i = i16;
                    Test.dArrFld[i13] -= Test.instanceCount;
                    i14 = i14;
                    i += (i15 * i15);
                }
            }
        } while (++i12 < 243);
        vMeth_check_sum += Float.floatToIntBits(f) + i + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        long l=8L;
        int i17=69, i18=14, i19=7216, i20=15;
        float f3=-126.267F;
        short s=-9599;
        boolean b3=false;

        vMeth(-22.337F, -95);
        for (l = 13; l < 246; l++) {
            i17 &= i17;
            f3 = 1;
            while (++f3 < 108) {
                Test.instanceCount |= byFld;
                i17 += (int)((long)f3 ^ i17);
                switch ((int)((l % 2) + 115)) {
                case 115:
                    for (i18 = 1; i18 > 1; i18--) {
                        Test.fFld = i19;
                        s = (short)i17;
                        Test.iArrFld1[(int)(l - 1)] = i19;
                        if (b3) {
                            Test.sArrFld[i18] *= (short)-2909190360L;
                            i17 *= (int)Test.dFld;
                            i19 = Test.sFld;
                            Test.iArrFld[i18] += i19;
                        } else if (false) {
                            Test.fFld *= i18;
                            i19 += (i18 - i18);
                        } else if (true) {
                            i20 &= i17;
                            i19 += (((i18 * i17) + byFld) - Test.sFld);
                            i17 = i20;
                        } else {
                            i19 -= (int)f3;
                            i19 -= i17;
                        }
                        i17 -= (int)-3389748081L;
                    }
                    break;
                case 116:
                    i19 += (int)((long)f3 ^ i19);
                    i19 *= i18;
                    i17 += (int)l;
                    Test.instanceCount -= 3L;
                }
                Test.sFld *= (short)i18;
                i20 += (int)f3;
            }
        }

        FuzzerUtils.out.println("l i17 f3 = " + l + "," + i17 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i18 i19 s = " + i18 + "," + i19 + "," + s);
        FuzzerUtils.out.println("i20 b3 = " + i20 + "," + (b3 ? 1 : 0));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("byFld Test.sFld Test.iArrFld = " + byFld + "," + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld Test.dArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld1));
        FuzzerUtils.out.println("Test.sArrFld = " + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
