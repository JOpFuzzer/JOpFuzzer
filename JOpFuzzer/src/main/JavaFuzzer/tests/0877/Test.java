// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=5245756649276612916L;
    public static volatile double dArrFld[]=new double[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.12020);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d1, float f) {

        int i6=-47581, i7=-31213, i8=2, i9=39022, i10=-13543, iArr1[][]=new int[N][N];
        boolean b=false;
        long l=5L;

        FuzzerUtils.init(iArr1, -4);

        i6 *= (int)Test.instanceCount;
        for (i7 = 150; 2 < i7; --i7) {
            Test.dArrFld[i7 - 1] -= f;
            i6 += (((i7 * Test.instanceCount) + Test.instanceCount) - f);
            if (b) break;
            if (false) {
                i6 >>= i7;
                switch ((i7 % 3) + 110) {
                case 110:
                case 111:
                    for (l = 11; l > 1; --l) {
                        Test.instanceCount /= ((long)(f) | 1);
                        i8 *= i6;
                        i10 = 1;
                        while (++i10 < 2) {
                            f += i6;
                            iArr1[i10 - 1][i10 + 1] = (int)Test.instanceCount;
                            i6 += (i10 + i8);
                        }
                    }
                    break;
                case 112:
                    iArr1[i7][i7 + 1] += (int)f;
                    break;
                default:
                    Test.instanceCount += i7;
                }
            } else if (b) {
                i9 += (i7 * i7);
            } else if (b) {
                i8 = (int)d1;
            } else {
                d1 += 30396578003328136L;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i6 + i7 + i8 + (b ? 1 : 0) + l + i9
            + i10 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i5=-6, iArr2[]=new int[N];
        double d2=-110.61501;
        float f1=0.892F;

        FuzzerUtils.init(iArr2, 5);

        i5 = i5;
        vMeth1(d2, f1);
        i5 = (int)Test.instanceCount;
        iArr2[(i5 >>> 1) % N] %= (int)-37L;
        vMeth_check_sum += i5 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth() {

        int i11=6238, i12=-7, i13=7, i14=11, i15=8, iArr3[]=new int[N];
        float f2=-106.107F;
        boolean b1=true;
        byte by=-90, byArr[]=new byte[N];

        FuzzerUtils.init(iArr3, 8);
        FuzzerUtils.init(byArr, (byte)-63);

        vMeth();
        try {
            for (i11 = 3; i11 < 303; i11++) {
                for (i13 = 1; 6 > i13; i13++) {
                    i15 = 1;
                    while (++i15 < 2) {
                        i12 += (69 + (i15 * i15));
                        f2 += i15;
                        try {
                            iArr3[i13] = (i13 % -53856);
                            iArr3[i13 - 1] = (i14 % i13);
                            iArr3[i11 - 1] = (i11 / i14);
                        } catch (ArithmeticException a_e) {}
                        i14 = i13;
                        Test.instanceCount <<= i14;
                        byArr[i11] = (byte)i12;
                        i12 = i11;
                    }
                }
                if (b1) continue;
                i12 = (int)Test.instanceCount;
                iArr3[i11 + 1] = i15;
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            by += (byte)11;
        }
        finally {
            i14 >>= -56;
        }
        long meth_res = i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + by +
            FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=65080, i1=2, i2=2302, i3=185, i4=12, i16=188, i17=13, i18=-11, iArr[][]=new int[N][N];
        double d=-99.9538;
        boolean b2=true;
        float f3=87.336F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1438201859L);
        FuzzerUtils.init(fArr, -92.204F);
        FuzzerUtils.init(iArr, -59151);

        i = 1;
        do {
            for (i1 = 19; 391 > i1; i1++) {
                lArr[i1 - 1] = Test.instanceCount;
                lArr[i] = (-i);
                i2 += (int)Test.dArrFld[i];
                i2 = i1;
            }
            fArr[i] = i1;
            for (i3 = 3; i3 < 391; i3++) {
                i2 = (i4--);
                i2 += (i3 * Test.instanceCount);
            }
            bArrFld[i] = ((i2 *= (int)(d--)) <= 58.688F);
            iArr[i] = (iArr[i + 1] = (iArr[i - 1] = (iArr[i] = iArr[i + 1])));
            Test.instanceCount += (i | i3);
            Test.instanceCount += (-iMeth());
            i16 = 1;
            while (++i16 < 391) {
                if (b2) break;
                i17 = 1;
                do {
                    i2 >>= i;
                    i2 *= i18;
                    try {
                        i4 = (1854184199 / iArr[i + 1][i16 - 1]);
                        i2 = (iArr[(i17 >>> 1) % N][i17 + 1] % -1877958757);
                        i2 = (16 / i2);
                    } catch (ArithmeticException a_e) {}
                    d *= d;
                    iArr[i16 + 1][i] = i16;
                    i18 = 217;
                    iArr[i16][i + 1] = i17;
                    i2 += i17;
                    f3 += i17;
                    i4 += (int)Test.instanceCount;
                } while (++i17 < 1);
                i4 <<= (int)Test.instanceCount;
                iArr[i16 + 1][i] = i;
                if (b2) break;
            }
        } while ((i += 3) < 193);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 d = " + i3 + "," + i4 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i16 b2 i17 = " + i16 + "," + (b2 ? 1 : 0) + "," + i17);
        FuzzerUtils.out.println("i18 f3 lArr = " + i18 + "," + Float.floatToIntBits(f3) + "," +
            FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("fArr iArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dArrFld bArrFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
