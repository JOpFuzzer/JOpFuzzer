// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=12L;
    public static float fFld=-1.10F;
    public static byte byFld=-71;
    public volatile short sFld=2807;
    public static int iArrFld[][]=new int[N][N];
    public static float fArrFld[][]=new float[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -26);
        FuzzerUtils.init(Test.fArrFld, -2.128F);
        FuzzerUtils.init(Test.lArrFld, 27705L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=-6, i3=-173, i4=-5967, i5=-14, i6=-9804, i7=-14820;
        byte by=-45;
        double d=30.8786;

        Test.instanceCount <<= -3;
        for (i2 = 8; 147 > i2; i2++) {
            switch ((((i2 >>> 1) % 2) * 5) + 6) {
            case 16:
                by <<= (byte)1032229629L;
                i3 *= i2;
                Test.fFld += (i2 + i2);
            case 9:
                for (i4 = 1; i4 < 11; i4++) {
                    by = (byte)i3;
                    Test.instanceCount += (i4 ^ i4);
                    i5 += (i4 ^ Test.instanceCount);
                    by += (byte)(i4 - i2);
                    Test.iArrFld = Test.iArrFld;
                }
                for (i6 = 1; i6 < 11; i6++) {
                    i3 += (((i6 * i6) + i4) - Test.instanceCount);
                }
                d = i5;
                break;
            }
        }
        long meth_res = i2 + i3 + by + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i=-8, i1=-11695, i8=6, i9=165, iArr[]=new int[N];
        float f1=-34.355F;
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-20);
        FuzzerUtils.init(lArr, -2130601097631135733L);
        FuzzerUtils.init(iArr, 228);

        i ^= (int)(5622525193265482058L * Long.reverseBytes(Test.instanceCount * i));
        f1 = 1;
        do {
            i1 = 1;
            do {
                byArr[(i1 >>> 1) % N] -= (byte)(--lArr[i1 - 1]);
                iArr = (iArr = (iArr = iArr));
                i = iMeth();
                i -= i1;
                for (i8 = 1; 1 > i8; i8++) {
                    Test.instanceCount += i1;
                    if (i1 != 0) {
                        vMeth1_check_sum += i + Float.floatToIntBits(f1) + i1 + i8 + i9 + FuzzerUtils.checkSum(byArr) +
                            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    Test.iArrFld[(i1 >>> 1) % N] = Test.iArrFld[i8 + 1];
                    i9 += i8;
                    i = i1;
                    i9 += (8 + (i8 * i8));
                }
                Test.fArrFld = FuzzerUtils.float2array(N, (float)0.191F);
            } while (++i1 < 7);
        } while (++f1 < 216);
        vMeth1_check_sum += i + Float.floatToIntBits(f1) + i1 + i8 + i9 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, float f) {

        int i10=-31571, i11=-4, i12=87, i13=-140, i14=5906, i15=-33;
        float f2=-61.1001F;
        boolean b=true;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-29170);

        vMeth1();
        Test.instanceCount *= i10;
        i10 -= (int)Test.fFld;
        Test.instanceCount *= i10;
        if (b) {
            for (f2 = 1; f2 < 368; ++f2) {
                i10 -= i11;
                for (i12 = 1; i12 < 5; i12++) {
                    f = i11;
                    i10 += i12;
                    for (i14 = 1; i14 < 2; i14++) {
                        l = Test.byFld;
                        Test.iArrFld[(int)(f2)][(int)(f2 + 1)] = 6;
                        sArr[(int)(f2)][(int)(f2 - 1)] = (short)l;
                        Test.instanceCount += (long)(-108.292F + (i14 * i14));
                    }
                }
            }
        } else {
            Test.lArrFld[(i14 >>> 1) % N] <<= Test.byFld;
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + i10 + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 + i15 +
            (b ? 1 : 0) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=-43192, i17=63247, i18=70, i19=-222, i20=12, i21=-4, i22=56561;
        double d1=21.11655, d2=-1.60894;
        boolean b1=false;

        vMeth(Test.instanceCount, Test.fFld);
        i16 *= (int)Test.instanceCount;
        i16 -= i16;
        d1 *= i16;
        i16 *= 79;
        switch (((i16 >>> 1) % 4) + 85) {
        case 85:
            for (i17 = 7; i17 < 299; i17++) {
                for (d2 = 1; d2 < 86; d2++) {
                    i16 = 13;
                    i19 = (int)Test.instanceCount;
                    Test.fFld *= Test.fFld;
                    i18 += i18;
                    i20 = 1;
                    do {
                        if (b1) break;
                        b1 = b1;
                        Test.iArrFld[(int)(d2)][i17] = i20;
                        Test.instanceCount += i18;
                        i18 = i18;
                        i19 = i19;
                    } while (++i20 < 2);
                    switch ((int)((d2 % 3) + 3)) {
                    case 3:
                        Test.lArrFld[(int)(d2 - 1)] += i20;
                        for (i21 = 1; i21 < 2; ++i21) {
                            i18 >>>= i21;
                        }
                        i16 -= i18;
                        d1 += i20;
                        break;
                    case 4:
                        i18 &= i18;
                        sFld = (short)i21;
                        break;
                    case 5:
                        i16 += (int)d2;
                        Test.instanceCount += (long)d2;
                        i18 = (int)Test.instanceCount;
                    }
                }
            }
            break;
        case 86:
            Test.instanceCount = i16;
            break;
        case 87:
            i18 /= (int)(i21 | 1);
            break;
        case 88:
            i16 = i16;
        }

        FuzzerUtils.out.println("i16 d1 i17 = " + i16 + "," + Double.doubleToLongBits(d1) + "," + i17);
        FuzzerUtils.out.println("i18 d2 i19 = " + i18 + "," + Double.doubleToLongBits(d2) + "," + i19);
        FuzzerUtils.out.println("i20 b1 i21 = " + i20 + "," + (b1 ? 1 : 0) + "," + i21);
        FuzzerUtils.out.println("i22 = " + i22);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("sFld Test.iArrFld Test.fArrFld = " + sFld + "," + FuzzerUtils.checkSum(Test.iArrFld) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
