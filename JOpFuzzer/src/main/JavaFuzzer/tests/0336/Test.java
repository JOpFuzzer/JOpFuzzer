// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2222496293112011644L;
    public static int iFld=-6;
    public static double dFld=1.84594;
    public long lFld=-841460579L;
    public static boolean bFld=true;
    public byte byFld=96;

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i8, long l) {

        int i10=-10, i11=-125, i12=-4, iArr1[]=new int[N], iArr2[]=new int[N];
        boolean b=true;
        long l1=6374146905213216520L;
        float f1=90.424F;
        short s=-19489;

        FuzzerUtils.init(iArr1, 14);
        FuzzerUtils.init(iArr2, 4);

        for (int i9 : iArr1) {
            for (i10 = 1; i10 < 4; ++i10) {
                double d=-7.85486;
                i11 = (int)Test.instanceCount;
                d += i8;
                l = l;
                Test.instanceCount += (((i10 * Test.iFld) + i10) - i11);
                switch (((i10 % 1) * 5) + 7) {
                case 12:
                    i8 += i10;
                    if (b) break;
                    for (l1 = 1; l1 < 2; l1++) {
                        f1 += s;
                        l += (long)d;
                        i8 = (int)Test.instanceCount;
                        i8 += (int)(((l1 * i9) + f1) - i12);
                        iArr1[(int)(l1 - 1)] /= (int)((long)(f1) | 1);
                    }
                    break;
                default:
                    iArr2[i10] >>>= i11;
                }
            }
        }
        vMeth_check_sum += i8 + l + i10 + i11 + (b ? 1 : 0) + l1 + i12 + Float.floatToIntBits(f1) + s +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public static boolean bMeth(int i7) {

        boolean b1=false;
        int i13=143, i14=7, i15=17216, i16=-20184, i17=-21021;
        short s1=-2885;
        byte by=69;

        vMeth(i7, 1L);
        Test.iFld += 30936;
        b1 = b1;
        Test.dFld = 8;
        Test.iFld = (int)Test.dFld;
        i13 = 1;
        while (++i13 < 251) {
            if (true) {
                for (i14 = 1; 6 > i14; i14 += 2) {
                    Test.instanceCount = i14;
                    for (i16 = 1; i16 < 3; ++i16) {
                        i15 -= Test.iFld;
                        s1 = (short)Test.instanceCount;
                        i15 = i15;
                        by *= (byte)i14;
                        Test.instanceCount *= Test.iFld;
                    }
                }
            } else if (b1) {
                i7 = i7;
            }
        }
        long meth_res = i7 + (b1 ? 1 : 0) + i13 + i14 + i15 + i16 + i17 + s1 + by;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public int iMeth() {

        int i1=254, i2=20, i3=35362, i4=-8244, i5=228, i6=49, iArr[]=new int[N];
        float f=-10.242F;

        FuzzerUtils.init(iArr, 5);

        Test.iFld += Test.iFld;
        for (i1 = 5; 195 > i1; i1 += 3) {
            f = (((++iArr[i1]) - (++Test.iFld)) % ((i2++) | 1));
            f -= (((i2 - Test.instanceCount) + (--iArr[i1])) - Test.iFld);
        }
        for (i3 = 9; i3 < 210; ++i3) {
            for (i5 = 1; i5 < 8; ++i5) {
                i6 += (int)((-51882 - (-(i5 + 186))) + ((-(Test.instanceCount + Test.instanceCount)) + (i5 * i4)));
                if (bMeth(Test.iFld)) break;
                i2 -= (int)9L;
                Test.iFld &= i3;
                i2 += (i5 | i2);
                iArr[i5 + 1] += (int)lFld;
                if (Test.bFld) break;
                f += -2493425951L;
                i4 += (i5 - Test.instanceCount);
            }
        }
        long meth_res = i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=4678, i18=-2, i19=-14, i20=-45768, i21=18357, i22=14, i23=90, i24=-204, i25=-43601, i26=-24581, i27=6,
            iArr3[][]=new int[N][N];
        float f2=120.422F, fArr[]=new float[N];
        double d1=59.77462;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, -1.605F);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr3, 126);

        i *= ((iMeth() - Test.iFld) + 59218);
        Test.iFld = i;
        for (i18 = 5; i18 < 393; ++i18) {
            f2 += -210;
        }
        lFld -= i20;
        i21 = 1;
        while (++i21 < 266) {
            for (i22 = i21; i22 < 94; ++i22) {
                f2 += (i22 - i23);
                for (d1 = 1; d1 < 1; d1 += 3) {
                    if (Test.bFld) break;
                    fArr[(i22 >>> 1) % N] += i;
                    Test.iFld *= (int)lFld;
                    if (Test.bFld) break;
                    bArr[i22 + 1] = true;
                    i20 += (int)lFld;
                    Test.iFld += i24;
                    i24 ^= Test.iFld;
                    i19 = (int)Test.instanceCount;
                }
                Test.iFld += (((i22 * i18) + f2) - f2);
                i19 >>= i24;
            }
            i25 = 94;
            while ((i25 -= 2) > 0) {
                Test.instanceCount %= -2;
                iArr3[i25 - 1][i21 + 1] <<= i23;
                i23 -= Test.iFld;
                i24 = i18;
                Test.iFld = byFld;
                for (i26 = 1; i26 < 2; i26 += 2) {
                    f2 = i25;
                    byFld <<= (byte)i25;
                    f2 += (((i26 * Test.instanceCount) + i20) - i27);
                }
            }
        }

        FuzzerUtils.out.println("i i18 i19 = " + i + "," + i18 + "," + i19);
        FuzzerUtils.out.println("f2 i20 i21 = " + Float.floatToIntBits(f2) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 d1 = " + i22 + "," + i23 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 fArr bArr = " + i27 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("lFld Test.bFld byFld = " + lFld + "," + (Test.bFld ? 1 : 0) + "," + byFld);

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
