// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static volatile boolean bFld=false;
    public double dFld=-2.2379;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -9);
        FuzzerUtils.init(Test.lArrFld, -45671L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i, int i1, long l) {

        int i2=-51322, i3=68, i4=143, i5=-28, iArr[]=new int[N];
        float f=-30.127F;
        byte by=122;
        long lArr[]=new long[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(lArr, 147389104686476874L);
        FuzzerUtils.init(iArr, 166);
        FuzzerUtils.init(sArr, (short)-28186);

        for (i2 = 14; i2 < 316; i2++) {
            lArr = lArr;
            i3 += (43 + (i2 * i2));
            Test.instanceCount |= l;
            f *= i3;
            Test.instanceCount <<= i3;
            iArr[i2] = i2;
            sArr[i2 + 1][i2 - 1] ^= (short)7;
            iArr = iArr;
            for (i4 = 1; i4 < 5; ++i4) {
                i += (i4 * i4);
                Test.bFld = Test.bFld;
                by = (byte)i3;
                i += (i4 * i4);
                i5 = 14;
            }
        }
        vMeth1_check_sum += i + i1 + l + i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + by + FuzzerUtils.checkSum(lArr)
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth() {

        int i6=-10, i7=-40243, i8=4, i9=-53931, i10=-58364;
        float f1=-123.448F;
        double d=-2.52207;
        short s=17088;

        vMeth1(i6, i6, Test.instanceCount);
        for (i7 = 160; i7 > 3; --i7) {
            i6 += (i7 + i8);
            i8 *= i7;
            i6 = i7;
            f1 = i7;
            for (d = 10; d > 1; d--) {
                i9 = i9;
                f1 += (36175 + (d * d));
                i10 = 1;
                do {
                    i9 *= i7;
                    s += (short)(i10 | i6);
                    Test.instanceCount -= (long)f1;
                    i8 += (i10 | Test.instanceCount);
                    i8 += (int)Test.instanceCount;
                } while (++i10 < 2);
            }
        }
        long meth_res = i6 + i7 + i8 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i9 + i10 + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        float f2=0.190F, f3=57.93F, fArr[][]=new float[N][N];
        int i11=-20, i12=113, i13=-21363, i14=-419, i15=1, i16=4, i17=-20;
        short s1=28096;
        double d1=0.92478, dArr[][]=new double[N][N];

        FuzzerUtils.init(fArr, -6.496F);
        FuzzerUtils.init(dArr, 85.85646);

        switch (((iMeth() >>> 1) % 7) + 37) {
        case 37:
            for (f2 = 332; 17 < f2; f2--) {
                for (i12 = 1; i12 < 5; ++i12) {
                    i14 = 1;
                    do {
                        i11 = i12;
                        i13 = i11;
                        f3 -= 30679;
                    } while (++i14 < 2);
                    i11 += i12;
                }
                i11 += (int)(((f2 * i14) + i12) - i14);
                i15 = 1;
                while (++i15 < 5) {
                    for (i16 = 1; i16 > 1; i16--) {
                        i17 -= i11;
                        i17 += i17;
                        i13 = (int)f3;
                        fArr = fArr;
                    }
                }
            }
            break;
        case 38:
            f3 += s1;
        case 39:
        case 40:
            dArr[(i14 >>> 1) % N][(-6 >>> 1) % N] *= f2;
            break;
        case 41:
            i11 = (int)Test.instanceCount;
            break;
        case 42:
            i11 <<= i17;
            break;
        case 43:
            Test.instanceCount >>>= Test.instanceCount;
        default:
            f3 = (float)d1;
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 + Float.floatToIntBits(f3) + i15 + i16 +
            i17 + s1 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i18=0, i19=36, i20=-14, i21=235, i22=21531, i23=-8, i24=199, iArr1[]=new int[N];
        float f4=-2.824F, fArr1[]=new float[N];
        byte by1=27;

        FuzzerUtils.init(fArr1, 0.11F);
        FuzzerUtils.init(iArr1, 78);

        vMeth();
        Test.bFld = Test.bFld;
        i18 = 1;
        while (++i18 < 320) {
            switch (((i18 % 7) * 5) + 121) {
            case 151:
                for (i19 = 4; i19 < 79; ++i19) {
                    f4 += (i19 * Test.instanceCount);
                }
                Test.iArrFld[i18 + 1] -= i20;
                i21 = 79;
                do {
                    for (i22 = 1; i22 < 1; ++i22) {
                        if (true) break;
                        Test.iArrFld[i18] ^= (int)Test.instanceCount;
                        i20 += i23;
                    }
                    if (Test.bFld) {
                        fArr1[i21 + 1] += i22;
                        i23 |= i22;
                        Test.iArrFld[(i22 >>> 1) % N] = (int)Test.instanceCount;
                    } else if (Test.bFld) {
                        dFld -= i19;
                    } else {
                        if (Test.bFld) {
                            Test.instanceCount += -10;
                            i23 += (((i21 * i20) + by1) - Test.instanceCount);
                            i20 -= i20;
                        } else {
                            i23 = -14263;
                            Test.lArrFld = Test.lArrFld;
                            i20 += (-6003 + (i21 * i21));
                            i24 = 1;
                            do {
                                i23 *= i23;
                                i23 += (int)f4;
                                if (false) continue;
                                iArr1[i24] = i24;
                            } while (++i24 < 1);
                        }
                        i20 += i21;
                    }
                } while (--i21 > 0);
                break;
            case 134:
                i20 = i19;
                break;
            case 143:
                Test.instanceCount += i18;
                break;
            case 145:
                i23 /= (int)(Test.instanceCount | 1);
            case 149:
                Test.instanceCount -= i21;
                break;
            case 147:
                Test.lArrFld = Test.lArrFld;
                break;
            case 153:
                Test.instanceCount += i20;
                break;
            default:
                dFld -= f4;
            }
        }

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("f4 i21 i22 = " + Float.floatToIntBits(f4) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 by1 i24 = " + i23 + "," + by1 + "," + i24);
        FuzzerUtils.out.println("fArr1 iArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," +
            FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld dFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0)
            + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
