// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9348L;
    public static volatile boolean bFld=true;
    public static float fFld=0.391F;
    public static volatile int iFld=1;
    public byte byFld=-90;
    public static volatile short sArrFld[][]=new short[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-8563);
        FuzzerUtils.init(Test.fArrFld, 28.565F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4, int i5, int i6) {

        float f=-66.214F;
        byte by=-81;
        double d=-86.48755, dArr[]=new double[N];
        int i7=-34867, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(lArr, -3260786763L);
        FuzzerUtils.init(dArr, -113.30904);

        i5 = 23141;
        Test.instanceCount += 3;
        i5 += i5;
        iArr[(i5 >>> 1) % N] = (int)Test.instanceCount;
        f = -54458;
        Test.instanceCount = -9420;
        Test.instanceCount -= i6;
        i4 = -4;
        switch (((i6 >>> 1) % 7) + 51) {
        case 51:
            i6 %= (int)(by | 1);
            i5 += (int)Test.instanceCount;
            i4 = i5;
            break;
        case 52:
            for (d = 389; d > 4; --d) {
                f = i5;
                i5 += (int)(((d * i5) + i4) - i4);
            }
            break;
        case 53:
            i6 -= (int)40L;
            break;
        case 54:
            iArr[(i7 >>> 1) % N] += i7;
            break;
        case 55:
            f = i5;
            break;
        case 56:
            lArr[(i4 >>> 1) % N] *= Test.instanceCount;
            break;
        case 57:
            f += (float)-1.126671;
            break;
        default:
            dArr[(i7 >>> 1) % N] += i5;
        }
        long meth_res = i4 + i5 + i6 + Float.floatToIntBits(f) + by + Double.doubleToLongBits(d) + i7 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, short s) {

        int i1=-247, i2=0, i3=11, i8=11, iArr1[]=new int[N];
        byte by1=-36;

        FuzzerUtils.init(iArr1, -8);

        Test.bFld = Test.bFld;
        i1 = 1;
        while (++i1 < 341) {
            for (i2 = 1; 5 > i2; i2++) {
                Test.instanceCount *= Math.max(iMeth(i1, i2, i2), i3);
            }
            switch ((i1 % 4) + 104) {
            case 104:
                if (i != 0) {
                    vMeth_check_sum += i + s + i1 + i2 + i3 + i8 + by1 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                i8 = 1;
                while (++i8 < 5) {
                    i += i8;
                    by1 -= (byte)-43571;
                    i += i1;
                    Test.instanceCount += (((i8 * i8) + s) - i1);
                }
                Test.fFld += (i1 + Test.instanceCount);
                break;
            case 105:
                iArr1[i1] <<= (int)Test.instanceCount;
                break;
            case 106:
                iArr1[i1] *= -109;
                i3 = i3;
                break;
            case 107:
                i3 *= 14;
                break;
            }
        }
        vMeth_check_sum += i + s + i1 + i2 + i3 + i8 + by1 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth() {

        short s1=-14089;

        vMeth(Test.iFld, s1);
        vSmallMeth_check_sum += s1;
    }

    public void mainTest(String[] strArr1) {

        int i10=103, i11=-9, i12=8, i13=7, i14=-10, i15=-166, i16=-7, i17=119, i18=-230, iArr2[]=new int[N];
        double d1=16.64500;
        short s2=23906;
        long l=-7L;

        FuzzerUtils.init(iArr2, 59907);

        for (int smallinvoc=0; smallinvoc<294; smallinvoc++) vSmallMeth();
        for (i10 = 6; i10 < 150; ++i10) {
            i11 >>= -45;
            i12 = 1;
            while (++i12 < 174) {
                d1 += 56340;
                byFld |= (byte)i11;
                iArr2[i10 - 1] = i12;
                for (i13 = 1; i13 < 1; i13++) {
                    i14 *= s2;
                    i11 += (i13 * i13);
                    i11 -= (int)Test.instanceCount;
                    Test.sArrFld[i13 - 1][i12 - 1] += (short)Test.instanceCount;
                    try {
                        i14 = (i10 / i11);
                        i11 = (-36979 % i10);
                        Test.iFld = (i10 % i13);
                    } catch (ArithmeticException a_e) {}
                    i11 = (int)Test.instanceCount;
                }
            }
            Test.instanceCount += (i10 * i14);
            for (i15 = 8; 174 > i15; ++i15) {
                iArr2[i15 - 1] *= i16;
                Test.iFld *= 57472;
                Test.iFld = i10;
                for (i17 = i10; i17 < 2; i17++) {
                    byFld += (byte)-10993;
                    i16 += i17;
                    Test.instanceCount ^= 17863;
                    Test.fArrFld[i17] *= i17;
                    Test.fFld = Test.instanceCount;
                }
                Test.fFld += (((i15 * Test.instanceCount) + Test.fFld) - Test.instanceCount);
                switch ((i10 % 3) + 77) {
                case 77:
                    i16 <<= Test.iFld;
                    i18 += 42258;
                    break;
                case 78:
                    i18 = (int)l;
                    break;
                case 79:
                    i14 += (i15 * i15);
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("d1 i13 i14 = " + Double.doubleToLongBits(d1) + "," + i13 + "," + i14);
        FuzzerUtils.out.println("s2 i15 i16 = " + s2 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 l = " + i17 + "," + i18 + "," + l);
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld byFld Test.sArrFld = " + Test.iFld + "," + byFld + "," +
            FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
