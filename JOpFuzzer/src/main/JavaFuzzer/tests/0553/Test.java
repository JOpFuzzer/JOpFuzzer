// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=1153897324409164313L;
    public static int iFld=-118;
    public static short sFld=-11341;
    public volatile int iFld1=-9;
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1376734921L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, float f, int i4) {

        int i5=-106, i6=14, i7=-102, i8=23761, i9=68, i10=-13, iArr[]=new int[N];
        double d=20.86633;

        FuzzerUtils.init(iArr, -96);

        for (i5 = 10; i5 < 306; ++i5) {
            iArr[i5 + 1] -= (int)l;
            i4 = (int)2.990F;
            Test.iFld *= i6;
            try {
                i6 = (i5 / -185370028);
                i6 = (i5 / i6);
                i6 = (i5 / i6);
            } catch (ArithmeticException a_e) {}
            switch (((Test.iFld >>> 1) % 2) + 33) {
            case 33:
                l += (i5 + i5);
                for (i7 = 1; 6 > i7; i7++) {
                    Test.instanceCount += i7;
                    for (i9 = i7; i9 < 2; i9++) {
                        l = i4;
                    }
                    i8 = 76;
                    i4 += -6;
                    iArr[i7] -= i10;
                }
                d -= i6;
                break;
            case 34:
                i6 -= Test.sFld;
                break;
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        float f1=0.884F, fArr[][]=new float[N][N];
        long l1=-13L;
        int i11=-100, i12=-49400, i13=10, i14=-21, i15=119, iArr1[]=new int[N];
        boolean b=false;
        double d1=65.6734;

        FuzzerUtils.init(iArr1, -9438);
        FuzzerUtils.init(fArr, 1.778F);

        Test.iFld = (Math.abs((int)(Test.instanceCount - Test.instanceCount)) * iMeth(Test.instanceCount, f1,
            Test.iFld));
        if (false) {
            for (l1 = 17; l1 < 321; ++l1) {
                for (i12 = 5; 1 < i12; --i12) {
                    iArr1[i12 + 1] = Test.sFld;
                    for (i14 = (int)(l1); i14 < 2; ++i14) {
                        Test.instanceCount -= l1;
                        Test.instanceCount &= i15;
                        i13 = i13;
                        iArr1[(int)(l1)] += i11;
                        b = b;
                        Test.instanceCount += (((i14 * i12) + Test.instanceCount) - Test.iFld);
                        fArr[(int)(l1 - 1)][(int)(l1)] = -181;
                        Test.lArrFld[(int)(l1)] += (long)d1;
                    }
                    iArr1 = FuzzerUtils.int1array(N, (int)-13);
                }
            }
        } else if (b) {
            Test.instanceCount >>= Test.instanceCount;
        } else {
            Test.iFld = i14;
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + l1 + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth() {


        vMeth();
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-215, i1=-56495, i2=-221, i3=-8, i16=-119, i17=-3, i18=32856, i19=59427, i20=-12, i21=1;
        short s=6469;
        boolean b1=true;
        byte by=-76;
        float f2=-114.461F, fArr1[]=new float[N];
        double d2=0.24067;

        FuzzerUtils.init(fArr1, 62.603F);

        i += -10;
        for (i1 = 14; i1 < 259; i1++) {
            i <<= (s--);
            switch ((i1 % 6) + 53) {
            case 53:
                i3 = 1;
                while (++i3 < 103) {
                    for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth();
                    Test.instanceCount *= 4;
                    Test.instanceCount |= -7200;
                    if (b1) continue;
                    i = i;
                }
                switch (((6 >>> 1) % 2) + 87) {
                case 87:
                    i += (((i1 * i3) + Test.iFld) - by);
                    for (i16 = 103; i16 > 3; i16--) {
                        i += (i16 ^ i3);
                        i2 = i1;
                        Test.instanceCount = i3;
                        Test.instanceCount <<= i3;
                        i17 |= i;
                    }
                    for (i18 = 103; 3 < i18; i18--) {
                        for (i20 = i18; i20 < 2; i20++) {
                            f2 += i20;
                            fArr1[i1] += i16;
                            by = (byte)Test.instanceCount;
                            i19 = (int)Test.instanceCount;
                            i -= i;
                            try {
                                i21 = (i1 % Test.iFld);
                                i = (i20 / i19);
                                i = (175 % i20);
                            } catch (ArithmeticException a_e) {}
                            Test.iFld += (i20 + iFld1);
                            by <<= (byte)i16;
                            f2 -= -27729;
                        }
                        Test.iFld &= i21;
                    }
                case 88:
                default:
                    iArrFld[i1] -= (int)d2;
                }
                break;
            case 54:
                iArrFld[i1 - 1] *= iFld1;
                break;
            case 55:
                iArrFld[i1 - 1] = -35;
                break;
            case 56:
                f2 = iFld1;
                break;
            case 57:
                i19 -= (int)Test.instanceCount;
                break;
            case 58:
                i19 >>= (int)Test.instanceCount;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("s i3 b1 = " + s + "," + i3 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("by i16 i17 = " + by + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 f2 d2 = " + i21 + "," + Float.floatToIntBits(f2) + "," +
            Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("iFld1 Test.lArrFld iArrFld = " + iFld1 + "," + FuzzerUtils.checkSum(Test.lArrFld) +
            "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
