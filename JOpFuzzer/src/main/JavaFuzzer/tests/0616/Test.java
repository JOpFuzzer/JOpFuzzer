// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1L;
    public volatile float fFld=0.817F;
    public static float fFld1=-7.228F;
    public static volatile int iFld=-49056;
    public static short sFld=-492;
    public static boolean bArrFld[][]=new boolean[N][N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.lArrFld, 26031L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static void vSmallMeth(long l, int i5) {


        i5 -= (int)(i5 - ((-i5) - (l++)));
        vSmallMeth_check_sum += l + i5;
    }

    public static byte byMeth(long l1, float f) {

        int i16=1, i17=-5, i18=40642, i19=21778, i20=12, i21=-211, iArr2[][]=new int[N][N];
        boolean b=true;
        float f1=0.260F;

        FuzzerUtils.init(iArr2, -4337);

        i16 = 1;
        while (++i16 < 205) {
            byte by=-127;
            Test.iFld >>= by;
            for (i17 = 8; i17 > 1; i17--) {
                Test.bArrFld[i16 + 1][i16 + 1] = b;
                Test.iFld <<= Test.iFld;
            }
            for (i19 = 1; i19 < 8; ++i19) {
                for (f1 = 1; f1 < 2; f1++) {
                    Test.iFld = (int)l1;
                    Test.iFld -= i20;
                    iArr2[(int)(f1)][i16] += i21;
                    Test.sFld += (short)(f1 + i16);
                    if (i17 != 0) {
                    }
                    Test.iFld = Test.iFld;
                }
                Test.fFld1 = i21;
                Test.iFld += (i19 * Test.instanceCount);
            }
        }
        long meth_res = l1 + Float.floatToIntBits(f) + i16 + i17 + i18 + (b ? 1 : 0) + i19 + i20 +
            Float.floatToIntBits(f1) + i21 + FuzzerUtils.checkSum(iArr2);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth1(int i11, int i12, int i13) {

        int i14=178, i15=-63971, i22=1, i23=14, i24=201, i25=-20, i26=45092, i27=90, i28=126, i29=204, i30=-37970,
            iArr1[]=new int[N];
        byte by1=-89;

        FuzzerUtils.init(iArr1, -48878);

        for (i14 = 8; i14 < 339; i14++) {
            iArr1[i14] += (((i15--) + byMeth(Test.instanceCount, Test.fFld1)) + i13);
            for (i22 = i14; i22 < 5; ++i22) {
                if (false) continue;
            }
            iArr1[i14] += (int)Test.fFld1;
            i13 += i14;
            for (i24 = 1; 5 > i24; ++i24) {
                i25 += i25;
            }
            for (i26 = i14; i26 < 5; ++i26) {
                for (i28 = 1; i28 < 1; i28 += 3) {
                    i25 -= i13;
                    iArr1[i28] <<= (int)Test.instanceCount;
                    iArr1[i28 + 1] *= i23;
                    i13 += i28;
                }
                i30 = by1;
            }
        }
        long meth_res = i11 + i12 + i13 + i14 + i15 + i22 + i23 + i24 + i25 + i26 + i27 + i28 + i29 + i30 + by1 +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i10) {

        int i31=12, i32=31941, i33=9, i34=-167, i35=-12, i36=-17549, iArr3[]=new int[N];
        double d=-1.59987;
        boolean b1=false;
        byte by2=63;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr3, 215);
        FuzzerUtils.init(lArr, -8861014340307115038L);

        Test.fFld1 = iMeth1(Test.iFld, Test.iFld, i10);
        i31 = 1;
        while (++i31 < 250) {
            Test.iFld = i10;
        }
        for (i32 = 17; i32 < 357; ++i32) {
            Test.fFld1 += (float)d;
        }
        i34 = 1;
        do {
            switch ((i34 % 10) + 58) {
            case 58:
                iArr3[i34 - 1] = i32;
                break;
            case 59:
                if (b1) break;
                for (i35 = 1; i35 < 8; i35++) {
                    i36 = (int)Test.instanceCount;
                    switch ((i35 % 2) + 10) {
                    case 10:
                        i33 *= by2;
                        i36 >>= i32;
                        i36 *= i32;
                        break;
                    case 11:
                        iArr3[i34 + 1] += 5059;
                        break;
                    default:
                        Test.fFld1 *= (float)d;
                    }
                }
                break;
            case 60:
                lArr[i34 + 1] = i10;
                break;
            case 61:
                Test.instanceCount *= (long)d;
                break;
            case 62:
                Test.sFld += (short)(i34 - Test.instanceCount);
                break;
            case 63:
                Test.fFld1 += i10;
            case 64:
                Test.instanceCount = -3;
                break;
            case 65:
                Test.instanceCount += (0 + (i34 * i34));
                break;
            case 66:
                by2 *= (byte)i10;
                break;
            case 67:
                try {
                    Test.iFld = (i32 % -71);
                    Test.iFld = (i35 % Test.iFld);
                    Test.iFld = (i33 % i32);
                } catch (ArithmeticException a_e) {}
            }
        } while ((i34 += 2) < 383);
        long meth_res = i10 + i31 + i32 + i33 + Double.doubleToLongBits(d) + i34 + (b1 ? 1 : 0) + i35 + i36 + by2 +
            FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=149, i1=-13, i2=0, i3=-199, i4=41125, i6=14, i7=-28337, i8=868, i9=-13, i37=8, iArr[]=new int[N];
        double d1=2.41275;
        byte by3=-61;

        FuzzerUtils.init(iArr, 6);

        i <<= (int)(i <<= (int)Test.instanceCount);
        for (i1 = 2; i1 < 131; ++i1) {
            Test.instanceCount += i1;
            for (i3 = 8; i3 < 194; ++i3) {
                i += i3;
            }
        }
        for (int smallinvoc=0; smallinvoc<175; smallinvoc++) vSmallMeth((--Test.instanceCount) - (-45585 + (--i2)),
            (int)(-fFld));
        iArr[(i4 >>> 1) % N] = i;
        i4 = (-i1);
        for (i6 = 12; i6 < 219; ++i6) {
            for (i8 = 6; 121 > i8; i8++) {
                switch ((i6 % 4) + 49) {
                case 49:
                    fFld *= ((Test.instanceCount--) + iMeth(i9));
                    Test.iFld -= (int)fFld;
                    i9 &= i6;
                    try {
                        i7 = (i % i2);
                        iArr[i6] = (49366 / i);
                        i7 = (Test.iFld / 38855);
                    } catch (ArithmeticException a_e) {}
                case 50:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 51:
                    i37 = 1;
                    while (++i37 < 2) {
                        iArr[i6] = Test.iFld;
                        iArr[i8] += 45548;
                        i9 += (13521 + (i37 * i37));
                        Test.instanceCount <<= -9;
                        iArr[i6 - 1] = i37;
                        i = (int)fFld;
                        d1 = Test.sFld;
                        i4 += (((i37 * Test.instanceCount) + i4) - i1);
                        switch (((i37 % 7) * 5) + 43) {
                        case 56:
                            i9 += (int)Test.instanceCount;
                            Test.lArrFld[i37 - 1] -= i4;
                        case 48:
                            Test.instanceCount += i2;
                            Test.instanceCount = i4;
                            break;
                        case 72:
                            Test.iFld = (int)230L;
                            break;
                        case 47:
                            i9 >>= i37;
                            break;
                        case 52:
                            iArr[i8] >>= (int)Test.instanceCount;
                            break;
                        case 70:
                            by3 += (byte)i37;
                            break;
                        case 64:
                            if (false) break;
                            break;
                        default:
                            Test.instanceCount <<= Test.instanceCount;
                        }
                    }
                    break;
                case 52:
                    i = i3;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i6 = " + i3 + "," + i4 + "," + i6);
        FuzzerUtils.out.println("i7 i8 i9 = " + i7 + "," + i8 + "," + i9);
        FuzzerUtils.out.println("i37 d1 by3 = " + i37 + "," + Double.doubleToLongBits(d1) + "," + by3);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.fFld1 = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Float.floatToIntBits(Test.fFld1));
        FuzzerUtils.out.println("Test.iFld Test.sFld Test.bArrFld = " + Test.iFld + "," + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
