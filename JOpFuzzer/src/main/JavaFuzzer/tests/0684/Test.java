// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2150848343L;
    public short sFld=2398;
    public static float fFld=0.206F;
    public static int iFld=-4;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
        FuzzerUtils.init(Test.sArrFld, (short)-11191);
        FuzzerUtils.init(Test.lArrFld, -141L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4, long l, int i5) {

        int i6=-179, i7=-213, i8=-99, i9=-14506;
        byte by=-45;
        short s=-18540;
        double d1=93.98140;
        float f=83.959F;

        for (i6 = 9; 223 > i6; i6++) {
            i5 = 39239;
            for (i8 = 1; i8 < 8; ++i8) {
                i7 += (i8 ^ i4);
                by += (byte)l;
                Test.fFld -= -29982;
                s = (short)i9;
                i7 *= (int)d1;
                f = 1;
                while (++f < 2) {
                    i7 -= i5;
                    i5 >>>= s;
                    i7 *= (int)Test.instanceCount;
                    Test.iArrFld[(int)(f)] = i7;
                    i4 = -11;
                    Test.instanceCount += (long)(f + i5);
                }
            }
        }
        vMeth_check_sum += i4 + l + i5 + i6 + i7 + i8 + i9 + by + s + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f);
    }

    public static int iMeth1() {

        int i3=-10, i10=11, i11=0, i12=5, i13=14, i14=-9, i15=218, i16=221;
        double d=43.110585;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -112L);

        lArr[(i3 >>> 1) % N] -= ((long)((--d) * (++i3)) & ((-3199482047473298900L + (i3++)) - (i3 * i3)));
        vMeth(-40150, Test.instanceCount, i3);
        for (i10 = 1; i10 < 346; ++i10) {
            try {
                i3 = (-1200279256 % i10);
                Test.iArrFld[i10] = (-44707 % Test.iArrFld[i10 - 1]);
                i11 = (-59629 / i11);
            } catch (ArithmeticException a_e) {}
            i3 *= i10;
            i3 = i10;
        }
        i11 = i12;
        for (i13 = 3; i13 < 247; ++i13) {
            i15 = 1;
            do {
                lArr[i15 + 1] >>= 61106;
                i16 = 1;
                while (--i16 > 0) {
                    switch ((i13 % 1) + 65) {
                    case 65:
                        i3 >>= i12;
                        i3 |= i10;
                    default:
                        Test.instanceCount += i16;
                    }
                }
            } while (++i15 < 7);
        }
        long meth_res = i3 + Double.doubleToLongBits(d) + i10 + i11 + i12 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2) {

        int i17=8709, i18=-11893, i19=-23751;
        boolean b=true;
        byte by1=-27;

        i1 -= i2;
        i1 = ((Test.iArrFld[(i1 >>> 1) % N]++) - iMeth1());
        Test.iArrFld[(i2 >>> 1) % N] += (int)Test.fFld;
        for (short s1 : Test.sArrFld) {
            i17 = 1;
            do {
                if (b) continue;
                for (i18 = 1; i18 < 1; i18++) {
                    Test.instanceCount -= i18;
                }
                Test.lArrFld[i17] += i17;
                by1 += (byte)(i17 | i19);
                i19 |= -13306;
                s1 += (short)i1;
                i1 += (((i17 * Test.instanceCount) + Test.instanceCount) - Test.fFld);
                Test.instanceCount = i1;
            } while (++i17 < 4);
            i19 &= i2;
        }
        long meth_res = i1 + i2 + i17 + (b ? 1 : 0) + i18 + i19 + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-50079, i20=12, i21=63291, i22=-56703, i23=13, i24=-6;
        float f1=-1.1017F, fArr[]=new float[N];
        double d2=2.130114;
        byte by2=12;
        long l1=-5L;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-5325);
        FuzzerUtils.init(fArr, 9.656F);

        sFld = (short)(sArr[(i >>> 1) % N]++);
        i *= iMeth(i, -34296);
        f1 = 243;
        while (--f1 > 0) {
            i = i;
            Test.instanceCount -= sFld;
            Test.iArrFld[(int)(f1)] = -97;
        }
        d2 += i;
        i20 = 1;
        while (++i20 < 291) {
            i = i;
            i += (i20 + i);
            i >>= i20;
            i += (int)Test.instanceCount;
            sFld <<= (short)i20;
            i21 = 86;
            while (--i21 > 0) {
                Test.fFld *= Test.iFld;
                sFld = (short)i21;
            }
            for (i22 = 2; 86 > i22; ++i22) {
                d2 *= -47935;
                switch (((i23 >>> 1) % 7) + 36) {
                case 36:
                    Test.iFld <<= Test.iFld;
                    i23 += (i22 * i22);
                    switch ((((i >>> 1) % 8) * 5) + 40) {
                    case 56:
                        Test.fFld -= by2;
                        Test.instanceCount += (i22 * i22);
                        fArr[i22] = f1;
                        break;
                    case 68:
                    case 67:
                        i <<= i;
                        for (l1 = 1; 2 > l1; l1 += 3) {
                            i24 += -119;
                            Test.iFld >>= i22;
                            if (Test.bFld) continue;
                        }
                        break;
                    case 58:
                        if (Test.bFld) continue;
                        break;
                    case 55:
                        i23 += i20;
                    case 54:
                        i = (int)l1;
                        break;
                    case 71:
                        i -= (int)f1;
                        break;
                    case 77:
                        i -= i23;
                        break;
                    }
                    break;
                case 37:
                    Test.instanceCount &= i21;
                    break;
                case 38:
                    Test.fFld *= Test.instanceCount;
                    break;
                case 39:
                    fArr = fArr;
                case 40:
                    d2 *= -10;
                    break;
                case 41:
                    Test.iFld += (((i22 * i22) + sFld) - i22);
                    break;
                case 42:
                    Test.iFld += (((i22 * i) + i20) - i22);
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i f1 d2 = " + i + "," + Float.floatToIntBits(f1) + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 by2 l1 = " + i23 + "," + by2 + "," + l1);
        FuzzerUtils.out.println("i24 sArr fArr = " + i24 + "," + FuzzerUtils.checkSum(sArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount sFld Test.fFld = " + Test.instanceCount + "," + sFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld Test.bFld Test.iArrFld = " + Test.iFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.sArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
