// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-13L;
    public static boolean bFld=false;
    public static volatile short sFld=14655;
    public float fFld=-76.772F;
    public static boolean bArrFld[]=new boolean[N];
    public static long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];
    public static volatile int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld, -184L);
        FuzzerUtils.init(Test.sArrFld, (short)6862);
        FuzzerUtils.init(Test.iArrFld, -21523);
        FuzzerUtils.init(Test.fArrFld, -29.983F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static void vMeth1(int i4, long l, int i5) {


        i4 = i4;
        vMeth1_check_sum += i4 + l + i5;
    }

    public static int iMeth(double d1, long l1) {

        int i6=169;

        Test.sArrFld[(i6 >>> 1) % N] >>= Short.reverseBytes((short)((Test.instanceCount + i6) * 13359));
        long meth_res = Double.doubleToLongBits(d1) + l1 + i6;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i11) {

        int i12=-10610, i13=-58909, i14=-23879, i15=-10, i16=-3, i17=14, i18=247, i19=5;
        float f=-100.337F;
        byte byArr[]=new byte[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(byArr, (byte)22);
        FuzzerUtils.init(dArr, 1.91879);

        Test.instanceCount |= i11;
        byArr[(i11 >>> 1) % N] -= (byte)i11;
        i11 = i11;
        for (i12 = 4; i12 < 288; i12 += 2) {
            switch (((i12 % 6) * 5) + 111) {
            case 134:
                Test.fArrFld[i12 + 1] -= i11;
                i11 += (((i12 * Test.instanceCount) + i12) - Test.instanceCount);
                for (i14 = 11; i14 > 1; i14--) {
                    i15 *= i12;
                }
                for (i16 = 1; i16 < 11; i16++) {
                    if (i12 != 0) {
                    }
                    for (i18 = 1; 2 > i18; ++i18) {
                        f = -1.914F;
                    }
                }
                break;
            case 119:
                Test.instanceCount >>= i15;
                i11 = (int)1.249F;
                break;
            case 133:
                i19 += i12;
            case 116:
            case 123:
                Test.instanceCount = Test.sFld;
                break;
            case 136:
                dArr[i12 + 1][i12 + 1] -= 4020944167L;
                break;
            }
        }
        long meth_res = i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth1(boolean b) {

        int i7=-57317, i8=2, i9=12, i10=-11484, i22=61072, i23=-7;

        i7 = (Test.iArrFld[(-53557 >>> 1) % N] * ((i7++) * (i7 * i7)));
        i8 = 1;
        do {
            Test.instanceCount -= ((Math.min(Test.instanceCount, Test.instanceCount) + (Test.iArrFld[i8]++)) +
                (--Test.instanceCount));
            for (i9 = 10; 1 < i9; i9 -= 2) {
                Test.instanceCount += (long)(((Test.sFld - Test.instanceCount) * i7) - dMeth(i7));
                for (i22 = i9; i22 < 3; ++i22) {
                    float f1=0.6F;
                    switch ((i9 % 1) + 30) {
                    case 30:
                        Test.lArrFld[i9] = i7;
                        switch ((i22 % 1) + 111) {
                        case 111:
                            Test.instanceCount *= i23;
                            Test.lArrFld[i22 - 1] <<= 227;
                            Test.instanceCount += i23;
                        default:
                            Test.instanceCount = i23;
                        }
                        break;
                    default:
                        Test.instanceCount = (long)f1;
                    }
                    Test.lArrFld[i8] -= i9;
                }
            }
        } while (++i8 < 154);
        long meth_res = (b ? 1 : 0) + i7 + i8 + i9 + i10 + i22 + i23;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(byte by) {

        int i1=-51128, i2=14540, i3=-33520, i24=2, i25=31619, i26=-236;
        double d2=-1.87560, d3=0.96546, dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -101.19532);

        i1 = 1;
        while (++i1 < 309) {
            if (Test.bFld) {
                if (Test.bFld = ((Test.bFld = Test.bFld) == Test.bArrFld[i1 - 1])) continue;
                i2 = 133;
            } else {
                i3 = (int)(Test.lArrFld[i1 - 1] &= Test.instanceCount);
                vMeth1(Math.max(i3, iMeth(d2, 2628884404599924483L)) - ((-i3) * i2), (long)((iMeth1(Test.bFld) + i2) -
                    d3), 10);
                switch ((i1 % 2) + 19) {
                case 19:
                    i24 = 1;
                    while (++i24 < 5) {
                        if (true) break;
                        dArr1[i1 + 1] -= i3;
                        for (i25 = i24; i25 < 1; i25++) {
                            i26 = 11;
                            by -= (byte)i3;
                            Test.bFld = Test.bFld;
                            i26 += (int)Test.instanceCount;
                        }
                    }
                    break;
                case 20:
                    try {
                        i3 = (-59542 % i3);
                        i3 = (Test.iArrFld[i1] % 182);
                        Test.iArrFld[i1 + 1] = (-1352057474 % i2);
                    } catch (ArithmeticException a_e) {}
                    break;
                }
            }
        }
        vMeth_check_sum += by + i1 + i2 + i3 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i24 + i25 +
            i26 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {

        double d=-2.129249;
        int i=-196, i27=49067, i28=8218, i29=142, i30=48563, i31=35473, i32=-9238, i33=-70;
        byte by1=76, by2=101;
        float f2=-50.492F;

        for (d = 363; 18 < d; d -= 3) {
            vMeth(by1);
            Test.lArrFld[(int)(d + 1)] = (long)-104.271F;
            for (i27 = 12; i27 < 218; i27++) {
                for (f2 = 2; f2 > 1; f2 -= 3) {
                    i28 *= by1;
                }
                i30 = 1;
                do {
                    Test.iArrFld[(int)(d + 1)] = (int)d;
                    i29 = i28;
                } while (++i30 < 2);
                i29 += (i27 | Test.instanceCount);
                switch ((int)(((d % 3) * 5) + 79)) {
                case 89:
                    for (i31 = 1; i31 < 2; i31++) {
                        i32 = i29;
                        Test.iArrFld = Test.iArrFld;
                        switch (((i31 % 9) * 5) + 30) {
                        case 59:
                        case 62:
                            i32 = i28;
                            break;
                        case 69:
                            if (Test.bFld) {
                                switch (((i31 >>> 1) % 9) + 75) {
                                case 75:
                                    Test.iArrFld[(int)(d - 1)] -= i28;
                                    i28 += (int)f2;
                                    Test.iArrFld[i31] = i29;
                                case 76:
                                    Test.lArrFld = FuzzerUtils.long1array(N, (long)20764L);
                                    break;
                                case 77:
                                    switch (((8 >>> 1) % 7) + 31) {
                                    case 31:
                                        i <<= i32;
                                        i28 += (i31 * Test.instanceCount);
                                        break;
                                    case 32:
                                    case 33:
                                        by2 += (byte)i31;
                                        Test.lArrFld[i31 + 1] &= Test.instanceCount;
                                        fFld += (59854 + (i31 * i31));
                                        break;
                                    case 34:
                                        i >>= by2;
                                        i28 += i29;
                                        break;
                                    case 35:
                                        Test.lArrFld[(int)(d + 1)] = (long)f2;
                                        break;
                                    case 36:
                                        Test.instanceCount *= i;
                                        break;
                                    case 37:
                                        Test.instanceCount = by1;
                                        break;
                                    }
                                    break;
                                case 78:
                                    Test.sFld -= (short)Test.instanceCount;
                                    break;
                                case 79:
                                    i32 += (((i31 * i) + i28) - Test.instanceCount);
                                case 80:
                                    Test.instanceCount += (((i31 * i33) + Test.instanceCount) - i31);
                                    break;
                                case 81:
                                    Test.sFld -= (short)Test.instanceCount;
                                    break;
                                case 82:
                                    i33 += (i31 + Test.instanceCount);
                                    break;
                                case 83:
                                    by1 += (byte)(i31 | i30);
                                    break;
                                }
                            }
                            break;
                        case 75:
                            i28 += (i31 ^ (long)f2);
                            break;
                        case 72:
                            Test.instanceCount += (i31 * i31);
                            break;
                        case 43:
                            Test.fArrFld[i31 + 1] += 0L;
                        case 55:
                            Test.bFld = false;
                            break;
                        case 60:
                            Test.iArrFld[(int)(d - 1)] = i31;
                            break;
                        case 64:
                            i28 += -62717;
                        }
                    }
                    break;
                case 90:
                    fFld -= i30;
                case 81:
                    i -= by1;
                default:
                    try {
                        Test.iArrFld[(int)(d - 1)] = (i28 % -37105);
                        Test.iArrFld[(int)(d)] = (i / -2094903154);
                        i29 = (i29 % -214);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }

        FuzzerUtils.out.println("d i by1 = " + Double.doubleToLongBits(d) + "," + i + "," + by1);
        FuzzerUtils.out.println("i27 i28 f2 = " + i27 + "," + i28 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 by2 i33 = " + i32 + "," + by2 + "," + i33);

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.sFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.sFld);
        FuzzerUtils.out.println("fFld Test.bArrFld Test.lArrFld = " + Float.floatToIntBits(fFld) + "," +
            FuzzerUtils.checkSum(Test.bArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.sArrFld Test.iArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + ","
            + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
