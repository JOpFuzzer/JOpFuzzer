// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=9206459956752499402L;
    public static int iFld=-123;
    public static double dFld=-1.65482;
    public static short sFld=-25970;
    public int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public static int iArrFld1[]=new int[N];
    public static volatile int iArrFld2[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -99);
        FuzzerUtils.init(Test.iArrFld2, 0);
    }

    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f1, long l) {

        double d=1.125378;
        int i7=-31843, i8=198;

        Test.iFld *= -9;
        Test.iFld = Test.iFld;
        Test.iFld *= (int)Test.instanceCount;
        d = 1;
        while (++d < 253) {
            Test.iFld <<= Test.iFld;
            Test.iFld ^= (int)Test.instanceCount;
            f1 += Test.iFld;
            for (i7 = 1; 6 > i7; ++i7) {
                i8 += i7;
                Test.iArrFld1[(int)(d + 1)] -= i8;
            }
            Test.iFld = Test.iFld;
            i8 = (int)f1;
            f1 += (float)(d - Test.iFld);
            Test.iFld += (int)(d - Test.iFld);
        }
        Test.sFld = (short)l;
        vMeth_check_sum += Float.floatToIntBits(f1) + l + Double.doubleToLongBits(d) + i7 + i8;
    }

    public static double dMeth() {

        float f2=0.743F, fArr[]=new float[N];
        byte by=78;
        int i9=11, i10=-39299, i11=-5189, i12=-77, i13=-2, i14=-129;

        FuzzerUtils.init(fArr, 4.942F);

        vMeth(f2, Test.instanceCount);
        Test.iFld = Test.iFld;
        Test.iFld -= (int)Test.dFld;
        Test.iFld = -1194;
        Test.instanceCount = (long)1.409F;
        Test.iFld %= (int)(by | 1);
        for (i9 = 1; 181 > i9; ++i9) {
            f2 = by;
            fArr = FuzzerUtils.float1array(N, (float)0.70F);
            for (i11 = 1; 9 > i11; i11++) {
                for (i13 = 1; i13 < 2; ++i13) {
                    f2 -= i9;
                    Test.iArrFld2[i13] += (int)Test.instanceCount;
                    Test.iFld = (int)Test.instanceCount;
                    Test.iArrFld2[i11 + 1] >>>= (int)Test.instanceCount;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f2) + by + i9 + i10 + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public int iMeth(int i, int i1, int i2) {

        float f=-1.945F, fArr1[][]=new float[N][N];
        int i3=50464, i4=-29589, i5=11, i6=-10339;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 92.117147);
        FuzzerUtils.init(fArr1, -3.144F);

        iArrFld = FuzzerUtils.int1array(N, (int)38084);
        for (f = 13; f < 220; ++f) {
            i1 >>= iArrFld[(int)(f - 1)];
            for (i4 = 8; i4 > 1; i4 -= 3) {
                i2 = (int)((--Test.instanceCount) + Math.max(Test.instanceCount = Test.instanceCount,
                    Math.min(Test.instanceCount, 3149718384L)));
                i6 = 4;
                while (--i6 > 0) {
                    i1 &= (int)Test.instanceCount;
                    Test.instanceCount += (((i6 * i6) + i4) - Test.iFld);
                    Test.instanceCount <<= (++i1);
                    i1 += (int)dMeth();
                    i1 += i6;
                    Test.dFld = i3;
                }
                dArr = dArr;
                Test.dFld = i6;
                fArr1[(int)(f + 1)] = fArr1[(int)(f - 1)];
            }
        }
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f3=-29.679F, fArr2[]=new float[N];
        long l1=-587966027L;
        int i15=-106, i16=-3, i17=172, i18=-9, i19=13, i20=6;
        byte by1=91;
        double d1=74.7555;
        boolean b=true;

        FuzzerUtils.init(fArr2, -2.565F);

        iArrFld[(Test.iFld >>> 1) % N] *= (int)(lArrFld[(Test.iFld >>> 1) % N] - Test.iFld);
        Test.dFld -= iMeth(Test.iFld, Test.iFld, Test.iFld);
        if (b) {
            Test.iFld = (int)Test.instanceCount;
        } else if (false) {
            switch ((((Test.iFld >>> 1) % 2) * 5) + 111) {
            case 118:
                Test.dFld -= f3;
            case 121:
                f3 = -10;
                for (l1 = 1; l1 < 248; ++l1) {
                    Test.iFld += (int)(((l1 * i15) + Test.instanceCount) - Test.iFld);
                    Test.iFld += (int)(((l1 * f3) + by1) - i15);
                    i15 = Test.iFld;
                    lArrFld[(int)(l1 - 1)] = Test.iFld;
                }
                break;
            default:
                for (i16 = 7; i16 < 345; ++i16) {
                    Test.iArrFld2[(i16 >>> 1) % N] = i15;
                    Test.iFld *= i16;
                    for (d1 = 74; d1 > 4; --d1) {
                        lArrFld[(int)(d1)] -= i15;
                        Test.instanceCount = Test.iFld;
                        for (i19 = 1; i19 < 2; i19++) {
                            f3 += i19;
                            f3 *= i16;
                            switch ((((Test.iFld >>> 1) % 1) * 5) + 59) {
                            case 63:
                                lArrFld[i16 + 1] >>= Test.instanceCount;
                                i18 += (int)Test.dFld;
                                switch (((i19 >>> 1) % 8) + 6) {
                                case 6:
                                    fArr2[i16] *= i17;
                                case 7:
                                    i15 += (((i19 * i20) + i16) - f3);
                                    break;
                                case 8:
                                    i17 += 101;
                                    break;
                                case 9:
                                    f3 += i19;
                                case 10:
                                    f3 -= i16;
                                case 11:
                                case 12:
                                    Test.iFld += (i19 | Test.iFld);
                                    break;
                                case 13:
                                    Test.instanceCount = i16;
                                    break;
                                }
                            default:
                                f3 *= by1;
                            }
                        }
                    }
                }
            }
        } else {
            bArrFld[(i16 >>> 1) % N] = b;
        }

        FuzzerUtils.out.println("f3 l1 i15 = " + Float.floatToIntBits(f3) + "," + l1 + "," + i15);
        FuzzerUtils.out.println("by1 i16 i17 = " + by1 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("d1 i18 i19 = " + Double.doubleToLongBits(d1) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 b fArr2 = " + i20 + "," + (b ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld iArrFld lArrFld = " + Test.sFld + "," + FuzzerUtils.checkSum(iArrFld) + ","
            + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 Test.iArrFld2 bArrFld = " + FuzzerUtils.checkSum(Test.iArrFld1) + "," +
            FuzzerUtils.checkSum(Test.iArrFld2) + "," + FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
