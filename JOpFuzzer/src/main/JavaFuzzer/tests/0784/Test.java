// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2L;
    public static volatile boolean bFld=true;
    public static double dFld=103.29658;
    public static long lFld=-10L;
    public static int iFld=-56894;
    public static float fFld=68.355F;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)7935);
        FuzzerUtils.init(Test.iArrFld, -60143);
        FuzzerUtils.init(Test.lArrFld, 40903L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i8, int i9, float f) {

        int i10=-218, i11=102, i12=-9, i13=-222, i14=-201;
        short s=-4018;
        double d1=65.34882, dArr1[]=new double[N];
        byte by=-12;
        boolean bArr[][]=new boolean[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr1, 0.124821);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, 972311616L);

        for (i10 = 15; i10 < 395; ++i10) {
            switch ((i10 % 10) + 106) {
            case 106:
                for (i12 = 1; i12 < 4; ++i12) {
                    double d2=-14.41509;
                    if (true) {
                        s >>= (short)i11;
                    } else {
                        switch (((i10 % 8) * 5) + 33) {
                        case 70:
                            for (d1 = 1; d1 < 2; d1++) {
                                Test.instanceCount |= i12;
                                i14 = i9;
                                dArr1 = dArr1;
                                Test.bFld = Test.bFld;
                                i13 |= i9;
                                i8 = i10;
                                i11 = i12;
                            }
                            d2 *= d1;
                            break;
                        case 42:
                            d2 = i14;
                            break;
                        case 72:
                            i8 ^= i13;
                            break;
                        case 65:
                            if (Test.bFld) continue;
                        case 35:
                            bArr[i10 + 1][i10] = false;
                            break;
                        case 50:
                            i8 *= i13;
                            break;
                        case 53:
                            if (Test.bFld) break;
                            break;
                        case 61:
                            i8 = (int)Test.instanceCount;
                            break;
                        default:
                            i14 <<= i8;
                        }
                    }
                }
                break;
            case 107:
                lArr[i10] -= 38016;
                break;
            case 108:
                i13 += i10;
            case 109:
                i9 = s;
            case 110:
                i13 += (int)Test.instanceCount;
                break;
            case 111:
                i9 += (((i10 * Test.instanceCount) + f) - i10);
                break;
            case 112:
                Test.dFld -= Test.instanceCount;
                break;
            case 113:
                i9 += (int)f;
                break;
            case 114:
                by += (byte)i12;
                break;
            case 115:
            }
        }
        long meth_res = i8 + i9 + Float.floatToIntBits(f) + i10 + i11 + i12 + i13 + s + Double.doubleToLongBits(d1) +
            i14 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(int i5, int i6, int i7) {

        float f1=-2.191F;
        int i15=-15211, i16=23, i17=52510, iArr[]=new int[N];
        long l=-1920835630L;
        byte by1=44;

        FuzzerUtils.init(iArr, -250);

        i5 = (int)(((i6 * 148) - (11 + lMeth(i7, i7, f1))) - i6);
        for (i15 = 7; i15 < 207; i15++) {
            i5 = (int)Test.lFld;
            iArr[i15] += (int)-47.545F;
            i16 += i16;
            if (Test.bFld) continue;
            i17 = 1;
            while (++i17 < 8) {
                iArr[i15 - 1] = i6;
                l = 1;
                while (++l < 1) {
                    i7 += (int)(((l * i16) + Test.instanceCount) - by1);
                    i5 >>= i16;
                    Test.sArrFld[i17] = (short)i16;
                    Test.iFld += i16;
                    Test.dFld *= 198;
                    i16 *= i16;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + Float.floatToIntBits(f1) + i15 + i16 + i17 + l + by1 +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2, double d) {

        int i3=-4319, i4=10, i18=110, i19=-9, i20=107, i21=-5;
        byte by2=-116;
        short s1=-15260;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 109.583F);

        fArr[(i2 >>> 1) % N][(44725 >>> 1) % N] = i2;
        for (i3 = 9; i3 < 347; i3++) {
            i4 += (iMeth1(Test.iFld, i4, i3) + 33754);
            Test.dFld *= d;
            by2 |= (byte)i4;
        }
        Test.iFld -= (int)1173453989208932496L;
        Test.instanceCount = Test.iFld;
        switch (((25421 >>> 1) % 2) + 86) {
        case 86:
            for (i18 = 5; 190 > i18; i18++) {
                Test.iArrFld[i18 - 1] -= (int)-50.681F;
                Test.instanceCount -= -13;
                for (i20 = 1; i20 < 9; i20++) {
                    if (Test.bFld) {
                        Test.iArrFld[i20 + 1] = by2;
                        i21 *= (int)Test.lFld;
                    } else {
                        Test.iFld += (((i20 * Test.lFld) + i2) - Test.instanceCount);
                    }
                }
            }
            break;
        case 87:
            i21 *= s1;
            break;
        }
        long meth_res = i2 + Double.doubleToLongBits(d) + i3 + i4 + by2 + i18 + i19 + i20 + i21 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-250, i1=-130, i22=55212, i23=68;
        short s2=19308;
        byte by3=43;
        double dArr[]=new double[N];
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(dArr, -127.45682);
        FuzzerUtils.init(fArr1, 2.900F);

        for (i = 9; i < 211; i++) {
            dArr[i] -= (iMeth(i1, 21.81037) * Test.iFld);
            Test.lArrFld[i] = 5;
            i22 = 124;
            do {
                s2 |= (short)Test.iFld;
                Test.iArrFld[i] *= (int)Test.lFld;
                i1 = Test.iFld;
                Test.iArrFld[i] -= (int)-60023L;
                i1 += (i22 | Test.instanceCount);
                if (Test.bFld) {
                    Test.iFld -= i22;
                    fArr1[i][i] += Test.iFld;
                    Test.iFld -= i1;
                    Test.lFld += s2;
                } else {
                    try {
                        Test.iFld = (1153571651 / Test.iArrFld[i]);
                        Test.iFld = (Test.iFld / 48895);
                        Test.iFld = (254 % i22);
                    } catch (ArithmeticException a_e) {}
                    Test.fFld += (i22 + s2);
                    Test.iFld += (int)-2.105292;
                }
                i1 = i1;
                s2 *= (short)-4;
            } while ((i22 -= 2) > 0);
            i23 = 124;
            while ((i23 -= 3) > 0) {
                Test.iFld = 6;
                i1 *= Test.iFld;
                Test.instanceCount += (i23 * i23);
                switch ((((i >>> 1) % 10) * 5) + 66) {
                case 103:
                    Test.instanceCount += (i23 * i23);
                    i1 *= i22;
                    Test.bFld = false;
                    i1 = 3;
                    break;
                case 70:
                    Test.iFld <<= (int)-8490408667247220819L;
                    break;
                case 72:
                case 67:
                    Test.lArrFld[i23] += i1;
                case 92:
                case 68:
                    if (Test.bFld) continue;
                case 87:
                    i1 += (int)Test.lFld;
                    break;
                case 110:
                    Test.iFld = i1;
                    break;
                case 115:
                    if (Test.bFld) continue;
                    break;
                case 78:
                    s2 = by3;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i22 = " + i + "," + i1 + "," + i22);
        FuzzerUtils.out.println("s2 i23 by3 = " + s2 + "," + i23 + "," + by3);
        FuzzerUtils.out.println("dArr fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.dFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.lFld Test.iFld Test.fFld = " + Test.lFld + "," + Test.iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sArrFld Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + ","
            + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
