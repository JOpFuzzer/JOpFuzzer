// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2563659334350559765L;
    public static double dFld=-97.51706;
    public float fFld=0.419F;
    public int iFld=45;
    public int iFld1=47806;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 23);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(long l, long l1, long l2) {

        int i2=-6, i3=-14, i4=35279, i5=-194;
        boolean b=true;
        long l3=-30L, l4=3624050816921752759L;
        short s=28913;

        for (i2 = 19; i2 < 351; i2++) {
            switch (((i2 % 1) * 5) + 67) {
            case 71:
            }
            if (b) break;
            if (b) {
                i3 += (int)235L;
                Test.iArrFld[i2 + 1][i2 - 1] <<= i2;
            } else if (b) {
                for (l3 = i2; l3 < 5; ++l3) {
                    i3 += (int)Test.dFld;
                    l -= i4;
                    l2 = s;
                }
                b = b;
                for (l4 = i2; l4 < 5; ++l4) {
                    i4 += 14;
                    i3 >>>= (int)2748694824284258102L;
                    Test.dFld *= i3;
                }
            } else {
                i3 += (int)(122.23F + (i2 * i2));
            }
        }
        long meth_res = l + l1 + l2 + i2 + i3 + (b ? 1 : 0) + l3 + i4 + s + l4 + i5;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth() {


        Test.instanceCount += (long)dMeth(Test.instanceCount, 2365716880698955682L, Test.instanceCount);
        long meth_res = 0;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, double d, int i1) {

        short s1=31011;
        byte by=-56;
        int i6=-214, i7=2481, i8=-56, i9=-155, i10=50142;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -90.682F);

        fArr[(i1 >>> 1) % N] = Float.intBitsToFloat(iMeth() + i1);
        s1 = (short)i1;
        i1 &= i1;
        Test.instanceCount -= by;
        Test.instanceCount -= i1;
        i6 = 1;
        do {
            for (i7 = 1; i7 < 4; ++i7) {
                i1 = i8;
                Test.instanceCount = i7;
                f += (i7 * i7);
                for (i9 = 1; i9 < 2; i9 += 3) {
                    Test.instanceCount ^= i10;
                    i8 = 28966;
                    Test.iArrFld[i9 - 1][i6 - 1] -= i6;
                    Test.instanceCount = i6;
                }
            }
        } while (++i6 < 385);
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i1 + s1 + by + i6 + i7 + i8 + i9 +
            i10 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=225, i11=8, i12=-5, i13=10, i14=54050, i15=0, i16=1, i17=3, i18=-131, i19=58960, i20=8;
        byte by1=-89;
        long l5=-8076276299997675260L;
        short s2=2081;
        boolean b1=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.50905);

        i = 1;
        do {
            float f1=-41.493F;
            vMeth(f1, Test.dFld, i);
        } while (++i < 343);
        i11 -= by1;
        i11 += -4;
        fFld -= i;
        Test.dFld *= 0;
        try {
            for (l5 = 139; l5 > 4; l5--) {
                Test.iArrFld[(int)(l5 + 1)][(int)(l5 - 1)] >>>= i;
            }
            Test.instanceCount >>= s2;
            for (i13 = 7; i13 < 341; ++i13) {
                i11 = i13;
                for (i15 = 4; i15 < 75; ++i15) {
                    switch ((i13 % 10) + 29) {
                    case 29:
                        try {
                            i16 = (-50128 % iFld);
                            Test.iArrFld[i15][i15 + 1] = (Test.iArrFld[i13 - 1][i15] / 246);
                            Test.iArrFld[i15 - 1][i13] = (i11 % 1196331470);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount >>>= iFld;
                        Test.iArrFld[i15][i15 - 1] = iFld;
                        break;
                    case 30:
                        for (i17 = 1; 2 > i17; i17++) {
                            i18 &= i16;
                            Test.iArrFld[(i12 >>> 1) % N][i15] ^= i12;
                            i16 += i17;
                        }
                        Test.dFld = i16;
                        dArr[i15] += Test.dFld;
                        i19 = 1;
                        while (++i19 < 2) {
                            switch ((i13 % 1) + 27) {
                            case 27:
                            }
                            i12 = (int)l5;
                        }
                        break;
                    case 31:
                        i20 = 1;
                        while (++i20 < 2) {
                            i14 |= i12;
                            i11 |= i13;
                            iFld += i20;
                        }
                        break;
                    case 32:
                    case 33:
                        if (b1) break;
                        break;
                    case 34:
                        b1 = b1;
                        break;
                    case 35:
                        iFld1 = i19;
                    case 36:
                        Test.instanceCount = i17;
                        break;
                    case 37:
                        Test.instanceCount >>= i19;
                        break;
                    case 38:
                        i18 = (int)fFld;
                        break;
                    }
                }
            }
        }
        catch (ArithmeticException exc1) {
            Test.iArrFld[(i17 >>> 1) % N][(i16 >>> 1) % N] += i16;
        }

        FuzzerUtils.out.println("i i11 by1 = " + i + "," + i11 + "," + by1);
        FuzzerUtils.out.println("l5 i12 s2 = " + l5 + "," + i12 + "," + s2);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 b1 = " + i19 + "," + i20 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("iFld iFld1 Test.iArrFld = " + iFld + "," + iFld1 + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
