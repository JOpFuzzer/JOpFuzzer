// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5318826979670992506L;
    public int iFld=-51488;
    public static volatile byte byFld=-4;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4042871580215213021L);
        FuzzerUtils.init(Test.iArrFld, -29661);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth(int i) {

        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, 238L);
        FuzzerUtils.init(byArr, (byte)-42);

        lArr[(i >>> 1) % N] -= ((byArr[(i >>> 1) % N]++) + i);
        lArr[(i >>> 1) % N] |= (lArr[(-108 >>> 1) % N] *= ((i -= i) * (Test.instanceCount * 11322)));
        vSmallMeth_check_sum += i + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
    }

    public static int iMeth1() {

        int i4=-12, i5=7, i6=9, i7=-14, i8=11, i9=11;
        double d1=8.30026;
        short s=-18308;
        float f1=2.810F;

        vSmallMeth(-11);
        Test.lArrFld[(i4 >>> 1) % N] *= -16455;
        for (i5 = 5; i5 < 312; i5++) {
            Test.lArrFld[i5] += i6;
            for (i7 = 1; i7 < 5; i7++) {
                d1 *= Test.instanceCount;
                i8 += i7;
                i8 >>= i6;
                i8 *= (int)Test.instanceCount;
                s += (short)(((i7 * i6) + i7) - i5);
                i6 += (int)f1;
                i6 = -24;
                i9 = 2;
                while ((i9 -= 2) > 0) {
                    Test.iArrFld[i5] += (int)Test.instanceCount;
                    i4 = i9;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + s + Float.floatToIntBits(f1) + i9;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, int i3) {

        int i10=-5, i11=-96, i12=-33, i13=2, i14=222;
        byte by=118;
        float f2=-1.754F;
        double d2=-2.116249;

        iMeth1();
        for (i10 = 13; i10 < 317; ++i10) {
            i3 <<= i10;
            i11 -= by;
            i12 = 1;
            do {
                i3 = i10;
                i3 += (i12 ^ (long)f2);
                i3 = (int)f2;
                i3 *= -4078;
                for (d2 = 1; d2 < 1; d2++) {
                    Test.lArrFld[i12] = -31;
                    Test.lArrFld[i12 + 1] = (long)f2;
                    i13 -= i3;
                    Test.instanceCount += (long)(((d2 * i13) + f2) - i10);
                    i14 = i11;
                }
            } while (++i12 < 5);
        }
        long meth_res = l + i3 + i10 + i11 + by + i12 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d2) + i13 +
            i14;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-198, i2=189, i15=58, i16=21005, i17=-212;
        float f=-100.384F;
        double d=1.1144, d3=2.44316, dArr[][]=new double[N][N];
        short s1=1877;
        long l1=773564904L, lArr1[]=new long[N];
        boolean b=true;

        FuzzerUtils.init(lArr1, -8L);
        FuzzerUtils.init(dArr, 103.7172);

        for (int smallinvoc=0; smallinvoc<721; smallinvoc++) vSmallMeth(iFld = iFld);
        for (i1 = 6; i1 < 294; i1++) {
            f *= (float)(((Test.instanceCount * d) + i2) - ((i1 - f) - (-4L - (Test.instanceCount - 126.43675))));
            lArr1[i1] += iMeth(1276291033335608503L, i1);
            iFld *= i2;
            d3 = 87;
            do {
                switch (((i1 % 8) * 5) + 33) {
                case 37:
                    f -= -22482;
                    iFld -= (int)d3;
                    Test.instanceCount -= i1;
                    break;
                case 65:
                    iFld += 50203;
                case 41:
                    for (i15 = 1; i15 < 1; i15++) {
                        f -= s1;
                        Test.byFld -= (byte)d;
                        Test.lArrFld[i15] += i16;
                        iFld = (int)Test.instanceCount;
                        iFld *= i16;
                        switch ((((iFld >>> 1) % 1) * 5) + 41) {
                        case 43:
                            iFld = i2;
                            dArr[i15 - 1][(int)(d3 + 1)] -= Test.instanceCount;
                            Test.instanceCount |= i16;
                            break;
                        default:
                            iFld /= (int)((long)(f) | 1);
                        }
                    }
                    Test.instanceCount = 58699;
                    for (l1 = 1; l1 < 1; l1++) {
                        i16 = i15;
                        Test.instanceCount -= i17;
                        i17 <<= i1;
                        i2 *= (int)f;
                        i17 *= i1;
                        try {
                            i17 = (iFld / iFld);
                            iFld = (-922881219 % i17);
                            Test.iArrFld[i1] = (i2 / 59191);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                case 43:
                    Test.instanceCount *= Test.byFld;
                case 47:
                    dArr[(int)(d3)][(int)(d3)] -= -13;
                    break;
                case 69:
                    b = b;
                    break;
                case 54:
                    i16 += (int)(((d3 * i1) + l1) - l1);
                    break;
                case 72:
                    Test.instanceCount *= i17;
                    break;
                default:
                    Test.iArrFld[(int)(d3 - 1)] += i1;
                }
            } while (--d3 > 0);
        }

        FuzzerUtils.out.println("i1 i2 f = " + i1 + "," + i2 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("d d3 i15 = " + Double.doubleToLongBits(d) + "," + Double.doubleToLongBits(d3) + "," +
            i15);
        FuzzerUtils.out.println("i16 s1 l1 = " + i16 + "," + s1 + "," + l1);
        FuzzerUtils.out.println("i17 b lArr1 = " + i17 + "," + (b ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth1 iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
