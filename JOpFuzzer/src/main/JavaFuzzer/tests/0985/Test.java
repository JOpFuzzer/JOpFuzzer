// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-82L;
    public static short sFld=-25755;
    public static volatile float fFld=-31.337F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -28410);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i6=-244, i7=-7369, i8=8532, i9=-45;
        float f1=83.802F;
        short s1=32037;
        byte by=79;

        for (i6 = 4; i6 < 388; i6++) {
            Test.iArrFld[i6] &= i6;
            Test.iArrFld[i6] *= (int)f1;
            for (i8 = 4; i8 > 1; --i8) {
                i7 += i8;
                s1 <<= by;
                i7 += (int)Test.instanceCount;
                Test.instanceCount *= -8690;
                i7 = i6;
                Test.iArrFld[i8 + 1] *= i7;
                Test.iArrFld[i6 - 1] = i9;
                i9 >>>= i9;
                i7 = i9;
            }
        }
        vMeth1_check_sum += i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + s1 + by;
    }

    public static void vMeth(int i4, int i5, long l) {

        double d=0.83245, d1=-2.73260;
        int i10=-48761;
        float f2=90.483F, fArr[]=new float[N];
        boolean b=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)9017);
        FuzzerUtils.init(fArr, -1.156F);

        Test.iArrFld[(i4 >>> 1) % N] ^= i4;
        for (short s : sArr) {
            d += (++Test.instanceCount);
            i4 <<= (((++i4) & (i4 + i5)) & i4);
            vMeth1();
            if (false) {
                fArr[(-2 >>> 1) % N] = -46762;
                switch (((i5 >>> 1) % 7) + 70) {
                case 70:
                case 71:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 72:
                    for (d1 = 4; d1 > 1; d1 -= 2) {
                        if (false) continue;
                        i10 -= (int)57487L;
                        try {
                            i10 = (i4 / i4);
                            i4 = (i4 / i5);
                            i4 = (i4 / -114);
                        } catch (ArithmeticException a_e) {}
                        i4 -= i10;
                    }
                    Test.instanceCount = i10;
                    break;
                case 73:
                    i5 -= i5;
                    break;
                case 74:
                    d -= i4;
                    break;
                case 75:
                    f2 = i5;
                case 76:
                    Test.iArrFld[(-6 >>> 1) % N] = 218;
                    break;
                }
            } else if (b) {
                f2 -= i4;
            } else {
                b = b;
            }
        }
        vMeth_check_sum += i4 + i5 + l + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i10 +
            Float.floatToIntBits(f2) + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static float fMeth(int i3) {

        long l1=-239L;
        int i11=-13, i13=-146, i14=-121, i15=-2, i16=1149, i17=18142, i18=-65;
        byte by2=-64, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-108);

        vMeth(i3, i3, Test.instanceCount);
        i3 -= (int)8L;
        for (l1 = 16; l1 < 256; l1++) {
            i3 += (int)(l1 * l1);
        }
        for (i13 = 207; i13 > 11; i13--) {
            if (i3 != 0) {
            }
            switch ((i13 % 4) + 98) {
            case 98:
                i11 = Test.sFld;
                i11 &= i3;
            case 99:
                i14 += -98;
                for (i15 = 8; 1 < i15; i15 -= 2) {
                    for (i17 = 1; i17 < 3; i17++) {
                        i18 = (int)Test.fFld;
                        i11 = i14;
                        i11 += i18;
                    }
                }
                break;
            case 100:
                by2 = (byte)i3;
                break;
            case 101:
                Test.fFld += (-123 + (i13 * i13));
                break;
            }
        }
        long meth_res = i3 + l1 + i11 + i13 + i14 + i15 + i16 + i17 + i18 + by2 + FuzzerUtils.checkSum(byArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-36821, i1=-2372, i2=-20279, i19=-17752, i20=-138, i21=5;
        float f=-57.720F, fArr1[]=new float[N];
        boolean b1=false;
        long lArr[][]=new long[N][N];
        byte byArr1[][]=new byte[N][N];

        FuzzerUtils.init(lArr, 0L);
        FuzzerUtils.init(fArr1, -2.842F);
        FuzzerUtils.init(byArr1, (byte)44);

        Test.iArrFld[(i >>> 1) % N] = (int)(--Test.instanceCount);
        i1 = 151;
        while (--i1 > 0) {
            for (f = 166; f > 4; f--) {
                i2 *= (int)fMeth(i1);
                Test.instanceCount += (long)(f * f);
                Test.iArrFld[i1 + 1] = -4114;
            }
            Test.instanceCount |= -16;
            lArr[i1][i1 + 1] = i;
            i2 += (i1 * i1);
            lArr[i1 + 1][i1] >>>= i2;
        }
        i2 = i1;
        for (float f3 : fArr1) {
            if (b1) break;
            i |= i2;
            lArr[(i2 >>> 1) % N][(i1 >>> 1) % N] = i1;
            fArr1[(i1 >>> 1) % N] *= i1;
            for (i19 = 1; i19 < 63; ++i19) {
                f3 *= i;
                i = (int)1290098494L;
                Test.iArrFld = Test.iArrFld;
                i20 = i20;
                byArr1[i19 + 1][i19 - 1] = (byte)i20;
                i2 += (i19 - i19);
                i21 = 1;
                while (++i21 < 2) {
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)153);
                    i += (i21 | i2);
                    i2 -= i2;
                    i2 = i20;
                    i -= i19;
                    Test.sFld *= (short)i21;
                }
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i2 b1 i19 = " + i2 + "," + (b1 ? 1 : 0) + "," + i19);
        FuzzerUtils.out.println("i20 i21 lArr = " + i20 + "," + i21 + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("fArr1 byArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," +
            FuzzerUtils.checkSum(byArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
