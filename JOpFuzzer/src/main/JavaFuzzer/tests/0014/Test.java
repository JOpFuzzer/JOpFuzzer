// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2186272192L;
    public static short sFld=13839;
    public static double dFld=65.32229;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2003L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(float f1, int i7) {

        int i8=77, i9=-2512, i10=9, iArr[]=new int[N];
        long l1=118L, l2=-4L;
        double d=-2.34717;
        boolean b=false;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 1.491F);
        FuzzerUtils.init(iArr, -201);

        i7 += i7;
        fArr[(i7 >>> 1) % N][(35495 >>> 1) % N] = i7;
        for (i8 = 11; i8 < 262; ++i8) {
            i7 = -11;
            l1 -= Test.sFld;
            l1 += i8;
            i7 -= i7;
            for (d = i8; d < 6; ++d) {
                fArr[i8][(int)(d)] += f1;
                l1 -= (long)f1;
                l2 = 1;
                do {
                    b = b;
                    i10 = i7;
                    iArr[(int)(d)] <<= i10;
                    try {
                        i7 = (-1577101128 % i7);
                        i7 = (iArr[i8 - 1] / -101);
                        i7 = (i10 / 66);
                    } catch (ArithmeticException a_e) {}
                } while (++l2 < 1);
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i7 + i8 + i9 + l1 + Double.doubleToLongBits(d) + i10 + l2 + (b ? 1 :
            0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth1(long l, int i6) {

        float f2=0.109F;
        int i11=-40235, i12=-3, i13=-193, i14=63063, i15=216, iArr1[]=new int[N];
        byte by=100;

        FuzzerUtils.init(iArr1, -35070);

        fMeth(f2, i6);
        for (i11 = 3; i11 < 159; i11++) {
            i13 = 10;
            while (--i13 > 0) {
                double d1=0.58884;
                i6 += (i13 + i13);
                i12 ^= i13;
                i12 ^= i12;
                i6 &= i11;
                i12 -= i12;
                d1 -= i13;
                l += (i13 * i13);
            }
            by -= (byte)i6;
            by *= (byte)Test.instanceCount;
            for (i14 = 1; i14 < 10; i14++) {
                try {
                    i6 = (11 % i6);
                    i6 = (i11 / 110);
                    i15 = (i6 % 11734);
                } catch (ArithmeticException a_e) {}
                iArr1[i14 - 1] <<= i13;
            }
        }
        long meth_res = l + i6 + Float.floatToIntBits(f2) + i11 + i12 + i13 + by + i14 + i15 +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i16=-38467, i17=-19990, iArr2[]=new int[N];
        double d2=115.93467;
        long l3=57820L;
        float f3=23.511F;
        boolean b1=true;

        FuzzerUtils.init(iArr2, -35586);

        switch ((((iMeth1(Test.instanceCount, i16) >>> 1) % 2) * 5) + 40) {
        case 48:
            iArr2[(-2 >>> 1) % N] <<= (int)44105L;
        case 49:
            d2 = 1;
            do {
                for (l3 = 1; l3 < 6; l3++) {
                    i16 += i17;
                    f3 -= i17;
                    iArr2[(int)(l3 - 1)] -= i16;
                    Test.sFld += (short)21;
                    switch ((int)(((d2 % 7) * 5) + 50)) {
                    case 84:
                        i17 += (int)f3;
                        i17 = 10684;
                        i17 -= i17;
                        break;
                    case 80:
                        try {
                            i16 = (i17 % i16);
                            i16 = (389360875 % i16);
                            i16 = (iArr2[(int)(l3)] / i17);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 77:
                        f3 -= 7630;
                    case 60:
                        i17 = i16;
                        break;
                    case 53:
                        f3 -= i16;
                        break;
                    case 64:
                        iArr2 = iArr2;
                        break;
                    case 75:
                        iArr2[(int)(d2)] += i16;
                        break;
                    default:
                        b1 = b1;
                    }
                }
            } while (++d2 < 282);
            break;
        default:
            i17 -= Test.sFld;
        }
        long meth_res = i16 + Double.doubleToLongBits(d2) + l3 + i17 + Float.floatToIntBits(f3) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=201, i1=4, i2=-11605, i3=-105, i4=54793, i5=-9586, i18=15827, iArr3[]=new int[N];
        float f=1.423F;
        boolean b2=false;
        byte by1=15;

        FuzzerUtils.init(iArr3, 151);

        for (i = 8; 289 > i; ++i) {
            for (i2 = 89; 3 < i2; --i2) {
                i1 += (int)(-(-57159 << (long)(f - Test.instanceCount)));
                for (i4 = 1; i4 < 2; ++i4) {
                    Test.instanceCount = iMeth();
                    iArr3[i4 + 1] <<= (int)Test.instanceCount;
                    i3 += (((i4 * i4) + i1) - Test.instanceCount);
                }
                switch ((i2 % 5) + 88) {
                case 88:
                    f += (i2 * i2);
                    break;
                case 89:
                    i18 = 1;
                    do {
                        if (b2) continue;
                        iArr3[(i1 >>> 1) % N] |= (int)Test.instanceCount;
                        Test.lArrFld[i2 - 1] ^= i18;
                        i3 -= (int)Test.instanceCount;
                        by1 = (byte)-104;
                        f += i5;
                        try {
                            i3 = (i5 % -18187);
                            i3 = (iArr3[i + 1] % -81);
                            i1 = (i1 % i4);
                        } catch (ArithmeticException a_e) {}
                        switch ((i18 % 8) + 57) {
                        case 57:
                            i1 = i18;
                            break;
                        case 58:
                            i3 = (int)Test.instanceCount;
                            iArr3[i - 1] *= 5;
                            try {
                                i3 = (i18 / 56898);
                                i3 = (iArr3[i2 + 1] % -167);
                                i1 = (i % -1300501707);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 59:
                            Test.instanceCount >>>= i;
                            i3 = -100;
                        case 60:
                            f += (((i18 * i) + i18) - f);
                            i5 = -51772;
                            i5 *= 167;
                            Test.dFld += i1;
                            break;
                        case 61:
                            i5 += (i18 * i18);
                            i5 += (((i18 * Test.instanceCount) + f) - i18);
                            break;
                        case 62:
                            Test.instanceCount -= i2;
                            break;
                        case 63:
                            i5 += -194;
                            break;
                        case 64:
                            i3 <<= i2;
                            break;
                        default:
                            iArr3 = iArr3;
                        }
                    } while (++i18 < 2);
                    break;
                case 90:
                    i3 *= -4;
                    break;
                case 91:
                    i5 = Test.sFld;
                    break;
                case 92:
                    iArr3[i2] += (int)71.198;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 f i4 = " + i3 + "," + Float.floatToIntBits(f) + "," + i4);
        FuzzerUtils.out.println("i5 i18 b2 = " + i5 + "," + i18 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("by1 iArr3 = " + by1 + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
