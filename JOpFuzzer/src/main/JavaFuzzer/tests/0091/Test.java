// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3201863315441026641L;
    public byte byFld=-41;
    public int iFld=35;
    public static boolean bFld=true;
    public static float fFld=1.999F;
    public int iFld1=37912;
    public double dFld=98.31947;
    public float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];
    public static volatile int iArrFld1[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -12);
        FuzzerUtils.init(Test.lArrFld, 3244352371880060982L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l) {

        int i9=252, i10=-44189, i11=24, i12=57739, i13=-33625, i14=68, i15=-58851;
        long l1=2690089765L;
        float f=-22.281F;
        byte by1=66;
        short s1=-9681;

        try {
            i9 *= i9;
        }
        catch (ArithmeticException exc1) {
            for (l1 = 334; l1 > 20; --l1) {
                for (f = 5; f > 1; f--) {
                    Test.bFld = false;
                }
            }
            for (i12 = 6; i12 < 393; i12++) {
                for (i14 = 1; 4 > i14; ++i14) {
                    Test.iArrFld1[i14] = by1;
                    switch (((i14 % 1) * 5) + 116) {
                    case 117:
                        if (i12 != 0) {
                            vMeth2_check_sum += l + i9 + l1 + i10 + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 +
                                i15 + by1 + s1;
                            return;
                        }
                        break;
                    default:
                        s1 -= (short)i13;
                        by1 = (byte)1.696F;
                    }
                    i13 = (int)f;
                    Test.instanceCount -= -55778;
                    Test.fFld -= i14;
                }
            }
        }
        finally {
            i10 = i15;
        }
        vMeth2_check_sum += l + i9 + l1 + i10 + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + by1 + s1;
    }

    public void vMeth1(int i6) {

        int i7=220, i8=136, i16=47410, i17=-46, i18=-2, i19=-205;

        for (i7 = 15; i7 < 362; i7++) {
            i8 = iArrFld[i7 - 1];
            vMeth2(-4245659226L);
            for (i16 = 1; i16 < 5; ++i16) {
                fArrFld = fArrFld;
                for (i18 = 1; i18 < 2; ++i18) {
                    fArrFld[i16] -= Test.fFld;
                    Test.instanceCount <<= 13L;
                    Test.iArrFld1[i7] = (int)Test.instanceCount;
                    switch ((i7 % 8) + 29) {
                    case 29:
                        i17 += (i18 * i18);
                        Test.lArrFld = Test.lArrFld;
                        iArrFld[i16 - 1] -= (int)-1.300F;
                        break;
                    case 30:
                        Test.iArrFld1[i16 + 1] = i6;
                        Test.instanceCount -= i8;
                        break;
                    case 31:
                        Test.fFld = Test.fFld;
                        break;
                    case 32:
                        byFld >>= (byte)-62;
                        break;
                    case 33:
                        iFld1 = (int)Test.instanceCount;
                        break;
                    case 34:
                        iFld *= (int)Test.fFld;
                        break;
                    case 35:
                        iFld1 += i18;
                        break;
                    case 36:
                        Test.instanceCount *= 677133602L;
                        break;
                    default:
                        dFld = -63602L;
                    }
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i16 + i17 + i18 + i19;
    }

    public void vMeth(int i2) {

        short s=6525;
        int i3=34137, i4=-1, i5=-142, iArr1[][]=new int[N][N];
        double d=64.53710;

        FuzzerUtils.init(iArr1, 58565);

        i2 -= (int)(((i2 + Test.instanceCount) + (i2--)) + ((i2 - byFld) * (i2 + s)));
        fArrFld[(i2 >>> 1) % N] *= (~(--iArr1[(i2 >>> 1) % N][(i2 >>> 1) % N]));
        Test.instanceCount -= (++iArr1[(i2 >>> 1) % N][(i2 >>> 1) % N]);
        iArr1[(iFld >>> 1) % N][(i2 >>> 1) % N] = (int)(((i2 / (Test.instanceCount | 1)) - (i3 - 1.50134)) + ((iFld +
            s) - (++byFld)));
        byFld >>= (byte)(-iArr1[(iFld >>> 1) % N][(i2 >>> 1) % N]);
        for (i4 = 17; 350 > i4; i4++) {
            int i20=-4639;
            vMeth1(i20);
            i5 -= i3;
        }
        i5 -= i4;
        Test.instanceCount = Test.instanceCount;
        d = 1;
        do {
            i2 -= (int)76.476F;
            if (false) break;
            i3 = 207;
            Test.instanceCount += i5;
        } while (++d < 332);
        vMeth_check_sum += i2 + s + i3 + i4 + i5 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-43769, i1=-46268, i21=249, i22=102, i23=-8408, i24=-9, i25=-27190, i26=8709, iArr[]=new int[N];
        byte by=7;
        short s2=2478;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -88.96904);
        FuzzerUtils.init(iArr, -119);

        i = 190;
        do {
            dArr[(i1 >>> 1) % N] *= (((iArr[i] -= by) + -2) - ((--i1) - Test.instanceCount));
            i1 += i;
            vMeth(iFld1);
            Test.lArrFld[i - 1] = 48479;
            try {
                i1 = (52998 / iFld1);
                iFld1 = (iFld / -195);
                i1 = (iFld / -203);
            } catch (ArithmeticException a_e) {}
            if (Test.bFld) {
                for (i21 = i; i21 < 132; ++i21) {
                    if (true) {
                    } else {
                        iFld += -97;
                        iFld1 += i;
                        Test.instanceCount -= -7;
                    }
                    iFld1 = i1;
                    i1 += (int)Test.instanceCount;
                    dArr[i] += i;
                    for (i23 = 1; i23 < 1; ++i23) {
                        Test.instanceCount = iFld;
                        iFld = by;
                        Test.instanceCount = 11L;
                        i24 += i23;
                        s2 = (short)2;
                    }
                    i22 = 43;
                    for (i25 = i21; i25 < 1; i25++) {
                        Test.fFld += i22;
                        s2 = (short)Test.fFld;
                        Test.lArrFld[i + 1] += i23;
                        Test.iArrFld1[i25 - 1] *= i26;
                        Test.fFld -= (float)0.73065;
                        Test.instanceCount -= iFld;
                        iFld = i26;
                    }
                }
            } else if (Test.bFld) {
                iFld1 += (int)Test.fFld;
            }
        } while (--i > 0);

        FuzzerUtils.out.println("i i1 by = " + i + "," + i1 + "," + by);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 s2 i25 = " + i24 + "," + s2 + "," + i25);
        FuzzerUtils.out.println("i26 dArr iArr = " + i26 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount byFld iFld = " + Test.instanceCount + "," + byFld + "," + iFld);
        FuzzerUtils.out.println("Test.bFld Test.fFld iFld1 = " + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld) + "," + iFld1);
        FuzzerUtils.out.println("dFld fArrFld iArrFld = " + Double.doubleToLongBits(dFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld1) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
