// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=193L;
    public static boolean bFld=true;
    public static float fFld=42.998F;
    public static double dFld=84.67171;
    public volatile int iFld=28;
    public int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 242L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7, int i8) {

        int i9=2, i10=6, i11=-186, i12=1, i13=-63496, i14=-56124, iArr[]=new int[N];
        double d1=89.129328, dArr[][]=new double[N][N];
        float fArr1[]=new float[N];
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -48.7696);
        FuzzerUtils.init(fArr1, 72.389F);
        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(sArr, (short)7534);
        FuzzerUtils.init(lArr, -36L);

        dArr = dArr;
        for (i9 = 9; i9 < 246; i9++) {
            fArr1 = fArr1;
            for (i11 = 1; i11 < 7; i11++) {
                i12 -= (int)10.762F;
                i12 += i11;
                for (i13 = 1; 2 > i13; ++i13) {
                    iArr[i11 + 1] += (int)Test.instanceCount;
                }
                i8 >>= -41342;
                sArr[i9 - 1] = (short)i9;
                iArr[i9] += i7;
            }
            switch (((i9 % 6) * 5) + 18) {
            case 46:
                i7 += i9;
                iArr[i9 + 1] ^= (int)Test.instanceCount;
                i10 = i12;
            case 24:
                d1 += -35.49F;
                break;
            case 47:
                iArr[i9 - 1] >>= i10;
                break;
            case 43:
            case 31:
            case 19:
                if (Test.bFld) break;
                break;
            }
        }
        vMeth2_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i3, int i4) {

        int i5=-10, i6=156, i15=-53147, i16=-9, i17=-13, i18=-99;
        double d=88.20664;
        float f=2.164F, f1=0.526F, f2=80.1018F, fArr[]=new float[N];
        byte by=40, byArr[]=new byte[N];

        FuzzerUtils.init(fArr, -90.134F);
        FuzzerUtils.init(byArr, (byte)109);

        fArr[(i5 >>> 1) % N] = (float)(((d * i4) - (i5 * i4)) / (Test.instanceCount | 1));
        for (f = 4; f < 349; f++) {
            by += (byte)(f - i5);
            vMeth2(i5, -12);
        }
        i4 = i3;
        d *= -4;
        i15 = 1;
        while (++i15 < 301) {
            for (i16 = 1; i16 < 5; i16++) {
                for (f1 = 1; f1 < 2; f1 += 3) {
                    byArr[i15] -= (byte)-10;
                    f2 *= Test.instanceCount;
                    i5 -= (int)d;
                    f2 += (((f1 * i17) + i3) - i3);
                    f2 += Test.instanceCount;
                    Test.instanceCount += (long)(f1 * f1);
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i6 + by + i15 + i16 +
            i17 + Float.floatToIntBits(f1) + i18 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(byArr);
    }

    public void vMeth(int i) {

        int i1=-3210, i2=-1, i19=-16547, i20=36, i21=3, i22=0, i23=-5;
        long l1=1333106592L, lArr1[]=new long[N];
        short s=-28146;

        FuzzerUtils.init(lArr1, -1586750662L);

        for (i1 = 261; i1 > 16; i1--) {
            vMeth1(i, i);
            Test.fFld += i;
            i = i1;
        }
        for (l1 = 7; l1 < 341; l1 += 2) {
            i += (int)(l1 + Test.fFld);
            lArr1[(int)(l1)] *= i;
            iArrFld[(int)(l1 + 1)] += (int)Test.instanceCount;
            for (i20 = 1; i20 < 9; ++i20) {
                Test.dFld += Test.instanceCount;
                Test.bFld = Test.bFld;
                for (i22 = 1; i22 < 2; i22++) {
                    int i24=-44249;
                    s = (short)i23;
                    i21 -= (int)1.124092;
                    i24 *= i20;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + l1 + i19 + i20 + i21 + i22 + i23 + s + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i25=-1411, i26=-2, i27=144, i28=-4, i29=0, i30=2, i31=-6, i32=6, i33=909;
        short s1=14846;

        iArrFld = iArrFld;
        vMeth(i25);
        for (i26 = 9; i26 < 396; i26++) {
            if (Test.bFld) break;
            iArrFld[i26] -= (int)-14.778F;
            i27 += i26;
            Test.fFld += i26;
            i28 = 1;
            do {
                iArrFld[i26] -= (int)Test.instanceCount;
                i27 = i28;
                iArrFld[i28 - 1] -= (int)Test.instanceCount;
                Test.fFld += i28;
                i25 = -62;
                i25 = -21518;
                Test.instanceCount += (((i28 * i28) + i26) - i25);
                i27 -= i26;
            } while (++i28 < 65);
            switch ((i26 % 5) + 75) {
            case 75:
                for (i29 = 4; i29 < 65; i29++) {
                    Test.dFld = i28;
                    Test.instanceCount = i25;
                    try {
                        i25 = (2 / i26);
                        i27 = (-810772233 % i26);
                        iArrFld[i29] = (iArrFld[i29 + 1] / iArrFld[i26 - 1]);
                    } catch (ArithmeticException a_e) {}
                }
                Test.instanceCount = Test.instanceCount;
                i27 += i26;
                break;
            case 76:
                for (i31 = 65; i31 > 2; --i31) {
                    i32 *= -4;
                    switch (((i31 % 10) * 5) + 104) {
                    case 115:
                        i30 /= (int)(i31 | 1);
                        Test.lArrFld[i31] -= i33;
                        break;
                    case 120:
                        i32 >>= s1;
                        iFld = -14974;
                        break;
                    case 129:
                    case 142:
                        Test.instanceCount -= (long)Test.fFld;
                        break;
                    case 151:
                        Test.fFld %= (i28 | 1);
                        break;
                    case 116:
                        iFld += (int)Test.instanceCount;
                    case 105:
                        i32 *= 54062;
                        break;
                    case 106:
                        i25 >>= 28;
                        break;
                    case 138:
                        Test.fFld = i30;
                        break;
                    case 136:
                        iArrFld = iArrFld;
                        break;
                    }
                }
            case 77:
                i25 += (int)(0.75F + (i26 * i26));
                break;
            case 78:
                i30 += (i26 ^ i33);
                break;
            case 79:
            }
        }

        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("s1 = " + s1);

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld iFld iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + iFld + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
