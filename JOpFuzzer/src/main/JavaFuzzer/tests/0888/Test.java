// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=108L;
    public static int iFld=111;
    public int iFld1=-54600;
    public static float fFld=119.13F;
    public static short sFld=9225;
    public volatile boolean bFld=true;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public int iArrFld1[]=new int[N];
    public static volatile int iArrFld2[]=new int[N];
    public static short sArrFld[]=new short[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 14789L);
        FuzzerUtils.init(Test.iArrFld2, 61530);
        FuzzerUtils.init(Test.sArrFld, (short)-4021);
        FuzzerUtils.init(Test.fArrFld, 2.230F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(int i) {

        float f=0.727F;

        f -= i;
        vMeth_check_sum += i + Float.floatToIntBits(f);
    }

    public static int iMeth(long l, int i3) {

        int i4=33368;
        double d=-2.42540;

        i4 = Math.max((int)(-(i4 - d)), 128);
        long meth_res = l + i3 + i4 + Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth1(long l1, double d2, int i8) {

        float f1=1.319F;
        int i9=-63, i10=467, i11=0, i12=13, i13=-125, i14=27249, i15=19750;
        short s=-14380;
        byte by=87;

        for (f1 = 13; 314 > f1; f1++) {
            iFld1 += iArrFld[(int)(f1 + 1)];
            i9 *= (Test.sFld = (short)((iFld1 >> iFld1) << Integer.reverseBytes(Test.iFld)));
            for (i10 = 1; i10 < 5; i10++) {
                Test.iFld = Math.abs(i8);
            }
            for (i12 = 1; 5 > i12; ++i12) {
                i13 = ((++iFld1) + (s--));
                for (i14 = 1; i14 < 2; i14++) {
                    d2 = (-((Test.instanceCount--) - 4));
                    bFld = (!((d2 + d2) != (l1--)));
                    i9 += i14;
                    Test.lArrFld = (Test.lArrFld = Test.lArrFld);
                    iFld1 += (int)(((Test.instanceCount - 214) % ((iArrFld1[i14 + 1]++) | 1)) - ((l1 >>>= i11) * (i11 *
                        i8)));
                    iMeth((long)((-32667 * (i13 - d2)) + ((i10 * d2) - 36830)), -(i13--));
                    by /= (byte)(Long.reverseBytes(-4 + (iFld1++)) | 1);
                }
            }
        }
        long meth_res = l1 + Double.doubleToLongBits(d2) + i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + i13 +
            s + i14 + i15 + by;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(float f2) {

        double d4=30.126865;
        int i18=4, i19=254, i20=-15346, i21=222, i22=-13, i23=180;
        long l3=36229L, l4=-1262377087L;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.408F);

        Test.iFld -= (int)(--d4);
        Test.iFld = (iMeth(Test.instanceCount, Test.iFld) - -1);
        for (i18 = 240; 15 < i18; --i18) {
            for (l3 = 1; 7 > l3; l3++) {
                i19 = 170;
            }
            switch (((-49 >>> 1) % 4) + 122) {
            case 122:
                Test.fFld *= 1;
                break;
            case 123:
                Test.lArrFld[i18] ^= Test.iFld;
                if (b) {
                    for (i21 = 1; i21 < 7; ++i21) {
                        i22 *= i21;
                        if (b) continue;
                        for (l4 = 2; 1 < l4; l4 -= 2) {
                            Test.sArrFld[i18 - 1] = (short)Test.fFld;
                            i22 = i18;
                        }
                    }
                } else if (false) {
                    fArr[i18] -= l3;
                } else {
                    Test.iFld += i21;
                }
                break;
            case 124:
                f2 += (float)0.38131;
                break;
            case 125:
                i22 = 99;
                break;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + Double.doubleToLongBits(d4) + i18 + i19 + l3 + i20 + i21 + i22 +
            (b ? 1 : 0) + l4 + i23 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static float fMeth(int i16, long l2, double d3) {

        byte by1=-113;
        int i17=6, i24=43975, i25=-111, i26=-13202, i27=-48059, i28=138, i29=41;

        i16 = (int)((by1 * (i17 + i16)) + ((--Test.iArrFld2[(Test.iFld >>> 1) % N]) * (i17 + l2)));
        i17 *= (int)1.57F;
        vMeth1(Test.fFld);
        Test.sFld = (short)Test.iFld;
        Test.sFld ^= (short)Test.iFld;
        for (i24 = 19; i24 < 339; i24 += 3) {
            for (i26 = i24; i26 < 15; ++i26) {
                try {
                    Test.iFld = (-925867727 % Test.iFld);
                    i27 = (i27 / i24);
                    i17 = (i26 / i27);
                } catch (ArithmeticException a_e) {}
                Test.iArrFld2[i26] += (int)d3;
                Test.fArrFld[i26 - 1] *= Test.iFld;
                i27 *= i16;
            }
            for (i28 = i24; i28 < 15; ++i28) {
                i16 >>= Test.iFld;
                d3 += Test.iFld;
                try {
                    i25 = (i24 / 51749);
                    Test.iArrFld2[i24 + 1] = (198 % i26);
                    Test.iArrFld2[i24] = (i27 % 7547);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = i16 + l2 + Double.doubleToLongBits(d3) + by1 + i17 + i24 + i25 + i26 + i27 + i28 + i29;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=13213, i2=9, i5=0, i6=6, i7=-36363, i30=54790, i31=104, i32=-183, i33=-10, i34=119;
        double d1=-1.128484;
        boolean bArr[]=new boolean[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr, (byte)35);

        Test.iFld = iFld1;
        vMeth((int)(((iFld1 - Test.fFld) - iArrFld[(Test.iFld >>> 1) % N]) + Test.iFld));
        iFld1 *= (--Test.iFld);
        for (i1 = 134; 7 < i1; --i1) {
            iFld1 *= (-iMeth((long)(i1 + d1), (int)(d1 - iFld1)));
            Test.sFld += (short)(((Test.iFld - i1) + (++Test.fFld)) + i1);
            i5 = 1;
            do {
                i2 -= (int)-635412314L;
                Test.instanceCount -= Math.min(12636, (Test.iFld + 195) << (Test.iFld++));
                for (i6 = 1; i6 < 1; ++i6) {
                    Test.fFld = ((iMeth1(Test.instanceCount, d1, i7) * fMeth(i5, Test.instanceCount, d1)) + Test.fFld);
                    Test.lArrFld[i1] <<= Test.instanceCount;
                }
                Test.fFld += i2;
                i7 = (int)Test.instanceCount;
                switch ((((-190 >>> 1) % 8) * 5) + 47) {
                case 49:
                    Test.lArrFld[i1] += Test.instanceCount;
                    break;
                case 70:
                    Test.iFld += (int)d1;
                    break;
                case 64:
                    d1 -= i5;
                    break;
                case 68:
                    i7 += i5;
                    break;
                case 51:
                    try {
                        i7 = (i6 % 60396);
                        iFld1 = (53572 % i5);
                        iArrFld[(-49416 >>> 1) % N] = (i6 % i5);
                    } catch (ArithmeticException a_e) {}
                    for (i30 = 1; i30 < 1; ++i30) {
                        if (bFld) break;
                        Test.instanceCount += i6;
                        bArr[(i2 >>> 1) % N] = bFld;
                    }
                    for (i32 = 1; 1 > i32; i32++) {
                        byte by2=-7;
                        i7 <<= i7;
                        by2 = (byte)Test.instanceCount;
                        Test.instanceCount += i32;
                        Test.fFld -= Test.instanceCount;
                    }
                    break;
                case 54:
                    byArr[i1 + 1] = (byte)-1607517730L;
                case 78:
                    iFld1 += (i5 ^ i34);
                    break;
                case 66:
                }
            } while (++i5 < 197);
        }

        FuzzerUtils.out.println("i1 i2 d1 = " + i1 + "," + i2 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i5 i6 i7 = " + i5 + "," + i6 + "," + i7);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 bArr = " + i33 + "," + i34 + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld iFld1 = " + Test.instanceCount + "," + Test.iFld + "," +
            iFld1);
        FuzzerUtils.out.println("Test.fFld Test.sFld bFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.sFld + ","
            + (bFld ? 1 : 0));
        FuzzerUtils.out.println("iArrFld Test.lArrFld iArrFld1 = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(iArrFld1));
        FuzzerUtils.out.println("Test.iArrFld2 Test.sArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld2) +
            "," + FuzzerUtils.checkSum(Test.sArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest iMeth1 vMeth1 fMeth
//DEBUG  iMeth1 ->  iMeth1 mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
