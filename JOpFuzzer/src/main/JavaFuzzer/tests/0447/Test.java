// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-329664697L;
    public static volatile int iFld=-54527;
    public int iFld1=1;
    public static float fFld=-122.859F;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[][]=new byte[N][N];
    public short sArrFld[]=new short[N];
    public byte byArrFld1[]=new byte[N];
    public volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -30242);
        FuzzerUtils.init(Test.byArrFld, (byte)-119);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i=0, i1=-55509, i2=51239, i3=205, i4=14;
        float f1=0.398F;
        double d1=4.96422;

        Test.iFld += 20194;
        i = 1;
        do {
            Test.iFld += -57799;
            for (i1 = 1; i1 < 6; ++i1) {
                Test.instanceCount = i;
                Test.instanceCount <<= Test.instanceCount;
                for (i3 = 1; i3 < 2; i3++) {
                    Test.instanceCount -= i3;
                    f1 = Test.iFld;
                    i2 += i4;
                    d1 = i4;
                    Test.iArrFld[i + 1] = i1;
                    Test.instanceCount -= 65439;
                    Test.iFld += (int)Test.instanceCount;
                    i2 += (((i3 * i2) + i) - i);
                }
            }
        } while (++i < 268);
        long meth_res = i + i1 + i2 + i3 + i4 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        short s=-17595;
        double d=1.86590, d2=-84.58803;
        float f2=111.771F;
        int i5=-5370, i6=16, i7=203;

        Test.iFld = (int)(s * Test.instanceCount);
        d = Test.iFld;
        Test.iFld *= (Test.iFld = iMeth1());
        f2 += Test.iFld;
        Test.iFld += -47233;
        Test.iFld -= -3778;
        for (i5 = 6; i5 < 155; ++i5) {
            if (i5 != 0) {
                vMeth_check_sum += s + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i5 + i6 + i7 +
                    Double.doubleToLongBits(d2);
                return;
            }
            i7 = 1;
            do {
                d2 = 1;
                do {
                    i6 >>= (int)Test.instanceCount;
                    i6 = (int)d;
                    Test.iFld += (int)(d2 * d2);
                    f2 *= f2;
                    Test.byArrFld[i7][i5 - 1] -= (byte)d;
                } while (++d2 < 1);
            } while (++i7 < 11);
        }
        vMeth_check_sum += s + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i5 + i6 + i7 +
            Double.doubleToLongBits(d2);
    }

    public int iMeth(float f) {

        double d3=-28.5917;
        int i8=-39474, i9=236, i10=9, i11=49653;
        short s1=18716;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 57L);

        vMeth();
        Test.iFld &= Test.iFld;
        lArr[(-57802 >>> 1) % N] -= Test.instanceCount;
        Test.iArrFld[(164 >>> 1) % N] = Test.iFld;
        for (d3 = 15; 255 > d3; d3++) {
            for (i9 = 1; i9 < 7; ++i9) {
                Test.instanceCount -= (long)d3;
                s1 = (short)Test.iFld;
                i10 = (int)38683137L;
                if (false) continue;
                Test.iArrFld[i9 + 1] *= i9;
                try {
                    Test.iArrFld[i9 + 1] = (i8 / -82);
                    i8 = (Test.iFld / Test.iArrFld[i9 - 1]);
                    i10 = (Test.iFld / iFld1);
                } catch (ArithmeticException a_e) {}
                i11 = 1;
                while (++i11 < 2) {
                    sArrFld = sArrFld;
                    try {
                        Test.iArrFld[i9 + 1] = (Test.iFld / i11);
                        i10 = (i10 % i9);
                        i8 = (i11 / iFld1);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + Double.doubleToLongBits(d3) + i8 + i9 + i10 + s1 + i11 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=-208L;
        int i12=24167, i13=28375, i14=-46441, i15=12, i16=-44339, i17=-253, i18=59537, i19=-8, i20=14;
        double d4=0.124978;
        byte by1=-43;
        short s2=21152;

        Test.iFld = (int)(iMeth(Test.fFld) - -35.563F);
        Test.instanceCount += Test.iFld;
        iFld1 -= (int)Test.instanceCount;
        Test.iArrFld = Test.iArrFld;
        iFld1 >>>= iFld1;
        for (byte by : byArrFld1) {
            Test.iArrFld[(Test.iFld >>> 1) % N] *= iFld1;
            Test.iFld -= iFld1;
        }
        for (l = 6; 294 > l; ++l) {
            lArrFld[(iFld1 >>> 1) % N] += (long)Test.fFld;
            d4 = l;
            Test.instanceCount = (long)d4;
            for (i13 = 87; i13 > 1; i13 -= 3) {
                i12 |= (int)Test.instanceCount;
                iFld1 <<= Test.iFld;
                Test.fFld = Test.fFld;
            }
        }
        Test.iArrFld[(iFld1 >>> 1) % N] += i12;
        for (i15 = 8; 361 > i15; i15++) {
            for (i17 = 71; i17 > 1; --i17) {
                i18 += (i17 * i17);
                Test.fFld *= i16;
                Test.instanceCount = Test.instanceCount;
            }
            for (i19 = 2; i19 < 71; i19++) {
                by1 ^= (byte)i18;
                i18 = (int)l;
                s2 += (short)(i19 - i17);
                bFld = bFld;
                Test.instanceCount = i13;
                Test.fFld -= -2.496F;
                Test.fFld += (float)0.23518;
            }
        }

        FuzzerUtils.out.println("l i12 d4 = " + l + "," + i12 + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 by1 = " + i19 + "," + i20 + "," + by1);
        FuzzerUtils.out.println("s2 = " + s2);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld iFld1 = " + Test.instanceCount + "," + Test.iFld + "," +
            iFld1);
        FuzzerUtils.out.println("Test.fFld bFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," + (bFld ? 1 :
            0) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.byArrFld sArrFld byArrFld1 = " + FuzzerUtils.checkSum(Test.byArrFld) + "," +
            FuzzerUtils.checkSum(sArrFld) + "," + FuzzerUtils.checkSum(byArrFld1));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
