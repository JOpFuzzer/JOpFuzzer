// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-43672L;
    public static int iFld=-9;
    public static double dFld=1.15358;
    public static byte byFld=-50;
    public static volatile long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 23135L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 29);

        Test.iFld >>>= Test.iFld;
        Test.instanceCount = Test.instanceCount;
        iArr2[(Test.iFld >>> 1) % N] = Test.iFld;
        iArr2[(Test.iFld >>> 1) % N] >>>= 216;
        iArr2[(Test.iFld >>> 1) % N] >>= (int)Test.instanceCount;
        Test.instanceCount -= 6;
        Test.instanceCount -= Test.iFld;
        long meth_res = FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        double d=0.33063;
        int i5=-2, i6=-8, i7=-5, iArr1[]=new int[N];
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)17258);
        FuzzerUtils.init(iArr1, 16143);
        FuzzerUtils.init(lArr, 0L);

        Test.iFld = (sArr[(Test.iFld >>> 1) % N]++);
        for (d = 12; d < 198; ++d) {
            iArr1[(int)(d)] += iArr1[(int)(d - 1)];
            i6 = 1;
            while (++i6 < 9) {
                lArr[i6 - 1] = ((lArr[i6]++) + Test.instanceCount);
                i5 += iMeth1();
                Test.iFld = i5;
                Test.iFld = (int)-7198770315442727118L;
            }
            i7 = 1;
            do {
                if (i7 != 0) {
                }
                Test.iFld >>>= -218;
                Test.iFld *= Test.iFld;
                Test.iFld <<= (int)Test.instanceCount;
                Test.instanceCount = (long)d;
            } while (++i7 < 9);
            iArr1[(int)(d - 1)] -= (int)Test.instanceCount;
        }
        long meth_res = Double.doubleToLongBits(d) + i5 + i6 + i7 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i, int i1) {

        int i3=-21670, i4=-55802, i8=45740, iArr[]=new int[N];
        float f=-2.197F;
        long l1=-5466697966988070523L;
        byte by=71;

        FuzzerUtils.init(iArr, 238);

        for (int i2 : iArr) {
            for (i3 = 4; i3 > 1; --i3) {
                f += (Long.reverseBytes(i1 * i2) - iMeth());
                for (l1 = 2; l1 > 1; --l1) {
                    f = i;
                    iArr[i3] = 201;
                    if (i4 != 0) {
                        vMeth_check_sum += l + i + i1 + i3 + i4 + Float.floatToIntBits(f) + l1 + i8 + by +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    l -= Test.iFld;
                    Test.iFld += (int)(l1 + by);
                    switch ((i3 % 2) + 121) {
                    case 121:
                        iArr[i3] = Test.iFld;
                        Test.iFld = (int)Test.dFld;
                        break;
                    case 122:
                        i1 -= i4;
                        Test.iFld += 9;
                        i <<= i3;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += l + i + i1 + i3 + i4 + Float.floatToIntBits(f) + l1 + i8 + by + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i9=-35032, i10=-1, i11=10194, i12=16738, i13=11824, i14=21786, i15=-47968, i16=197, i17=32665, i18=536;
        float f1=40.376F;
        short s=-25996;

        vMeth(Test.instanceCount, Test.iFld, Test.iFld);
        i9 = 1;
        while ((i9 += 2) < 314) {
            for (i10 = 8; 160 > i10; i10++) {
                Test.lArrFld[i10] += -1614;
                i11 += i9;
                i11 += (i10 + i10);
            }
        }
        i11 -= (int)f1;
        iArrFld[(Test.iFld >>> 1) % N] <<= i9;
        for (i12 = 3; i12 < 163; i12++) {
            i11 += (int)Test.instanceCount;
            for (i14 = i12; i14 < 157; ++i14) {
                i11 -= i13;
            }
            iArrFld[i12] -= (int)92.558F;
            i15 *= s;
            iArrFld = iArrFld;
            i16 = 1;
            while (++i16 < 157) {
                for (i17 = 1; 1 > i17; i17++) {
                    i15 += (i17 * i17);
                    Test.instanceCount -= i17;
                    iArrFld[i12 - 1] = i12;
                    i18 >>= i12;
                    if (false) continue;
                    switch (((i16 % 1) * 5) + 33) {
                    case 38:
                        Test.instanceCount = (long)f1;
                        Test.lArrFld[i12] |= i13;
                        break;
                    default:
                        Test.instanceCount += (i17 * i9);
                    }
                    Test.byFld -= (byte)Test.instanceCount;
                    i13 += (((i17 * f1) + i17) - Test.instanceCount);
                    i11 /= (int)(i9 | 1);
                }
                Test.iFld += (int)6000933758229661621L;
            }
        }

        FuzzerUtils.out.println("i9 i10 i11 = " + i9 + "," + i10 + "," + i11);
        FuzzerUtils.out.println("f1 i12 i13 = " + Float.floatToIntBits(f1) + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 s = " + i14 + "," + i15 + "," + s);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld Test.lArrFld iArrFld = " + Test.byFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
