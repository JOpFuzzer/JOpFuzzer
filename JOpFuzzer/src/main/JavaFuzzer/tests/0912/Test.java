// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2054858669L;
    public static short sFld=-13105;
    public static byte byFld=83;
    public static volatile double dFld=0.104421;
    public static float fFld=0.772F;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -72L);
        FuzzerUtils.init(Test.iArrFld, 33523);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, float f1) {

        int i8=45645, i9=62543, i10=210, i11=4, i12=201;
        boolean b=true;
        long l4=-1163310083683401294L;
        double d1=2.35128;

        for (i8 = 14; i8 < 298; i8++) {
            b = b;
        }
        for (long l2 : Test.lArrFld) {
            i9 *= Test.sFld;
            for (l4 = 1; l4 < 4; ++l4) {
                i9 += (int)(l4 * i7);
                i10 += (int)(l4 + l2);
                for (i11 = 1; i11 < 2; i11++) {
                    i9 += i11;
                    l2 = 8174;
                    i10 += i11;
                    d1 -= f1;
                    Test.byFld += (byte)i12;
                    f1 += (float)d1;
                    i9 >>= 63151;
                }
            }
        }
        long meth_res = i7 + Float.floatToIntBits(f1) + i8 + i9 + (b ? 1 : 0) + l4 + i10 + i11 + i12 +
            Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i5=112, i6=7513, i13=-14, i14=9, iArr[]=new int[N];
        float f=45.150F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 11234420L);
        FuzzerUtils.init(iArr, -2);

        for (i5 = 8; i5 < 170; i5++) {
            i6 *= (int)(((-2066762782L - Test.instanceCount) - (4443717066050978249L * (--i6))) | (++i6));
            i6 += (int)(++f);
            lArr1[i5 - 1] = (Test.instanceCount * ((i6 - -4579L) - Test.instanceCount));
            try {
                iArr[i5] = (i5 / -48);
                i6 = (i6 / 42061);
                i6 = (iArr[i5] / -33407);
            } catch (ArithmeticException a_e) {}
            i6 = i5;
            Test.instanceCount &= iMeth(-8, f);
            Test.instanceCount += (i5 | Test.instanceCount);
            for (i13 = 1; i13 < 10; i13 += 2) {
                i14 += i13;
                i6 *= i14;
                i6 -= (int)Test.instanceCount;
                Test.dFld -= i5;
                i6 += (((i13 * Test.instanceCount) + f) - i13);
            }
            Test.instanceCount = (long)Test.dFld;
        }
        vMeth_check_sum += i5 + i6 + Float.floatToIntBits(f) + i13 + i14 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i2, int i3, long l1) {

        int i4=238, i15=-33, i16=-27, i17=-16289, i18=-14;
        float f2=-36.982F;

        i4 = 1;
        while (++i4 < 195) {
            vMeth();
            i3 += i4;
            Test.sFld += (short)i4;
            i3 = i4;
            Test.sFld -= (short)l1;
            if (false) continue;
            for (i15 = i4; i15 < 8; i15++) {
                i16 *= i4;
            }
        }
        i16 = i4;
        for (i17 = 4; 222 > i17; ++i17) {
            f2 -= i16;
            i16 = i4;
            f2 *= i18;
            l1 += (i17 - i15);
        }
        long meth_res = i2 + i3 + l1 + i4 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=10, i1=-38, i19=4, i20=121, i21=33609, i22=-38, i23=61123, i24=42383, i25=58, i26=-40871;
        double d=2.9766;
        boolean b1=false;
        long l5=3754853995L, lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, 12L);
        FuzzerUtils.init(byArr, (byte)-25);

        if (b1) {
            for (i = 15; 314 > i; i++) {
                i1 = (++i1);
                if (((Test.instanceCount -= (i + i)) > Math.abs(++d)) || (byArr[i - 1] < lMeth(i1, i,
                    Test.instanceCount))) break;
                i1 *= (int)Test.instanceCount;
                if (b1) {
                    for (i19 = i; 84 > i19; i19++) {
                        i1 = (int)Test.instanceCount;
                        Test.fFld = Test.instanceCount;
                    }
                    i1 += i19;
                } else if (b1) {
                    Test.instanceCount += (i - Test.fFld);
                    i1 += -12;
                    Test.instanceCount -= i1;
                    i21 = 1;
                    while (++i21 < 84) {
                        Test.iArrFld[i21 - 1][i - 1] = i20;
                    }
                }
                i20 >>= (int)Test.instanceCount;
                i1 += (int)d;
                for (i22 = 2; 84 > i22; ++i22) {
                    switch (((i19 >>> 1) % 9) + 38) {
                    case 38:
                        i23 = i19;
                        Test.instanceCount <<= i23;
                        Test.fFld = -98;
                        i23 += i22;
                    case 39:
                        i20 += i19;
                        break;
                    case 40:
                        Test.instanceCount += (i22 + l5);
                        b1 = b1;
                        break;
                    case 41:
                        l5 &= 65162;
                        for (i24 = 1; 2 > i24; i24++) {
                            byArr[i24] += (byte)l5;
                        }
                        break;
                    case 42:
                        i1 /= (int)(Test.byFld | 1);
                    case 43:
                        l5 |= i25;
                        break;
                    case 44:
                    case 45:
                        d = -65;
                        break;
                    case 46:
                        Test.fFld /= (i21 | 1);
                        break;
                    default:
                        Test.fFld *= -6161239981811889215L;
                    }
                }
            }
        } else if (b1) {
            i1 = i26;
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("b1 i22 i23 = " + (b1 ? 1 : 0) + "," + i22 + "," + i23);
        FuzzerUtils.out.println("l5 i24 i25 = " + l5 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 lArr byArr = " + i26 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.byFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.dFld Test.fFld Test.lArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
