// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-20L;
    public double dFld=-1.85723;
    public static boolean bFld=true;
    public static float fFld=6.344F;
    public static volatile int iFld=153;
    public static short sFld=-23874;
    public static boolean bArrFld[]=new boolean[N];
    public long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(short s, int i7, float f1) {

        int i8=-2, i9=-44, i10=20, i11=108, i12=21440, iArr[]=new int[N];
        boolean b=true;
        byte by1=-55;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.151F);
        FuzzerUtils.init(iArr, 34147);

        for (i8 = 7; 321 > i8; ++i8) {
            b = b;
            fArr[i8 - 1] -= -59;
            for (i10 = 1; i10 < 5; i10 += 3) {
                if (false) break;
                Test.instanceCount += (((i10 * i7) + i9) - Test.instanceCount);
                i12 = i9;
                i12 <<= (int)Test.instanceCount;
                i9 = i8;
            }
            f1 = 1.414F;
            Test.instanceCount *= i7;
            i12 -= i11;
        }
        i11 = by1;
        s += (short)i9;
        iArr[(i9 >>> 1) % N] -= (int)4L;
        long meth_res = s + i7 + Float.floatToIntBits(f1) + i8 + i9 + (b ? 1 : 0) + i10 + i11 + i12 + by1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1(int i5, int i6) {

        byte by=-64;

        Test.instanceCount = by;
        i6 += i6;
        i5 += (int)((--Test.instanceCount) + byMeth((short)(7601), i5, -87.320F));
        Test.bArrFld[(i6 >>> 1) % N] = true;
        vMeth1_check_sum += i5 + i6 + by;
    }

    public static void vMeth(int i2, int i3) {

        int i4=-35081, i14=39730, i15=43346, i16=24251, iArr1[]=new int[N];
        byte by2=121;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -13);
        FuzzerUtils.init(lArr, 32540L);

        i4 = 1;
        while (++i4 < 228) {
            vMeth1(i4, -14);
            iArr1[i4 - 1] <<= (int)-6603L;
            lArr = lArr;
            i3 <<= i2;
            for (i14 = i4; i14 < 7; i14++) {
                iArr1[i14 - 1] ^= i15;
            }
            i16 = 1;
            do {
                Test.instanceCount += i16;
                if (Test.bFld) break;
                i15 += (i16 - Test.instanceCount);
            } while (++i16 < 7);
        }
        Test.instanceCount = i2;
        iArr1[(i3 >>> 1) % N] = i3;
        i15 = by2;
        Test.instanceCount += Test.instanceCount;
        vMeth_check_sum += i2 + i3 + i4 + i14 + i15 + i16 + by2 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=10, i1=26, i18=7, i19=-14, i20=1423, i21=-36022, i22=-3, i23=59779, i24=-8, iArr2[]=new int[N];
        float f=-44.465F;
        double d=-2.85706, dArr[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr, -23.71825);
        FuzzerUtils.init(byArr, (byte)116);
        FuzzerUtils.init(iArr2, 9);

        for (i = 6; 232 > i; i++) {
            f -= (i1++);
            dArr[i] = dFld;
            vMeth(i, i1);
        }
        i1 += (int)Test.instanceCount;
        byArr[(i1 >>> 1) % N] -= (byte)i;
        for (int i17 : iArr2) {
            for (i18 = 2; 63 > i18; i18++) {
                i17 = i19;
                i19 += i18;
            }
            i19 *= (int)Test.instanceCount;
            for (i20 = 3; i20 < 63; ++i20) {
                i21 += i19;
                Test.fFld -= f;
                Test.bArrFld[i20 - 1] = Test.bFld;
                i17 -= i21;
                i1 -= -8970;
            }
            iArr2[(i21 >>> 1) % N] -= (int)Test.instanceCount;
            Test.fFld -= Test.fFld;
            for (i22 = 63; i22 > 3; i22--) {
                i23 = Test.iFld;
                Test.instanceCount += (((i22 * Test.sFld) + i20) - i18);
            }
            if (Test.bFld) continue;
            i21 += i17;
            i1 = i;
            for (d = 3; d < 63; d++) {
                i1 |= (int)Test.instanceCount;
                i1 >>= i19;
            }
        }
        i21 >>= Test.iFld;
        lArrFld[(-7 >>> 1) % N][(6 >>> 1) % N] -= i19;

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("d i24 dArr = " + Double.doubleToLongBits(d) + "," + i24 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("byArr iArr2 = " + FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.iFld Test.sFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.iFld
            + "," + Test.sFld);
        FuzzerUtils.out.println("Test.bArrFld lArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
