// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=27094L;
    public volatile double dFld=0.89941;
    public static int iFld=12;
    public static byte byFld=-123;
    public float fFld=111.60F;
    public boolean bFld=false;
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-113);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i8=14, i9=-21805, i10=40703, i11=-40607, i12=-1158, i13=6, i14=-60231, i15=-1, iArr1[]=new int[N];
        boolean b=false;
        float f1=-96.791F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 126.50655);
        FuzzerUtils.init(iArr1, 39797);

        for (i8 = 9; i8 < 356; i8++) {
            for (i10 = i8; i10 < 5; i10++) {
                b = b;
            }
            i12 = 1;
            while (++i12 < 5) {
                i9 += 60388;
            }
            i11 &= Test.iFld;
            i13 = 1;
            while (++i13 < 5) {
                f1 = i9;
                dArr[i8 + 1] = Test.instanceCount;
            }
            i11 = (int)Test.instanceCount;
        }
        for (i14 = 3; i14 < 136; i14++) {
            switch ((i14 % 9) + 67) {
            case 67:
                Test.instanceCount = Test.instanceCount;
                iArr1[i14] += (int)41L;
            case 68:
                Test.instanceCount >>= i8;
                break;
            case 69:
                i15 -= 0;
                break;
            case 70:
                i11 += (((i14 * i9) + Test.instanceCount) - i8);
                break;
            case 71:
                iArr1[i14] |= 58551;
            case 72:
                i15 *= (int)f1;
                break;
            case 73:
                i11 <<= i12;
                break;
            case 74:
                i9 -= (int)f1;
                break;
            case 75:
                if (b) break;
                break;
            default:
                i15 += (((i14 * i8) + Test.instanceCount) - Test.instanceCount);
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + (b ? 1 : 0) + i12 + i13 + Float.floatToIntBits(f1) + i14 + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        float f=1.423F;
        int i5=-248, i6=-10165, i7=-22272, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -5);

        iArr = (iArr = (iArr = (iArr = FuzzerUtils.int1array(N, (int)-26064))));
        Test.instanceCount = (Test.iFld++);
        Test.iFld *= (Test.iFld - (iArr[(-20956 >>> 1) % N]--));
        try {
            Test.iFld = (int)((Test.byFld++) + (++f));
            for (i5 = 8; 255 > i5; ++i5) {
                switch ((i5 % 1) * 5) {
                case 5:
                    i7 = 1;
                    do {
                        Test.instanceCount += iMeth1();
                        i6 += (int)f;
                        switch ((i7 % 2) + 18) {
                        case 18:
                            Test.iFld += (((i7 * i7) + l) - i6);
                            Test.instanceCount = i7;
                            break;
                        case 19:
                            i6 = i6;
                            break;
                        default:
                            Test.iFld >>= i6;
                        }
                    } while (++i7 < 7);
                    break;
                default:
                    i6 <<= -228;
                }
            }
        }
        catch (ArithmeticException exc1) {
            f *= Test.iFld;
        }
        finally {
            l -= l;
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i2, int i3) {

        int i4=3, i16=52456, i17=-8, i18=117, i19=-26998, i20=-12, i21=75, iArr2[][]=new int[N][N];
        double d=1.102307;
        boolean b1=true;
        short s=15336;

        FuzzerUtils.init(iArr2, 32);

        i4 = 1;
        while (++i4 < 284) {
            vMeth(-1553736363L);
        }
        for (i16 = 7; i16 < 301; ++i16) {
            for (i18 = 1; i18 < 6; ++i18) {
                Test.instanceCount += i2;
                iArr2[i16][i18 + 1] = (int)d;
                for (i20 = i16; i20 < 2; i20++) {
                    iArr2[i18 + 1][i16 + 1] = i17;
                    Test.instanceCount -= i2;
                    Test.instanceCount = i17;
                    if (b1) break;
                    i21 |= i2;
                    i21 = s;
                    i3 += i20;
                    i21 = Test.iFld;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i16 + i17 + i18 + i19 + Double.doubleToLongBits(d) + i20 + i21 + (b1 ? 1 : 0) +
            s + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-225, i1=-3, i22=93, i23=6, i24=224, i25=1, i26=36428, iArr3[]=new int[N];
        float f2=-2.31F;
        short s1=3493;
        long l1=-127L;

        FuzzerUtils.init(iArr3, 152);

        dFld = ((i / ((i1++) | 1)) * ((++i) - iMeth(i1, i1)));
        i22 = 1;
        do {
            Test.iFld = Test.iFld;
            iArr3[i22 - 1] = i22;
        } while (++i22 < 237);
        iArr3[(i22 >>> 1) % N] += (int)Test.instanceCount;
        for (i23 = 5; i23 < 206; ++i23) {
            for (i25 = i23; i25 < 125; ++i25) {
                i = i26;
                f2 = 1;
                do {
                    fFld = -229;
                    i1 += i1;
                    dFld = Test.instanceCount;
                    try {
                        Test.iFld = (i1 / -596773003);
                        i24 = (Test.iFld % -1859450806);
                        Test.iFld = (171 % i22);
                    } catch (ArithmeticException a_e) {}
                    i24 >>= i26;
                    i26 >>>= i23;
                    Test.iFld += (-157 + (f2 * f2));
                    i -= (int)Test.instanceCount;
                    fFld = i22;
                    switch ((i23 % 2) + 105) {
                    case 105:
                        bFld = bFld;
                        fFld = (float)dFld;
                        break;
                    case 106:
                        switch ((int)(((f2 % 7) * 5) + 10)) {
                        case 28:
                            iArr3[(int)(f2 - 1)] -= (int)Test.instanceCount;
                            s1 += (short)75;
                            break;
                        case 41:
                            i = 56474;
                            fFld += i24;
                            if (bFld) break;
                            Test.byArrFld = Test.byArrFld;
                            break;
                        case 14:
                            i1 = Test.iFld;
                            break;
                        case 44:
                            dFld = Test.instanceCount;
                            break;
                        case 37:
                            iArr3[i23] <<= (int)l1;
                        case 40:
                            i24 += (int)l1;
                            break;
                        case 17:
                            iArr3[i23 - 1] = (int)-113.520F;
                            break;
                        default:
                            fFld = (float)dFld;
                        }
                    }
                } while (++f2 < 1);
            }
        }

        FuzzerUtils.out.println("i i1 i22 = " + i + "," + i1 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 f2 s1 = " + i26 + "," + Float.floatToIntBits(f2) + "," + s1);
        FuzzerUtils.out.println("l1 iArr3 = " + l1 + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld fFld bFld = " + Test.byFld + "," + Float.floatToIntBits(fFld) + "," + (bFld
            ? 1 : 0));
        FuzzerUtils.out.println("Test.byArrFld = " + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
