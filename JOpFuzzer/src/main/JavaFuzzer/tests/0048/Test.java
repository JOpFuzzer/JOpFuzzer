// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=95L;
    public int iFld=10;
    public static int iFld1=1;
    public static float fFld=98.14F;
    public short sFld=-18775;
    public static volatile int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -41697);
        FuzzerUtils.init(Test.fArrFld, -2.976F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, int i4) {

        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -6);

        iArr1[(i4 >>> 1) % N] += -37;
        vMeth_check_sum += i3 + i4 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(long l) {

        int i5=-3, i6=31879, i7=-14, i8=-39776;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5L);

        Test.iFld1 -= (int)(Math.min(Test.iFld1 + Test.instanceCount, Test.iFld1 - Test.iFld1) + Math.max(Test.iFld1 +
            13, Long.reverseBytes(Test.instanceCount)));
        vMeth(Test.iFld1, Test.iFld1);
        Test.iFld1 += Test.iFld1;
        Test.fFld *= Test.iFld1;
        Test.iFld1 = (int)-12L;
        i5 = 1;
        do {
            Test.iFld1 >>= (int)5429749110206104502L;
            for (i6 = 1; i6 < 10; i6++) {
                i7 += 235;
                if (Test.iFld1 != 0) {
                }
            }
            lArr[i5 + 1] += i6;
            i8 = 1;
            while (++i8 < 10) {
                Test.iArrFld[i5 + 1] <<= Test.iFld1;
            }
            lArr = lArr;
            Test.iFld1 -= Test.iFld1;
        } while (++i5 < 157);
        long meth_res = l + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(float f, int i2) {


        f += iMeth(Test.instanceCount);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i2;
    }

    public void mainTest(String[] strArr1) {

        byte by=47, byArr[]=new byte[N];
        int i=12, i1=45198, i9=0, i10=181, i11=25942, i12=-32133, i13=-13, iArr[]=new int[N];
        double d=0.23136;
        boolean b=false;

        FuzzerUtils.init(iArr, 1);
        FuzzerUtils.init(byArr, (byte)-2);

        iArr[(iFld >>> 1) % N] *= (by = (byte)(iFld++));
        for (i = 5; i < 128; i++) {
            iFld += (i + i);
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(Test.fFld, -34140);
            byArr[i - 1] -= (byte)Test.iFld1;
            for (i9 = 204; i9 > 4; i9--) {
                try {
                    i1 = (-180881864 % i);
                    i11 = (i11 % 57221);
                    iFld = (iFld / i);
                } catch (ArithmeticException a_e) {}
                i1 += (i9 * i9);
                Test.iArrFld[i] = i1;
                for (i12 = 1; i12 < 2; ++i12) {
                    int i14=26;
                    d += Test.instanceCount;
                    iFld = i13;
                    if (b) continue;
                    i1 += i13;
                    i11 += (i12 | i13);
                    switch ((i % 9) + 69) {
                    case 69:
                        iFld = i12;
                        Test.instanceCount >>= iFld;
                        i14 >>= -221;
                        i1 >>>= (int)Test.instanceCount;
                    case 70:
                    case 71:
                        iFld <<= i13;
                    case 72:
                        Test.fFld = i;
                        i11 += (i12 * i12);
                        i14 = i12;
                        break;
                    case 73:
                        if (b) break;
                        Test.iFld1 += (((i12 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                        i13 += i11;
                        break;
                    case 74:
                        Test.fArrFld[i9 + 1] -= Test.instanceCount;
                        break;
                    case 75:
                        Test.fArrFld[i12] += -1.657F;
                        break;
                    case 76:
                        Test.instanceCount += (((i12 * Test.fFld) + sFld) - Test.instanceCount);
                    case 77:
                    default:
                        by += (byte)Test.instanceCount;
                    }
                }
            }
        }

        FuzzerUtils.out.println("by i i1 = " + by + "," + i + "," + i1);
        FuzzerUtils.out.println("i9 i10 i11 = " + i9 + "," + i10 + "," + i11);
        FuzzerUtils.out.println("i12 i13 d = " + i12 + "," + i13 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("b iArr byArr = " + (b ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.iFld1 = " + Test.instanceCount + "," + iFld + "," +
            Test.iFld1);
        FuzzerUtils.out.println("Test.fFld sFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," + sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
