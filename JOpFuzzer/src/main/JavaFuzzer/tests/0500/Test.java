// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-130L;
    public static float fFld=-1.337F;
    public static int iFld=-36;
    public static byte byFld=-57;
    public static int iFld1=12;
    public double dFld=0.102060;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -38808);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3, int i4) {

        float f=38.365F, f1=1.390F, fArr[]=new float[N];
        int i5=-49967, i6=-15, i7=-36261, i8=-45664, i9=251, iArr1[]=new int[N];
        boolean b=false;
        double d1=113.77954;
        short s1=30210;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 1);
        FuzzerUtils.init(fArr, -126.272F);
        FuzzerUtils.init(lArr, -1180074578L);

        for (f = 8; 387 > f; ++f) {
            iArr1[(int)(f)] += (int)f;
            f1 += i4;
            iArr1[(int)(f)] = i5;
            switch ((int)((f % 6) + 113)) {
            case 113:
                for (i6 = 1; 4 > i6; ++i6) {
                    byte by=96;
                    Test.instanceCount += i6;
                    b = b;
                    i3 -= (int)Test.instanceCount;
                    d1 = by;
                    for (i8 = i6; i8 < 2; i8++) {
                        i4 = i3;
                        Test.instanceCount = 47L;
                        i7 *= i4;
                    }
                }
                fArr[(int)(f)] %= (i4 | 1);
                break;
            case 114:
                lArr[(i4 >>> 1) % N] = lArr[(int)(f + 1)];
                break;
            case 115:
                f1 -= -12L;
                break;
            case 116:
                f1 += (f * f);
                break;
            case 117:
                i4 = (int)Test.fFld;
                break;
            case 118:
                Test.instanceCount += s1;
                break;
            }
        }
        long meth_res = i3 + i4 + Float.floatToIntBits(f) + i5 + Float.floatToIntBits(f1) + i6 + i7 + (b ? 1 : 0) +
            Double.doubleToLongBits(d1) + i8 + i9 + s1 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i1) {

        double d=-2.127883, d2=-47.5251;
        short s=-8388;
        int i10=231, i11=-101, i12=46609, iArr[]=new int[N];
        byte by1=-74;
        boolean b1=false;

        FuzzerUtils.init(iArr, 42075);

        for (int i2 : iArr) {
            Test.instanceCount |= -1;
            i1 = (int)(-((i2 + Test.instanceCount) + (d * 239)));
            s *= (short)((Math.min(-11, i2) & (-(i2 + -25361))) + lMeth(i1, -29185));
            for (d2 = 1; d2 < 4; ++d2) {
                for (i11 = 1; i11 < 2; i11++) {
                    Test.instanceCount += (i11 ^ i11);
                    Test.instanceCount = Test.iFld;
                    i12 = by1;
                    i1 = i11;
                    Test.iFld += (i11 * i11);
                    switch ((int)(((d2 % 9) * 5) + 71)) {
                    case 94:
                        i2 += i11;
                        i10 /= (int)((long)(Test.fFld) | 1);
                        i12 *= i11;
                        break;
                    case 75:
                    case 114:
                    case 100:
                        if (b1) break;
                        break;
                    case 92:
                        i2 += 2;
                    case 86:
                        d -= Test.instanceCount;
                        break;
                    case 76:
                        Test.instanceCount = i1;
                        break;
                    case 106:
                        Test.instanceCount += i10;
                        break;
                    case 96:
                        i1 += (((i11 * Test.iFld) + i1) - Test.iFld);
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += i1 + Double.doubleToLongBits(d) + s + Double.doubleToLongBits(d2) + i10 + i11 + i12 + by1 +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i) {

        double d3=34.4970;
        short s2=-31956;
        long l=1363263591L, lArr1[][]=new long[N][N];
        int i13=10299, i14=-114, i15=-52590, i16=-500, i17=-244;

        FuzzerUtils.init(lArr1, -12L);

        vMeth1(Test.iFld);
        lArr1[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = 3822;
        i >>= (int)629838262L;
        Test.instanceCount = i;
        d3 -= s2;
        for (l = 4; 342 > l; l++) {
            switch ((int)((l % 2) + 89)) {
            case 89:
                for (i14 = 1; i14 < 5; ++i14) {
                    for (i16 = 1; 2 > i16; ++i16) {
                        Test.instanceCount <<= Test.instanceCount;
                        Test.iArrFld[i14 - 1] = (int)l;
                        i15 += (int)l;
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)1);
                    }
                    i17 <<= i16;
                    Test.instanceCount += (i14 + Test.iFld);
                }
            case 90:
                Test.instanceCount += (long)Test.fFld;
            }
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d3) + s2 + l + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i18=-47344, i19=-160, i20=4, i21=2, i22=52454, i23=63, i24=25, i25=12, i26=1, i27=-206, i28=19, i29=-32;
        short s3=19251;

        vMeth(Test.iFld);
        i18 = 1;
        while (++i18 < 157) {
            Test.iFld += i18;
            Test.iFld <<= i18;
            for (i19 = 5; i19 < 160; i19++) {
                Test.iFld = (int)Test.instanceCount;
                lArrFld = lArrFld;
            }
        }
        Test.iFld += i20;
        for (i21 = 13; i21 < 343; i21++) {
            s3 &= (short)i19;
        }
        switch ((((i22 >>> 1) % 2) * 5) + 5) {
        case 7:
            Test.instanceCount <<= i18;
            for (i23 = 168; 6 < i23; --i23) {
                Test.instanceCount -= Test.instanceCount;
                i20 = i22;
                switch (((i23 % 1) * 5) + 118) {
                case 121:
                    for (i25 = 9; 155 > i25; ++i25) {
                        Test.fFld += (((i25 * Test.byFld) + Test.iFld) - i19);
                        Test.iArrFld[i23] -= i21;
                        for (i27 = 1; i27 < 2; i27 += 2) {
                            Test.fFld += i27;
                            i20 += i23;
                            switch (((i27 % 9) * 5) + 14) {
                            case 15:
                            case 38:
                                i24 += i18;
                                Test.iFld1 = i18;
                            case 58:
                                i20 -= (int)1210750732L;
                                Test.byFld -= (byte)i28;
                                Test.instanceCount += i21;
                            case 57:
                                Test.iFld1 = i25;
                                i20 += (0 + (i27 * i27));
                                break;
                            case 43:
                                Test.instanceCount -= (long)dFld;
                            case 52:
                                i28 ^= -723;
                                break;
                            case 51:
                                i20 += (i27 * i23);
                                break;
                            case 34:
                                Test.iFld1 += (((i27 * i26) + Test.instanceCount) - i23);
                            case 35:
                                i22 %= (int)(Test.instanceCount | 1);
                            default:
                                i22 = -231;
                            }
                        }
                    }
                    break;
                }
            }
            break;
        case 11:
            Test.instanceCount >>= 9L;
            break;
        default:
            Test.instanceCount *= i29;
        }

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 s3 = " + i21 + "," + i22 + "," + s3);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 = " + i29);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld Test.iFld1 dFld = " + Test.byFld + "," + Test.iFld1 + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iArrFld lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
