// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public static float fFld=67.469F;
    public static volatile boolean bFld=true;
    public static float fArrFld[]=new float[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.804F);
        FuzzerUtils.init(Test.iArrFld, 7);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(byte by, int i9) {

        int i10=-43821, i11=-135, i12=0, i13=-60846, i14=-59428, iArr1[]=new int[N];
        double d1=-1.123945, d2=0.124876;
        boolean b=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 31593);
        FuzzerUtils.init(lArr1, 59L);

        for (i10 = 5; i10 < 128; i10 += 2) {
            Test.fFld -= 0.304F;
            for (i12 = i10; 25 > i12; ++i12) {
                i13 *= i13;
                Test.fArrFld = Test.fArrFld;
                if (false) {
                    iArr1[i10 - 1] = i12;
                    for (d1 = 1; d1 < 1; d1++) {
                        lArr1[i10 - 1] = 10;
                    }
                    if (b) continue;
                } else if (b) {
                    i14 -= i9;
                    try {
                        iArr1[i10] = (i13 / -174);
                        i9 = (i13 % 49412);
                        iArr1[i12 - 1] = (iArr1[i10 + 1] % -8985);
                    } catch (ArithmeticException a_e) {}
                    Test.fFld = Test.instanceCount;
                } else if (b) {
                    lArr1[i10] *= -11922;
                    d2 -= Test.instanceCount;
                } else {
                    b = b;
                }
            }
        }
        vMeth_check_sum += by + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) + i14 + (b ? 1 : 0) +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth(long l1) {

        int i8=-7, i15=-214, i16=-109, i17=-1, i18=7, i19=128;
        byte by1=-102;
        double d3=2.12447;

        i8 >>= (int)(--l1);
        vMeth(by1, i8);
        for (i15 = 15; i15 < 370; ++i15) {
            i16 += (i15 + i15);
            i16 = (int)Test.instanceCount;
            i8 += (i15 ^ i8);
            i17 = 1;
            do {
                boolean b1=false;
                d3 += -39960;
                if (i17 != 0) {
                }
                i16 *= 28362;
                i16 -= -47586;
                if (b1) {
                    for (i18 = 1; i18 > 1; i18 -= 3) {
                        i19 += (((i18 * i8) + i16) - i19);
                    }
                    l1 += -34840;
                } else if (Test.bFld) {
                    if (i16 != 0) {
                    }
                } else if (b1) {
                    Test.fFld -= Test.instanceCount;
                } else {
                    Test.iArrFld[i17 - 1] *= -181;
                }
            } while (++i17 < 5);
        }
        long meth_res = l1 + i8 + by1 + i15 + i16 + i17 + Double.doubleToLongBits(d3) + i18 + i19;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i2, long l, int i3) {

        float f=127.805F, f1=47.493F;
        int i4=5, i5=52448, i6=-11, i7=-13, iArr[]=new int[N];
        double d=85.82035;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -210);
        FuzzerUtils.init(lArr, -8L);

        for (f = 11; f < 233; ++f) {
            i2 -= (++i2);
            for (i5 = 7; i5 > f; --i5) {
                l >>= (i3--);
                f1 -= 105;
                try {
                    i2 = (iArr[(int)(f)] / iArr[i5]);
                    i2 = (-220 / i4);
                    i4 = (42012 % i2);
                } catch (ArithmeticException a_e) {}
                i2 *= (int)(86 - ((i4++) + (i2 + f)));
                lArr[i5] += i5;
                i6 *= (i2--);
            }
            d += (i2 + i6);
            i7 = 1;
            do {
                i6 -= (int)((--i6) - (lMeth(Test.instanceCount) - i6));
                i4 = 10;
                Test.instanceCount *= 18;
            } while (++i7 < 7);
        }
        i4 = 72;
        long meth_res = i2 + l + i3 + Float.floatToIntBits(f) + i4 + i5 + i6 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d) + i7 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-3717, i1=-54, i21=-201, i22=14, i23=12, i24=12, i25=-135, i26=0, i27=65029, i28=60;
        short s=-28467;
        double d4=-85.62065;
        byte by2=19;

        for (i = 10; i < 166; ++i) {
            i1 >>= ((i1--) - iMeth(i1, -233L, i1));
            for (i21 = 2; i21 < 161; ++i21) {
                Test.iArrFld[i21 - 1] -= -148;
                i22 += i;
                for (i23 = 1; 2 > i23; ++i23) {
                    i22 = (int)-9L;
                    Test.instanceCount = i22;
                    i24 += i21;
                    i22 += (((i23 * i21) + i21) - i25);
                    i25 ^= s;
                    i1 += i21;
                    Test.instanceCount += i24;
                    i1 += (i23 - i1);
                }
            }
            for (i26 = 1; i26 < 161; i26++) {
                i24 += (((i26 * i24) + i22) - i21);
                Test.instanceCount += (i26 | i21);
                i25 = 61781;
                Test.iArrFld[i + 1] = i1;
                for (d4 = 1; d4 < 2; ++d4) {
                    i28 <<= (int)Test.instanceCount;
                    switch (((i26 % 7) * 5) + 62) {
                    case 77:
                        i27 ^= -13;
                        break;
                    case 64:
                        i24 = (int)190L;
                        break;
                    case 79:
                        switch ((i % 2) + 71) {
                        case 71:
                            Test.instanceCount = i;
                            by2 |= (byte)i1;
                            break;
                        case 72:
                            i24 *= (int)4548422986463588915L;
                            i25 >>= i23;
                            Test.instanceCount = by2;
                            break;
                        default:
                            i24 += i26;
                        }
                        break;
                    case 81:
                        if (Test.bFld) break;
                    case 74:
                        i1 >>= i21;
                    case 76:
                        Test.iArrFld[(int)(d4 - 1)] = i28;
                    case 82:
                        i24 <<= i1;
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i21 = " + i + "," + i1 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 s i26 = " + i25 + "," + s + "," + i26);
        FuzzerUtils.out.println("i27 d4 i28 = " + i27 + "," + Double.doubleToLongBits(d4) + "," + i28);
        FuzzerUtils.out.println("by2 = " + by2);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fArrFld Test.iArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
