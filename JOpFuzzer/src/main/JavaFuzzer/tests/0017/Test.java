// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3887598597138639711L;
    public volatile byte byFld=-61;
    public float fFld=-1.678F;
    public static int iFld=-30800;
    public static double dFld=-110.128539;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -8);
    }

    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i6, long l2, long l3) {

        int i7=183, i8=-1, i9=13, i10=0, i11=-29;
        double d2=-101.126357;
        byte by=-28;
        float f1=49.103F;

        for (i7 = 4; i7 < 148; ++i7) {
            Test.dFld += l2;
            i8 -= i8;
            for (d2 = 1; d2 < 11; d2++) {
                by = (byte)Test.iFld;
                for (i10 = 1; i10 < 2; ++i10) {
                    f1 *= i6;
                    i9 += (i10 ^ i6);
                    Test.iFld = (int)2.537F;
                    i9 -= i11;
                    Test.instanceCount ^= 3L;
                    i9 = Test.iFld;
                    i11 += by;
                }
                f1 += (float)d2;
                i8 += (int)(d2 * d2);
            }
        }
        long meth_res = i6 + l2 + l3 + i7 + i8 + Double.doubleToLongBits(d2) + i9 + by + i10 + i11 +
            Float.floatToIntBits(f1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(long l, short s, long l1) {

        float f=-100.688F;
        int i4=-51566, i5=-24466, i12=0, i13=-231;
        boolean b=false;

        f = i4;
        i5 = 1;
        while ((i5 += 3) < 331) {
            double d1=-2.16547;
            l += ((long)((Test.iFld -= (int)d1) * Test.iFld) ^ (iMeth1(i4, l1, l1) + l1));
            if (b) break;
            for (i12 = 1; i12 < 14; ++i12) {
                Test.dFld -= i12;
                Test.iArrFld[i5 - 1] -= i13;
                if (b) break;
                i13 += i4;
                switch ((((-11 >>> 1) % 1) * 5) + 105) {
                case 107:
                    i4 = (int)-1.206F;
                    break;
                }
                Test.iFld += i12;
                Test.dFld += i4;
                Test.instanceCount -= Test.instanceCount;
                i13 += i12;
            }
        }
        long meth_res = l + s + l1 + Float.floatToIntBits(f) + i4 + i5 + (b ? 1 : 0) + i12 + i13;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth() {

        int i2=5, i3=-79, i14=-14, i15=3, i16=9, iArr[]=new int[N];
        boolean b1=true, bArr[]=new boolean[N];
        float f3=0.711F, fArr[]=new float[N];

        FuzzerUtils.init(iArr, -32);
        FuzzerUtils.init(fArr, 0.491F);
        FuzzerUtils.init(bArr, true);

        for (i2 = 3; i2 < 396; ++i2) {
            iArr[i2] |= (int)((i3++) + dMeth(Test.instanceCount, (short)(-5441), Test.instanceCount));
            if (b1) {
                i3 *= -5;
                i14 = 1;
                while (++i14 < 4) {
                    for (i15 = 1; 1 > i15; ++i15) {
                        float f2=1.293F;
                        Test.iArrFld = Test.iArrFld;
                        Test.iFld = Test.iFld;
                        switch ((i14 % 10) + 81) {
                        case 81:
                            Test.iFld >>= 178;
                            Test.instanceCount += (i15 ^ Test.instanceCount);
                            iArr[i14] = -43;
                            fArr[i2 - 1] += f2;
                        case 82:
                            Test.iFld = i2;
                            i3 -= -162;
                            break;
                        case 83:
                            Test.iArrFld[i15] = i3;
                            break;
                        case 84:
                            bArr[i14] = b1;
                            break;
                        case 85:
                            i16 += i15;
                        case 86:
                            bArr[i15 + 1] = b1;
                        case 87:
                            try {
                                Test.iFld = (i16 % i3);
                                Test.iFld = (i14 / iArr[i15 + 1]);
                                i16 = (-204 / i2);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 88:
                        case 89:
                            if (b1) continue;
                            break;
                        case 90:
                            if (i14 != 0) {
                            }
                            break;
                        }
                    }
                }
            } else if (b1) {
                iArr[i2 - 1] = i3;
            } else if (b1) {
                Test.iFld = i3;
            } else {
                f3 -= i2;
            }
        }
        long meth_res = i2 + i3 + i14 + i15 + i16 + (b1 ? 1 : 0) + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-42.130026;
        int i=0, i1=28508, i17=-32476, i18=13, i19=19031, i20=-20229, i21=12;
        byte by1=-26;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -90L);

        d = 1;
        while (++d < 267) {
            switch ((int)((d % 2) + 52)) {
            case 52:
                for (i = 1; 94 > i; ++i) {
                    i1 = (int)(-(i1 >>>= (int)(i1 - Test.instanceCount)));
                    lArr[(int)(d)] >>= (i1--);
                    i1 += (i * i);
                    i1 = (i1 = ((++byFld) - (i + i1)));
                    fFld = (((i + i) + (i1--)) << iMeth());
                    i17 = 1;
                    do {
                        i1 += Test.iFld;
                        i1 >>= i17;
                        Test.instanceCount = i;
                        Test.instanceCount >>>= i17;
                        i1 = i17;
                        Test.instanceCount ^= byFld;
                        Test.instanceCount += i17;
                    } while (++i17 < 2);
                }
                break;
            case 53:
                fFld -= (float)10.49903;
                break;
            default:
                Test.iFld <<= i17;
            }
            for (i18 = 1; i18 < 94; i18++) {
                Test.instanceCount += (i18 - i17);
                i19 += (((i18 * i19) + i19) - i1);
                for (i20 = 1; 2 > i20; ++i20) {
                    fFld += i21;
                    try {
                        Test.iArrFld[i20] = (38951 / i17);
                        Test.iArrFld[i20] = (i19 / i);
                        i21 = (i21 / 44);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[i20 + 1] = -1;
                }
                switch ((i18 % 7) + 71) {
                case 71:
                    Test.instanceCount += (long)fFld;
                    break;
                case 72:
                    i1 -= i19;
                    Test.iFld *= by1;
                    Test.iFld += (((i18 * i21) + i19) - i);
                    break;
                case 73:
                    Test.instanceCount <<= i19;
                    break;
                case 74:
                    fFld *= byFld;
                    break;
                case 75:
                    fFld += ((long)i18 ^ (long)i19);
                    break;
                case 76:
                    fFld = Test.iFld;
                    break;
                case 77:
                    Test.iFld += (i18 * i17);
                    break;
                }
            }
        }

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 by1 = " + i20 + "," + i21 + "," + by1);
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount byFld fFld = " + Test.instanceCount + "," + byFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.iFld Test.dFld Test.iArrFld = " + Test.iFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
