// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3549926093L;
    public short sFld=22152;
    public static double dFld=-2.3136;
    public static byte byFld=101;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 37015);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(byte by, int i3) {


        i3 &= i3;
        vSmallMeth_check_sum += by + i3;
    }

    public static void vMeth() {

        float f1=-63.337F;
        int i11=32335, i12=-198, i13=-21747, iArr[]=new int[N], iArr1[][]=new int[N][N];
        byte by1=100;
        long l=3329679668833993835L;

        FuzzerUtils.init(iArr, -211);
        FuzzerUtils.init(iArr1, -62246);

        iArr = iArr;
        f1 = Test.instanceCount;
        i11 = (int)-8445127019007193317L;
        i11 = (int)117.863F;
        iArr[(i11 >>> 1) % N] = (int)Test.instanceCount;
        i11 += (int)Test.instanceCount;
        iArr1[(i11 >>> 1) % N][(73 >>> 1) % N] = (int)Test.instanceCount;
        by1 = (byte)i11;
        i11 >>= i11;
        for (i12 = 1; i12 < 133; ++i12) {
            l = 1;
            do {
                if (false) {
                    i13 += (int)(l ^ i12);
                    if (i12 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f1) + i11 + by1 + i12 + i13 + l +
                            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    i11 += (int)l;
                }
            } while (++l < 12);
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i11 + by1 + i12 + i13 + l + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(short s) {

        int i8=-31603, i9=0, i10=12, i14=2, i15=-117;
        float f2=23.595F;
        boolean b1=false, b2=false;
        double d=50.31355;

        i8 = 1;
        while (++i8 < 395) {
            i9 = 1;
            do {
                i10 = (int)(((++i10) << Test.instanceCount) * s);
                if (b2) {
                    vMeth();
                } else if (b2) {
                    for (i14 = i8; i14 < 1; i14++) {
                        Test.iArrFld[i14 + 1] = i9;
                        f2 += i14;
                        i10 = (int)Test.instanceCount;
                        if (i8 != 0) {
                        }
                        switch (((i9 >>> 1) % 7) + 117) {
                        case 117:
                            if (b1) break;
                            i15 = (int)7113700332026381768L;
                            Test.instanceCount <<= Test.instanceCount;
                            i10 -= 41155;
                        case 118:
                        case 119:
                        case 120:
                            i10 += (int)d;
                        case 121:
                            i15 += (int)d;
                            break;
                        case 122:
                            i10 -= (int)Test.instanceCount;
                            break;
                        case 123:
                            Test.iArrFld[i9] = i10;
                            break;
                        }
                    }
                }
            } while (++i9 < 4);
        }
        long meth_res = s + i8 + i9 + i10 + i14 + i15 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d) + (b2 ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public float fMeth(float f, boolean b, int i4) {

        int i5=-8, i6=14, i7=-187, i16=-14;

        for (i5 = 9; 282 > i5; ++i5) {
            Test.instanceCount = (--Test.instanceCount);
            if (i5 != 0) {
            }
            i7 = 1;
            do {
                i4 = (int)(++Test.instanceCount);
                i4 -= i7;
                i4 -= Math.min((int)((-11153 * lMeth(sFld)) - -27808L), i4);
                i4 = i6;
                i16 = 1;
                do {
                    double d1=10.83985;
                    f -= Test.instanceCount;
                    lArrFld[i16] *= Test.instanceCount;
                    d1 = -1.58874;
                    i6 = i4;
                    i6 += i6;
                    Test.instanceCount += (long)f;
                } while (++i16 < 1);
            } while (++i7 < 6);
        }
        long meth_res = Float.floatToIntBits(f) + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i16;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i1=-14, i2=-14, i17=6170, i18=53, i19=224, i20=-6, i21=-3;
        float f3=-2.40F, fArr[]=new float[N];
        boolean b3=false;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -56751L);
        FuzzerUtils.init(byArr, (byte)-44);
        FuzzerUtils.init(fArr, 0.68F);

        i = 1;
        while (++i < 329) {
            for (i1 = 2; 76 > i1; ++i1) {
                Test.instanceCount += (i1 ^ i2);
            }
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth((byte)(-(--lArr[(-39956 >>> 1) % N])), i2--);
            sFld *= (short)((fMeth(f3, b3, -215) + f3) + 39967);
            if (b3) {
                try {
                    i2 = (i2 / i);
                    i2 = (i2 / -1264372596);
                    i2 = (i % i2);
                } catch (ArithmeticException a_e) {}
                b3 = b3;
                i2 = (int)Test.dFld;
            } else if (b3) {
                i2 >>= sFld;
                if (b3) continue;
                i2 += i;
                for (i17 = 3; 76 > i17; ++i17) {
                    Test.instanceCount = Test.instanceCount;
                }
            } else {
                switch (((i % 7) * 5) + 75) {
                case 103:
                    if (b3) {
                        Test.instanceCount <<= i1;
                        i19 = 1;
                        while (++i19 < 76) {
                            lArrFld[i19 - 1] += i;
                            Test.iArrFld = FuzzerUtils.int1array(N, (int)-111);
                            i18 -= (int)Test.instanceCount;
                            f3 += i1;
                            i18 = Test.byFld;
                            lArrFld[i19 - 1] -= i1;
                            f3 += (-34 + (i19 * i19));
                            sFld = (short)9664;
                        }
                        i18 = 15569;
                        for (i20 = 4; i20 < 76; ++i20) {
                            i21 += (-12 + (i20 * i20));
                        }
                    } else {
                        i18 = (int)f3;
                    }
                    break;
                case 92:
                    fArr = fArr;
                    break;
                case 108:
                    i2 += (int)(2283181669L + (i * i));
                    break;
                case 91:
                    Test.instanceCount = i2;
                    break;
                case 86:
                    Test.dFld = i20;
                    break;
                case 85:
                    i2 += (i ^ i21);
                    break;
                case 110:
                    i21 += (i * i);
                default:
                    Test.byFld += (byte)(((i * i21) + i21) - Test.instanceCount);
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("f3 b3 i17 = " + Float.floatToIntBits(f3) + "," + (b3 ? 1 : 0) + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 lArr byArr = " + i21 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount sFld Test.dFld = " + Test.instanceCount + "," + sFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld Test.iArrFld lArrFld = " + Test.byFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  lMeth ->  lMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
