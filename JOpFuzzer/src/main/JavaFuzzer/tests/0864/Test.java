// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-239L;
    public static int iFld=-155;
    public float fFld=-1.787F;
    public static float fFld1=0.1019F;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public short sArrFld[][]=new short[N][N];
    public int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 6733L);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(int i) {


        Test.instanceCount -= i;
        vSmallMeth_check_sum += i;
    }

    public static void vMeth(long l3, short s1, long l4) {

        int i10=13, i11=0, i12=-129, i13=59848, i14=5, i15=182, iArr[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr, -131);

        Test.iFld = Test.iFld;
        Test.iFld = Test.iFld;
        iArr[(Test.iFld >>> 1) % N] >>>= -11;
        for (i10 = 15; i10 < 344; i10++) {
            for (i12 = 1; i12 < 5; i12++) {
                switch (((i10 % 2) * 5) + 26) {
                case 31:
                    i13 = Test.iFld;
                    break;
                case 32:
                    for (i14 = 1; i14 < 2; i14++) {
                        l3 *= i11;
                        i13 = i14;
                        i13 >>= 60149;
                        i15 += (int)(163715002659934643L + (i14 * i14));
                        iArr[i14 - 1] += i15;
                        l4 = i12;
                    }
                    break;
                }
                if (b1) continue;
            }
        }
        vMeth_check_sum += l3 + s1 + l4 + i10 + i11 + i12 + i13 + i14 + i15 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i5, int i6, int i7) {

        int i8=-37, i9=-94, i16=-50930, i17=221, i18=-4, i19=142, i20=-55347;
        byte by=-25;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -12.73164);

        dArr[(i5 >>> 1) % N] = i6;
        for (i8 = 3; 308 > i8; i8++) {
            Test.fFld1 = ((-(Test.fFld1 + i5)) - ((i9 | -5) - (i9 * Test.iFld)));
        }
        vMeth(Test.instanceCount, (short)(-5593), Test.instanceCount);
        Test.lArrFld[(i6 >>> 1) % N] &= 5;
        i16 = 1;
        do {
            for (i17 = i16; i17 < 4; ++i17) {
                by = (byte)-37075;
                i9 = (int)Test.instanceCount;
                Test.iFld = Test.iFld;
                for (i19 = 1; i19 < 1; i19++) {
                    Test.instanceCount -= Test.instanceCount;
                    i7 &= i9;
                    Test.instanceCount %= (Test.instanceCount | 1);
                }
            }
            Test.instanceCount ^= Test.iFld;
        } while (++i16 < 397);
        long meth_res = i5 + i6 + i7 + i8 + i9 + i16 + i17 + i18 + by + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(long l1, int i4, long l2) {


        i4 += (int)((--i4) * ((Test.fFld1 + i4) * iMeth(Test.iFld, -24013, Test.iFld)));
        Test.iFld *= Test.iFld;
        long meth_res = l1 + i4 + l2;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=-90L, lArr[]=new long[N];
        int i1=54210, i2=-9284, i3=-13, i21=-10, i22=-4637, i23=5689;
        float f=68.375F, fArr[][]=new float[N][N];
        short s=-15122;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr, 57.905F);
        FuzzerUtils.init(lArr, -4276141500815895778L);
        FuzzerUtils.init(byArr, (byte)-35);

        l = 1;
        do {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(Test.iFld * Test.iFld);
        } while (++l < 189);
        vSmallMeth(Math.max((int)(Test.iFld = (int)(1.632F - (Test.iFld - 47585))), Test.iFld--));
        for (i1 = 316; 1 < i1; --i1) {
            switch (((Test.iFld >>> 1) % 6) + 19) {
            case 19:
                for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth((int)(((i1 - fFld) - (i2 = (int)l)) +
                    (--Test.lArrFld[i1 - 1])));
                Test.iFld <<= (int)(Test.instanceCount = l);
                Test.iFld -= (int)(i1 - fArr[i1][i1 + 1]);
                for (f = 80; f > 5; --f) {
                    boolean b=false;
                    if (b = (((Test.iFld - s) + (Test.iFld - l)) == (Test.iFld++))) break;
                    i3 += (int)(-2.535F + (f * f));
                    sArrFld[(int)(f)][(int)(f + 1)] >>= (short)(Test.instanceCount--);
                    i3 = (int)Math.max((long)((-(s * Test.instanceCount)) + Math.abs(fFld)), lMeth(l, Test.iFld, 1L));
                    iArrFld[i1] /= (int)(0 | 1);
                    iArrFld[i1 + 1] = 14;
                }
                break;
            case 20:
                i3 += (((i1 * i3) + i3) - Test.instanceCount);
                Test.instanceCount -= Test.iFld;
                break;
            case 21:
                Test.bArrFld[i1] = Test.bFld;
                lArr[i1] += i2;
                s += (short)(((i1 * Test.instanceCount) + i1) - s);
                break;
            case 22:
                i21 = 1;
                while (++i21 < 80) {
                    for (i22 = 1; i22 < 1; i22++) {
                        Test.bFld = Test.bFld;
                        Test.fFld1 += (((i22 * i2) + i22) - l);
                        fFld *= 0.557F;
                        i2 += (int)-28063L;
                        switch (((i23 >>> 1) % 7) + 102) {
                        case 102:
                            if (Test.bFld) continue;
                            Test.fFld1 = i1;
                            byArr = byArr;
                            break;
                        case 103:
                            Test.instanceCount += (185 + (i22 * i22));
                            break;
                        case 104:
                            fFld = l;
                            break;
                        case 105:
                            i23 = 139;
                            break;
                        case 106:
                            Test.instanceCount <<= i2;
                            break;
                        case 107:
                            i2 &= (int)l;
                            break;
                        case 108:
                            Test.iFld += i22;
                        default:
                            Test.iFld += (i22 * i22);
                        }
                    }
                }
                break;
            case 23:
                iArrFld[i1] *= i21;
                break;
            case 24:
                i3 -= i3;
            }
        }

        FuzzerUtils.out.println("l i1 i2 = " + l + "," + i1 + "," + i2);
        FuzzerUtils.out.println("f i3 s = " + Float.floatToIntBits(f) + "," + i3 + "," + s);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("fArr lArr byArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld fFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.fFld1 Test.bFld Test.lArrFld = " + Float.floatToIntBits(Test.fFld1) + "," +
            (Test.bFld ? 1 : 0) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("sArrFld iArrFld Test.bArrFld = " + FuzzerUtils.checkSum(sArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
