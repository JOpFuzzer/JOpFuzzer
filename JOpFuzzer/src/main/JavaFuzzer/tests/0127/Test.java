// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8794694947312673777L;
    public static volatile byte byFld=86;
    public static double dFld=-2.108526;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(float f1) {

        int i4=9, i5=53091, i6=0, i7=-43046, i8=11430, i9=-63868, iArr[]=new int[N];
        float f2=-2.1003F;
        boolean b=false;
        double d2=16.89665;

        FuzzerUtils.init(iArr, 5);

        f1 = i4;
        for (i5 = 11; i5 < 340; ++i5) {
            short s1=2181;
            iArr[i5 - 1] ^= s1;
            switch ((i5 % 10) + 125) {
            case 125:
                for (i7 = 1; i7 < 5; ++i7) {
                    Test.byFld %= (byte)(i4 | 1);
                    s1 >>= (short)i4;
                    if (false) {
                        i8 += i7;
                        Test.instanceCount >>>= i8;
                        i4 = i8;
                        i8 = (int)Test.instanceCount;
                    } else if (b) {
                        for (f2 = 1; f2 < 2; ++f2) {
                            iArr[(int)(f2 + 1)] = Test.byFld;
                            i4 = 13;
                        }
                    } else if (b) {
                        f1 -= i8;
                    } else {
                        i4 = (int)f2;
                    }
                }
                break;
            case 126:
                i8 *= 7;
                break;
            case 127:
                i8 += (((i5 * f1) + i6) - i4);
                break;
            case 128:
                i6 |= i6;
                break;
            case 129:
                f1 += (-215 + (i5 * i5));
                break;
            case 130:
                i6 = i6;
                break;
            case 131:
                b = b;
            case 132:
                Test.instanceCount -= i4;
                break;
            case 133:
                d2 += 149;
                break;
            case 134:
                b = b;
                break;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f2) + i9 + (b ? 1 : 0)
            + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        double d=-85.107254, d1=-62.81649;
        int i3=7, i10=-8850, i11=-5, i12=-26936, i13=-5, i14=-38643, iArr1[]=new int[N];
        short s=-17900;
        float f=-67.176F;

        FuzzerUtils.init(iArr1, 132);

        for (d = 8; d < 360; d++) {
            d1 = 1;
            while (++d1 < 5) {
                i3 += (int)(((d1 * s) + s) - i3);
                if (false) break;
                if (i3 != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d) + i3 + Double.doubleToLongBits(d1) + s +
                        Float.floatToIntBits(f) + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                Test.instanceCount += (long)(d1 - f);
            }
            i3 *= iMeth1(f);
            for (i10 = 5; i10 > 1; i10--) {
                for (i12 = 1; i12 < 2; i12++) {
                    iArr1[(int)(d - 1)] = 35;
                    if (i12 != 0) {
                        vMeth_check_sum += Double.doubleToLongBits(d) + i3 + Double.doubleToLongBits(d1) + s +
                            Float.floatToIntBits(f) + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                }
                i13 += i10;
                i13 += (95 + (i10 * i10));
            }
            i14 <<= i14;
            i14 *= i12;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i3 + Double.doubleToLongBits(d1) + s + Float.floatToIntBits(f)
            + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1);
    }

    public int iMeth() {

        int i1=49647, i2=-126, i15=-2, i16=-3, i17=-13;
        short s2=29834, sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-14113);

        for (i1 = 15; i1 < 297; i1++) {
            vMeth();
            sArr[i1 + 1][i1 - 1] = (short)i2;
            for (i15 = 6; i15 > 1; i15--) {
                float f3=0.194F;
                Test.dFld += i16;
                f3 *= 10;
                i17 = 2;
                do {
                    i2 = i15;
                    Test.instanceCount *= (long)f3;
                    i2 = s2;
                    i2 += (i17 * Test.instanceCount);
                    Test.instanceCount += i1;
                    i16 += (((i17 * i17) + Test.instanceCount) - i1);
                    i16 &= i1;
                    i2 -= i2;
                } while ((i17 -= 2) > 0);
            }
        }
        long meth_res = i1 + i2 + i15 + i16 + i17 + s2 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=50418;
        float f4=-125.81F;

        i >>= iMeth();
        f4 *= 51027;

        FuzzerUtils.out.println("i f4 = " + i + "," + Float.floatToIntBits(f4));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Double.doubleToLongBits(Test.dFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
