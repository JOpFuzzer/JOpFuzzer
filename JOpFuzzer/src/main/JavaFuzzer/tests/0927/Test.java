// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=7L;
    public int iFld=43499;
    public static boolean bFld=false;
    public byte byFld=-16;
    public volatile float fArrFld[]=new float[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth(long l) {

        int i4=-3;

        i4 = (--i4);
        vMeth_check_sum += l + i4;
    }

    public static void vMeth2(int i16, double d3, int i17) {

        float f2=51.319F;
        short s=-15572;
        double dArr[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, 2.15104);
        FuzzerUtils.init(lArr1, 30576L);

        d3 = f2;
        Test.instanceCount = Test.instanceCount;
        i16 = (int)d3;
        Test.bFld = Test.bFld;
        i16 ^= (int)Test.instanceCount;
        Test.instanceCount = Test.instanceCount;
        Test.instanceCount = s;
        for (double d4 : dArr) {
            f2 += 7;
            f2 += i16;
            lArr1[(i16 >>> 1) % N] ^= Test.instanceCount;
            i16 *= i16;
            Test.bArrFld[(i16 >>> 1) % N] = Test.bFld;
            s = (short)-18L;
            s >>= (short)Test.instanceCount;
        }
        vMeth2_check_sum += i16 + Double.doubleToLongBits(d3) + i17 + Float.floatToIntBits(f2) + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(int i14, long l1, int i15) {

        float f1=-1.373F;
        double d5=25.28122;
        int iArr2[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, 99);
        FuzzerUtils.init(lArr, -130L);

        i14 -= iArr2[(i15 >>> 1) % N];
        f1 -= (((--Test.instanceCount) + (i14 + i15)) * (++lArr[(i14 >>> 1) % N]));
        Test.instanceCount = (--iArr2[(i15 >>> 1) % N]);
        vMeth2(i14, d5, i14);
        long meth_res = i14 + l1 + i15 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d5) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth1(double d1, int i7, double d2) {

        int i8=-11, i9=224, i10=-59159, i11=-64089, i12=142, i13=-3540, iArr1[]=new int[N];
        float f=-111.377F;
        byte by=83;

        FuzzerUtils.init(iArr1, 34177);

        Test.bFld = ((Test.bFld = (Test.bFld && Test.bFld)) || false);
        for (i8 = 4; i8 < 168; ++i8) {
            i7 = (int)(((f - iFld) - Math.abs(8L)) * (++iFld));
            for (i10 = 10; i10 > 1; --i10) {
                if (true) {
                    i7 = (-11211 - (i11--));
                    i9 = (int)Math.abs((i7 + i8) * (iFld % (Test.instanceCount | 1)));
                    Test.instanceCount = by;
                    for (i12 = 1; i12 < 2; i12++) {
                        iArr1[i10 - 1] -= (int)((d1 - (Test.instanceCount++)) + ((d2 - i8) * (iFld + i12)));
                        fArrFld[i12] += (Test.instanceCount--);
                        f += Math.max(-1, (int)((-(f - Test.instanceCount)) - (~(long)(i10 - d1))));
                        by = (byte)iMeth(i8, 145L, -9);
                        i9 ^= (int)Test.instanceCount;
                        if (i9 != 0) {
                            vMeth1_check_sum += Double.doubleToLongBits(d1) + i7 + Double.doubleToLongBits(d2) + i8 +
                                i9 + Float.floatToIntBits(f) + i10 + i11 + by + i12 + i13 + FuzzerUtils.checkSum(iArr1);
                            return;
                        }
                    }
                } else {
                    f = iFld;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + i7 + Double.doubleToLongBits(d2) + i8 + i9 +
            Float.floatToIntBits(f) + i10 + i11 + by + i12 + i13 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        double d=-2.55719;
        int i=-37711, i1=197, i2=12, i3=14, i5=-3, i6=-239, i18=-56001, i19=27925, i20=4, i21=1, i22=2153, i23=-29090,
            i24=-37313, iArr[]=new int[N];
        float f3=35.989F;

        FuzzerUtils.init(iArr, 47398);

        d -= (iFld - iArr[(-75 >>> 1) % N]);
        for (i = 383; i > 21; i--) {
            iFld = (-iFld);
        }
        for (i2 = 14; i2 < 359; i2++) {
            vMeth((Long.reverseBytes(Test.instanceCount) / ((i2 * i) | 1)) * i);
            for (i5 = 2; i5 < 73; ++i5) {
                Test.instanceCount *= ((Test.instanceCount += Math.abs(-43644)) - (++iArr[i2 - 1]));
            }
            vMeth1(d, i6, -2.39202);
            for (i18 = 4; 73 > i18; ++i18) {
                switch (((i18 % 3) * 5) + 71) {
                case 86:
                    if (Test.bFld) {
                        byFld += (byte)8;
                    } else {
                        f3 += i18;
                        i3 |= (int)Test.instanceCount;
                    }
                case 75:
                    Test.instanceCount >>= i2;
                    byFld += (byte)(((i18 * f3) + f3) - Test.instanceCount);
                    for (i20 = 1; i20 < 2; ++i20) {
                        Test.instanceCount |= Test.instanceCount;
                        f3 += i21;
                        i6 += (i20 * i20);
                        try {
                            i21 = (90 % i20);
                            iArr[i20 + 1] = (i19 % i21);
                            i3 = (i1 % 8);
                        } catch (ArithmeticException a_e) {}
                        i19 -= (int)d;
                        i1 += i22;
                        i6 += i2;
                        Test.instanceCount &= Test.instanceCount;
                        byFld = (byte)Test.instanceCount;
                    }
                    break;
                case 83:
                    for (i23 = 1; i23 < 2; ++i23) {
                        i19 -= (int)Test.instanceCount;
                    }
                    Test.instanceCount = (long)d;
                    f3 = i19;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 i5 = " + i2 + "," + i3 + "," + i5);
        FuzzerUtils.out.println("i6 i18 i19 = " + i6 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("f3 i20 i21 = " + Float.floatToIntBits(f3) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.bFld = " + Test.instanceCount + "," + iFld + "," +
            (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("byFld fArrFld Test.bArrFld = " + byFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 mainTest
//DEBUG  iMeth ->  iMeth vMeth1 mainTest
//DEBUG  vMeth2 ->  vMeth2 iMeth vMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
