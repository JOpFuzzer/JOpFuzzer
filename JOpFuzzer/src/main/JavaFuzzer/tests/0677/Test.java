// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1468171362L;
    public static byte byFld=90;
    public static byte byFld1=-38;
    public static volatile boolean bFld=true;
    public volatile int iFld=140;
    public static long lFld=17L;
    public static int iArrFld[][]=new int[N][N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -56804);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8) {

        int i9=45542, i10=-14, i11=-6;
        double d1=-43.75799;
        short s=12749;
        float f3=-2.709F;

        Test.iArrFld[(i8 >>> 1) % N][(i8 >>> 1) % N] *= -86;
        i8 *= i8;
        i8 -= Test.byFld1;
        i8 = Test.byFld1;
        switch (((143 >>> 1) % 2) + 36) {
        case 36:
            for (i9 = 7; i9 < 150; i9++) {
                if (Test.bFld) continue;
                Test.iArrFld[i9 - 1][i9 - 1] += i9;
                Test.instanceCount += i9;
            }
            d1 += s;
            i11 = 1;
            while (++i11 < 318) {
                f3 *= 9L;
                i8 -= i10;
                i8 -= (int)d1;
                Test.instanceCount -= i11;
            }
            break;
        case 37:
            i8 += i8;
            break;
        }
        long meth_res = i8 + i9 + i10 + Double.doubleToLongBits(d1) + s + i11 + Float.floatToIntBits(f3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(float f1, float f2, int i3) {

        int i4=-2, i5=-186, i6=11, i7=-49209;
        short s1=2942;

        for (i4 = 10; i4 < 238; i4++) {
            for (i6 = 1; i6 < 7; ++i6) {
                i7 *= ((iMeth(i3) - i7) - 47278);
                i5 = (int)1.326F;
                i3 += (((i6 * f1) + i7) - i3);
                Test.byFld1 *= (byte)f2;
                i3 = i4;
                Test.instanceCount = (long)f1;
            }
            Test.iArrFld[i4][i4] = 11;
            i5 += -56443;
            s1 = (short)i7;
            Test.instanceCount = i4;
            i3 = i3;
            i3 = (int)-2433236810L;
            Test.iArrFld[i4][i4 + 1] = i5;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i3 + i4 + i5 + i6 + i7 + s1;
    }

    public static void vMeth() {

        float f=2.470F;
        double d=0.49834;
        int i=57984, i1=32352, i2=42, i12=40548, i13=11;

        Test.instanceCount += (long)(f++);
        d = ((--Test.byFld) - (--i));
        for (i1 = 381; i1 > 11; --i1) {
            short s2=-17071;
            vMeth1(f, f, i2);
            i2 = (int)d;
            Test.byFld1 <<= (byte)i2;
            Test.iArrFld[i1][i1] += s2;
            Test.instanceCount = -5;
            for (i12 = 5; i12 > 1; i12--) {
                Test.instanceCount += Test.instanceCount;
                i13 = i2;
                f += (95 + (i12 * i12));
                i13 = i2;
                Test.instanceCount += i13;
                i2 = 13126;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i + i1 + i2 + i12 + i13;
    }

    public void mainTest(String[] strArr1) {

        int i14=49651, i15=-14, i16=-41097, i17=-66, i18=9, i19=-1, i20=35578, i21=2;
        double d2=0.110341;
        float f4=70.537F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        vMeth();
        iFld ^= iFld;
        iFld *= iFld;
        Test.lFld >>= iFld;
        Test.iArrFld[(83 >>> 1) % N][(iFld >>> 1) % N] = iFld;
        i14 = 1;
        while (++i14 < 205) {
            iFld = (int)Test.lFld;
            for (i15 = 4; i15 < 122; ++i15) {
                Test.bFld = true;
                d2 -= -63844;
                for (i17 = 1; i17 < 2; i17++) {
                    lArrFld[i15 + 1] = Test.instanceCount;
                    i16 += (i17 + f4);
                    i18 = (int)Test.lFld;
                    Test.instanceCount = i14;
                    i18 = (int)Test.lFld;
                    d2 *= Test.instanceCount;
                    Test.instanceCount >>= i18;
                }
                i18 <<= i17;
                i16 += (8783 + (i15 * i15));
            }
            if (Test.bFld) {
                i18 = (int)Test.instanceCount;
            }
            i19 = 122;
            while (--i19 > 0) {
                for (i20 = 1; i20 < 1; i20++) {
                    int i22=-25772;
                    iFld += Test.byFld1;
                    Test.instanceCount += (((i20 * Test.lFld) + Test.instanceCount) - i17);
                    Test.iArrFld[i19 + 1][i19] *= (int)Test.instanceCount;
                    try {
                        Test.iArrFld[i20][i20 + 1] = (506819007 % iFld);
                        i22 = (i18 / 17464);
                        i21 = (54390 / Test.iArrFld[i20 - 1][i19 - 1]);
                    } catch (ArithmeticException a_e) {}
                    bArr[i14] = false;
                    d2 += i22;
                }
            }
        }

        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("d2 i17 i18 = " + Double.doubleToLongBits(d2) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("f4 i19 i20 = " + Float.floatToIntBits(f4) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 bArr = " + i21 + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.byFld1 = " + Test.instanceCount + "," + Test.byFld
            + "," + Test.byFld1);
        FuzzerUtils.out.println("Test.bFld iFld Test.lFld = " + (Test.bFld ? 1 : 0) + "," + iFld + "," + Test.lFld);
        FuzzerUtils.out.println("Test.iArrFld lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
