// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-121L;
    public float fFld=2.387F;
    public static int iFld=3591;
    public static float fFld1=0.635F;
    public static volatile boolean bFld=true;
    public static short sFld=-14948;
    public static byte byFld=-115;
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.713F);
    }

    public static long fMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        boolean b1=true;
        int i10=-6, i11=-140, i12=-85;
        byte by=20;
        short s1=25370;

        Test.iFld += Test.iFld;
        Test.iFld *= Test.iFld;
        b1 = b1;
        Test.instanceCount -= Test.iFld;
        Test.iFld = Test.iFld;
        Test.fFld1 *= Test.iFld;
        i10 = 353;
        do {
            Test.iFld += by;
            Test.iFld -= Test.iFld;
            Test.iFld -= Test.iFld;
            for (i11 = 1; i11 < 5; i11++) {
                Test.iFld *= i11;
                Test.iFld += (i11 * i11);
                s1 += (short)(((i11 * i12) + i12) - Test.instanceCount);
                Test.iFld = (int)Test.instanceCount;
            }
        } while (--i10 > 0);
        vMeth_check_sum += (b1 ? 1 : 0) + i10 + by + i11 + i12 + s1;
    }

    public static byte byMeth(float f1) {

        int i6=30102, i7=47600, i8=-8883, i9=21245, iArr1[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)50);
        FuzzerUtils.init(iArr1, 107);

        Test.instanceCount <<= (Test.iFld++);
        Test.iFld >>= (byArr[(Test.iFld >>> 1) % N] - Test.iFld);
        i6 = 1;
        while (++i6 < 210) {
            for (i7 = 1; i7 < 8; ++i7) {
                i9 = 1;
                while (++i9 < 2) {
                    vMeth();
                    Test.iFld *= (int)Test.instanceCount;
                    f1 += (i9 * i9);
                    switch ((i6 % 9) + 126) {
                    case 126:
                        Test.bFld = Test.bFld;
                        i8 += (i9 + Test.instanceCount);
                        f1 += (i9 + i9);
                        Test.instanceCount *= Test.iFld;
                        break;
                    case 127:
                        Test.instanceCount ^= Test.instanceCount;
                        i8 *= i6;
                        break;
                    case 128:
                        Test.sFld = (short)-37;
                        break;
                    case 129:
                        Test.iFld += (((i9 * i6) + i7) - Test.byFld);
                    case 130:
                        Test.iFld -= Test.iFld;
                        break;
                    case 131:
                        Test.instanceCount -= Test.sFld;
                    case 132:
                        if (true) continue;
                        break;
                    case 133:
                        iArr1[i7 + 1] += i8;
                    case 134:
                        Test.fArrFld = Test.fArrFld;
                        break;
                    default:
                        Test.iFld += (((i9 * i7) + i6) - i9);
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static float fMeth(long l, int i1, int i2) {

        float f=-6.494F, fArr[]=new float[N];
        int i3=-30, i4=56180, i5=-6, iArr[]=new int[N];
        short s=16451;
        double d1=-14.94607;
        long l1=-12L, lArr[]=new long[N];
        boolean b2=false;

        FuzzerUtils.init(lArr, -48271L);
        FuzzerUtils.init(iArr, -200);
        FuzzerUtils.init(fArr, -60.50F);

        for (f = 17; f < 321; ++f) {
            i3 *= (i1--);
            for (i4 = 1; i4 < 5; ++i4) {
                lArr[i4 - 1] >>>= (((i3 * i1) - (iArr[i4] = s)) * i3);
                fArr[i4 + 1] += byMeth(f);
            }
            i2 -= i2;
            if (Test.bFld) {
                d1 -= l;
                i1 += i3;
            } else if (b2) {
            } else if (Test.bFld) {
                i2 = (int)d1;
                switch (((i4 >>> 1) % 1) + 34) {
                case 34:
                    Test.byFld -= (byte)Test.instanceCount;
                    lArr[(int)(f)] -= (long)Test.fFld1;
                    lArr[(int)(f)] <<= l;
                    break;
                default:
                    iArr[(int)(f)] = (int)l1;
                }
            }
        }
        long meth_res = l + i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + s + Double.doubleToLongBits(d1) + l1 +
            (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-102.71792, d2=123.60156;
        int i=4, i13=34588, i14=58, i15=23849, i16=-8, i17=-22124, i18=-1, iArr2[]=new int[N];
        boolean b=false;
        long l2=-1L;

        FuzzerUtils.init(iArr2, 51);

        fFld -= (float)(++d);
        i = 1;
        do {
            b = false;
            d *= fMeth(Test.instanceCount, i, Test.iFld);
            Test.fFld1 += i;
            Test.iFld %= (int)(Test.byFld | 1);
            try {
                Test.iFld = (-55 % i);
                Test.iFld = (i % 749);
                iArr2[i - 1] = (iArr2[i] % -11125);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount += i;
            if (b) continue;
        } while (++i < 222);
        for (i13 = 15; i13 < 291; i13++) {
            Test.iFld += (12 + (i13 * i13));
            i15 = 1;
            while (++i15 < 91) {
                if (b) continue;
                iArr2[i13] = (int)fFld;
                for (i16 = 1; i16 < 1; ++i16) {
                    Test.instanceCount = (long)1.101677;
                    Test.fFld1 = fFld;
                    Test.iFld = Test.iFld;
                    iArr2[i15] = (int)Test.instanceCount;
                    Test.iFld += (int)41998L;
                }
                fFld += i14;
                Test.iFld += (i15 ^ i15);
                Test.instanceCount += (((i15 * i15) + i13) - i14);
            }
            i14 &= (int)Test.instanceCount;
            for (l2 = 3; l2 < 91; l2++) {
                iArr2 = iArr2;
                if (Test.bFld) {
                    d2 = 1;
                    while (++d2 < 2) {
                        i17 = -7288;
                        Test.fFld1 -= 77;
                    }
                } else if (b) {
                    i14 += (int)l2;
                } else {
                    iArr2[(int)(l2)] >>= i17;
                }
            }
        }

        FuzzerUtils.out.println("d i b = " + Double.doubleToLongBits(d) + "," + i + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 l2 = " + i16 + "," + i17 + "," + l2);
        FuzzerUtils.out.println("i18 d2 iArr2 = " + i18 + "," + Double.doubleToLongBits(d2) + "," +
            FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld1 Test.bFld Test.sFld = " + Float.floatToIntBits(Test.fFld1) + "," +
            (Test.bFld ? 1 : 0) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld Test.fArrFld = " + Test.byFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  byMeth ->  byMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
