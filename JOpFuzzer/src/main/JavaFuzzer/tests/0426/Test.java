// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=8L;
    public static int iFld=29;
    public static boolean bFld=true;
    public float fFld=0.876F;
    public static long lFld=107L;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(double d1, short s1) {

        int i7=12, i8=-2, i9=38, i10=11;
        float f1=-18.889F;

        Test.instanceCount *= Test.instanceCount;
        for (i7 = 4; i7 < 172; ++i7) {
            Test.instanceCount += (long)f1;
            f1 += -12065;
            Test.instanceCount += (i7 * i7);
            Test.iFld = (int)Test.instanceCount;
            Test.iFld <<= s1;
            if (i7 != 0) {
            }
            d1 -= Test.instanceCount;
            i8 >>>= Test.iFld;
        }
        i9 = 1;
        do {
            i10 = 11;
            do {
                Test.iFld += (((i10 * i9) + Test.iFld) - Test.iFld);
                Test.bFld = Test.bFld;
                i8 &= s1;
            } while (--i10 > 0);
        } while (++i9 < 144);
        long meth_res = Double.doubleToLongBits(d1) + s1 + i7 + i8 + Float.floatToIntBits(f1) + i9 + i10;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void vMeth1() {

        double d2=2.45702;
        short s2=31108;
        int i11=-36121, i12=187, i13=-47, i14=-9, i15=-14, i16=168;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)29);

        iArrFld[(Test.iFld >>> 1) % N] -= (int)(Test.instanceCount - dMeth(d2, s2));
        if (Test.bFld) {
            Test.iFld = (int)fFld;
            for (i11 = 8; i11 < 398; ++i11) {
                Test.instanceCount = 126;
                for (i13 = 1; i13 < 4; i13++) {
                    Test.instanceCount *= (long)fFld;
                    for (i15 = 1; 2 > i15; i15++) {
                        byArr[i13 - 1] -= (byte)i12;
                        Test.instanceCount += i12;
                        iArrFld[i15 + 1] |= (int)4174533452L;
                        byArr[i11] = (byte)Test.instanceCount;
                        iArrFld[i15 - 1] -= i12;
                        Test.instanceCount += i15;
                        i16 += i15;
                    }
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d2) + s2 + i11 + i12 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(byArr);
    }

    public void vMeth(int i4, double d, float f) {

        int i5=-197, i6=-26234, i17=-12, i18=15447, i19=-238, i20=12461, i21=98;
        short s=25189;

        for (i5 = 7; i5 < 212; i5++) {
            if ((((i5 + Test.instanceCount) + (s - Test.instanceCount)) - i4) != (Math.min(iArrFld[i5 + 1], (int)(f *
                i4)) * (s - (i4++)))) break;
            switch ((((iArrFld[i5] >>> 1) % 2) * 5) + 55) {
            case 60:
                vMeth1();
                f += (i5 + Test.instanceCount);
                break;
            case 63:
                f *= i5;
                for (i17 = 1; i17 < 8; ++i17) {
                    i18 += (((i17 * i17) + s) - i18);
                    for (i19 = 1; i19 < 2; ++i19) {
                        i6 *= i19;
                        Test.iFld = i21;
                        Test.instanceCount -= i17;
                    }
                }
                Test.iFld += (i5 * i5);
                if (i17 != 0) {
                    vMeth_check_sum += i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i5 + i6 + s + i17 +
                        i18 + i19 + i20 + i21;
                    return;
                }
                break;
            }
            i18 += i5;
        }
        vMeth_check_sum += i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i5 + i6 + s + i17 + i18 + i19 +
            i20 + i21;
    }

    public void mainTest(String[] strArr1) {

        int i=-26169, i1=-13, i2=-196, i3=7, i22=0, i23=31, i24=243, i25=-151;
        double d3=2.43247;
        byte by=-85;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)26256);

        for (i = 300; i > 11; i--) {
            for (i2 = i; i2 < 87; i2++) {
                vMeth(Test.iFld, d3, fFld);
                d3 += Test.iFld;
                i1 += (i2 | i2);
                i3 += (((i2 * Test.instanceCount) + i) - i2);
                fFld *= i2;
                switch ((((i2 >>> 1) % 2) * 5) + 48) {
                case 55:
                    for (i22 = 1; i22 < 1; ++i22) {
                        iArrFld[i22] += (int)Test.instanceCount;
                        if (Test.bFld) break;
                        Test.bFld = false;
                        i23 += (i22 * Test.instanceCount);
                    }
                    i23 -= 196;
                    break;
                case 57:
                    fFld /= 2.958F;
                    Test.bFld = Test.bFld;
                    if (Test.bFld) continue;
                    break;
                }
                Test.instanceCount += (i2 + i1);
                by += (byte)i2;
                for (i24 = 1; i24 > 1; i24--) {
                    i25 += (((i24 * i) + Test.iFld) - Test.instanceCount);
                    Test.lFld += (i24 * Test.lFld);
                    Test.lFld = i24;
                    try {
                        iArrFld[i + 1] = (214 / i22);
                        Test.iFld = (i23 / i25);
                        i25 = (i22 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    i23 = -14;
                    sArr[i2 - 1] += (short)i2;
                    Test.iFld *= (int)fFld;
                    Test.instanceCount += (i24 ^ i24);
                    fFld += i3;
                }
            }
            i1 = i;
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 d3 i22 = " + i3 + "," + Double.doubleToLongBits(d3) + "," + i22);
        FuzzerUtils.out.println("i23 by i24 = " + i23 + "," + by + "," + i24);
        FuzzerUtils.out.println("i25 sArr = " + i25 + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("fFld Test.lFld iArrFld = " + Float.floatToIntBits(fFld) + "," + Test.lFld + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
