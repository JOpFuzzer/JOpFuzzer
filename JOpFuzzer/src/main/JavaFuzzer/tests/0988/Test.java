// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-18500L;
    public static volatile double dFld=114.130213;
    public static int iFld=67;
    public static float fFld=-114.642F;
    public long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 2);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(double d1, int i5, int i6) {

        int i7=9369, i8=-40530, i9=141, i10=-41450, i11=-247, i12=3, i13=-57, i14=-253, i15=-64805;
        long l1=-27101L;
        boolean b=true;

        Test.iArrFld[(Test.iFld >>> 1) % N] = i5;
        Test.fFld = 1;
        switch (((Test.iFld >>> 1) % 1) + 11) {
        case 11:
            for (i7 = 364; i7 > 4; --i7) {
                Test.instanceCount += i5;
                Test.iFld = Test.iFld;
            }
            for (l1 = 15; l1 < 286; ++l1) {
                Test.fFld *= (float)d1;
                for (i10 = 1; i10 < 6; i10++) {
                    Test.instanceCount += (i10 * i10);
                }
                i8 += (int)(l1 - Test.instanceCount);
                for (i12 = 1; i12 < 6; i12++) {
                    for (i14 = 1; i14 < 2; i14++) {
                        if (b) continue;
                        i6 = i12;
                    }
                }
            }
            break;
        }
        long meth_res = Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + l1 + i9 + i10 + i11 + i12 + i13 + i14 + i15 +
            (b ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, float f1) {

        int i1=-6835, i2=-14, i3=48, i4=11, i16=-140, i17=232, i18=223;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.344F);

        Test.iFld += Test.iFld;
        for (i1 = 9; i1 < 214; ++i1) {
            for (i3 = 1; i3 < 8; ++i3) {
                i4 = (iMeth1(2.44419, i4, i1) & i3);
                try {
                    i2 = (i3 % -39950);
                    i2 = (i1 / -1266413126);
                    Test.iArrFld[i1 - 1] = (i1 / 2141591874);
                } catch (ArithmeticException a_e) {}
                Test.iFld >>= (int)Test.instanceCount;
                for (i16 = i1; i16 < 2; ++i16) {
                    i2 ^= (int)l;
                    i4 = (int)1.38835;
                    Test.fFld += (i16 * i16);
                    Test.iArrFld[i16] += Test.iFld;
                    i18 = i1;
                }
                fArr[i3 + 1] = i3;
                f1 += (i3 * i3);
                Test.instanceCount = 4;
            }
        }
        long meth_res = l + Float.floatToIntBits(f1) + i1 + i2 + i3 + i4 + i16 + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f) {

        double d=0.13767;
        int i=14, i19=-54746, i20=236, i21=60726, i22=65050;
        boolean b1=true;
        long l2=-1L;

        for (d = 5; d < 233; ++d) {
            switch ((((iMeth(Test.instanceCount, Test.fFld) >>> 1) % 1) * 5) + 46) {
            case 49:
                if (b1) break;
                break;
            default:
            }
            f = (float)1.82461;
            i = (int)Test.instanceCount;
            Test.instanceCount += Test.instanceCount;
            switch ((int)((d % 1) + 2)) {
            case 2:
                for (i19 = 1; i19 < 7; i19 += 2) {
                    short s1=2296;
                    i = (int)l2;
                    s1 += (short)(((i19 * i) + i19) - i20);
                    switch ((int)((d % 8) + 83)) {
                    case 83:
                        Test.iArrFld[(int)(d - 1)] += Test.iFld;
                        for (i21 = 1; i21 < 3; i21++) {
                            i20 += 0;
                        }
                    case 84:
                        Test.fFld -= i;
                        break;
                    case 85:
                        s1 += (short)(i19 ^ i19);
                        break;
                    case 86:
                        l2 -= Test.iFld;
                        break;
                    case 87:
                        b1 = b1;
                        break;
                    case 88:
                        i22 ^= -208;
                        break;
                    case 89:
                        Test.instanceCount += (((i19 * i22) + Test.fFld) - l2);
                        break;
                    case 90:
                        i += s1;
                        break;
                    }
                }
                break;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i + (b1 ? 1 : 0) + i19 + i20 + l2 +
            i21 + i22;
    }

    public void mainTest(String[] strArr1) {

        short s=-31194, sArr[]=new short[N];
        int i23=-4, i24=-3, i25=158, i26=-42729, i27=10, i28=102, i29=3, i30=0, i31=92, i32=10, i33=9706, i34=-25077,
            iArr[]=new int[N];
        byte by=-18;

        FuzzerUtils.init(iArr, 153);
        FuzzerUtils.init(sArr, (short)-12052);

        Test.dFld *= (((s * -23030) * (-(Test.iFld *= Test.iFld))) * Math.min(--Test.instanceCount, lArrFld[(Test.iFld
            >>> 1) % N]));
        Test.iFld = (int)(((229 + (13916 * Test.iFld)) + Test.iFld) * (iArr[(-7 >>> 1) % N] = (int)(Test.iFld +
            Test.fFld)));
        vMeth(Test.fFld);
        i23 = 1;
        while (++i23 < 207) {
            for (i24 = 5; 121 > i24; ++i24) {
                i25 *= (int)Test.instanceCount;
                iArr[i23 + 1] <<= i25;
                Test.iFld += Test.iFld;
                i25 += i24;
                switch ((i24 % 2) + 1) {
                case 1:
                    sArr[i24] -= (short)-15828;
                    break;
                case 2:
                    Test.instanceCount |= by;
                    iArr[i24] |= i25;
                    break;
                default:
                    Test.iArrFld[i24 - 1] = i25;
                }
                for (i26 = 1; i26 < 2; i26++) {
                    i25 += i26;
                }
                Test.iFld = i27;
                i27 = (int)-19642L;
                s -= (short)i26;
                Test.iFld = 16;
            }
        }
        Test.instanceCount ^= Test.iFld;
        for (i28 = 4; 351 > i28; i28++) {
            for (i30 = 1; i30 < 73; i30++) {
                i25 = Test.iFld;
            }
            i32 += (i28 * i28);
            lArrFld = lArrFld;
            for (i33 = 1; i33 < 73; ++i33) {
                Test.iFld += (4 + (i33 * i33));
                Test.instanceCount = (long)Test.dFld;
                iArr[i28] -= i24;
            }
        }

        FuzzerUtils.out.println("s i23 i24 = " + s + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 by i26 = " + i25 + "," + by + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 iArr = " + i33 + "," + i34 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld lArrFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
