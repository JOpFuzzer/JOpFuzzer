// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=16167L;
    public static double dFld=-1.74896;
    public static double dFld1=57.6034;
    public static volatile float fFld=0.44F;
    public static byte byFld=118;
    public volatile int iFld=-53712;
    public volatile int iFld1=176;
    public static volatile short sArrFld[][]=new short[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-12306);
        FuzzerUtils.init(Test.iArrFld, -44814);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2, int i3) {

        int i4=25, i5=237, i6=31274, i7=25297, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -7362393482858974310L);
        FuzzerUtils.init(iArr, 39);

        lArr[(i2 >>> 1) % N] -= i4;
        for (i5 = 3; 179 > i5; ++i5) {
            i4 += i3;
            i4 = (int)Test.dFld;
            i4 = (int)59.55952;
            i6 *= i6;
            i6 = (int)Test.instanceCount;
            Test.dFld *= -13;
            i2 += (int)-2.819F;
            i4 += (i5 - Test.instanceCount);
            i3 -= i3;
        }
        i6 -= i4;
        iArr[(i2 >>> 1) % N] = 10;
        i4 &= i2;
        iArr[(i4 >>> 1) % N] >>= i7;
        vMeth2_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        int i8=2, i9=12, i10=-199, i11=-9, i12=70, iArr1[]=new int[N];
        boolean b=false;
        long lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, -742486547540976944L);
        FuzzerUtils.init(iArr1, 5);
        FuzzerUtils.init(dArr, 1.67748);

        vMeth2(i8, i8);
        i8 = (int)-7689687902787362683L;
        lArr1 = lArr1;
        for (i9 = 4; i9 < 151; i9++) {
            Test.dFld1 += Test.instanceCount;
            for (i11 = 11; i11 > 1; --i11) {
                if (b) break;
                Test.instanceCount += (long)Test.fFld;
                switch (((i9 % 8) * 5) + 45) {
                case 69:
                    i12 += (i11 * i11);
                    Test.instanceCount += (i11 + i11);
                    break;
                case 85:
                    iArr1[i9] *= i11;
                    break;
                case 56:
                    dArr[i9 - 1] = Test.dFld;
                    i12 = (int)Test.instanceCount;
                    i8 >>= -8;
                    break;
                case 47:
                    if (i8 != 0) {
                        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1) +
                            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                case 61:
                    if (b) break;
                    break;
                case 84:
                    Test.sArrFld = FuzzerUtils.short2array(N, (short)11277);
                    break;
                case 83:
                    i10 <<= i9;
                case 78:
                    i10 += -10;
                    break;
                }
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i) {

        double d=0.21143;
        int i1=-13455, i13=-13, i14=-9, i15=-2, i16=10, i17=-215;
        float f=0.972F, f1=-77.172F;
        long l=-166L;
        boolean b1=false;

        for (d = 10; d < 345; ++d) {
            Test.dFld += ((-2 + (i1 * 0.808F)) + ((-84.53373 + (i + i)) - i1));
            Test.instanceCount += (long)(((d * f) + f) - i1);
            vMeth1();
        }
        i += i1;
        for (f1 = 1; f1 < 354; f1++) {
            i13 *= i1;
            for (l = 5; l > 1; l -= 2) {
                if (false) continue;
            }
        }
        i15 = 1;
        do {
            if (b1) continue;
            for (i16 = 1; i16 < 6; ++i16) {
                if (b1) break;
                Test.byFld -= (byte)i13;
                i += (int)-123L;
            }
        } while (++i15 < 297);
        vMeth_check_sum += i + Double.doubleToLongBits(d) + i1 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) +
            i13 + l + i14 + i15 + (b1 ? 1 : 0) + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        boolean b2=false;
        int i18=14, i19=12, i20=-152, i21=3, i22=-24497, i23=1;
        float f2=-101.7F, f3=49.111F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -210L);

        vMeth(iFld);
        Test.instanceCount = iFld;
        b2 = b2;
        i18 = 179;
        do {
            Test.fFld += Test.fFld;
        } while ((i18 -= 2) > 0);
        Test.iArrFld[(iFld >>> 1) % N] -= iFld;
        i19 = 1;
        while (++i19 < 190) {
            iFld <<= (int)Test.instanceCount;
            Test.fFld += (((i19 * i19) + f2) - iFld);
            if (b2) {
                iFld += (i19 * iFld);
                iFld += i18;
                for (i20 = 132; i20 > 8; i20--) {
                    Test.instanceCount += (i20 | i18);
                    Test.instanceCount = i21;
                    Test.instanceCount = (long)-49.453F;
                    lArr2[(iFld1 >>> 1) % N] &= Test.byFld;
                    Test.fFld += (i20 * i20);
                    Test.instanceCount = Test.instanceCount;
                    b2 = true;
                    for (i22 = 2; i22 > 1; --i22) {
                        int i24=4;
                        i23 += i18;
                        Test.instanceCount += (i22 * i22);
                        switch (((46052 >>> 1) % 5) + 24) {
                        case 24:
                            iFld1 = 1;
                            iFld1 += i22;
                            break;
                        case 25:
                            Test.iArrFld[i22 - 1] += i23;
                        case 26:
                            i21 = (int)Test.instanceCount;
                            lArr2[i20 - 1] = i20;
                            break;
                        case 27:
                            try {
                                iFld1 = (160 / Test.iArrFld[i20]);
                                i23 = (Test.iArrFld[i19 - 1] % i24);
                                i21 = (i24 % 206668304);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 28:
                            i21 += i22;
                            break;
                        default:
                            iFld1 += i22;
                        }
                    }
                }
            } else {
                iFld *= (int)f3;
            }
        }

        FuzzerUtils.out.println("b2 i18 i19 = " + (b2 ? 1 : 0) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("f2 i20 i21 = " + Float.floatToIntBits(f2) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 f3 = " + i22 + "," + i23 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("lArr2 = " + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.dFld1 = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Double.doubleToLongBits(Test.dFld1));
        FuzzerUtils.out.println("Test.fFld Test.byFld iFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.byFld +
            "," + iFld);
        FuzzerUtils.out.println("iFld1 Test.sArrFld Test.iArrFld = " + iFld1 + "," + FuzzerUtils.checkSum(Test.sArrFld)
            + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
