// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4918127919794214781L;
    public static int iFld=0;
    public static float fFld=1.598F;
    public byte byFld=59;
    public boolean bFld=true;
    public long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];
    public static volatile short sArrFld[]=new short[N];
    public float fArrFld[]=new float[N];
    public short sArrFld1[][]=new short[N][N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-43);
        FuzzerUtils.init(Test.byArrFld, (byte)-23);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public void vMeth1(int i, int i1) {

        long l2=49235L;
        int i2=-97, i3=9, i4=43, i5=-42;
        float f1=2.148F;
        boolean b=false;
        double d=-69.70517;

        i1 -= i;
        i = Test.iFld;
        for (l2 = 134; l2 > 1; --l2) {
            i += (int)l2;
            i3 = 1;
            while (++i3 < 12) {
                lArrFld[i3 - 1] = i2;
                try {
                    iArrFld[(int)(l2 - 1)][i3 + 1] = (i1 / 39333);
                    Test.iFld = (Test.iFld % -205841658);
                    iArrFld[(int)(l2 + 1)][i3] = (i2 / i);
                } catch (ArithmeticException a_e) {}
                f1 = Test.iFld;
                Test.iFld += (i3 * i3);
                b = b;
                i4 -= i2;
                Test.sArrFld[i3 + 1] += (short)i2;
            }
            i5 = 1;
            while (++i5 < 12) {
                d += f1;
                i -= (int)f1;
            }
        }
        vMeth1_check_sum += i + i1 + l2 + i2 + i3 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i4 + i5 +
            Double.doubleToLongBits(d);
    }

    public int iMeth() {

        double d1=0.58426;
        int i6=-12;

        vMeth1(Test.iFld, Test.iFld);
        fArrFld[(Test.iFld >>> 1) % N] -= 10;
        iArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] %= (int)((long)(d1) | 1);
        i6 = i6;
        long meth_res = Double.doubleToLongBits(d1) + i6;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(float f, long l, long l1) {

        short s=8076;
        int i7=210, i8=247, i9=-72, i10=116, iArr[]=new int[N];
        double d2=0.122466;
        float f2=80.279F;

        FuzzerUtils.init(iArr, -124);

        iArr[(Test.iFld >>> 1) % N] -= (((iArr[(Test.iFld >>> 1) % N]--) - iMeth()) * Test.iFld);
        s = (short)Test.iFld;
        i7 = 1;
        while ((i7 += 3) < 377) {
            Test.iFld += i7;
            for (i8 = 1; i8 < 13; ++i8) {
                Test.iFld += (i8 | s);
                d2 -= 61230;
                try {
                    Test.iFld = (Test.iFld % i7);
                    i9 = (360941188 % Test.iFld);
                    iArr[i7 - 1] = (iArr[i8 - 1] / 1241807136);
                } catch (ArithmeticException a_e) {}
                l1 *= i7;
                Test.iFld -= (int)f;
                i9 = i9;
                for (f2 = 1; f2 < 2; f2++) {
                    Test.iFld = (int)Test.instanceCount;
                    f -= i10;
                    l1 -= i8;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + l1 + s + i7 + i8 + i9 + Double.doubleToLongBits(d2) +
            Float.floatToIntBits(f2) + i10 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i11=-4, i12=-601, i13=-207, i14=-136, i15=-92, i16=-6, i17=11;
        short s1=4679;
        float f3=72.477F;

        vMeth(Test.fFld, Test.instanceCount, Test.instanceCount);
        iArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] *= Test.iFld;
        Test.iFld <<= Test.iFld;
        sArrFld1 = sArrFld1;
        Test.iFld += -5;
        i11 = 1;
        while (++i11 < 334) {
            Test.sArrFld[i11] += (short)-119.911F;
            Test.iFld += (((i11 * Test.instanceCount) + Test.fFld) - i11);
            Test.instanceCount += (((i11 * Test.iFld) + Test.fFld) - Test.iFld);
            s1 += (short)(((i11 * i11) + byFld) - Test.iFld);
        }
        for (i12 = 18; i12 < 349; i12++) {
            byFld >>= (byte)Test.iFld;
            i13 += (i12 ^ Test.instanceCount);
            if (bFld) {
                i14 = 1;
                while (++i14 < 76) {
                    i13 -= (int)Test.instanceCount;
                    for (i15 = i14; i15 < 1; ++i15) {
                        i16 = i11;
                        if (false) continue;
                    }
                    try {
                        i16 = (iArrFld[i14][i12] / 59529);
                        i13 = (Test.iFld % 31230);
                        i13 = (-4 % i14);
                    } catch (ArithmeticException a_e) {}
                    for (f3 = 1; f3 < 1; f3++) {
                        Test.byArrFld[(int)(f3 - 1)] = (byte)f3;
                        i13 -= byFld;
                        i16 = i16;
                        Test.fFld += (f3 * f3);
                        i16 = byFld;
                        i17 = i13;
                    }
                }
                Test.iFld = i14;
            }
            bFld = true;
            byFld += (byte)i12;
        }

        FuzzerUtils.out.println("i11 s1 i12 = " + i11 + "," + s1 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 f3 i17 = " + i16 + "," + Float.floatToIntBits(f3) + "," + i17);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("byFld bFld lArrFld = " + byFld + "," + (bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("iArrFld Test.sArrFld fArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("sArrFld1 Test.byArrFld = " + FuzzerUtils.checkSum(sArrFld1) + "," +
            FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
