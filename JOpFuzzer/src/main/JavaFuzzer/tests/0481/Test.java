// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-139L;
    public int iFld=-36;
    public static double dFld=2.19901;
    public static boolean bFld=false;
    public static float fFld=-1.755F;
    public int iFld1=10;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 53074L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, short s) {

        int i6=6, i7=-13, iArr[]=new int[N];
        float f1=39.872F;
        byte by=37;

        FuzzerUtils.init(iArr, -13);

        for (i6 = 11; i6 < 228; i6++) {
            Test.instanceCount = i7;
            f1 = 1;
            while (++f1 < 7) {
                float f2=-72.499F;
                int i8=184;
                iArr[i6 + 1] = i5;
                switch (((4 >>> 1) % 2) + 50) {
                case 50:
                    i5 += (124 + (f1 * f1));
                    i7 = i6;
                    i5 = i7;
                    i5 = (int)Test.dFld;
                    break;
                case 51:
                    i5 &= i6;
                    f2 = -200;
                    i5 >>>= (int)Test.instanceCount;
                    i8 -= i8;
                    break;
                default:
                    Test.instanceCount -= i8;
                    by <<= (byte)i6;
                }
            }
        }
        long meth_res = i5 + s + i6 + i7 + Float.floatToIntBits(f1) + by + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i3) {

        int i4=-7161, i9=0, i10=-52, i11=-65278, iArr1[]=new int[N];
        float f=48.440F;
        short s1=-14187;
        boolean b=true;

        FuzzerUtils.init(iArr1, 44431);

        i4 = 1;
        do {
            f -= iMeth(i4, s1);
            s1 += (short)i3;
            Test.dFld += i3;
            iArr1[i4] *= i4;
        } while (++i4 < 198);
        for (i9 = 8; i9 < 171; i9++) {
            if (b) break;
            i3 += i10;
            if (b) continue;
            Test.instanceCount >>= i10;
            i11 = 1;
            while (++i11 < 10) {
                Test.dFld = Test.dFld;
                i3 *= i4;
                i3 = i11;
                iArr1 = iArr1;
            }
        }
        vMeth1_check_sum += i3 + i4 + Float.floatToIntBits(f) + s1 + i9 + i10 + (b ? 1 : 0) + i11 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i, double d, long l) {

        int i1=-8, i2=10, i12=-9, i13=-81, i14=-78, i15=-36, i16=-10106, i17=34, iArr2[]=new int[N];
        boolean b1=true;
        float f3=117.511F, f4=15.786F;
        short s2=21267;

        FuzzerUtils.init(iArr2, 4);

        for (i1 = 5; i1 < 127; ++i1) {
            vMeth1(3);
            b1 = b1;
            for (f3 = 1; 13 > f3; ++f3) {
                i12 -= (int)f3;
                f4 += (((f3 * i1) + i1) - i2);
                i12 -= i;
            }
            i12 += (-38690 + (i1 * i1));
            iArr2[i1 + 1] = i1;
            s2 -= (short)i1;
            i2 = (int)Test.instanceCount;
            for (i13 = i1; i13 < 13; i13++) {
                for (i15 = 1; i15 > 1; i15 -= 3) {
                    l += (((i15 * s2) + l) - i17);
                    l += (((i15 * i) + l) - i2);
                }
            }
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d) + l + i1 + i2 + (b1 ? 1 : 0) + Float.floatToIntBits(f3) + i12
            + Float.floatToIntBits(f4) + s2 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i18=-145, i19=11, i20=-182, i21=-42384, i22=-89, iArr3[]=new int[N];
        double d1=2.58368;
        byte by1=-75;
        long lArr[][]=new long[N][N];
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(iArr3, 125);
        FuzzerUtils.init(lArr, -130L);
        FuzzerUtils.init(bArr, true);

        iFld -= (--iFld);
        iFld = (int)((-23684 * (iFld + Test.instanceCount)) - (iFld--));
        vMeth(iFld, Test.dFld, Test.instanceCount);
        for (i18 = 123; 5 < i18; i18--) {
            for (i20 = 4; i20 < 212; ++i20) {
                i19 += (((i20 * i21) + iFld) - i19);
                for (d1 = i18; d1 < 2; d1++) {
                    i22 = iFld;
                    Test.dFld *= 2.52037;
                    switch ((i18 % 10) + 89) {
                    case 89:
                        i22 += i22;
                        Test.bFld = Test.bFld;
                        Test.instanceCount = (long)Test.fFld;
                    case 90:
                        iFld &= iFld;
                        break;
                    case 91:
                        i19 >>= i20;
                        Test.lArrFld[i20] *= 175;
                        iArr3[i18 + 1] -= i18;
                        break;
                    case 92:
                        lArr = FuzzerUtils.long2array(N, (long)-10L);
                        break;
                    case 93:
                        Test.fFld -= i19;
                        i22 *= i19;
                        break;
                    case 94:
                        Test.instanceCount = i22;
                        try {
                            i21 = (iArr3[(int)(d1 - 1)] % iArr3[i18]);
                            iArr3[i18 - 1] = (-184 / i18);
                            iFld1 = (65 / iArr3[(int)(d1)]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 95:
                        switch (((iFld >>> 1) % 8) + 60) {
                        case 60:
                            iArr3[i18 + 1] = iFld1;
                            iFld += (int)(d1 - Test.instanceCount);
                            break;
                        case 61:
                            Test.instanceCount &= by1;
                            i21 = 10;
                            break;
                        case 62:
                            iArr3[i18 + 1] <<= i18;
                            i19 = (int)-55524L;
                            if (Test.bFld) break;
                            break;
                        case 63:
                            i19 = (int)-321025890922424079L;
                            break;
                        case 64:
                            iFld1 += (int)(d1 * d1);
                            break;
                        case 65:
                            by1 >>= (byte)i21;
                            break;
                        case 66:
                            iFld = (int)Test.instanceCount;
                            break;
                        case 67:
                            bArr[i20] = bArr[i20];
                            break;
                        }
                        break;
                    case 96:
                        Test.fFld += i22;
                        break;
                    case 97:
                        i21 -= i21;
                        break;
                    case 98:
                        Test.fFld -= i19;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 d1 i22 = " + i21 + "," + Double.doubleToLongBits(d1) + "," + i22);
        FuzzerUtils.out.println("by1 iArr3 lArr = " + by1 + "," + FuzzerUtils.checkSum(iArr3) + "," +
            FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.fFld iFld1 = " + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld) + "," + iFld1);
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
