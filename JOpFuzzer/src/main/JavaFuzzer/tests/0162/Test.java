// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=7L;
    public static int iFld=32090;
    public static volatile double dFld=68.104589;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, long l, short s1) {

        long l1=22202L;
        int i7=-2, i8=-54, iArr[]=new int[N];
        float f1=2.816F;
        double d=0.3174;

        FuzzerUtils.init(iArr, -104);

        i6 *= Test.iFld;
        for (l1 = 4; l1 < 334; l1++) {
            Test.instanceCount += l;
            i8 = 1;
            do {
                boolean b=true;
                Test.iFld = (int)12L;
                Test.iFld %= (int)(i8 | 1);
                switch (((i8 % 9) * 5) + 80) {
                case 105:
                    Test.iFld = (int)l1;
                    Test.instanceCount += (i8 * i6);
                    b = true;
                    break;
                case 81:
                    try {
                        i6 = (i8 % 235);
                        i7 = (Test.iFld / -53323);
                        i6 = (i7 % 50593);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld += (i8 + i6);
                    f1 += (i8 * l);
                    break;
                case 102:
                    i6 += i8;
                    Test.iFld += (int)66.92965;
                    break;
                case 100:
                    Test.iFld += i8;
                    break;
                case 94:
                    Test.instanceCount += (long)d;
                    break;
                case 112:
                    i6 += (174 + (i8 * i8));
                    break;
                case 89:
                    iArr[i8 + 1] += i8;
                case 108:
                    iArr[(int)(l1)] >>>= Test.iFld;
                    break;
                case 103:
                    f1 += i8;
                }
            } while (++i8 < 5);
        }
        vMeth1_check_sum += i6 + l + s1 + l1 + i7 + i8 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i5=-38569;
        long l2=7031074360802207855L;
        short s2=-4825;
        float f2=0.335F;

        i5 = 141;
        do {
            vMeth1(i5, l2, s2);
            Test.iFld -= (int)f2;
        } while (--i5 > 0);
        Test.iFld += Test.iFld;
        vMeth_check_sum += i5 + l2 + s2 + Float.floatToIntBits(f2);
    }

    public static boolean bMeth() {

        int i9=-137, i10=-5, i11=38663, i12=7, i13=5;
        float f3=-2.809F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8L);

        vMeth();
        i9 = 1;
        do {
            for (i10 = 1; i10 < 10; ++i10) {
                Test.iFld <<= (int)Test.instanceCount;
                try {
                    Test.iArrFld[i9 - 1] = (Test.iFld % 698101019);
                    Test.iArrFld[i10] = (-65 % i11);
                    Test.iFld = (Test.iFld / i11);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = Test.iFld;
                lArr[i10 + 1] += 9L;
                Test.instanceCount += (i10 | i11);
            }
        } while (++i9 < 151);
        Test.iFld -= (int)f3;
        Test.iArrFld[(i9 >>> 1) % N] += -29778;
        Test.iArrFld = Test.iArrFld;
        lArr[(Test.iFld >>> 1) % N] = 16504;
        for (i12 = 6; 194 > i12; ++i12) {
            Test.iArrFld[i12] = i12;
            i13 += (i12 - f3);
        }
        long meth_res = i9 + i10 + i11 + Float.floatToIntBits(f3) + i12 + i13 + FuzzerUtils.checkSum(lArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=254, i1=-162, i2=-47869, i3=-119, i4=-353, i14=-9, i15=15918, i16=-36944, i17=37232;
        short s=9923;
        float f=101.670F;

        for (i = 138; i > 1; --i) {
            for (i2 = 5; i2 < 183; ++i2) {
                i3 += (i2 * i2);
                i4 = 2;
                do {
                    s += (short)(i4 ^ (long)f);
                    i3 += (int)(-1083873435L + ((i2 - i2) + (i1 % -180)));
                    Test.instanceCount += (((i4 * i4) + i4) - s);
                    if (bMeth()) continue;
                } while (--i4 > 0);
                Test.iFld = (int)3853969548014057136L;
                switch ((i % 6) + 88) {
                case 88:
                    Test.instanceCount = (long)f;
                    i3 = (int)-7L;
                    Test.iFld -= (int)Test.dFld;
                    break;
                case 89:
                    i1 = (int)f;
                    i1 *= i3;
                    for (i14 = 1; 2 > i14; i14++) {
                        try {
                            i1 = (i4 / -66);
                            Test.iArrFld[i + 1] = (Test.iFld % i3);
                            Test.iArrFld[(i14 >>> 1) % N] = (i15 / 216);
                        } catch (ArithmeticException a_e) {}
                        i15 -= 3729;
                        i1 |= i1;
                    }
                    break;
                case 90:
                    for (i16 = 1; i16 < 2; i16++) {
                        Test.instanceCount <<= i15;
                        try {
                            Test.iFld = (Test.iFld / Test.iArrFld[i + 1]);
                            Test.iFld = (56471 % Test.iFld);
                            i15 = (-1013 % Test.iArrFld[i]);
                        } catch (ArithmeticException a_e) {}
                        i17 <<= i4;
                        if (true) continue;
                    }
                    Test.instanceCount -= i16;
                    Test.instanceCount *= (long)Test.dFld;
                    Test.iFld = (int)Test.dFld;
                case 91:
                    i3 = i1;
                    i3 += i16;
                    if (Test.bFld) continue;
                case 92:
                    i15 += (int)(89.900F + (i2 * i2));
                    break;
                case 93:
                    i17 += i;
                    break;
                default:
                    Test.instanceCount -= i14;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 s = " + i3 + "," + i4 + "," + s);
        FuzzerUtils.out.println("f i14 i15 = " + Float.floatToIntBits(f) + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 = " + i16 + "," + i17);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
