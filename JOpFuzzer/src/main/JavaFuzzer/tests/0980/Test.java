// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=241L;
    public static int iFld=-6;
    public static volatile float fFld=-1.732F;
    public static double dFld=0.122212;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 218);
        FuzzerUtils.init(Test.lArrFld, -209L);
    }

    public static long bMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8, long l) {

        int i9=70, i10=24, i11=-37, i12=5283, i13=-72;
        byte by=34;
        boolean b=true;
        short s=19422;
        double d1=109.35162;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2078542439749278091L);

        for (i9 = 8; i9 < 333; i9++) {
            by = (byte)i9;
            i8 |= i10;
            Test.instanceCount += (long)(55.459F + (i9 * i9));
            try {
                Test.iFld = (-722302789 / i8);
                i10 = (86 / i9);
                i11 = (i10 % -138);
            } catch (ArithmeticException a_e) {}
        }
        if (b) {
            i12 = 1;
            while (++i12 < 146) {
                Test.instanceCount -= (long)Test.fFld;
                i11 -= -25437;
                i13 = 11;
                while (--i13 > 0) {
                    b = b;
                    i10 *= i11;
                    lArr[i13 - 1] = s;
                }
                d1 -= i8;
                Test.iArrFld[i12 - 1] *= i11;
            }
        } else {
            s = (short)Test.fFld;
        }
        long meth_res = i8 + l + i9 + i10 + by + i11 + i12 + i13 + (b ? 1 : 0) + s + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(float f, int i6, int i7) {

        int i14=-5, i15=-11, i16=-8, i17=-97;
        short s1=21164;
        double d2=2.66457;
        boolean b1=true;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 49.2F);

        if (b1) {
            Test.instanceCount = (--Test.iArrFld[(Test.iFld >>> 1) % N]);
            f -= ((Math.abs(-64) - iMeth(-64, Test.instanceCount)) - Test.iFld);
            i14 = 1;
            while (++i14 < 242) {
                if (b1) {
                    for (i15 = 1; i15 < 7; ++i15) {
                        i17 = 1;
                        do {
                            i7 <<= (int)-7487786962237721799L;
                            Test.iFld += i17;
                            Test.iFld += (((i17 * s1) + f) - Test.iFld);
                            i6 = (int)828366838L;
                            fArr = FuzzerUtils.float2array(N, (float)-14.552F);
                            s1 = (short)d2;
                            f += (((i17 * i7) + i16) - f);
                        } while (++i17 < 2);
                        Test.lArrFld[i14 + 1][i15 - 1] = i14;
                    }
                } else if (b1) {
                    Test.iFld *= (int)62835L;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i6 + i7 + i14 + i15 + i16 + i17 + s1 + Double.doubleToLongBits(d2) +
            (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static boolean bMeth(double d) {

        int i2=5029, i3=-51, i4=-47768, i5=-47;
        boolean b2=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.55544);

        i2 = 1;
        do {
            Test.instanceCount -= (--Test.iFld);
            for (i3 = 1; i3 < 6; ++i3) {
                i5 = 1;
                do {
                    Test.iFld -= (int)dMeth(Test.fFld, i3, -21412);
                    if (false) break;
                    Test.instanceCount ^= i3;
                    Test.iArrFld[i5 + 1] *= (int)Test.fFld;
                    Test.iArrFld[i3 + 1] = -13;
                    dArr[i3 + 1] *= i2;
                    d += -178;
                    switch ((i2 % 9) + 31) {
                    case 31:
                        b2 = b2;
                        try {
                            Test.iArrFld[i3] = (5506 / i2);
                            Test.iFld = (i4 / 51059);
                            Test.iFld = (Test.iArrFld[i5 - 1] % i3);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 32:
                        dArr[i2 + 1] = -53054;
                        break;
                    case 33:
                        Test.iFld = Test.iFld;
                        break;
                    case 34:
                        i4 >>= (int)Test.instanceCount;
                        break;
                    case 35:
                        Test.instanceCount -= i3;
                    case 36:
                        dArr[i5 - 1] -= i2;
                    case 37:
                        i4 <<= i3;
                        break;
                    case 38:
                        Test.lArrFld[i2][i5 + 1] = 56525;
                        break;
                    case 39:
                        b2 = true;
                    default:
                        Test.iFld += i5;
                    }
                } while (++i5 < 2);
            }
        } while (++i2 < 281);
        long meth_res = Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + (b2 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i1=14, i18=-33279, i19=1, i20=240, i21=-8, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 18504);

        Test.instanceCount = ((-(++Test.iFld)) >>> iArr[(Test.iFld >>> 1) % N]);
        i = 1;
        do {
            i1 = 119;
            while (--i1 > 0) {
                Test.iFld = Test.iFld;
                Test.iFld += (((i1 * Test.fFld) + Test.iFld) - i1);
                Test.iFld += i;
                bMeth(Test.dFld);
                if (bFld) continue;
                Test.iFld += (i1 * i1);
                Test.fFld += i1;
                Test.instanceCount += (((i1 * i1) + Test.instanceCount) - Test.instanceCount);
            }
            for (i18 = 4; i18 < 119; i18++) {
                Test.iArrFld[i18 + 1] <<= i1;
                Test.dFld -= Test.dFld;
                Test.fFld -= (float)Test.dFld;
                Test.dFld -= i;
                for (i20 = 1; i20 < 2; ++i20) {
                    i19 = (int)12576L;
                    switch (((i18 >>> 1) % 5) + 20) {
                    case 20:
                        Test.fFld -= Test.instanceCount;
                        break;
                    case 21:
                        Test.instanceCount *= -839346648L;
                        break;
                    case 22:
                        i21 += (-12819 + (i20 * i20));
                        Test.dFld = i21;
                        Test.iFld *= 231;
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 23:
                        Test.instanceCount += (i20 + i20);
                        Test.lArrFld[i18 + 1][i18] += i;
                        Test.iArrFld[i20] |= -2764;
                        break;
                    case 24:
                        Test.iArrFld[(i18 >>> 1) % N] = i20;
                        Test.dFld = Test.fFld;
                        break;
                    }
                }
            }
        } while (++i < 211);

        FuzzerUtils.out.println("i i1 i18 = " + i + "," + i1 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld bFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + (bFld ? 1
            : 0) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  dMeth ->  dMeth bMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
