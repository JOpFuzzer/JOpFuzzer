// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=40L;
    public static boolean bFld=false;
    public static float fFld=0.745F;
    public double dFld=-126.79991;
    public short sFld=4612;
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 3.38046);
        FuzzerUtils.init(Test.lArrFld, 6285280456739193103L);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i12, boolean b, int i13) {

        int i14=-13, i15=-32548, i16=0, i17=-11, i18=31;

        i12 = (int)Test.instanceCount;
        i14 = 1;
        do {
            for (i15 = 1; i15 < 11; i15++) {
                Test.instanceCount += (i15 - i15);
                for (i17 = 1; 2 > i17; ++i17) {
                    if (b) continue;
                    i16 += i17;
                    i12 = i18;
                    if (b) {
                        i13 >>>= (int)Test.instanceCount;
                        Test.instanceCount += i15;
                    } else if (true) {
                        if (b) continue;
                    } else if (b) {
                        Test.instanceCount = -2407504497880697547L;
                    } else {
                        Test.instanceCount *= Test.instanceCount;
                        i18 = 156;
                    }
                }
            }
        } while (++i14 < 140);
        long meth_res = i12 + (b ? 1 : 0) + i13 + i14 + i15 + i16 + i17 + i18;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i8) {

        int i9=10, i10=13, i11=-41047, i19=207, i20=-132, i21=-27407, i22=-51, i23=-156, iArr[]=new int[N];
        float f=0.607F, fArr[]=new float[N];
        short s=-25427;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, -25218);
        FuzzerUtils.init(lArr, 52951L);
        FuzzerUtils.init(fArr, 22.602F);

        for (i9 = 3; i9 < 182; ++i9) {
            i11 = 1;
            while (++i11 < 9) {
                iArr[i11] = (int)((iMeth1(i11, Test.bFld, i8) * i9) - Test.instanceCount);
                i10 += (((i11 * i11) + f) - i11);
                i8 -= (int)1717347123L;
            }
            switch ((((-9 >>> 1) % 6) * 5) + 43) {
            case 72:
                i10 >>= i9;
                for (i19 = 1; 9 > i19; ++i19) {
                    for (i21 = 1; 2 > i21; ++i21) {
                        i10 *= (int)Test.instanceCount;
                        if (Test.bFld) break;
                    }
                    if (true) continue;
                    i23 = 2;
                    do {
                        Test.instanceCount >>= i8;
                        i20 -= i22;
                    } while (--i23 > 0);
                }
                break;
            case 61:
                lArr[i9][i9] = i23;
                break;
            case 55:
                i8 += (((i9 * i19) + s) - i19);
                break;
            case 44:
                Test.instanceCount += -24078L;
                break;
            case 67:
                fArr[i9] += i21;
                break;
            case 58:
                i22 += 87;
                break;
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + i19 + i20 + i21 + i22 + i23 + s +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i6=209, i7=-13, i24=-1, i25=-252, i26=-49851, i27=-40520, i28=3, iArr1[]=new int[N], iArr2[][]=new
            int[N][N];
        double d=2.55765;

        FuzzerUtils.init(iArr1, 24029);
        FuzzerUtils.init(iArr2, -196);

        for (i6 = 197; i6 > 6; i6 -= 3) {
            d = (lMeth(i6) + i24);
            for (i25 = 1; i25 < 24; ++i25) {
                for (i27 = 1; i27 < 2; ++i27) {
                    i24 -= i25;
                    i26 += (((i27 * i27) + i24) - Test.instanceCount);
                    Test.instanceCount += (((i27 * Test.instanceCount) + Test.fFld) - Test.instanceCount);
                    if (i25 != 0) {
                    }
                }
                iArr1[i25 + 1] += 10;
                Test.fFld += i25;
                i26 <<= (int)Test.instanceCount;
                Test.dArrFld[i25 - 1] = i6;
                Test.fFld += (-5 + (i25 * i25));
            }
            i28 -= (int)d;
            iArr2[i6 + 1][i6 + 1] <<= -107;
        }
        long meth_res = i6 + i7 + Double.doubleToLongBits(d) + i24 + i25 + i26 + i27 + i28 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-130, i1=-12, i2=5452, i3=6, i4=-61477, i5=-21, i29=-27166, i30=-56937, i31=14, i32=-45, iArr3[]=new
            int[N];
        byte by=67;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr3, 10);
        FuzzerUtils.init(fArr1, 1.993F);

        for (i = 4; i < 353; ++i) {
            for (i2 = 1; i2 < 72; ++i2) {
                for (i4 = 1; i4 < 2; ++i4) {
                    i3 = (i5++);
                    i3 += (iMeth() / -12420);
                    Test.fFld += i1;
                    Test.instanceCount -= 24704;
                    i5 += 218;
                    try {
                        i1 = (iArr3[i2] % i1);
                        iArr3[i4 + 1] = (i3 / i2);
                        i3 = (31170 / i2);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = i1;
                    Test.instanceCount += (long)dFld;
                    if (Test.bFld) continue;
                    Test.instanceCount = i3;
                }
                for (i29 = 1; i29 < 2; i29++) {
                    i1 = i2;
                    sFld *= (short)i;
                    Test.bFld = true;
                    Test.fFld += i1;
                    i1 = i2;
                    by = (byte)12187;
                    fArr1[i2] *= i1;
                    Test.instanceCount += i29;
                }
                for (i31 = i; i31 < 2; i31++) {
                    switch ((i % 1) + 114) {
                    case 114:
                        Test.lArrFld[i - 1] |= i31;
                        break;
                    default:
                        iArr3[i + 1] = i32;
                    }
                    i32 <<= i4;
                    fArr1[(i1 >>> 1) % N] = -6;
                    i5 *= i32;
                    dFld += 12;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("i29 i30 by = " + i29 + "," + i30 + "," + by);
        FuzzerUtils.out.println("i31 i32 iArr3 = " + i31 + "," + i32 + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("dFld sFld Test.dArrFld = " + Double.doubleToLongBits(dFld) + "," + sFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
