// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-32292L;
    public int iFld=5617;
    public float fFld=95.319F;
    public static short sFld=-11481;
    public static byte byFld=16;
    public static double dFld=127.39693;
    public int iFld1=61;
    public boolean bFld=false;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.790F);
        FuzzerUtils.init(Test.iArrFld, -197);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth() {

        int i6=52, i7=-9800, i8=-19484, i9=-4601;
        long l3=110L, l4=-414089948L;
        short s1=11709;

        Test.iArrFld[(i6 >>> 1) % N] += -50;
        l3 = 306;
        do {
            i6 = i6;
            for (l4 = 1; l4 < 5; l4++) {
                float f=-1.166F;
                Test.instanceCount -= l3;
                i6 += (5601 + (l4 * l4));
                Test.instanceCount = i7;
                i6 >>= -32;
                f -= f;
                Test.iArrFld[(int)(l3)] *= i7;
                Test.iArrFld[(int)(l4 - 1)] = -200;
                Test.instanceCount <<= 56010;
                for (i8 = (int)(l3); i8 < 2; i8++) {
                    s1 = (short)i8;
                    Test.iArrFld[(-7 >>> 1) % N] *= (int)-2.426F;
                }
            }
        } while (--l3 > 0);
        long meth_res = i6 + l3 + l4 + i7 + i8 + i9 + s1;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(int i4, long l2) {

        short s=3287;
        double d=-1.18777, d1=91.101099;
        int i5=-238, i10=36470, i11=-6;
        boolean b=false;
        float f1=1.975F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1192196384645738923L);

        s = (short)(((d * i4) * (i4 - 0)) - -2.60483);
        Test.instanceCount += (i4 >> (--i4));
        for (d1 = 15; d1 < 360; ++d1) {
            i5 += Short.reverseBytes(sMeth());
            b = b;
        }
        lArr = lArr;
        switch ((((i5 >>> 1) % 1) * 5) + 92) {
        case 96:
            for (i10 = 5; i10 < 332; i10++) {
                f1 += (((i10 * i11) + i5) - l2);
                try {
                    Test.iArrFld[i10] = (Test.iArrFld[i10 + 1] / -39);
                    i11 = (80 % i4);
                    i4 = (i10 / i10);
                } catch (ArithmeticException a_e) {}
                f1 *= f1;
                i4 += (i10 + l2);
                i11 += (i10 ^ i4);
                i11 += i10;
                i4 += (((i10 * Test.instanceCount) + i5) - i10);
            }
        default:
            i11 *= (int)l2;
        }
        vMeth_check_sum += i4 + l2 + s + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i5 + (b ? 1 : 0) +
            i10 + i11 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i) {

        int i1=0, i2=12420, i3=14, i13=70, i14=1, i15=6, iArr1[]=new int[N];
        long l1=2690687079L, lArr1[]=new long[N];
        double d2=-76.10609, d3=-35.129151;
        boolean b1=true;
        float f2=0.1012F;

        FuzzerUtils.init(iArr1, 0);
        FuzzerUtils.init(lArr1, -188L);

        for (i1 = 262; i1 > 3; --i1) {
            for (l1 = 6; l1 > 1; l1--) {
                vMeth(i, l1);
                try {
                    i2 = (-206 / i3);
                    i2 = (i / i1);
                    i2 = (35968 / i2);
                } catch (ArithmeticException a_e) {}
                i = i1;
            }
            for (d2 = 1; d2 < 6; d2++) {
                switch ((((i1 >>> 1) % 8) * 5) + 84) {
                case 89:
                    for (i14 = 1; i14 < 2; i14++) {
                        byte by=-35;
                        by *= (byte)Test.sFld;
                        d3 = d2;
                        if (b1) continue;
                        Test.instanceCount += i14;
                        i *= (int)f2;
                        Test.iArrFld[i14 - 1] = (int)l1;
                        iArr1[(int)(d2)] = 68;
                    }
                    break;
                case 88:
                    Test.instanceCount = Test.byFld;
                    break;
                case 98:
                    lArr1[(int)(d2 + 1)] -= i1;
                    break;
                case 120:
                    f2 += (float)(d2 * d2);
                    break;
                case 111:
                    Test.instanceCount += (long)d2;
                    break;
                case 119:
                    i15 += (int)(d2 + i1);
                    break;
                case 92:
                    Test.instanceCount = 209;
                    break;
                case 106:
                    Test.instanceCount ^= i15;
                    break;
                default:
                    i3 -= (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i + i1 + i2 + l1 + i3 + Double.doubleToLongBits(d2) + i13 + i14 + i15 +
            Double.doubleToLongBits(d3) + (b1 ? 1 : 0) + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=-2L;
        int i16=-95, i17=223, i18=199, i19=8, i20=-2, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -39120);

        l <<= l;
        Test.fArrFld[(iFld >>> 1) % N] *= l;
        iArr[(iFld >>> 1) % N] = (int)((Test.instanceCount--) - ((l % (iFld | 1)) / (((long)(6 + (--fFld))) | 1)));
        iFld *= (iMeth(iFld) * 54081);
        i16 = 1;
        while (++i16 < 140) {
            iFld = -76;
            l -= (long)Test.dFld;
            Test.instanceCount = -36920;
            switch (((i16 % 4) * 5) + 82) {
            case 83:
                Test.dFld = 22;
                lArrFld[(iFld >>> 1) % N] -= Test.instanceCount;
                iFld |= iFld;
                break;
            case 84:
                iFld += i16;
                try {
                    iFld = (-184 % iArr[i16 - 1]);
                    iFld = (i16 % iArr[i16]);
                    iFld = (0 % i16);
                } catch (ArithmeticException a_e) {}
                iFld = iFld1;
                break;
            case 98:
                for (i17 = 10; i17 < 179; i17++) {
                    Test.fArrFld = FuzzerUtils.float1array(N, (float)-75.802F);
                    iArr[i17 - 1] <<= iFld;
                    switch ((i17 % 2) + 100) {
                    case 100:
                        if (bFld) {
                            iFld1 += (i17 * i17);
                            for (i19 = 1; i19 < 2; ++i19) {
                                i18 = i18;
                                bFld = true;
                                iFld -= iFld1;
                                i18 += i19;
                            }
                            switch ((i16 % 9) + 11) {
                            case 11:
                                Test.byFld = (byte)i19;
                                i20 *= (int)Test.instanceCount;
                                Test.instanceCount -= iFld;
                                break;
                            case 12:
                                i18 = i16;
                                break;
                            case 13:
                                l >>= Test.instanceCount;
                                break;
                            case 14:
                                Test.sFld -= (short)-8;
                                break;
                            case 15:
                                iArr[i17] = i16;
                                break;
                            case 16:
                                bFld = bFld;
                                break;
                            case 17:
                                Test.instanceCount += (i17 | i17);
                                break;
                            case 18:
                                i20 = i20;
                                break;
                            case 19:
                                l ^= i16;
                                break;
                            }
                        } else if (bFld) {
                            Test.iArrFld[i17] &= (int)l;
                        } else if (bFld) {
                            fFld += (i17 + iFld);
                        }
                        break;
                    case 101:
                        iFld1 += (i17 * i17);
                    }
                }
                break;
            case 88:
                i18 |= (int)Test.instanceCount;
                break;
            }
        }

        FuzzerUtils.out.println("l i16 i17 = " + l + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount iFld fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.sFld Test.byFld Test.dFld = " + Test.sFld + "," + Test.byFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iFld1 bFld Test.fArrFld = " + iFld1 + "," + (bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
