// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-57314389L;
    public static boolean bFld=true;
    public static int iFld=-18607;
    public static byte byFld=-53;
    public static float fFld=-2.131F;
    public static double dFld=-105.103355;
    public int iArrFld[]=new int[N];

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d) {

        long l=1179015573L;
        int i1=135, i2=-36352, i3=176, iArr[]=new int[N];
        float f1=-1.444F, fArr[][]=new float[N][N];
        byte by=-107;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -8);
        FuzzerUtils.init(sArr, (short)-26923);
        FuzzerUtils.init(fArr, 1.108F);

        l = 265;
        do {
            iArr[(int)(l + 1)] -= (int)Test.instanceCount;
            i1 = i1;
            switch ((int)(((l % 8) * 5) + 81)) {
            case 98:
                iArr[(int)(l)] = (int)f1;
                i1 *= i1;
                break;
            case 118:
                d = i1;
                for (i2 = 1; i2 < 6; ++i2) {
                    Test.instanceCount -= l;
                    i1 *= (int)l;
                    if (i1 != 0) {
                        vMeth1_check_sum += Double.doubleToLongBits(d) + l + i1 + Float.floatToIntBits(f1) + i2 + i3 +
                            by + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    i3 >>= i1;
                    f1 += Test.instanceCount;
                    i1 = 64315;
                    Test.instanceCount *= i2;
                }
                break;
            case 112:
                Test.instanceCount = 220;
                break;
            case 95:
                i3 = by;
            case 90:
                fArr = fArr;
                break;
            case 105:
                i1 -= (int)1367858014L;
            case 91:
                i1 = -237;
                break;
            case 89:
                Test.instanceCount += -5;
                break;
            }
        } while (--l > 0);
        vMeth1_check_sum += Double.doubleToLongBits(d) + l + i1 + Float.floatToIntBits(f1) + i2 + i3 + by +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i) {

        double d1=88.66887;
        int i4=-149, i5=1, i6=25, i7=-7201, i8=-14, i9=-243;
        float f2=-89.251F, f3=-1.304F;
        byte by1=64;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5480478190343212640L);

        i += (int)(lArr[(i >>> 1) % N] = i);
        vMeth1(d1);
        for (i4 = 19; i4 < 317; ++i4) {
            if (Test.bFld) break;
        }
        Test.bFld = Test.bFld;
        f2 = i5;
        for (i6 = 128; 3 < i6; i6--) {
            Test.instanceCount = i4;
        }
        Test.instanceCount += by1;
        if (false) {
            i8 = 1;
            do {
                for (f3 = 11; 1 < f3; f3 -= 2) {
                    i -= (int)f2;
                    Test.instanceCount = 6;
                    i += (int)f3;
                }
            } while (++i8 < 138);
            vMeth_check_sum += i + Double.doubleToLongBits(d1) + i4 + i5 + Float.floatToIntBits(f2) + i6 + i7 + by1 +
                i8 + Float.floatToIntBits(f3) + i9 + FuzzerUtils.checkSum(lArr);
            return;
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d1) + i4 + i5 + Float.floatToIntBits(f2) + i6 + i7 + by1 + i8 +
            Float.floatToIntBits(f3) + i9 + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(float f) {

        int i10=-8, i11=-64213, i12=-9, i13=51158, i14=-45961, iArr1[]=new int[N];
        float f4=70.354F;
        short s1=-10535;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 57949);
        FuzzerUtils.init(lArr1, 39126L);

        vMeth(Test.iFld);
        for (i10 = 8; i10 < 193; i10++) {
            for (i12 = 1; i12 < 9; i12++) {
                switch (((i13 >>> 1) % 2) + 113) {
                case 113:
                    f -= Test.instanceCount;
                case 114:
                    i14 = 1;
                    while (++i14 < 2) {
                        iArr1[i10] <<= (int)-3628617584799863506L;
                    }
                    switch (((Test.iFld >>> 1) % 8) + 122) {
                    case 122:
                        i13 = i10;
                        switch ((i12 % 10) + 23) {
                        case 23:
                            f *= -25960;
                            Test.iFld -= 38;
                        case 24:
                            iArr1[i12] *= i12;
                            lArr1[i10 + 1] = 63478;
                            lArr1[i12] = Test.byFld;
                        case 25:
                            i13 <<= (int)Test.instanceCount;
                            break;
                        case 26:
                            Test.instanceCount = i13;
                            break;
                        case 27:
                            i13 += (int)f4;
                            break;
                        case 28:
                            iArr1[i12 + 1] >>= Test.iFld;
                            break;
                        case 29:
                            Test.iFld = (int)f4;
                            break;
                        case 30:
                            i11 += i11;
                        case 31:
                            try {
                                i11 = (-210 % i11);
                                i11 = (Test.iFld / i13);
                                i11 = (-17 / i10);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 32:
                            i13 += -51;
                        }
                    case 123:
                        s1 += (short)(i12 | (long)f);
                        break;
                    case 124:
                        i13 *= i13;
                        break;
                    case 125:
                        iArr1[i10] += i14;
                        break;
                    case 126:
                        Test.instanceCount = i10;
                        break;
                    case 127:
                        Test.iFld += Test.byFld;
                        break;
                    case 128:
                        i11 ^= (int)Test.instanceCount;
                        break;
                    case 129:
                        lArr1[i10 - 1] -= i11;
                        break;
                    }
                default:
                    Test.iFld += (i12 ^ i14);
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f4) + s1 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i15=-26536, i16=14, i17=0, i18=-4, i19=-12, i20=-8, i21=0;
        long l1=-45759L, lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 1623269197L);

        lMeth(Test.fFld);
        for (i15 = 15; i15 < 295; ++i15) {
            if (Test.bFld) continue;
            l1 = 1;
            do {
                iArrFld[(int)(l1 - 1)] = (int)Test.instanceCount;
                Test.iFld |= i15;
                Test.fFld = Test.iFld;
                i17 = 1;
                do {
                    Test.byFld <<= (byte)i17;
                    Test.iFld = (int)l1;
                    Test.fFld += i17;
                    try {
                        Test.iFld = (i15 / -1212804488);
                        Test.iFld = (iArrFld[(int)(l1 + 1)] / -40330);
                        Test.iFld = (82 % i17);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld += (((i17 * i16) + Test.iFld) - Test.iFld);
                    Test.dFld += -2;
                    Test.fFld += l1;
                    Test.instanceCount <<= i17;
                } while (++i17 < 1);
                Test.iFld += (int)(l1 * l1);
                Test.instanceCount *= Test.iFld;
                for (i18 = 1; i18 < 1; i18++) {
                    i16 = (int)l1;
                    i16 += (i18 * i18);
                }
                Test.instanceCount <<= i19;
                iArrFld[i15 - 1] -= i19;
            } while (++l1 < 90);
            for (i20 = 4; 90 > i20; i20++) {
                if (Test.bFld) {
                    i16 <<= (int)14L;
                    i16 += 126;
                    iArrFld[i15 - 1] += i15;
                } else {
                    i21 = i20;
                    lArr2[i15] -= -107L;
                }
            }
        }

        FuzzerUtils.out.println("i15 i16 l1 = " + i15 + "," + i16 + "," + l1);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 lArr2 = " + i20 + "," + i21 + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.iFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld Test.fFld Test.dFld = " + Test.byFld + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
