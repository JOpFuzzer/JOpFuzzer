// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3398752845L;
    public boolean bFld=true;
    public int iFld=6282;
    public static byte byFld=-19;
    public long lArrFld[]=new long[N];

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(float f, int i, byte by) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -6);

        i -= (int)(((-(Test.instanceCount - i)) / ((5883 - Test.instanceCount) | 1)) + iArr[(200 >>> 1) % N]);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i + by + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(short s, int i4, long l) {

        int i5=-4, i6=54, i7=41155, i8=-41665;
        float f1=0.123F;
        byte by1=9;
        boolean b=false;
        double d=-106.77647;

        i5 = 1;
        while (++i5 < 186) {
            Test.instanceCount += Math.max((++i4) * (i4 = i5), i5);
            i6 = 1;
            while (++i6 < 9) {
                vSmallMeth(f1, i6, by1);
                switch (((i4 >>> 1) % 2) + 33) {
                case 33:
                    l = i4;
                    f1 += (((i6 * i6) + i6) - i4);
                    switch ((i5 % 2) + 119) {
                    case 119:
                        i4 += -102;
                        break;
                    case 120:
                        if (b) break;
                        break;
                    }
                    d += i6;
                case 34:
                    for (i7 = 1; i7 < 1; i7++) {
                        i8 = 19439;
                        l = i4;
                        f1 = i5;
                    }
                    break;
                }
            }
        }
        vMeth_check_sum += s + i4 + l + i5 + i6 + Float.floatToIntBits(f1) + by1 + (b ? 1 : 0) +
            Double.doubleToLongBits(d) + i7 + i8;
    }

    public float fMeth() {

        int i1=-193, i2=-31751, i3=-233, i9=213, iArr1[]=new int[N];
        short s1=11214;
        byte by2=-2;
        float f2=-100.269F;
        double d1=26.107640;

        FuzzerUtils.init(iArr1, -187);

        iArr1[(-13 >>> 1) % N] *= (int)-46915L;
        i1 <<= i1;
        for (i2 = 9; 147 > i2; i2++) {
            if (bFld) break;
            try {
                i1 = (i3 % iArr1[i2 + 1]);
                i3 = (i3 / i1);
                i1 = (-27873 / i1);
            } catch (ArithmeticException a_e) {}
            vMeth(s1, i3, Test.instanceCount);
            i9 = 1;
            while (++i9 < 11) {
                iArr1[i2 + 1] += by2;
                Test.instanceCount -= (long)f2;
                if (bFld) continue;
                f2 *= (float)d1;
                if (false) {
                    i1 += (i9 * i9);
                    i3 -= (int)Test.instanceCount;
                    i3 = 13;
                }
            }
        }
        long meth_res = i1 + i2 + i3 + s1 + i9 + by2 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i11=659, i12=-48, i13=39900, i14=15828, iArr2[]=new int[N];
        float f3=81.809F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr2, -3);
        FuzzerUtils.init(bArr, false);

        for (int smallinvoc=0; smallinvoc<959; smallinvoc++) vSmallMeth(fMeth(), iFld, Test.byFld);
        Test.byFld -= (byte)7122917098214588473L;
        for (int i10 : iArr2) {
            if (bFld) continue;
            iArr2[(i10 >>> 1) % N] += (int)Test.instanceCount;
            if (bFld) {
                for (i11 = 3; i11 < 63; ++i11) {
                    for (i13 = 1; i13 < 2; ++i13) {
                        double d2=0.102152;
                        i12 += (int)d2;
                        switch (((i13 % 1) * 5) + 43) {
                        case 47:
                            i10 += i13;
                            iArr2[i11 + 1] = i14;
                            break;
                        default:
                            iFld <<= iFld;
                            switch (((i13 >>> 1) % 6) + 123) {
                            case 123:
                                iFld |= i10;
                                d2 += Test.byFld;
                                switch (((i13 % 1) * 5) + 79) {
                                case 80:
                                    Test.instanceCount = 171L;
                                    lArrFld[i11 - 1] = Test.instanceCount;
                                    break;
                                }
                            case 124:
                                switch ((i11 % 1) + 122) {
                                case 122:
                                    iArr2[i13 + 1] <<= i12;
                                    break;
                                }
                                if (bFld) continue;
                                i12 *= i14;
                            case 125:
                            case 126:
                            case 127:
                                f3 += (i13 - Test.instanceCount);
                            case 128:
                                i10 = i14;
                                bArr[i11 + 1] = bFld;
                                i14 += (int)f3;
                                f3 = 9;
                                break;
                            }
                        }
                        f3 = i10;
                        i14 *= (int)Test.instanceCount;
                    }
                }
            } else if (false) {
                f3 *= Test.instanceCount;
            } else {
                i10 -= i14;
            }
        }

        FuzzerUtils.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 f3 iArr2 = " + i14 + "," + Float.floatToIntBits(f3) + "," +
            FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount bFld iFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) + "," +
            iFld);
        FuzzerUtils.out.println("Test.byFld lArrFld = " + Test.byFld + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth fMeth
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
