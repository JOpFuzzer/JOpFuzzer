// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=8L;
    public static float fFld=-1.241F;
    public static int iFld=1;
    public static double dFld=1.19380;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 5108267824367563883L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1, long l2) {

        int i=21372, i1=65530, i2=-10, i3=-9, i4=7, i5=4, i6=-8;
        boolean b=true;
        double d=2.35656;

        for (i = 5; i < 142; ++i) {
            Test.fFld = i;
        }
        for (i2 = 20; i2 < 343; ++i2) {
            if (b) {
                Test.fFld = i2;
                i1 += (((i2 * i1) + i3) - i1);
                for (i4 = 1; i4 < 5; i4++) {
                    i1 = (int)Test.instanceCount;
                    i1 = 12;
                    i5 <<= i1;
                    i3 = (int)l1;
                    i6 = 1;
                    do {
                        b = b;
                        Test.fFld += (float)d;
                        i5 += (i6 * i6);
                    } while (++i6 < 2);
                }
            }
        }
        vMeth2_check_sum += l1 + l2 + i + i1 + i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + Double.doubleToLongBits(d);
    }

    public static void vMeth1() {

        int i7=42611, i9=-14, i10=53890, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -51952);
        FuzzerUtils.init(lArr, 39L);

        vMeth2(Test.instanceCount, Test.instanceCount);
        i7 = 1;
        while (++i7 < 268) {
            int i8=-4;
            i8 += i7;
            i8 -= (int)Test.instanceCount;
            for (i9 = 1; i9 < 6; ++i9) {
                i8 = 127;
                i8 = i7;
                i10 += (((i9 * i9) + i10) - Test.instanceCount);
                i10 *= i9;
                switch (((i7 % 2) * 5) + 2) {
                case 8:
                    iArr[i7 - 1] = i7;
                    lArr[i7] += 53052;
                case 6:
                    i10 <<= (int)8L;
                    i10 %= (int)(i10 | 1);
                    i10 += (i9 | i7);
                }
            }
        }
        vMeth1_check_sum += i7 + i9 + i10 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(float f, long l) {

        int i11=143, i12=34443, i13=-29386, i14=119, i15=-10, i16=-3, i17=13620;
        double d1=59.2531, dArr[]=new double[N];
        byte by=-1;

        FuzzerUtils.init(dArr, 0.17855);

        vMeth1();
        Test.instanceCount = i11;
        dArr[(Test.iFld >>> 1) % N] = Test.iFld;
        for (i12 = 5; i12 < 129; i12++) {
            for (i14 = 1; 13 > i14; i14++) {
                i15 = -22613;
                Test.iFld <<= (int)l;
                i13 *= i12;
                d1 = l;
                Test.instanceCount = i14;
                i15 -= by;
            }
            Test.iFld >>>= i12;
        }
        for (i16 = 15; 296 > i16; i16++) {
            i13 = 56755;
            i17 += (int)-68.114255;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d1) + by
            + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i18=-32719, i19=-210, i20=-5, i21=-1, i22=57, i23=20330, iArr1[]=new int[N];
        byte by1=-9;
        boolean b1=false, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(iArr1, 20884);
        FuzzerUtils.init(bArr, false);

        vMeth(Test.fFld, Test.instanceCount);
        Test.iFld = Test.iFld;
        for (i18 = 1; 188 > i18; ++i18) {
            i20 = 134;
            while (--i20 > 0) {
                by1 += (byte)(((i20 * i19) + Test.instanceCount) - i18);
                i21 = 1;
                while (--i21 > 0) {
                    Test.lArrFld[i20 + 1] *= i21;
                    Test.fFld += i18;
                }
                Test.dFld -= Test.instanceCount;
                Test.fFld += i20;
                Test.fFld += i20;
                Test.iFld += (i20 * Test.instanceCount);
                if (b1) break;
                switch ((i18 % 1) + 4) {
                case 4:
                    i19 = i20;
                    for (i22 = 1; i22 < 1; i22++) {
                        Test.dFld *= 247;
                        iArr1[i20] -= i18;
                        by1 = (byte)Test.fFld;
                        Test.instanceCount += i22;
                        Test.iFld = i23;
                        Test.fFld += i19;
                        Test.dFld -= Test.iFld;
                        switch (((i21 >>> 1) % 6) + 103) {
                        case 103:
                            Test.dFld = 56.75199;
                        case 104:
                            Test.iFld += (i22 * i22);
                            Test.fFld *= i23;
                            Test.iFld += (50710 + (i22 * i22));
                            i23 += 9664;
                            break;
                        case 105:
                            Test.iFld += (int)(-1299442924L + (i22 * i22));
                            break;
                        case 106:
                            iArr1[i18 + 1] -= i20;
                            break;
                        case 107:
                        case 108:
                            iArr1[i20 + 1] >>= (int)Test.instanceCount;
                        default:
                            bArr[i22][i22 + 1] = b1;
                        }
                    }
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("by1 i21 b1 = " + by1 + "," + i21 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i22 i23 iArr1 = " + i22 + "," + i23 + "," + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld Test.lArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
