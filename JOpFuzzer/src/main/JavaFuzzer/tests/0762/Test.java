// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-6304180382184374738L;
    public static int iFld=-190;
    public static volatile double dFld=0.93837;
    public static volatile short sFld=-20440;
    public volatile byte byFld=-15;
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -7L);
        FuzzerUtils.init(Test.iArrFld, 207);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, int i5) {

        int i6=-12, i7=-77, i8=9, i9=5, i10=-221, i11=2;
        short s1=15697;
        byte by=66;
        double d=-54.10336;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -117L);

        Test.lArrFld[(i4 >>> 1) % N] = -18910;
        switch ((((i4 >>> 1) % 5) * 5) + 78) {
        case 100:
            Test.iArrFld[(i4 >>> 1) % N] = (int)-102L;
            for (i6 = 3; i6 < 251; i6++) {
                Test.instanceCount -= i5;
                Test.iArrFld[i6] -= 186;
                i4 += (((i6 * i7) + i5) - Test.instanceCount);
                for (i8 = i6; i8 < 7; ++i8) {
                    for (i10 = i6; i10 < 1; ++i10) {
                        i7 += (((i10 * i4) + i9) - i10);
                        Test.instanceCount |= s1;
                        lArr = lArr;
                    }
                    Test.instanceCount >>= i11;
                    i4 *= (int)-50.436F;
                    s1 >>>= (short)i10;
                }
            }
            break;
        case 85:
            i9 -= i5;
            break;
        case 94:
            by -= (byte)i6;
            break;
        case 84:
            i5 = i10;
            break;
        case 90:
        default:
            d += i8;
        }
        vMeth2_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + s1 + by + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(short s, long l, int i3) {

        int i13=13, i14=-251, i15=-38107, i16=-27, i17=-39, i18=-13229, i19=1;
        boolean b=false;
        float f=-2.157F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 58.451F);

        vMeth2(i3, i3);
        for (i13 = 16; i13 < 340; i13++) {
            i14 = i3;
            i3 += i3;
        }
        b = b;
        i3 >>>= i13;
        for (i15 = 2; i15 < 312; i15++) {
            fArr[i15] *= 7;
            i17 = 1;
            while (++i17 < 5) {
                for (i18 = 1; i18 > 1; i18--) {
                    switch ((((i18 >>> 1) % 10) * 5) + 61) {
                    case 89:
                        i19 += (i18 * i18);
                        s = (short)i17;
                        break;
                    case 85:
                        fArr[i17] = i15;
                        i16 = i19;
                        break;
                    case 106:
                        s = (short)i15;
                        break;
                    case 83:
                        Test.iFld -= i18;
                    case 95:
                        i16 -= -14;
                    case 76:
                        i19 -= (int)f;
                        break;
                    case 62:
                        i14 &= i19;
                    case 98:
                        i14 += i15;
                        break;
                    case 73:
                        if (i16 != 0) {
                            vMeth1_check_sum += s + l + i3 + i13 + i14 + (b ? 1 : 0) + i15 + i16 + i17 + i18 + i19 +
                                Float.floatToIntBits(f) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                        break;
                    case 70:
                        i16 += (i18 ^ i19);
                    }
                }
            }
        }
        vMeth1_check_sum += s + l + i3 + i13 + i14 + (b ? 1 : 0) + i15 + i16 + i17 + i18 + i19 +
            Float.floatToIntBits(f) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i=0, i1=-7, i2=14, i20=57, i21=-14, i22=-58435, i23=-48633;
        short s2=-2935;
        float f1=-126.546F;
        byte by1=-15;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, true);

        i -= (int)7068153818164381399L;
        for (i1 = 9; 247 > i1; i1++) {
            bArr[i1 + 1][i1] = (bArr[i1 + 1][i1] = ((i2 * i) <= (-180 + Test.lArrFld[i1 - 1])));
            Test.iArrFld[i1] >>= (int)(Test.instanceCount - Math.max(Test.iArrFld[i1 - 1], Test.iArrFld[i1 + 1]));
            vMeth1(s2, 7180906731352287850L, Test.iFld);
            i ^= i;
            if (Test.iFld != 0) {
                vMeth_check_sum += i + i1 + i2 + s2 + i20 + i21 + i22 + i23 + Float.floatToIntBits(f1) + by1 +
                    FuzzerUtils.checkSum(bArr);
                return;
            }
            s2 /= (short)(i | 1);
            for (i20 = 7; 1 < i20; i20--) {
                i2 += i20;
                for (i22 = 1; 2 > i22; ++i22) {
                    i21 = (int)f1;
                    i += (207 + (i22 * i22));
                    f1 += (i22 + i20);
                    f1 = by1;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + s2 + i20 + i21 + i22 + i23 + Float.floatToIntBits(f1) + by1 +
            FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i24=31523, i25=63, i26=-58183, i27=-70, i28=-180, i29=-134;
        float f2=32.490F, f3=-1.950F;
        boolean b1=true;

        vMeth();
        for (i24 = 22; i24 < 383; ++i24) {
            Test.iArrFld[i24 - 1] = 34903;
            Test.lArrFld[i24 - 1] -= -33L;
            i25 *= (int)Test.instanceCount;
            i26 = 1;
            while (++i26 < 70) {
                switch (((6002 >>> 1) % 4) + 127) {
                case 127:
                    switch (((i26 % 4) * 5) + 53) {
                    case 60:
                        Test.iFld *= -9824;
                        Test.iArrFld[i26 - 1] = (int)Test.dFld;
                        i25 += (5 + (i26 * i26));
                        break;
                    case 68:
                        Test.iFld = 14;
                        i25 += (int)Test.instanceCount;
                        i25 >>>= i26;
                        for (i27 = 1; i27 < 1; i27++) {
                            i28 = i24;
                            Test.iArrFld = Test.iArrFld;
                            f2 = -680389685L;
                            Test.sFld += (short)i25;
                            i25 -= -34342;
                        }
                    case 73:
                        for (f3 = 1; f3 > 1; f3 -= 3) {
                            i25 += byFld;
                            Test.instanceCount = i29;
                            Test.instanceCount -= i25;
                            Test.iArrFld[i26 - 1] = 12;
                            switch ((int)(((f3 % 1) * 5) + 72)) {
                            case 74:
                                f2 += (f3 - Test.sFld);
                                Test.sFld -= (short)i27;
                                break;
                            }
                            Test.instanceCount += (long)(f3 * f3);
                            Test.instanceCount += (long)(((f3 * f3) + f2) - Test.instanceCount);
                        }
                        break;
                    case 58:
                        i29 >>= i27;
                        break;
                    }
                    break;
                case 128:
                    if (b1) continue;
                    break;
                case 129:
                    i29 *= Test.iFld;
                    break;
                case 130:
                    i29 += (int)Test.instanceCount;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 f2 = " + i27 + "," + i28 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("f3 i29 b1 = " + Float.floatToIntBits(f3) + "," + i29 + "," + (b1 ? 1 : 0));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld byFld Test.lArrFld = " + Test.sFld + "," + byFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
