// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5413548591232624009L;
    public static volatile float fFld=-45.41F;
    public static int iFld=16079;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public static boolean bArrFld[]=new boolean[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -17221);
        FuzzerUtils.init(Test.byArrFld, (byte)-105);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i1=52618, i2=14, i3=228, i4=-37389, i5=-6, i6=26381, i7=-46520, i8=3, i9=60, iArr1[][]=new int[N][N];
        double d1=0.42073;
        float f=0.967F, fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -45435);
        FuzzerUtils.init(fArr, 7.161F);

        for (i1 = 3; i1 < 214; ++i1) {
            i2 -= (int)d1;
            iArr1 = iArr1;
        }
        for (i3 = 203; i3 > 6; --i3) {
            for (i5 = 1; i5 < 8; ++i5) {
                i4 += (((i5 * i2) + i6) - i3);
                Test.instanceCount += (i5 * i4);
                i4 = i4;
                fArr[i3 - 1] = i5;
            }
            i4 *= (int)f;
            i4 += (((i3 * i1) + Test.instanceCount) - i2);
            for (i7 = 1; i7 < 8; i7++) {
                i9 = 1;
                while (++i9 < 2) {
                    i4 *= -47309;
                    f = i6;
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + Double.doubleToLongBits(d1) + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 +
            i8 + i9 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(double d) {

        double d2=14.98969;
        int i10=13, i11=-88, i12=-13, i13=47043, i14=-10, iArr2[]=new int[N];
        boolean b=false;
        short s=16130;
        float f1=-4.750F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -29587);
        FuzzerUtils.init(lArr, 2L);

        vMeth1();
        for (d2 = 6; d2 < 138; ++d2) {
            Test.fFld += 40;
        }
        Test.instanceCount += i10;
        i10 = i10;
        Test.instanceCount = Test.instanceCount;
        i10 >>= i11;
        b = b;
        iArr2[(i11 >>> 1) % N] += i11;
        for (i12 = 12; i12 < 259; ++i12) {
            i14 = 1;
            do {
                switch (((i12 % 7) * 5) + 27) {
                case 29:
                    Test.instanceCount += (i14 + Test.instanceCount);
                    lArr[i12 + 1] >>>= i10;
                    i13 = s;
                case 57:
                    i10 = (int)Test.instanceCount;
                case 61:
                    i10 += (((i14 * i13) + i12) - i12);
                case 43:
                    i13 -= (int)f1;
                    break;
                case 51:
                    Test.iFld = i10;
                case 62:
                case 60:
                    Test.fFld -= -116;
                    break;
                }
            } while (++i14 < 7);
        }
        long meth_res = Double.doubleToLongBits(d) + Double.doubleToLongBits(d2) + i10 + i11 + (b ? 1 : 0) + i12 + i13
            + i14 + s + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i) {

        double d3=50.21527;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 63);

        iArr = (iArr = (iArr = (iArr = FuzzerUtils.int1array(N, (int)-12))));
        Test.instanceCount = lMeth(d3);
        vMeth_check_sum += i + Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i15=-34687, i16=-55126, i17=9, i18=-112, i19=12, i20=-45973, i21=154, i22=4;
        boolean b1=true;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 0.797F);

        vMeth(Test.iFld);
        Test.iArrFld[(Test.iFld >>> 1) % N] -= (int)Test.instanceCount;
        for (i15 = 3; i15 < 175; ++i15) {
            Test.byArrFld[i15] += (byte)i15;
            if (b1) break;
            Test.iFld = Test.iFld;
        }
        Test.iArrFld[(i15 >>> 1) % N] += Test.iFld;
        for (i17 = 14; 357 > i17; i17++) {
            Test.instanceCount = i18;
            Test.bArrFld[i17] = b1;
            lArrFld[i17] *= Test.instanceCount;
            for (i19 = 4; i19 < 73; ++i19) {
                Test.iFld += (((i19 * Test.instanceCount) + i17) - i18);
                Test.iArrFld[i19 - 1] += (int)Test.fFld;
                lArrFld[i19] <<= i15;
                for (i21 = 1; i21 < 2; i21 += 2) {
                    if (true) {
                        i22 = (int)Test.instanceCount;
                    } else if (b1) {
                        Test.instanceCount += i21;
                        i22 = i20;
                    } else {
                        Test.iFld += i21;
                        i22 *= (int)-78.98841;
                        i22 -= (int)Test.instanceCount;
                    }
                    i18 = Test.iFld;
                    i22 <<= i16;
                    switch (((i18 >>> 1) % 2) + 102) {
                    case 102:
                        Test.iArrFld[i21] = (int)Test.fFld;
                        Test.iArrFld[i21] = i18;
                    case 103:
                        fArr1[i19] = i22;
                        break;
                    }
                    try {
                        Test.iFld = (-88 % i20);
                        i18 = (89 % Test.iArrFld[i21 + 1]);
                        i22 = (i20 % i19);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }

        FuzzerUtils.out.println("i15 i16 b1 = " + i15 + "," + i16 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.iArrFld Test.byArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + FuzzerUtils.checkSum(Test.byArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
