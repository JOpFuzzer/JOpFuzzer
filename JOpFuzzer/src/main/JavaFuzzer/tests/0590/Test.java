// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3200378220L;
    public volatile double dFld=-95.56907;
    public static float fFld=-55.512F;
    public static boolean bArrFld[]=new boolean[N];
    public int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.iArrFld1, -55231);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l1, boolean b, int i8) {

        int i9=8971, i10=7, i11=9, i12=-34, i13=-14021, i14=-26865, i15=44018, i16=28579, iArr[]=new int[N];
        byte by=-3;

        FuzzerUtils.init(iArr, 0);

        for (i9 = 3; i9 < 265; i9++) {
            for (i11 = 6; i11 > 1; --i11) {
                i12 += (i11 - by);
                iArr[i11 - 1] = (int)Test.instanceCount;
                i12 %= (int)(i11 | 1);
                for (i13 = 1; 2 > i13; i13++) {
                    i8 = (int)-4L;
                    i8 += (int)Test.instanceCount;
                }
                iArr[i11] &= by;
                for (i15 = 1; 2 > i15; i15++) {
                    if (false) {
                        i10 |= (int)Test.instanceCount;
                        Test.bArrFld[i9 + 1] = b;
                        i16 *= i9;
                        b = b;
                    } else if (b) {
                        l1 -= i13;
                    } else {
                        l1 += Test.instanceCount;
                    }
                }
            }
        }
        long meth_res = l1 + (b ? 1 : 0) + i8 + i9 + i10 + i11 + i12 + by + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(long l, float f2, int i3) {

        int i4=179, i5=7, i6=17105, i7=-27864, i17=154, i18=-32847;
        boolean b1=false;
        long l2=-8L, lArr[][]=new long[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -10.713F);
        FuzzerUtils.init(lArr, -6L);

        for (i4 = 169; i4 > 10; i4--) {
            for (i6 = 1; i6 < 10; ++i6) {
                if (b1) {
                    i7 = (int)((long)((i4 * f2) * (i7++)) >> (--Test.instanceCount));
                    Test.instanceCount -= (long)fMeth(Test.instanceCount, b1, i6);
                    fArr[i4] += i4;
                } else {
                }
            }
            for (i17 = 1; i17 < 10; ++i17) {
                i7 = 28985;
            }
            f2 += i5;
            i7 *= i17;
            lArr[i4 - 1][i4 - 1] += i18;
            switch ((i4 % 6) + 65) {
            case 65:
                Test.instanceCount += i4;
                fArr[i4 - 1] *= i5;
                i3 *= -17822;
                break;
            case 66:
                i7 *= (int)l;
            case 67:
                i7 -= i4;
                break;
            case 68:
                b1 = true;
                break;
            case 69:
                i3 = i4;
                break;
            case 70:
                i7 += (((i4 * l2) + i4) - Test.instanceCount);
                break;
            }
        }
        vMeth1_check_sum += l + Float.floatToIntBits(f2) + i3 + i4 + i5 + i6 + i7 + (b1 ? 1 : 0) + i17 + i18 + l2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(float f1) {

        int i19=-195, i20=173, i21=-71, iArr1[]=new int[N];
        boolean b2=true;
        double d=2.13256;

        FuzzerUtils.init(iArr1, 5);

        vMeth1(Test.instanceCount, f1, i19);
        f1 += Test.instanceCount;
        iArr1[(i19 >>> 1) % N] += i19;
        b2 = b2;
        if (b2) {
            d = 1;
            do {
                Test.instanceCount = -20;
                iArr1 = iArr1;
                i19 = (int)Test.instanceCount;
                iArr1[(int)(d)] += i19;
                if (b2) break;
                for (i20 = 5; d < i20; i20 -= 3) {
                    i21 = i21;
                    if (b2) continue;
                    dFld -= i19;
                }
            } while (++d < 369);
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i19 + (b2 ? 1 : 0) + Double.doubleToLongBits(d) + i20 + i21 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        float f=43.91F;
        int i=53, i1=61641, i2=3958, i22=-48564, i23=-223, i24=54776, i25=-44984, i26=-14682;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 51L);

        for (f = 8; f < 241; f++) {
            i += (int)((long)f ^ Test.instanceCount);
        }
        for (i1 = 292; i1 > 5; i1 -= 2) {
            i2 *= i2;
            switch ((i1 % 1) + 41) {
            case 41:
            }
            i2 *= (i++);
        }
        vMeth(f);
        for (i22 = 198; 1 < i22; i22--) {
            i24 = 1;
            do {
                i25 = 1;
                while (++i25 < 1) {
                    i23 += (int)dFld;
                    try {
                        i23 = (i22 % i22);
                        i = (iArrFld[i24][i22] % 239);
                        i2 = (iArrFld[i24][i24] / -1799768303);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount -= i;
                    Test.instanceCount += i24;
                    iArrFld[i24 + 1][(-2 >>> 1) % N] -= (int)dFld;
                    i2 = (int)Test.instanceCount;
                    try {
                        i2 = (38462 / i2);
                        Test.iArrFld1[i24 + 1] = (i25 / 195);
                        i = (42080 / i);
                    } catch (ArithmeticException a_e) {}
                }
                Test.instanceCount = i25;
                i2 = i1;
                switch ((i22 % 8) + 58) {
                case 58:
                    Test.instanceCount += (i24 + i25);
                    break;
                case 59:
                    Test.instanceCount += (i24 * i24);
                    break;
                case 60:
                    i += (int)Test.instanceCount;
                case 61:
                    i23 *= i23;
                    lArr1[i24] = i24;
                    Test.instanceCount += (1079385484L + (i24 * i24));
                    i26 = 1;
                    do {
                        i23 += (int)(0.664F + (i26 * i26));
                        Test.fFld += Test.instanceCount;
                        i23 <<= -37244;
                    } while (++i26 < 1);
                    break;
                case 62:
                    Test.iArrFld1[i22 - 1] = i1;
                    break;
                case 63:
                case 64:
                    Test.instanceCount += -217L;
                case 65:
                    Test.instanceCount = i24;
                    break;
                }
            } while (++i24 < 127);
        }

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i22 i23 = " + i2 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bArrFld iArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.bArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
