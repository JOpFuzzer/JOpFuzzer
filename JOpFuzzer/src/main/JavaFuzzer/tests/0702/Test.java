// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-28505L;
    public volatile short sFld=31181;
    public int iFld=-43;
    public static short sFld1=7458;
    public static double dFld1=1.93223;
    public volatile int iFld1=220;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.560F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i4) {

        int i5=-34588, i6=-1, i7=-12, i8=-2, i9=205, i10=7, i11=59167, iArr2[]=new int[N];
        double d=117.39730;
        float f1=-2.564F;

        FuzzerUtils.init(iArr2, 6729);

        for (i5 = 8; 129 > i5; ++i5) {
            i7 = (int)44.86635;
            iArr2[i5] = i5;
            i7 += (15301 + (i5 * i5));
            for (i8 = i5; i8 < 13; ++i8) {
                for (i10 = 1; 1 > i10; i10 += 3) {
                    if (true) continue;
                    d += -5;
                    f1 -= Test.instanceCount;
                    i6 -= i11;
                    iArr2[i5] -= i4;
                }
                i4 += (int)d;
                i11 += (((i8 * i6) + i6) - i10);
                i4 -= 24064;
                i11 *= (int)f1;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1)
            + FuzzerUtils.checkSum(iArr2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth() {

        int i2=19649, i3=10, i12=880, i13=7, i14=212, i15=-233, iArr1[]=new int[N];
        boolean b1=true;
        short s=30022;

        FuzzerUtils.init(iArr1, -253);

        for (float f : Test.fArrFld) {
            for (i2 = 1; i2 < 4; i2++) {
                if (bMeth(i3)) {
                    i3 += i2;
                } else if (b1) {
                    i3 += (int)(iArr1[i2 + 1] - (--Test.instanceCount));
                    vMeth_check_sum += i2 + i3 + (b1 ? 1 : 0) + i12 + i13 + i14 + i15 + s + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                Test.instanceCount <<= i3;
            }
            iArr1 = iArr1;
            for (i12 = 1; i12 < 4; i12++) {
                if (b1) continue;
            }
            i14 = 4;
            do {
                Test.instanceCount += i14;
                i15 = 1;
                do {
                    s += (short)(i15 * i15);
                    if (i15 != 0) {
                        vMeth_check_sum += i2 + i3 + (b1 ? 1 : 0) + i12 + i13 + i14 + i15 + s +
                            FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    if (b1) continue;
                } while (++i15 < 2);
            } while ((i14 -= 3) > 0);
        }
        vMeth_check_sum += i2 + i3 + (b1 ? 1 : 0) + i12 + i13 + i14 + i15 + s + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i, int i1) {

        float f2=-7.604F;
        int i17=39681, i18=3, i19=-46064, i20=-9, iArr3[]=new int[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr3, -7);
        FuzzerUtils.init(byArr, (byte)53);

        vMeth();
        f2 = 13;
        for (int i16 : iArr3) {
            i1 = Test.sFld1;
            try {
                i16 = (i16 % i);
                i1 = (-21450 % i16);
                i16 = (i / i16);
            } catch (ArithmeticException a_e) {}
            i1 -= i16;
            switch ((((i16 >>> 1) % 6) * 5) + 45) {
            case 70:
                for (i17 = 1; i17 < 4; i17++) {
                    Test.instanceCount = 3011;
                    for (i19 = i17; i19 < 2; ++i19) {
                        i18 >>= i;
                        i1 += (i19 | i20);
                        Test.instanceCount += i19;
                        i18 = i18;
                        i18 >>= (int)2097043916717925825L;
                    }
                }
                break;
            case 49:
                i1 >>>= -9;
            case 57:
                byArr = byArr;
                break;
            case 71:
                Test.dFld1 = Test.instanceCount;
                break;
            case 48:
                if (i17 != 0) {
                }
                break;
            case 59:
                Test.instanceCount = i18;
            default:
                f2 = Test.instanceCount;
            }
        }
        long meth_res = i + i1 + Float.floatToIntBits(f2) + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr3) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr3) {

        boolean b=false;
        int i21=-11236, i22=226, i23=-61866, i24=163, i25=3, i26=-60, i27=-62734, i28=-5, iArr4[]=new int[N];
        byte by=-73;
        long l=64261L;
        float f3=0.32F;
        double d1=-1.101155;

        FuzzerUtils.init(iArr4, -33371);

        sFld = (short)(--Test.fArrFld[(iFld >>> 1) % N]);
        b = b;
        Test.instanceCount -= iMeth(-63553, -7);
        iFld = iFld;
        iFld1 *= (int)0L;
        for (i21 = 19; i21 < 392; i21++) {
            iArr4[i21 + 1] *= (int)Test.instanceCount;
            iFld1 = by;
            iFld = i22;
            iFld1 -= by;
        }
        for (i23 = 9; 224 > i23; i23++) {
            iFld >>= iFld;
            i22 += i23;
            switch ((i23 % 1) + 47) {
            case 47:
                Test.instanceCount += (i23 * i23);
                if (b) break;
                break;
            default:
                l -= l;
                f3 -= iFld;
            }
            iFld = i23;
        }
        for (i25 = 6; i25 < 234; i25++) {
            d1 = 1;
            while (++d1 < 110) {
                iArr4[i25] += (int)l;
                iFld1 |= Test.sFld1;
                for (i27 = (int)(d1); i27 < 1; i27++) {
                    try {
                        iArr4[i25] = (iArr4[i27 + 1] / i21);
                        iFld = (i28 % -766367707);
                        i28 = (37787 / iFld1);
                    } catch (ArithmeticException a_e) {}
                    l *= i27;
                    f3 -= -53;
                    if (b) continue;
                    Test.instanceCount >>= i24;
                    iFld1 += (i27 + iFld);
                }
            }
        }

        FuzzerUtils.out.println("b i21 i22 = " + (b ? 1 : 0) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("by i23 i24 = " + by + "," + i23 + "," + i24);
        FuzzerUtils.out.println("l f3 i25 = " + l + "," + Float.floatToIntBits(f3) + "," + i25);
        FuzzerUtils.out.println("i26 d1 i27 = " + i26 + "," + Double.doubleToLongBits(d1) + "," + i27);
        FuzzerUtils.out.println("i28 iArr4 = " + i28 + "," + FuzzerUtils.checkSum(iArr4));

        FuzzerUtils.out.println("Test.instanceCount sFld iFld = " + Test.instanceCount + "," + sFld + "," + iFld);
        FuzzerUtils.out.println("Test.sFld1 Test.dFld1 iFld1 = " + Test.sFld1 + "," +
            Double.doubleToLongBits(Test.dFld1) + "," + iFld1);
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
