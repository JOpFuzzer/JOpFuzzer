// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-48820L;
    public static int iFld=-3;
    public static double dFld=94.124874;
    public static boolean bFld=false;
    public float fFld=-1.749F;
    public byte byFld=74;
    public static short sFld=1343;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 154);
        FuzzerUtils.init(Test.iArrFld1, -3);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f, int i3, int i4) {

        int i5=85, i6=-5, i7=-53845, i8=72, i9=-180, i10=12, i11=-7475;
        short s=9419;
        byte by=72;
        double d=80.1202;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1756064598442560674L);

        for (i5 = 398; i5 > 24; --i5) {
            i3 = (int)Test.instanceCount;
            Test.iFld = (int)f;
            for (i7 = 1; 5 > i7; ++i7) {
                i6 = -1;
                i9 = (int)Test.instanceCount;
                s = (short)786177801L;
            }
            Test.iFld += (int)-189L;
            try {
                i6 = (Test.iFld % Test.iArrFld[i5 - 1]);
                i8 = (Test.iArrFld[i5 + 1] % i6);
                i6 = (99 % Test.iArrFld[i5]);
            } catch (ArithmeticException a_e) {}
            switch (((-64 >>> 1) % 9) + 100) {
            case 100:
                for (i10 = 1; i10 < 5; i10++) {
                    i8 <<= by;
                    Test.iArrFld[(-143 >>> 1) % N] = 181;
                    Test.instanceCount += (long)-106.117060;
                    i4 += (int)d;
                }
                break;
            case 101:
                Test.iFld /= (int)((long)(f) | 1);
                break;
            case 102:
                lArr[i5 - 1] >>= Test.instanceCount;
                break;
            case 103:
                Test.iFld -= (int)f;
                break;
            case 104:
                Test.iArrFld[i5 - 1] += -62087;
                break;
            case 105:
                Test.instanceCount += i5;
                break;
            case 106:
                if (i8 != 0) {
                    vMeth2_check_sum += Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + s + i10 + i11 + by
                        + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr);
                    return;
                }
            case 107:
                i4 += i5;
                break;
            case 108:
                Test.iArrFld[i5] = (int)-108.440F;
                break;
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + s + i10 + i11 + by +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1() {

        float f1=0.840F;
        boolean b=true;

        vMeth2(f1, Test.iFld, -1);
        b = b;
        Test.iFld = 13;
        vMeth1_check_sum += Float.floatToIntBits(f1) + (b ? 1 : 0);
    }

    public static void vMeth() {

        int i1=-10, i2=-11787, i12=8, i13=87, i14=-173, i15=-52634, i16=-40122;
        short s1=10448;
        float f2=70.899F, f3=1.386F;

        for (i1 = 4; i1 < 357; ++i1) {
            vMeth1();
            Test.iFld = (int)Test.instanceCount;
            for (i12 = 1; i12 < 5; ++i12) {
                Test.instanceCount += Test.instanceCount;
                Test.iFld += (i12 * i12);
                Test.iArrFld[i1 + 1] = (int)Test.dFld;
            }
            if (false) {
                i2 <<= i13;
                s1 = (short)6L;
            } else {
                for (i14 = 1; i14 < 5; i14++) {
                    for (f2 = 1; 2 > f2; f2++) {
                        boolean b1=false;
                        b1 = b1;
                        f3 -= i13;
                        Test.iFld += (int)1073956172800386515L;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i12 + i13 + s1 + i14 + i15 + Float.floatToIntBits(f2) + i16 +
            Float.floatToIntBits(f3);
    }

    public void mainTest(String[] strArr1) {

        int i=-157, i17=-32809, i18=-33546, i19=-48112, i20=-63719, i21=19851, i22=0, i23=-108, i25=-227, i26=140;
        double d1=-55.73284;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 2.32F);

        Test.iArrFld[(Test.iFld >>> 1) % N] = (Test.iFld++);
        i = 1;
        do {
            Test.iArrFld[(i >>> 1) % N] *= i;
            vMeth();
            Test.iFld -= i;
            if (Test.bFld) break;
            fFld = fFld;
            for (i17 = i; i17 < 152; ++i17) {
                Test.instanceCount &= i;
                Test.iFld += i17;
                for (i19 = 1; i19 < 1; ++i19) {
                    if (Test.bFld) continue;
                    i20 *= byFld;
                }
                Test.iArrFld1 = FuzzerUtils.int2array(N, (int)49507);
            }
            Test.iArrFld[i + 1] = i17;
        } while (++i < 165);
        for (i21 = 311; i21 > 5; i21--) {
            Test.instanceCount += (45148 + (i21 * i21));
        }
        Test.iFld += i20;
        for (d1 = 10; d1 < 241; d1 += 3) {
            i23 += (int)((long)d1 | i23);
            Test.instanceCount = Test.sFld;
            switch ((((i18 >>> 1) % 9) * 5) + 16) {
            case 50:
                Test.instanceCount += (long)fFld;
                for (i25 = 20; i25 < 325; i25++) {
                    i23 >>= (int)Test.instanceCount;
                    try {
                        i20 = (i25 % -1571157180);
                        i26 = (i20 / Test.iArrFld[i25 + 1]);
                        Test.iArrFld1[(int)(d1)][i25] = (i17 / Test.iArrFld1[i25 - 1][(int)(d1 - 1)]);
                    } catch (ArithmeticException a_e) {}
                    i23 -= (int)Test.dFld;
                    fArr = FuzzerUtils.float2array(N, (float)119.706F);
                    Test.instanceCount &= i25;
                    Test.iFld += (((i25 * Test.instanceCount) + i20) - Test.instanceCount);
                }
                break;
            case 40:
                Test.instanceCount = Test.instanceCount;
                break;
            case 49:
                Test.dFld -= -39107;
                break;
            case 33:
                Test.iArrFld1[(int)(d1 - 1)][(int)(d1 + 1)] = (int)Test.instanceCount;
            case 53:
                Test.dFld -= i25;
                break;
            case 37:
                i20 |= (int)Test.instanceCount;
                break;
            case 61:
                byFld ^= (byte)Test.instanceCount;
                break;
            case 46:
                i22 -= Test.sFld;
            case 32:
                byFld += (byte)(d1 * d1);
                break;
            }
        }

        FuzzerUtils.out.println("i i17 i18 = " + i + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 d1 i23 = " + i22 + "," + Double.doubleToLongBits(d1) + "," + i23);
        FuzzerUtils.out.println("i25 i26 fArr = " + i25 + "," + i26 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld fFld byFld = " + (Test.bFld ? 1 : 0) + "," + Float.floatToIntBits(fFld) +
            "," + byFld);
        FuzzerUtils.out.println("Test.sFld Test.iArrFld Test.iArrFld1 = " + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
