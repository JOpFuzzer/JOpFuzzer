// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5525893789256698681L;
    public static float fFld=-2.268F;
    public static int iFld=13;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-25496);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l) {

        int i7=21245, i8=-117, i9=-13, i10=-34318, i11=49808, i12=48;
        float f=-2.33F;
        short s=24082;
        boolean b=false;

        i7 = -195;
        for (f = 343; f > 5; f--) {
            if (true) continue;
            for (i9 = 5; f < i9; --i9) {
                float f1=36.792F;
                f1 -= -6L;
                i10 /= (int)(i8 | 1);
                switch (((i10 >>> 1) % 2) + 18) {
                case 18:
                    switch ((int)((f % 4) + 89)) {
                    case 89:
                        i10 += i7;
                        f1 = Test.instanceCount;
                        if (i8 != 0) {
                        }
                        s += (short)i9;
                        break;
                    case 90:
                        for (i11 = 1; i11 < 1; i11++) {
                            i7 = i7;
                            i7 = i11;
                        }
                    case 91:
                        i12 += i12;
                        break;
                    case 92:
                        i8 += s;
                        break;
                    default:
                        b = b;
                    }
                    break;
                case 19:
                    i8 = i8;
                }
            }
        }
        long meth_res = l + i7 + Float.floatToIntBits(f) + i8 + i9 + i10 + s + i11 + i12 + (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(double d, int i, int i1) {

        int i2=-14, i3=175, i4=-4, i5=-25569, i6=23895, i13=-7, iArr[]=new int[N];
        short s1=-7261;
        byte by=104;
        double d1=60.22863;

        FuzzerUtils.init(iArr, 106);

        for (i2 = 4; 129 > i2; ++i2) {
            for (i4 = 1; i4 < 13; ++i4) {
                Test.instanceCount += (((i4 * Test.instanceCount) + Test.instanceCount) - i2);
                i6 = 1;
                do {
                    switch ((i2 % 2) + 119) {
                    case 119:
                        switch ((i4 % 8) + 81) {
                        case 81:
                            i += iMeth(Test.instanceCount);
                            break;
                        case 82:
                            i += (((i6 * i3) + i6) - s1);
                            i1 = i5;
                        case 83:
                            iArr[i2 - 1] &= i4;
                            d -= i13;
                            i5 = by;
                            i5 -= 117;
                            break;
                        case 84:
                            Test.instanceCount -= Test.instanceCount;
                            break;
                        case 85:
                            d1 += s1;
                        case 86:
                            i1 = i4;
                            break;
                        case 87:
                            by += (byte)(((i6 * i4) + Test.fFld) - i13);
                        case 88:
                            i13 %= (int)10L;
                            break;
                        default:
                            Test.sArrFld = Test.sArrFld;
                        }
                    case 120:
                        i5 += (i6 + s1);
                        break;
                    }
                } while ((i6 += 3) < 2);
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + i3 + i4 + i5 + i6 + s1 + i13 + by +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        short s2=-11387;
        double d2=2.83908;
        boolean b1=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-25);

        vMeth1(1.28666, Test.iFld, Test.iFld);
        Test.fFld = s2;
        byArr[(1 >>> 1) % N] <<= (byte)Test.iFld;
        Test.iFld -= (int)-7121015423180190105L;
        Test.iFld = (int)d2;
        Test.iFld *= s2;
        Test.iFld = -35;
        Test.iFld = Test.iFld;
        Test.iFld += (int)Test.instanceCount;
        b1 = b1;
        Test.iFld = (int)Test.instanceCount;
        Test.iFld = Test.iFld;
        vMeth_check_sum += s2 + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        boolean b2=false;
        long l1=41335L, l2=4452L, lArr[]=new long[N];
        double d3=30.14842;
        int i14=120, i15=-27, iArr1[]=new int[N];
        short s3=990;
        byte by1=-77;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -126.522F);
        FuzzerUtils.init(iArr1, 108);
        FuzzerUtils.init(lArr, -191L);

        if (b2) {
            vMeth();
        } else {
            l1 = 1;
            while (++l1 < 142) {
                fArr[(Test.iFld >>> 1) % N] -= (float)d3;
                Test.instanceCount += (((l1 * Test.iFld) + Test.iFld) - Test.iFld);
                iArr1[(int)(l1)] |= Test.iFld;
                i14 = 177;
                do {
                    Test.fFld = Test.iFld;
                    Test.iFld += i14;
                    Test.iFld = i14;
                    Test.fFld = Test.instanceCount;
                    Test.sArrFld[(int)(l1)] -= (short)Test.fFld;
                    Test.iFld += (i14 - l1);
                    Test.iFld += i14;
                    iArr1[(int)(l1)] <<= -16035;
                    Test.iFld >>= i14;
                    for (l2 = 1; l2 < 1; ++l2) {
                        s3 -= (short)-13L;
                        Test.iFld = Test.iFld;
                        Test.instanceCount += (((l2 * i14) + i15) - Test.iFld);
                        by1 += (byte)(1963654236L + (l2 * l2));
                        i15 -= (int)Test.fFld;
                        Test.instanceCount <<= i15;
                        Test.instanceCount += l2;
                        Test.iFld = i14;
                        d3 -= i14;
                        lArr[(int)(l1 - 1)] >>= i14;
                    }
                } while (--i14 > 0);
                d3 *= -16832;
                d3 = -4766;
                d3 *= i15;
            }
        }

        FuzzerUtils.out.println("b2 l1 d3 = " + (b2 ? 1 : 0) + "," + l1 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i14 l2 i15 = " + i14 + "," + l2 + "," + i15);
        FuzzerUtils.out.println("s3 by1 fArr = " + s3 + "," + by1 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("iArr1 lArr = " + FuzzerUtils.checkSum(iArr1) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sArrFld = " + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
