// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=125813809L;
    public static int iFld=33099;
    public static volatile short sFld=-31685;
    public static float fFld=0.847F;
    public static volatile byte byFld=-78;
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];
    public static short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3840558245L);
        FuzzerUtils.init(Test.sArrFld, (short)-32088);
    }

    public static long vMeth_check_sum = 0;
    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public void vMeth(int i2) {

        int i3=-4, i4=37953, i5=-53005, i6=222, i7=-184, iArr[]=new int[N];
        long l=215L;
        double d=34.18744;
        float f=1.500F, fArr[]=new float[N];

        FuzzerUtils.init(iArr, 52451);
        FuzzerUtils.init(fArr, 1.580F);

        for (i3 = 197; i3 > 2; --i3) {
            for (i5 = 1; i5 < 8; i5++) {
                i6 = (i4--);
                for (l = 1; l < 2; ++l) {
                    switch (((i5 % 5) * 5) + 71) {
                    case 87:
                        i4 = (int)Test.lArrFld[i5 + 1];
                    case 92:
                        i4 += (int)(-12196 + d);
                        i6 *= i2;
                        f -= i2;
                        Test.instanceCount += Test.lArrFld[(int)(l)];
                    case 83:
                        Test.instanceCount += (l + i2);
                        i7 = ((i2--) + i3);
                        i2 += iArr[i3 + 1];
                        break;
                    case 76:
                        Test.instanceCount /= ((2 * (++Test.lArrFld[i3])) | 1);
                        i6 *= (int)fArr[i5];
                        break;
                    case 77:
                        i6 += (int)(((l * i3) + i4) - f);
                        break;
                    default:
                        i7 *= (i7--);
                    }
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + l + i7 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static byte byMeth(int i13, int i14) {

        double d3=0.89164;
        int i15=0, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 63503);

        d3 = i13;
        Test.instanceCount += Test.instanceCount;
        iArr1[(i13 >>> 1) % N] = Test.iFld;
        i15 = 1;
        while (++i15 < 370) {
            if (i13 != 0) {
            }
            i13 *= i13;
        }
        long meth_res = i13 + i14 + Double.doubleToLongBits(d3) + i15 + FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(double d2, long l1, float f2) {

        byte by=-80;
        int i9=17987, i10=36027, i11=0, i12=-13, iArr2[]=new int[N];
        long l2=-254L;

        FuzzerUtils.init(iArr2, 10);

        Test.iFld = (int)((-(Test.iFld * by)) + (Test.iFld - (Test.iFld - Test.instanceCount)));
        for (i9 = 8; i9 < 286; ++i9) {
            l2 = 1;
            do {
                for (i11 = 1; i11 < 1; i11++) {
                    Test.iFld = (byMeth(i11, i11) >> i9);
                    i12 = (int)l2;
                    i12 += i9;
                    iArr2[i9 + 1] |= (int)Test.instanceCount;
                }
                if (i12 != 0) {
                }
                i10 = 21;
                f2 -= i11;
                i12 = (int)264944697017924254L;
                Test.lArrFld[i9] -= 645L;
                i12 <<= Test.sFld;
            } while (++l2 < 6);
            Test.iFld ^= 43071;
        }
        long meth_res = Double.doubleToLongBits(d2) + l1 + Float.floatToIntBits(f2) + by + i9 + i10 + l2 + i11 + i12 +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(double d1, int i8, float f1) {


        Test.instanceCount = iMeth(d1, Test.instanceCount, f1);
        vSmallMeth_check_sum += Double.doubleToLongBits(d1) + i8 + Float.floatToIntBits(f1);
    }

    public void mainTest(String[] strArr1) {

        int i=-1, i1=0, i16=-8, i17=6;

        for (i = 7; i < 346; i++) {
            double d4=-105.20436;
            vMeth(Math.abs(Integer.reverseBytes(Math.abs(i))));
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(-2.112145, 66, Test.fFld);
            d4 += d4;
        }
        i1 &= (int)Test.instanceCount;
        i1 = Test.iFld;
        Test.instanceCount -= 53146;
        Test.iFld += 64537;
        Test.instanceCount <<= i;
        for (i16 = 1; i16 < 369; i16++) {
            iArrFld[i16 + 1] = (int)Test.instanceCount;
            Test.sArrFld[(i17 >>> 1) % N][i16] = (short)i17;
        }
        Test.iFld += i;
        Test.byFld += (byte)Test.sFld;

        FuzzerUtils.out.println("i i1 i16 = " + i + "," + i1 + "," + i16);
        FuzzerUtils.out.println("i17 = " + i17);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld Test.byFld Test.lArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.byFld + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("iArrFld Test.sArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  byMeth ->  byMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
