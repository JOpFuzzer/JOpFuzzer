// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1041845570L;
    public static double dFld=-1.16032;
    public static int iFld=14;
    public static boolean bFld=false;
    public static boolean bArrFld[][]=new boolean[N][N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld1[]=new long[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.lArrFld, 8L);
        FuzzerUtils.init(Test.iArrFld, -48579);
        FuzzerUtils.init(Test.lArrFld1, -5454723124124522667L);
        FuzzerUtils.init(Test.sArrFld, (short)-2445);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static void vSmallMeth(int i) {

        boolean b=false;

        Test.bArrFld[(-6355 >>> 1) % N][(i >>> 1) % N] = b;
        vSmallMeth_check_sum += i + (b ? 1 : 0);
    }

    public static float fMeth(int i5, int i6) {

        int i7=-98, i8=-134, i9=-52232, i10=-13078, iArr[]=new int[N];
        double d=-34.35453, d1=2.36827;
        long l3=-124849597L;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 113.185F);
        FuzzerUtils.init(iArr, 5724);

        i5 >>= i5;
        for (i7 = 2; i7 < 289; i7++) {
            for (d = 1; d < 6; d++) {
                Test.instanceCount = Test.instanceCount;
                fArr[(int)(d - 1)] += i6;
                Test.instanceCount += (long)d;
                i6 += (int)d;
                d1 *= -11946;
                d1 += Test.instanceCount;
                for (l3 = 1; l3 < 2; l3++) {
                    Test.instanceCount = i9;
                    d1 %= (l3 | 1);
                    try {
                        iArr[(int)(l3 + 1)] = (i6 / 219);
                        i8 = (i6 / -20);
                        iArr[(int)(d - 1)] = (i5 % i8);
                    } catch (ArithmeticException a_e) {}
                    Test.lArrFld[(int)(d)] -= i7;
                    i10 += (int)l3;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + i9 + Double.doubleToLongBits(d1) + l3 + i10 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        int i2=7, i3=-7, i4=28935;
        short s=-14322;
        float f1=16.633F;
        boolean b1=false;

        i2 = s;
        for (i3 = 5; i3 < 157; i3++) {
            fMeth(i3, i3);
            s += (short)i2;
            Test.iArrFld[i3] <<= i4;
            i4 >>>= (int)Test.instanceCount;
            Test.lArrFld[i3] += (long)Test.dFld;
            switch ((i3 % 5) + 82) {
            case 82:
                switch (((i4 >>> 1) % 4) + 7) {
                case 7:
                    f1 = 1;
                    while (++f1 < 10) {
                        Test.lArrFld[(int)(f1)] = -37930;
                        i4 *= (int)Test.dFld;
                        i2 += (int)1.218F;
                    }
                    s -= (short)-5;
                    s += (short)f1;
                    break;
                case 8:
                    Test.lArrFld[i3 - 1] *= i4;
                case 9:
                    Test.lArrFld1[i3] = i4;
                    break;
                case 10:
                    i2 = (int)f1;
                    break;
                default:
                    Test.iArrFld[i3 + 1] *= (int)Test.instanceCount;
                }
            case 83:
                if (b1) break;
                break;
            case 84:
                Test.sArrFld[i3] = (short)i2;
            case 85:
                i4 = (int)Test.instanceCount;
                break;
            case 86:
                if (i4 != 0) {
                }
                break;
            }
        }
        long meth_res = i2 + s + i3 + i4 + Float.floatToIntBits(f1) + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(long l, long l1, byte by) {

        long l2=45741L;
        int i12=-192, i13=-31387, i14=48531;
        float f2=2.538F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.27750);

        l2 = 1;
        while (++l2 < 272) {
            iMeth();
            Test.lArrFld[(int)(l2 + 1)] = Test.iFld;
            i12 = 1;
            do {
                Test.iArrFld[i12 + 1] *= 8;
                Test.instanceCount += (i12 + i12);
                if (Test.bFld) {
                    if (true) continue;
                    f2 += i12;
                } else if (Test.bFld) {
                    dArr = dArr;
                    l1 += Test.iFld;
                    for (i13 = 1; i13 < 1; i13++) {
                        i14 = i13;
                    }
                }
                Test.dFld *= f2;
                Test.iArrFld[i12 - 1] += (int)l;
            } while (++i12 < 6);
        }
        long meth_res = l + l1 + by + l2 + i12 + Float.floatToIntBits(f2) + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-7, i15=-2, i16=33558, i17=133, i18=59401, i19=41752, i20=11788, i21=-12, i22=-12, i23=36250;
        float f=-85.464F;
        byte by1=11;
        double d2=-1.39766;

        for (int smallinvoc=0; smallinvoc<462; smallinvoc++) vSmallMeth(--i1);
        Test.instanceCount *= (i1 = (i1 += (i1--)));
        vSmallMeth((int)(((i1 - 112.415F) * (0.24490 + (-Math.max(i1, -224)))) + (f + (Test.instanceCount + f))));
        i1 += i1;
        i1 = Math.abs((int)(-dMeth(Test.instanceCount, -138L, by1)));
        i1 *= Test.iFld;
        for (i15 = 18; 332 > i15; ++i15) {
            for (i17 = 2; i17 < 80; i17++) {
                Test.instanceCount += i1;
                for (d2 = i17; d2 < 2; d2++) {
                    i1 += (int)(d2 - Test.iFld);
                    if (Test.bFld) continue;
                    Test.iFld = i17;
                    Test.instanceCount >>= i19;
                    Test.iArrFld[(i17 >>> 1) % N] = i16;
                    f -= i18;
                    Test.iArrFld[i17] = i1;
                }
                Test.dFld -= 5;
                for (i20 = 1; 2 > i20; i20++) {
                    Test.instanceCount += i20;
                    Test.iArrFld = Test.iArrFld;
                    Test.instanceCount = -230;
                    Test.instanceCount >>= 14L;
                }
                i1 >>= i16;
                i16 -= (int)Test.instanceCount;
                Test.iArrFld[i15] += 1;
                for (i22 = 1; i22 < 2; ++i22) {
                    i21 = i20;
                    Test.instanceCount += (((i22 * f) + Test.instanceCount) - i16);
                }
                i19 = (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i1 f by1 = " + i1 + "," + Float.floatToIntBits(f) + "," + by1);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 d2 i19 = " + i18 + "," + Double.doubleToLongBits(d2) + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 = " + i23);

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.bFld Test.bArrFld Test.lArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.bArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld1 Test.sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld1) + "," + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
