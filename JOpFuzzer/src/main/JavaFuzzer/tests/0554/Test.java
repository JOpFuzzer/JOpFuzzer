// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-20135L;
    public int iFld=-65218;
    public static double dFld=50.128427;
    public static int iFld1=-21;
    public byte byFld=56;
    public static long lFld=3567687951388279610L;
    public volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 10);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(float f1) {

        int i6=-11, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -13);

        i6 = (int)((Integer.reverseBytes(i6) - -7250) - (Test.dFld - iArr1[(i6 >>> 1) % N]));
        vMeth_check_sum += Float.floatToIntBits(f1) + i6 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i11) {

        int i12=233, i13=-8, i14=24700, i15=-48107, i16=10, i17=14;
        double d1=0.110159;
        float f2=-103.102F;

        for (i12 = 14; i12 < 395; ++i12) {
            Test.iFld1 = (int)d1;
            Test.dFld = i13;
            f2 -= Test.instanceCount;
            Test.iFld1 += (i12 | i12);
            Test.instanceCount = (long)d1;
            for (i14 = 1; i14 < 4; ++i14) {
                for (i16 = 1; i16 < 2; i16++) {
                    f2 += (((i16 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                    switch (((i14 % 2) * 5) + 106) {
                    case 107:
                        Test.iFld1 = Test.iFld1;
                        Test.iFld1 += i11;
                        break;
                    case 112:
                        i11 += (-79 + (i16 * i16));
                        f2 = Test.instanceCount;
                        f2 += i16;
                    default:
                        Test.iFld1 += i15;
                    }
                }
            }
        }
        vMeth1_check_sum += i11 + i12 + i13 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + i14 + i15 + i16
            + i17;
    }

    public static int iMeth1(int i7, int i8, int i9) {

        int i10=4, i18=53425, i19=-128, i20=187, i21=-1818, iArr2[]=new int[N];
        float f3=31.15F;
        short s1=-5715;

        FuzzerUtils.init(iArr2, 11);

        Test.iFld1 += (int)Float.intBitsToFloat(iArr2[(i8 >>> 1) % N]);
        i10 = 1;
        do {
            vMeth1(-2);
        } while (++i10 < 267);
        for (i18 = 5; i18 < 133; i18++) {
            iArr2[i18 + 1] += (int)Test.instanceCount;
            f3 *= i7;
            for (i20 = 1; 12 > i20; i20++) {
                Test.iFld1 += i21;
            }
        }
        for (int i22 : iArr2) {
            i19 = i19;
            iArr2 = iArr2;
            Test.dFld *= i7;
            iArr2[(i19 >>> 1) % N] = (int)f3;
            i21 = i22;
        }
        s1 -= (short)i7;
        long meth_res = i7 + i8 + i9 + i10 + i18 + i19 + Float.floatToIntBits(f3) + i20 + i21 + s1 +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i=-6, i1=6, i2=66, i3=88, i4=14, i5=-53038, i23=-1, iArr[][]=new int[N][N];
        short s=-7053;
        boolean b=false;
        byte by=-71;

        FuzzerUtils.init(iArr, 60568);

        for (i = 2; i < 131; i++) {
            iArr[i - 1][i - 1] = i1;
            for (i2 = 1; i2 < 12; i2++) {
                for (i4 = 2; 1 < i4; i4 -= 2) {
                    vMeth(Test.instanceCount + ((i3 |= Test.iFld1) + (--Test.instanceCount)));
                    i5 -= ((++s) << iMeth1(Test.iFld1, Test.iFld1, i1));
                    Test.instanceCount += i4;
                    if (b) continue;
                    if (b) {
                        i3 *= i3;
                        if (i1 != 0) {
                        }
                    } else {
                        by = (byte)i3;
                    }
                    Test.dFld += i2;
                    Test.iFld1 -= (int)Test.dFld;
                    i5 = i23;
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i5 + s + (b ? 1 : 0) + by + i23 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=28.945F;
        int i24=-7071, i25=-12, i26=4, i27=8, i28=0, i29=46;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.106383);

        lArrFld[(iFld >>> 1) % N] >>>= (long)(((f * 27.724F) * iFld) * (Test.instanceCount / ((iFld -= iFld) | 1)));
        for (double d : dArr) {
            Test.instanceCount -= iMeth();
            for (i24 = 63; i24 > 2; i24--) {
                i26 = 2;
                while (--i26 > 0) {
                    Test.dFld += i25;
                    Test.iArrFld[i24] += 58;
                    Test.dFld -= i26;
                    i25 |= Test.iFld1;
                    d = iFld;
                }
                iFld += (17225 + (i24 * i24));
            }
            for (i27 = 3; i27 < 63; ++i27) {
                Test.iArrFld[i27 + 1] -= i24;
                byFld = (byte)i24;
                Test.iFld1 -= 10095;
                Test.instanceCount = Test.instanceCount;
                iFld -= (int)d;
                i29 = 1;
                while ((i29 += 2) < 2) {
                    f += (i29 * i28);
                    Test.instanceCount -= Test.instanceCount;
                    i25 += i29;
                    Test.instanceCount += (i29 + i29);
                    Test.iFld1 += -39577;
                    f = i24;
                    try {
                        Test.iFld1 = (i24 / Test.iFld1);
                        i28 = (177 % i29);
                        Test.iArrFld[i29] = (i25 % iFld);
                    } catch (ArithmeticException a_e) {}
                    iFld |= i27;
                    f -= f;
                }
                Test.instanceCount = Test.instanceCount;
                f += (-7 + (i27 * i27));
                iFld += (i27 - Test.lFld);
            }
        }

        FuzzerUtils.out.println("f i24 i25 = " + Float.floatToIntBits(f) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 dArr = " + i29 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iFld1 byFld Test.lFld = " + Test.iFld1 + "," + byFld + "," + Test.lFld);
        FuzzerUtils.out.println("lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
