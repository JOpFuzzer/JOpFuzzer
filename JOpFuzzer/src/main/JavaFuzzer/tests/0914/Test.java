// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=219L;
    public static float fFld=-27.752F;
    public static volatile int iFld=136;
    public static boolean bFld=false;
    public static byte byFld=-44;
    public static short sFld=-18354;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -4000680299L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth() {

        float f=0.956F;
        int i1=124;

        f %= (Test.instanceCount | 1);
        i1 <<= -4;
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i1;
    }

    public static void vMeth1() {

        long l2=2754105109L;
        int i14=6, i15=-49840, i16=14, i17=14497, i18=3;
        short s1=-4771;

        l2 = 1;
        while (++l2 < 171) {
            i14 <<= i14;
            i14 += i14;
            Test.fFld -= i14;
            switch (((5579 >>> 1) % 2) + 112) {
            case 112:
            case 113:
                for (i15 = 1; 9 > i15; i15++) {
                    Test.instanceCount = i16;
                    Test.lArrFld[(int)(l2 - 1)] = i16;
                    if (i15 != 0) {
                        vMeth1_check_sum += l2 + i14 + i15 + i16 + s1 + i17 + i18;
                        return;
                    }
                    Test.iFld = s1;
                    for (i17 = 1; 2 > i17; i17++) {
                        i16 += i17;
                        i14 += i14;
                        Test.iFld = i16;
                    }
                }
                i16 -= i14;
                break;
            default:
                Test.instanceCount >>= l2;
            }
        }
        vMeth1_check_sum += l2 + i14 + i15 + i16 + s1 + i17 + i18;
    }

    public static void vMeth(int i9, int i10, int i11) {

        int i12=211, i13=-1, i19=-12, i20=0, i21=18824, i22=-6, iArr1[]=new int[N];
        short s2=-21731;

        FuzzerUtils.init(iArr1, -27642);

        for (i12 = 10; i12 < 262; ++i12) {
            iArr1[i12] += (int)(++Test.fFld);
            vMeth1();
            Test.instanceCount >>= -32733;
            i13 *= i13;
            for (i19 = i12; i19 < 6; i19++) {
                i11 -= i10;
                s2 -= (short)30012;
                for (i21 = 1; i21 < 1; ++i21) {
                    Test.instanceCount >>= i11;
                    Test.instanceCount >>= i11;
                    Test.instanceCount = i20;
                    Test.bFld = Test.bFld;
                    i11 += Test.iFld;
                    Test.fFld += (((i21 * Test.instanceCount) + i10) - i12);
                }
            }
        }
        vMeth_check_sum += i9 + i10 + i11 + i12 + i13 + i19 + i20 + s2 + i21 + i22 + FuzzerUtils.checkSum(iArr1);
    }

    public int iMeth(float f1, float f2, int i8) {

        int i23=-1, i24=-2, i25=-158, i26=-4, i27=52828, i28=-129;

        vMeth(i8, Test.iFld, i8);
        i23 = 1;
        do {
            Test.iFld = i8;
            for (i24 = 1; 12 > i24; ++i24) {
                i8 >>= i23;
                try {
                    i8 = (i23 / 1675236457);
                    i8 = (i24 / 1370090657);
                    Test.iFld = (i24 % i24);
                } catch (ArithmeticException a_e) {}
                f2 *= 9.180F;
            }
            Test.byFld *= (byte)i24;
            Test.instanceCount += i23;
            i26 = 12;
            do {
                Test.bFld = true;
                Test.instanceCount = Test.instanceCount;
                for (i27 = 1; i27 < 1; i27++) {
                    Test.iFld >>>= (int)Test.instanceCount;
                    Test.fFld -= Test.sFld;
                }
            } while (--i26 > 0);
        } while (++i23 < 128);
        long meth_res = Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i8 + i23 + i24 + i25 + i26 + i27 + i28;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-14, i2=23658, i3=223, i4=23, i5=-102, i6=-26584, i7=-14, i29=-1, iArr[]=new int[N];
        double d=-52.94225, d1=118.20312;
        short s=14665;
        long l=-3670824867L;
        float fArr[]=new float[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, -47.21F);
        FuzzerUtils.init(iArr, 19850);
        FuzzerUtils.init(bArr, false);

        i = (int)(fArr[(i >>> 1) % N]++);
        i = (int)(d * ((-223 * Test.lArrFld[(i >>> 1) % N]) + (s - l)));
        for (int smallinvoc=0; smallinvoc<669; smallinvoc++) vSmallMeth();
        iArr[(i >>> 1) % N] = (int)Math.min((long)((i + i) * (Test.fFld - 1)), (i - 50951) + (++Test.lArrFld[(-6 >>> 1)
            % N]));
        for (i2 = 386; i2 > 4; --i2) {
            i >>= (iArr[i2]++);
            for (i4 = 1; i4 < 66; i4++) {
                i5 += (i4 ^ i3);
                i5 = Integer.reverseBytes((int)(Integer.reverseBytes(i3) + Test.instanceCount));
                for (i6 = 1; i6 < 2; ++i6) {
                    l += (i6 * Test.fFld);
                    iArr[i4 + 1] += (int)((iArr[i6 - 1] - iMeth(Test.fFld, Test.fFld, Test.iFld)) - Test.fFld);
                    Test.iFld += i6;
                    iArr[i2] += (int)Test.fFld;
                    Test.lArrFld[i4 + 1] = Test.instanceCount;
                    i3 = (int)Test.fFld;
                    Test.instanceCount -= 11;
                    Test.lArrFld[i4 + 1] -= i7;
                    l += (i6 - i);
                    iArr[i2 + 1] = 248;
                }
                l += i4;
                l = i;
                d *= -4210;
                for (d1 = 1; d1 < 2; d1++) {
                    Test.lArrFld[i4 - 1] -= Test.sFld;
                    l += i29;
                    i = i3;
                    l >>= Test.byFld;
                }
            }
            bArr[i2] = true;
            iArr[i2] += (int)l;
        }

        FuzzerUtils.out.println("i d s = " + i + "," + Double.doubleToLongBits(d) + "," + s);
        FuzzerUtils.out.println("l i2 i3 = " + l + "," + i2 + "," + i3);
        FuzzerUtils.out.println("i4 i5 i6 = " + i4 + "," + i5 + "," + i6);
        FuzzerUtils.out.println("i7 d1 i29 = " + i7 + "," + Double.doubleToLongBits(d1) + "," + i29);
        FuzzerUtils.out.println("fArr iArr bArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.bFld Test.byFld Test.sFld = " + (Test.bFld ? 1 : 0) + "," + Test.byFld + "," +
            Test.sFld);
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
