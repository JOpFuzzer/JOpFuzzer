// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1581L;
    public static volatile double dFld=55.98186;
    public static short sFld=-23475;
    public static float fFld=22.740F;
    public float fFld1=1.687F;
    public static byte byFld=69;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 48083);
        FuzzerUtils.init(Test.sArrFld, (short)4830);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, float f1, double d) {

        int i4=-4, i5=-64752, i6=29356, i7=13530, i8=-5;
        double d1=2.112682;
        byte by=44;

        Test.instanceCount += i3;
        for (i4 = 250; i4 > 4; --i4) {
            i3 += (int)(44333L + (i4 * i4));
            for (i6 = 1; i6 < 7; ++i6) {
                Test.iArrFld[i4] += -7;
                for (d1 = 1; 2 > d1; d1++) {
                    Test.instanceCount >>= Test.instanceCount;
                }
                i8 = i4;
                Test.iArrFld[i4 - 1] -= i6;
                i5 *= i6;
                i5 += (111 + (i6 * i6));
                if (i6 != 0) {
                    vMeth1_check_sum += i3 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7
                        + Double.doubleToLongBits(d1) + i8 + by;
                    return;
                }
            }
            i5 = i8;
            by += (byte)i6;
            i8 = i5;
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 +
            Double.doubleToLongBits(d1) + i8 + by;
    }

    public static int iMeth(int i2) {

        float f2=-1.608F;
        int i9=-53867, i10=-3, i11=-115, i12=11;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 142L);

        vMeth1(i2, f2, Test.dFld);
        i9 -= -3;
        for (long l : lArr) {
            for (i10 = 1; i10 < 4; ++i10) {
                if (b) {
                    i11 -= i9;
                    lArr = lArr;
                } else {
                    i2 = i10;
                }
                i12 = 1;
                while (++i12 < 2) {
                    i9 += (((i12 * i12) + Test.instanceCount) - Test.sFld);
                    i9 >>= (int)Test.instanceCount;
                    Test.iArrFld[i12 + 1] = i12;
                    l >>>= i12;
                    i9 -= (int)f2;
                    Test.instanceCount <<= i10;
                }
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f2) + i9 + i10 + i11 + (b ? 1 : 0) + i12 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f) {

        int i1=33, i13=8, i14=110, i15=-6189;
        double d2=-1.541;
        boolean b1=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.308F);

        Test.instanceCount = Test.iArrFld[(i1 >>> 1) % N];
        iMeth(i1);
        i13 = 1;
        do {
            for (d2 = 7; d2 > 1; d2 -= 2) {
                try {
                    i1 = (i1 / i14);
                    i1 = (46409 % i14);
                    i14 = (Test.iArrFld[i13 + 1] % 592566502);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount |= i13;
                i15 = 1;
                do {
                    Test.instanceCount += Test.sFld;
                    i14 += (i15 - i14);
                    b1 = b1;
                    i1 -= (int)f;
                    fArr[i15] -= -6789437757405655036L;
                } while (++i15 < 3);
            }
            i14 >>>= i1;
            Test.iArrFld[i13 - 1] -= (int)-40L;
            Test.instanceCount *= i15;
        } while (++i13 < 248);
        vMeth_check_sum += Float.floatToIntBits(f) + i1 + i13 + Double.doubleToLongBits(d2) + i14 + i15 + (b1 ? 1 : 0)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-3, i16=-11, i17=-5, i18=12, i19=-8, i20=-41, i21=10, i22=-10, i23=6, i24=987, i25=-10493, iArr[]=new
            int[N];
        long l1=7138750282677597071L, lArr1[]=new long[N];
        float f3=-2.632F, fArr1[]=new float[N];

        FuzzerUtils.init(iArr, 37);
        FuzzerUtils.init(fArr1, -56.679F);
        FuzzerUtils.init(lArr1, 18860L);

        Test.instanceCount %= (iArr[(i >>> 1) % N] | 1);
        vMeth(Test.fFld);
        for (i16 = 18; i16 < 290; i16++) {
            Test.instanceCount &= i;
            i += -68;
        }
        for (i18 = 11; 305 > i18; ++i18) {
            i += (((i18 * i18) + i17) - i18);
            i17 -= i17;
            try {
                iArr[i18] = (i16 % i19);
                i19 = (i16 % -684791546);
                i = (-55944 % Test.iArrFld[i18 - 1]);
            } catch (ArithmeticException a_e) {}
            Test.fFld = i;
            i19 = i16;
        }
        Test.iArrFld[(i19 >>> 1) % N] ^= -26101;
        fArr1[(i16 >>> 1) % N] -= i;
        for (l1 = 235; l1 > 10; --l1) {
            for (f3 = 6; f3 < 112; f3++) {
                i = (int)Test.instanceCount;
                lArr1[(int)(l1 - 1)] += Test.sFld;
            }
            i17 <<= (int)l1;
            i17 += (int)(((l1 * Test.sFld) + fFld1) - i);
            for (i22 = 5; i22 < 112; i22++) {
                Test.iArrFld[(int)(l1 - 1)] <<= 204;
                Test.instanceCount += (i22 * i22);
                Test.iArrFld[(i17 >>> 1) % N] += i17;
                i17 *= (int)2.1001F;
                Test.fFld -= fFld1;
                for (i24 = i22; i24 < 2; i24++) {
                    Test.sArrFld[i24 + 1] += (short)i22;
                    i17 = Test.byFld;
                    iArr[i22] *= (int)l1;
                    i25 >>>= i19;
                }
            }
        }

        FuzzerUtils.out.println("i i16 i17 = " + i + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 l1 = " + i18 + "," + i19 + "," + l1);
        FuzzerUtils.out.println("i20 f3 i21 = " + i20 + "," + Float.floatToIntBits(f3) + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 iArr fArr1 = " + i25 + "," + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld fFld1 Test.byFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Float.floatToIntBits(fFld1) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
