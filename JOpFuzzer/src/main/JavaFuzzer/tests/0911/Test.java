// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-126364944634629127L;
    public static double dFld=-96.87786;
    public static volatile short sFld=26154;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -19278);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(short s1, int i6, long l) {

        int i7=-49017, i8=-80, i9=5, i10=48226, i11=227, i12=221, i13=7, i14=24894;
        float f1=0.1002F;
        byte by1=-55;

        i6 = -3;
        for (i7 = 10; i7 < 251; i7++) {
            l = i8;
            i8 -= i7;
            for (i9 = 1; i9 < 7; i9++) {
                Test.dFld += i8;
                for (i11 = i7; 2 > i11; i11++) {
                    i10 += (((i11 * i6) + i12) - i7);
                    f1 += by1;
                }
                switch ((i7 % 1) + 107) {
                case 107:
                    for (i13 = i9; 2 > i13; i13 += 2) {
                        i10 -= i7;
                        Test.iArrFld[i7] ^= i14;
                        i10 = 2;
                        Test.iArrFld[(-23104 >>> 1) % N] *= -8;
                    }
                    break;
                default:
                    Test.instanceCount += (((i9 * i13) + f1) - i11);
                }
            }
        }
        long meth_res = s1 + i6 + l + i7 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) + by1 + i13 + i14;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth1(float f, int i2) {

        byte by=34;
        short s=21903;
        int i3=-3, i4=14, i5=13;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.123102);

        by %= (byte)(((long)((-f) - (-(s--)))) | 1);
        i3 = 1;
        do {
            i2 = (int)Test.instanceCount;
            for (i4 = 1; i4 < 5; ++i4) {
                f += sMeth(s, i3, Test.instanceCount);
                i5 = (int)Test.instanceCount;
                i5 += (((i4 * i2) + i5) - i2);
                i2 = i4;
                switch (((i4 >>> 1) % 5) + 16) {
                case 16:
                    i5 = (int)Test.instanceCount;
                    dArr = FuzzerUtils.double1array(N, (double)81.119136);
                    s >>= (short)i3;
                case 17:
                case 18:
                    try {
                        i5 = (Test.iArrFld[i4] % i4);
                        i2 = (1498269147 / Test.iArrFld[i3 - 1]);
                        i2 = (i4 / i2);
                    } catch (ArithmeticException a_e) {}
                    if (i4 != 0) {
                        vMeth1_check_sum += Float.floatToIntBits(f) + i2 + by + s + i3 + i4 + i5 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                    i2 = -80;
                    break;
                case 19:
                    i5 = (int)-3981242071L;
                case 20:
                    f -= i5;
                }
            }
        } while (++i3 < 366);
        vMeth1_check_sum += Float.floatToIntBits(f) + i2 + by + s + i3 + i4 + i5 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i1) {

        float f2=-67.368F;
        int i15=-72, i16=-34247, i17=-34615, i18=-16248, i19=12238;
        byte by2=-113;
        long l1=7179363474968721769L;
        short s2=-25543;

        try {
            vMeth1(f2, i1);
            for (i15 = 4; i15 < 201; ++i15) {
                Test.instanceCount = Test.instanceCount;
                i16 = 62389;
                f2 *= by2;
                for (l1 = 1; l1 < 8; l1++) {
                    f2 *= i16;
                    Test.dFld -= i1;
                    i1 = i17;
                }
                i18 = 1;
                do {
                    f2 *= i16;
                    i19 = 1;
                    while (++i19 < 1) {
                        Test.instanceCount <<= s2;
                        Test.iArrFld[i15 + 1] = (int)l1;
                    }
                } while (++i18 < 8);
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            i17 = (int)l1;
        }
        finally {
            Test.iArrFld[(i16 >>> 1) % N] -= i18;
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f2) + i15 + i16 + by2 + l1 + i17 + i18 + i19 + s2;
    }

    public void mainTest(String[] strArr3) {

        int i20=-13, i21=24704, i22=-4, i23=6411, i24=4, i25=12455, i26=-4, i27=-58696, i28=-6;
        boolean b=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -802688045L);

        vMeth(i20);
        lArr1[(i20 >>> 1) % N] >>>= i20;
        for (i21 = 22; i21 < 374; ++i21) {
            Test.dFld = Test.instanceCount;
            b = b;
            i22 += (-52 + (i21 * i21));
            for (i23 = 3; i23 < 72; i23++) {
                float f3=-96.134F;
                i22 += (i23 - i21);
                i24 = (int)Test.instanceCount;
                Test.iArrFld[i21 - 1] = (int)f3;
                for (i25 = i21; i25 < 2; ++i25) {
                    i22 *= (int)Test.instanceCount;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-31);
                    Test.dFld *= i21;
                    i26 = i21;
                    i22 <<= i24;
                    Test.iArrFld[i21 - 1] = i26;
                }
                for (i27 = 2; i27 > i23; i27--) {
                    switch ((((-12 >>> 1) % 5) * 5) + 105) {
                    case 123:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 108:
                        i20 += (i27 - i26);
                        i24 = i27;
                        break;
                    case 122:
                        f3 -= i21;
                        break;
                    case 120:
                        Test.instanceCount = Test.sFld;
                        Test.instanceCount += (i27 * f3);
                        break;
                    case 114:
                        i20 -= i27;
                    }
                    if (b) {
                        i22 = i21;
                        Test.iArrFld[i27 - 1] >>= i22;
                    } else if (b) {
                        i26 *= (int)Test.instanceCount;
                    } else {
                        Test.instanceCount *= 13;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("b i23 i24 = " + (b ? 1 : 0) + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 lArr1 = " + i28 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
