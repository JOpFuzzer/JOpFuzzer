// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2270965883L;
    public int iFld=-9;
    public static short sFld=-3769;
    public static double dFld=84.12057;
    public long lFld=-1153039843L;
    public static short sArrFld[]=new short[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-25289);
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, boolean b, float f1) {

        int i5=-28, i6=53281, i7=10669, i8=48500, i9=-110;
        short s1=-5323;
        double d=36.81985;

        i4 = i4;
        i5 = 1;
        while (++i5 < 315) {
            for (i6 = 1; 5 > i6; i6++) {
                for (i8 = i6; i8 < 2; i8 += 2) {
                    Test.iArrFld[i6 - 1] -= i8;
                    try {
                        i4 = (i6 / 1960015815);
                        Test.iArrFld[i6 + 1] = (59816 % Test.iArrFld[i5]);
                        i9 = (i5 % 45405);
                    } catch (ArithmeticException a_e) {}
                    if (b) break;
                    s1 *= (short)d;
                    i4 += (i8 - f1);
                    f1 += Test.instanceCount;
                    i9 = i8;
                    try {
                        i7 = (195 / i6);
                        i7 = (Test.iArrFld[i6 + 1] % -9858);
                        i9 = (i8 / 24100);
                    } catch (ArithmeticException a_e) {}
                    if (b) {
                        i4 += (-171 + (i8 * i8));
                    } else {
                        Test.instanceCount *= i8;
                        vMeth1_check_sum += i4 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + s1 +
                            Double.doubleToLongBits(d);
                        return;
                    }
                }
            }
        }
        vMeth1_check_sum += i4 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + s1 +
            Double.doubleToLongBits(d);
    }

    public static void vMeth(float f) {

        int i3=13859, i10=-86, i11=244, i12=6655, i13=-8;
        boolean b1=false;
        double d1=-2.402;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -9L);
        FuzzerUtils.init(fArr, 1.822F);

        i3 = (int)Test.instanceCount;
        Test.sArrFld[(-105 >>> 1) % N] = (short)(-(--Test.iArrFld[(i3 >>> 1) % N]));
        vMeth1(116, b1, f);
        Test.instanceCount ^= -10;
        i3 = -19359;
        for (i10 = 15; 392 > i10; ++i10) {
            i11 = (int)Test.instanceCount;
            i12 = 4;
            do {
                i13 = 1;
                while (--i13 > 0) {
                    Test.instanceCount += Test.instanceCount;
                    lArr[i13] = i13;
                    i11 -= i10;
                    i11 += (i13 * i13);
                    i11 *= (int)f;
                    fArr[i13 - 1] -= (float)d1;
                }
            } while (--i12 > 0);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i3 + (b1 ? 1 : 0) + i10 + i11 + i12 + i13 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static boolean bMeth(int i1, short s, int i2) {

        float f2=0.818F;
        int i14=-28876, i15=51, i16=-184, i17=13, i18=-169;
        byte by=114;
        boolean b2=true;

        vMeth(f2);
        i14 = 1;
        while (++i14 < 176) {
            i2 = i14;
        }
        for (i15 = 1; i15 < 140; i15++) {
            i16 += (int)Test.instanceCount;
            if (true) continue;
            by = (byte)Test.instanceCount;
            Test.iArrFld = Test.iArrFld;
        }
        b2 = b2;
        for (i17 = 305; 5 < i17; i17--) {
            switch ((i17 % 8) + 27) {
            case 27:
            case 28:
                i18 >>= i16;
                i18 <<= i1;
                i18 += (((i17 * i16) + Test.instanceCount) - i17);
            case 29:
            case 30:
                Test.iArrFld[i17 + 1] -= by;
            case 31:
                f2 = i14;
                break;
            case 32:
                i16 += i1;
                break;
            case 33:
                Test.instanceCount += i17;
            case 34:
                s -= (short)-52931;
                break;
            default:
                i16 <<= i2;
            }
        }
        long meth_res = i1 + s + i2 + Float.floatToIntBits(f2) + i14 + i15 + i16 + by + (b2 ? 1 : 0) + i17 + i18;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-17793, i19=-152, i20=-49429, i21=52989, i22=2, i23=-232;
        float f3=1.393F, fArr1[]=new float[N];
        boolean b3=true;
        long l=58L, lArr1[]=new long[N];
        byte by1=-127;
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, -54347L);
        FuzzerUtils.init(fArr1, -102.510F);
        FuzzerUtils.init(dArr, -80.40049);

        i = 1;
        while ((i += 2) < 353) {
            if (!(((iFld = i) != Math.max(i, i)) && bMeth(iFld, (short)(-12330), -795))) continue;
            lArr1[i + 1] >>= Test.sFld;
            for (i19 = 1; 143 > i19; ++i19) {
                switch (((-58405 >>> 1) % 5) + 120) {
                case 120:
                    Test.dFld -= i19;
                    i20 -= Test.sFld;
                    i20 -= (int)f3;
                    for (i21 = 2; 1 < i21; i21--) {
                        Test.iArrFld[i21 + 1] >>>= (int)Test.instanceCount;
                        i22 = i21;
                        if (b3) continue;
                        switch (((i20 >>> 1) % 7) + 40) {
                        case 40:
                            Test.dFld -= i19;
                            iFld >>= (int)Test.instanceCount;
                            fArr1[i19] += i20;
                            break;
                        case 41:
                            l = (long)-2.56039;
                            break;
                        case 42:
                            iFld += (((i21 * f3) + i21) - l);
                        case 43:
                            iFld = (int)Test.dFld;
                            switch (((i % 4) * 5) + 67) {
                            case 87:
                                if (b3) break;
                                switch ((i19 % 1) + 17) {
                                case 17:
                                    i20 *= i;
                                    Test.instanceCount %= (lFld | 1);
                                    switch (((-16744 >>> 1) % 7) + 40) {
                                    case 40:
                                        i22 += (i21 * i21);
                                        Test.sFld += (short)(((i21 * i23) + i) - i19);
                                        lFld = i20;
                                        break;
                                    case 41:
                                        fArr1[i19] += i23;
                                        lFld %= (i22 | 1);
                                        break;
                                    case 42:
                                        Test.sFld = (short)-49788;
                                        break;
                                    case 43:
                                        i23 += (((i21 * i22) + f3) - i19);
                                        break;
                                    case 44:
                                        i22 = i19;
                                        break;
                                    case 45:
                                        iFld += (int)l;
                                        break;
                                    case 46:
                                        f3 = i23;
                                        break;
                                    }
                                    break;
                                }
                                break;
                            case 79:
                                dArr[i19] = i23;
                                break;
                            case 75:
                                Test.instanceCount -= lFld;
                            case 76:
                                lFld += (((i21 * f3) + Test.instanceCount) - i19);
                                break;
                            default:
                                by1 = (byte)f3;
                            }
                            break;
                        case 44:
                        case 45:
                            i20 += (i21 | (long)f3);
                            break;
                        case 46:
                            l >>= i20;
                            break;
                        }
                    }
                    break;
                case 121:
                case 122:
                    Test.sFld += (short)(i19 | i23);
                case 123:
                    l += i19;
                    break;
                case 124:
                    i22 += (int)f3;
                    break;
                default:
                    lFld += l;
                }
            }
        }

        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("f3 i21 i22 = " + Float.floatToIntBits(f3) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("b3 l i23 = " + (b3 ? 1 : 0) + "," + l + "," + i23);
        FuzzerUtils.out.println("by1 lArr1 fArr1 = " + by1 + "," + FuzzerUtils.checkSum(lArr1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.sFld = " + Test.instanceCount + "," + iFld + "," +
            Test.sFld);
        FuzzerUtils.out.println("Test.dFld lFld Test.sArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + lFld +
            "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
