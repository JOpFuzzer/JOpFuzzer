// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=57865L;
    public double dFld=0.101068;
    public static short sFld=-2665;
    public static volatile int iFld=48662;
    public float fFld=0.360F;
    public static boolean bFld=true;
    public long lArrFld[]=new long[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        float f1=-85.507F, fArr[]=new float[N];
        int i3=-33799, i4=-12, i5=85, i6=126, iArr[][]=new int[N][N];
        long l=5L;
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 0.162F);
        FuzzerUtils.init(dArr, -21.113611);
        FuzzerUtils.init(iArr, 9558);

        for (f1 = 2; f1 < 294; ++f1) {
            for (l = 1; 6 > l; l++) {
                for (i5 = (int)(l); 2 > i5; i5 += 2) {
                    double d=1.30644;
                    fArr[(int)(l - 1)] += i6;
                    dArr[i5 + 1] += Test.instanceCount;
                    f *= i3;
                    iArr[i5][i5] &= i4;
                    switch (((i5 % 2) * 5) + 121) {
                    case 124:
                        iArr[i5 - 1] = FuzzerUtils.int1array(N, (int)-43191);
                        d -= i6;
                        i3 &= i6;
                    case 125:
                    default:
                        Test.instanceCount <<= l;
                    }
                    Test.sFld = (short)i3;
                }
                i6 += (int)l;
                i4 *= i5;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i3 + l + i4 + i5 + i6 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(boolean b) {


        vMeth1(-82.659F);
        Test.iFld <<= Test.iFld;
        Test.instanceCount *= Test.instanceCount;
        vMeth_check_sum += (b ? 1 : 0);
    }

    public int iMeth() {

        int i1=-12, i2=13, i7=-16, i8=2, i9=-8, iArr1[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 2);
        FuzzerUtils.init(lArr, 3994362877124833545L);

        for (i1 = 356; i1 > 10; i1 -= 2) {
            vMeth(true);
            Test.sFld += (short)(i1 ^ (long)fFld);
            i7 = 1;
            do {
                i2 *= -35;
                iArr1[i1 + 1] += i7;
                lArr[i7 - 1] += Test.instanceCount;
                Test.instanceCount *= i1;
                for (i8 = 1; 1 < i8; --i8) {
                    if (false) {
                        i9 = (int)dFld;
                        fFld -= Test.iFld;
                        i2 *= (int)fFld;
                        Test.sFld *= (short)dFld;
                    } else if (false) {
                        fFld *= Test.instanceCount;
                    }
                }
            } while (++i7 < 9);
        }
        long meth_res = i1 + i2 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-113, i10=29489, i11=5, i12=8, i13=-9, i14=-5, i15=10, i16=51473, i17=11, i18=-8693, i19=14;
        long l1=-102L;
        byte by=-96, byArr[][]=new byte[N][N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -38.138F);
        FuzzerUtils.init(byArr, (byte)15);

        i = (int)(i + ((i + dFld) + iMeth()));
        lArrFld[(i >>> 1) % N] *= Test.iFld;
        for (i10 = 4; 177 > i10; ++i10) {
            i += (19406 + (i10 * i10));
        }
        i12 = 172;
        while ((i12 -= 3) > 0) {
            for (i13 = i12; i13 < 327; i13++) {
                fArr1[i12 - 1] *= fFld;
                byArr[i12][i12 - 1] -= (byte)i;
                i14 /= (int)((long)(dFld) | 1);
                i11 += (int)dFld;
            }
            lArrFld[i12] >>= 9;
            for (i15 = 4; i15 < 351; i15++) {
                for (i17 = 1; 2 > i17; i17++) {
                    i18 <<= (int)Test.instanceCount;
                    i14 += i12;
                    dFld *= 115.74F;
                    switch (((i14 >>> 1) % 2) + 52) {
                    case 52:
                        i16 = i18;
                        Test.iFld += (i17 - fFld);
                        i16 += (i17 * i17);
                        i16 = (int)Test.instanceCount;
                    case 53:
                        Test.iFld = 4;
                    }
                }
                for (l1 = 2; i12 < l1; l1--) {
                    if (Test.bFld) break;
                    if (Test.bFld) continue;
                    if (Test.bFld) continue;
                    Test.instanceCount = by;
                    i11 = i14;
                    i18 -= i14;
                }
                i = (int)fFld;
            }
        }

        FuzzerUtils.out.println("i i10 i11 = " + i + "," + i10 + "," + i11);
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 l1 i19 = " + i18 + "," + l1 + "," + i19);
        FuzzerUtils.out.println("by fArr1 byArr = " + by + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld fFld Test.bFld = " + Test.iFld + "," + Float.floatToIntBits(fFld) + "," +
            (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
