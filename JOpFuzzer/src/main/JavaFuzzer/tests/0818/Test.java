// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public static int iFld=193;
    public static volatile double dFld=2.2629;
    public static boolean bFld=true;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -176);
        FuzzerUtils.init(Test.lArrFld, 4895171506556836993L);
        FuzzerUtils.init(Test.iArrFld1, -154);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i1) {

        int i2=-60210, i3=-163, i4=2, i5=60793, i6=-25, i7=12891, i8=32385;
        double d1=-90.47648, dArr1[]=new double[N];
        float f=-76.393F, fArr1[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr1, 124.78541);
        FuzzerUtils.init(lArr, 1573434803L);
        FuzzerUtils.init(fArr1, 19.623F);

        for (i2 = 14; i2 < 228; i2++) {
            for (i4 = 1; i4 < 8; i4++) {
                dArr1[i4 + 1] += i3;
                lArr[i2] -= (long)-63.90F;
                for (d1 = 1; d1 < 2; d1++) {
                    Test.iArrFld[i4 - 1] = (int)f;
                    fArr1[(int)(d1)] = -14;
                }
                f -= i3;
                Test.iFld += (int)(-116.826F + (i4 * i4));
                Test.dFld = i6;
                for (i7 = 1; i7 < 2; ++i7) {
                    Test.instanceCount -= i4;
                }
                i5 = -115;
                i3 += (i4 | (long)f);
                Test.instanceCount += i7;
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d1) + i6 + Float.floatToIntBits(f) + i7 + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(boolean b, double d) {

        int i9=-11, i10=491, i11=-3, i12=-227, i13=53;
        long l=9L, lArr1[]=new long[N];
        float f2=2.833F, fArr2[][]=new float[N][N];
        byte by=27;

        FuzzerUtils.init(lArr1, -29655L);
        FuzzerUtils.init(fArr2, -63.810F);

        switch (((iMeth1(-28677) >>> 1) % 10) + 125) {
        case 125:
            Test.iFld = Test.iFld;
            break;
        case 126:
            i9 = 1;
            while (++i9 < 149) {
                for (i10 = i9; i10 < 11; ++i10) {
                    Test.iFld += (int)Test.instanceCount;
                    i12 = 1;
                    do {
                        float f1=0.168F;
                        Test.iFld *= (int)Test.instanceCount;
                        f1 += -7L;
                        lArr1 = lArr1;
                        if (b) break;
                        i13 &= (int)Test.instanceCount;
                        l &= i9;
                        if (i13 != 0) {
                        }
                    } while (++i12 < 1);
                    Test.iFld += (((i10 * i11) + f2) - i11);
                    i11 = by;
                }
            }
            break;
        case 127:
            Test.iFld >>>= i9;
            break;
        case 128:
            l -= (long)d;
        case 129:
            i13 = i12;
            break;
        case 130:
            f2 *= -4;
            break;
        case 131:
            l += i11;
            break;
        case 132:
            i13 = by;
        case 133:
            Test.iFld = i9;
            break;
        case 134:
            Test.iArrFld[(i9 >>> 1) % N] *= i13;
        default:
            fArr2[(-174 >>> 1) % N][(-190 >>> 1) % N] %= (i9 | 1);
        }
        long meth_res = (b ? 1 : 0) + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + i13 + l +
            Float.floatToIntBits(f2) + by + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        boolean b1=true;
        float f3=-1.765F;
        int i15=169;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 57.125769);

        dArr[(Test.iFld >>> 1) % N] *= fMeth(b1, 36.58368);
        Test.iArrFld[(Test.iFld >>> 1) % N] <<= Test.iFld;
        Test.iFld = Test.iFld;
        f3 = Test.iFld;
        i15 = 1;
        while (++i15 < 396) {
            Test.iFld = Test.iFld;
            Test.iFld = (int)Test.dFld;
            Test.instanceCount -= -161;
            Test.iFld = i15;
            switch ((i15 % 2) + 7) {
            case 7:
                f3 = i15;
                Test.iArrFld = Test.iArrFld;
            case 8:
                Test.iArrFld = FuzzerUtils.int1array(N, (int)6);
                try {
                    Test.iFld = (i15 / Test.iFld);
                    Test.iFld = (27 % i15);
                    Test.iFld = (i15 % 222);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount >>= i15;
            default:
                Test.iFld += (int)127.18163;
            }
        }
        long meth_res = (b1 ? 1 : 0) + Float.floatToIntBits(f3) + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=12, i16=-3, i17=6, i18=63681, i19=208, i20=-656, i21=19090;
        long l1=-57128L;
        short s=25431;
        byte by2=11;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -97.990F);

        fArr[(i >>> 1) % N] = (((-174 + iMeth()) * Test.instanceCount) & i);
        i16 = 1;
        do {
            Test.instanceCount = Test.instanceCount;
            Test.iArrFld[i16 + 1] = i;
            for (i17 = 66; i17 > 1; i17 -= 3) {
                Test.instanceCount += (i17 * i17);
                i = (int)Test.instanceCount;
                Test.dFld = 32043;
                Test.iArrFld[i17 + 1] >>= (int)Test.instanceCount;
                Test.lArrFld = Test.lArrFld;
                switch ((i17 % 1) + 20) {
                case 20:
                default:
                    i18 &= i17;
                    Test.iArrFld = Test.iArrFld;
                }
                i -= i;
            }
            Test.lArrFld[i16 + 1] = i18;
            Test.bFld = Test.bFld;
            for (l1 = i16; l1 < 66; ++l1) {
                for (i20 = 1; i20 < 1; i20++) {
                    byte by1=30;
                    if (Test.bFld) continue;
                    by1 += (byte)i20;
                    Test.iArrFld1 = Test.iArrFld1;
                    s += (short)-167;
                    Test.instanceCount -= l1;
                    i21 += i20;
                }
                if (Test.bFld) continue;
                s = by2;
                Test.instanceCount += l1;
                i18 = 0;
                i >>= s;
                try {
                    i19 = (i20 / i16);
                    i21 = (-1275296105 / i20);
                    i18 = (234 % Test.iFld);
                } catch (ArithmeticException a_e) {}
            }
        } while (++i16 < 380);

        FuzzerUtils.out.println("i i16 i17 = " + i + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 l1 i19 = " + i18 + "," + l1 + "," + i19);
        FuzzerUtils.out.println("i20 i21 s = " + i20 + "," + i21 + "," + s);
        FuzzerUtils.out.println("by2 fArr = " + by2 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.iArrFld Test.lArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
