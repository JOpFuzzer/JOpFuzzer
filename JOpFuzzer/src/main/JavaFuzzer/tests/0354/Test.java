// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2769158673104518683L;
    public static float fFld=1.483F;
    public static boolean bFld=true;
    public long lArrFld[]=new long[N];
    public byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -1);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, long l, int i6) {

        int i7=-3, i8=2, i9=-63927, i10=-26265, i11=48017, i12=-52333;
        short s1=-4559;
        double d1=-109.130341;

        for (i7 = 3; i7 < 223; ++i7) {
            for (i9 = 1; 7 > i9; ++i9) {
                for (i11 = 1; i11 < 2; i11++) {
                    i8 *= s1;
                    i6 -= s1;
                    i8 = i8;
                    i6 = i8;
                }
                Test.instanceCount *= Test.instanceCount;
                i8 *= i5;
                Test.instanceCount *= 10;
                i6 += (i9 * i9);
                if (true) continue;
                d1 = -60422;
                i10 -= i6;
            }
            i5 += i10;
        }
        long meth_res = i5 + l + i6 + i7 + i8 + i9 + i10 + i11 + i12 + s1 + Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        float f=-65.579F;
        int i4=-176, i13=-7, i14=15923, i15=-15, iArr[]=new int[N];
        double d2=-13.108046;
        byte by=-50;
        boolean b=false;

        FuzzerUtils.init(iArr, -83);

        for (int i3 : iArr) {
            i3 = (int)((Test.instanceCount >>= iArr[(i3 >>> 1) % N]) - (Test.instanceCount - iArr[(i3 >>> 1) % N]));
            Test.instanceCount = (long)(f++);
        }
        i4 = (int)(iMeth(i4, Test.instanceCount, i4) + f);
        i4 = (int)Test.instanceCount;
        d2 = i4;
        i4 *= (int)d2;
        for (i13 = 244; i13 > 4; i13 -= 3) {
            i4 += (((i13 * f) + i13) - f);
            i15 = i4;
            i15 += (((i13 * i14) + i15) - i4);
            i15 += i13;
            i14 <<= i13;
            f = by;
            b = b;
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i4 + Double.doubleToLongBits(d2) + i13 + i14 + i15 + by + (b ? 1
            : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d) {

        int i16=110, i17=-26, i18=-45, i19=-25546;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)30423);

        vMeth1();
        for (i16 = 13; i16 < 398; ++i16) {
            for (i18 = i16; i18 < 4; ++i18) {
                Test.fFld += Test.instanceCount;
                d -= i16;
                i19 >>>= 36740;
                if (Test.bFld) break;
                i17 = i19;
                sArr[i18 + 1] = (short)i16;
            }
            if (Test.bFld) continue;
            i17 += i16;
            switch (((i16 % 7) * 5) + 119) {
            case 134:
                Test.instanceCount >>= i17;
                i19 -= i18;
            case 139:
                try {
                    i17 = (i17 / i19);
                    Test.iArrFld[i16 + 1] = (183 % i18);
                    Test.iArrFld[i16] = (35 % i18);
                } catch (ArithmeticException a_e) {}
            case 148:
                sArr[i16 + 1] >>= (short)i17;
                break;
            case 136:
                Test.fFld = i19;
                break;
            case 140:
                Test.fFld -= i17;
                break;
            case 151:
                i19 -= i18;
                break;
            case 121:
                i19 += 1;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=132, i1=-27501, i2=-12, i20=215, i21=209, i22=-55644, i23=-106, i24=-15, i25=-50805, i26=-13, i27=39505;
        short s=31396;

        lArrFld[(i >>> 1) % N] += i;
        byArrFld[(180 >>> 1) % N] -= (byte)(--s);
        for (i1 = 5; i1 < 241; i1++) {
            vMeth(0.127479);
            i -= i2;
            i2 += i;
            if (Test.bFld) continue;
            Test.fFld = -3;
        }
        i += -41;
        for (i20 = 1; 330 > i20; ++i20) {
            i2 = i1;
            byArrFld[i20] >>= (byte)i21;
            i2 %= (int)(Test.instanceCount | 1);
            i2 += (((i20 * i20) + i2) - i2);
            Test.iArrFld[i20] -= -48431;
            for (i22 = 4; i22 < 76; ++i22) {
                Test.iArrFld[i20 - 1] = i21;
                s += (short)(i22 - s);
                i -= i1;
                Test.iArrFld[i22 + 1] -= (int)Test.fFld;
                lArrFld[i22] = i22;
                i2 = i1;
                Test.instanceCount = -2L;
            }
            Test.iArrFld[i20] = i2;
            for (i24 = i20; 76 > i24; i24 += 3) {
                Test.fFld -= Test.fFld;
            }
            Test.instanceCount -= Test.instanceCount;
        }
        for (i26 = 8; i26 < 240; i26++) {
            Test.iArrFld[i26 + 1] &= i2;
            i2 = i27;
        }

        FuzzerUtils.out.println("i s i1 = " + i + "," + s + "," + i1);
        FuzzerUtils.out.println("i2 i20 i21 = " + i2 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("lArrFld byArrFld Test.iArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(byArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
