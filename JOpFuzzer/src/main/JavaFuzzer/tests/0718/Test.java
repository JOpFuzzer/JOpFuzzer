// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-4L;
    public float fFld=-2.897F;
    public static boolean bFld=true;
    public int iArrFld[][]=new int[N][N];
    public volatile long lArrFld[][]=new long[N][N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, int i1) {

        int i2=-21210, i3=21166, i4=-61, i5=126, i6=-3, i7=18755, iArr[]=new int[N];
        double d1=-2.12214;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(fArr, 0.970F);
        FuzzerUtils.init(lArr, 9L);

        for (i2 = 1; i2 < 296; i2 += 2) {
            try {
                i1 = (-100 / i1);
                i3 = (iArr[i2 - 1] / -2035918291);
                i3 = (-76 % iArr[i2 + 1]);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount = i1;
            for (i4 = 1; 11 > i4; ++i4) {
                i3 += (((i4 * i2) + i4) - i2);
                try {
                    iArr[i4 + 1] = (922 % i5);
                    i3 = (71 / iArr[i2 + 1]);
                    i3 = (i2 % iArr[i4 - 1]);
                } catch (ArithmeticException a_e) {}
                fArr[i4 + 1] += (float)d1;
                f += f;
            }
            i3 += i3;
        }
        for (i6 = 22; 354 > i6; i6++) {
            i7 = (int)Test.instanceCount;
            Test.instanceCount -= i1;
        }
        lArr[(i2 >>> 1) % N] *= i6;
        i3 -= i6;
        vMeth1_check_sum += Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i9=-8;

        vMeth1(2.612F, i9);
        vMeth_check_sum += i9;
    }

    public static int iMeth(double d, int i) {

        int i10=1, i11=10, i12=7, i13=-12, i14=-209, i15=34031, i16=-62669, i17=8730, iArr1[]=new int[N];
        short s=7716;
        float f1=50.285F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 57777);
        FuzzerUtils.init(lArr1, -6168758341824718313L);

        vMeth();
        for (i10 = 1; 321 > i10; i10++) {
            for (i12 = 1; i12 < 5; i12++) {
                i11 -= s;
                iArr1[i10] = i12;
                for (i14 = 1; i14 < 2; ++i14) {
                    Test.instanceCount *= 0;
                    lArr1[i10] -= i15;
                    i15 += i14;
                    i15 += (((i14 * i12) + i13) - i14);
                    i11 -= (int)f1;
                }
                for (i16 = 1; i16 < 2; ++i16) {
                    Test.instanceCount >>= Test.instanceCount;
                    i15 -= i16;
                    i11 += (((i16 * i16) + i15) - i11);
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i + i10 + i11 + i12 + i13 + s + i14 + i15 +
            Float.floatToIntBits(f1) + i16 + i17 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d2=-1.31005;
        int i18=2798, i19=57641, i20=2, i21=-151, i22=42, i23=-59;
        long l=1857353193749630926L;
        float f2=-24.68F;
        byte by=-120;
        short s1=11354;
        boolean b=true;

        iMeth(d2, i18);
        l = 1;
        while (++l < 162) {
            Test.instanceCount += (l + Test.instanceCount);
            switch ((int)(((l % 5) * 5) + 18)) {
            case 34:
            case 33:
                i18 = (int)l;
                Test.instanceCount = (long)d2;
                break;
            case 31:
                iArrFld[(int)(l + 1)] = FuzzerUtils.int1array(N, (int)-6);
                iArrFld[(int)(l + 1)][(int)(l - 1)] <<= i18;
                i18 >>= i18;
                break;
            case 26:
                fFld -= -1072862585L;
                break;
            case 39:
                i19 = 1;
                while (++i19 < 155) {
                    i18 += (((i19 * l) + i20) - i20);
                    for (i21 = (int)(l); i21 < 1; i21++) {
                        i18 >>>= (int)Test.instanceCount;
                        i22 <<= i21;
                    }
                    i22 = (int)Test.instanceCount;
                    iArrFld[i19 - 1] = FuzzerUtils.int1array(N, (int)3);
                    i18 *= i18;
                    i22 = i21;
                }
            default:
                switch ((int)(((l % 2) * 5) + 1)) {
                case 8:
                    f2 = 1;
                    while (++f2 < 155) {
                        i18 -= i21;
                        if (Test.bFld) continue;
                        lArrFld[(int)(f2 - 1)][(int)(l - 1)] -= i21;
                        fFld += fFld;
                        if (b) {
                            switch ((int)(((l % 10) * 5) + 35)) {
                            case 66:
                                Test.instanceCount *= i22;
                                i20 = i19;
                                break;
                            case 78:
                                i20 += (int)f2;
                                break;
                            case 82:
                                Test.instanceCount <<= i19;
                                break;
                            case 52:
                                i22 -= (int)3483808959L;
                            case 36:
                                i20 += (int)f2;
                                break;
                            case 69:
                                i22 = i18;
                                break;
                            case 79:
                                by = (byte)d2;
                                break;
                            case 48:
                                Test.instanceCount += (long)109.132F;
                                break;
                            case 85:
                                fFld = (float)d2;
                                break;
                            case 73:
                                by >>= (byte)s1;
                                break;
                            }
                        } else if (true) {
                            fFld *= i22;
                        }
                    }
                case 5:
                    if (false) break;
                    break;
                default:
                    i23 = i21;
                }
            }
        }

        FuzzerUtils.out.println("d2 i18 l = " + Double.doubleToLongBits(d2) + "," + i18 + "," + l);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 f2 by = " + i22 + "," + Float.floatToIntBits(f2) + "," + by);
        FuzzerUtils.out.println("s1 b i23 = " + s1 + "," + (b ? 1 : 0) + "," + i23);

        FuzzerUtils.out.println("Test.instanceCount fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("iArrFld lArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
