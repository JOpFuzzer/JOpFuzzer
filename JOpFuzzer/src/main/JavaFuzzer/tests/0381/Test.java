// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=59363L;
    public static float fFld=0.796F;
    public static boolean bFld=true;
    public static double dFld=0.93622;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 571341064L);
        FuzzerUtils.init(Test.fArrFld, 0.159F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, int i7) {

        int i8=28821, i9=-126, i10=-88, i11=-17237, i12=-1, i13=14662, i14=-123, i15=-247, iArr[]=new int[N];
        double d=2.122974;
        byte by=117;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 242L);
        FuzzerUtils.init(iArr, -57);

        switch ((((i7 >>> 1) % 8) * 5) + 72) {
        case 80:
            Test.fFld = i7;
            for (i8 = 5; i8 < 142; i8++) {
                i7 += (int)l;
            }
            lArr[(2292 >>> 1) % N] = i7;
            break;
        case 90:
            for (i10 = 16; i10 < 338; i10++) {
                for (i12 = 1; i12 < 5; i12++) {
                    Test.instanceCount += 38744;
                    i14 *= i11;
                    for (d = 1; d < 2; ++d) {
                        Test.instanceCount = i14;
                    }
                    i13 >>= (int)Test.instanceCount;
                    i14 = (int)Test.instanceCount;
                    try {
                        i13 = (iArr[i10 + 1] % iArr[i10 + 1]);
                        i15 = (i13 / -179);
                        i11 = (-37 / i15);
                    } catch (ArithmeticException a_e) {}
                    Test.fFld *= i8;
                }
            }
        case 75:
            lArr[(i14 >>> 1) % N] -= by;
            break;
        case 107:
            Test.instanceCount += Test.instanceCount;
            break;
        case 112:
        case 102:
            Test.fFld += 3;
        case 93:
            i9 = (int)Test.instanceCount;
            break;
        case 81:
            i14 = 82;
        }
        vMeth1_check_sum += l + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d) + i15 + by +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i5, int i6) {

        int i17=-196, i18=-52510, i19=56801, i20=7, i21=159, i22=43012, iArr1[]=new int[N];
        boolean b=true;
        double d1=-37.105099;

        FuzzerUtils.init(iArr1, 191);

        vMeth1(236L, i6);
        Test.lArrFld[(i5 >>> 1) % N] >>= i6;
        i17 = 1;
        do {
            i5 >>>= i5;
            i6 -= i18;
            try {
                iArr1[i17 - 1] = (i5 % i18);
                i5 = (-90 / iArr1[i17]);
                i18 = (i17 / 50882);
            } catch (ArithmeticException a_e) {}
            if (i5 != 0) {
                vMeth_check_sum += i5 + i6 + i17 + i18 + i19 + i20 + i21 + i22 + (b ? 1 : 0) +
                    Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
                return;
            }
        } while (++i17 < 124);
        for (i19 = 11; i19 < 239; i19 += 2) {
            if (b) {
                Test.instanceCount -= -13;
                for (i21 = i19; 14 > i21; i21 += 3) {
                    if (b) continue;
                    i18 += (int)d1;
                    i22 -= (int)-3133360106L;
                    Test.lArrFld[i21 - 1] |= i19;
                }
            } else {
                Test.instanceCount += (i19 | i19);
            }
        }
        vMeth_check_sum += i5 + i6 + i17 + i18 + i19 + i20 + i21 + i22 + (b ? 1 : 0) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i4) {

        int i23=-9, i24=57495, i25=-186, i26=-64495, i27=-8, iArr2[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr2, 28116);

        vMeth(i4, i4);
        Test.instanceCount = i4;
        Test.fFld *= -34;
        Test.fArrFld[(i4 >>> 1) % N] = i4;
        i23 = 1;
        while (++i23 < 346) {
            i4 += i4;
            iArr2[i23] -= i4;
            i4 += 69;
            for (i24 = 1; i24 < 5; i24++) {
                for (i26 = 1; 2 > i26; i26++) {
                    Test.fFld += (-3060 + (i26 * i26));
                    i25 |= i4;
                    i4 = 146;
                    if (b1) break;
                    i4 -= i25;
                }
            }
        }
        long meth_res = i4 + i23 + i24 + i25 + i26 + i27 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-37930, i1=10, i2=-18940, i3=-123, i28=14, i29=24871, i30=13, i31=-7, i32=72, i33=-51741, iArr3[]=new
            int[N];
        short s=27839;
        float fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 1.199F);
        FuzzerUtils.init(dArr, 97.90703);
        FuzzerUtils.init(iArr3, 25);

        for (i = 5; i < 306; i++) {
            for (i2 = 5; i2 < 84; i2++) {
                fArr[i + 1] -= (float)(((i1 + i3) + (55211 - (i3 + Test.instanceCount))) - (iMeth(i) + 0.67070));
                Test.bFld = Test.bFld;
                for (i28 = 1; i28 < 2; ++i28) {
                    Test.instanceCount += (i28 ^ i1);
                    i29 += i28;
                    i29 |= i1;
                    i29 = (int)-12L;
                    Test.lArrFld[i + 1] -= (long)Test.dFld;
                    s += (short)(i28 * i28);
                }
                i3 += i3;
                for (i30 = i2; i30 < 2; ++i30) {
                    i31 = i28;
                    i29 += i2;
                    Test.fFld = s;
                    i31 = i3;
                    i31 = (int)Test.instanceCount;
                    if (Test.bFld) continue;
                    Test.instanceCount += (-4090134670L + (i30 * i30));
                    if (true) break;
                }
                dArr[i2 - 1] = Test.instanceCount;
            }
            i1 = (int)Test.fFld;
            Test.lArrFld[i + 1] = Test.instanceCount;
            i31 >>= i31;
        }
        for (i32 = 5; i32 < 177; ++i32) {
            i3 = i30;
            iArr3[i32 + 1] = (int)Test.instanceCount;
            i31 &= 12;
        }
        Test.instanceCount *= i3;

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i28 i29 = " + i3 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("s i30 i31 = " + s + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 fArr = " + i32 + "," + i33 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("dArr iArr3 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld Test.lArrFld Test.fArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
