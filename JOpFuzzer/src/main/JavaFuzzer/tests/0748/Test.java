// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1514370166750464776L;
    public volatile int iFld=-7;
    public static float fFld=21.474F;
    public static double dFld=1.91948;
    public static short sFld=31850;
    public static boolean bFld=true;
    public static int iArrFld[][]=new int[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -58);
        FuzzerUtils.init(Test.dArrFld, 47.14653);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6) {

        int i7=0, i8=24298, i9=-34837, i10=3, i11=11;
        byte by1=83;
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, -1.936F);
        FuzzerUtils.init(lArr1, -1L);

        Test.fFld *= 9;
        Test.fFld = (float)Test.dFld;
        for (i7 = 2; i7 < 126; i7++) {
            Test.instanceCount = i7;
            for (i9 = 1; 13 > i9; ++i9) {
                fArr = fArr;
                i11 = 1;
                while (++i11 < 2) {
                    by1 += (byte)(i11 + i10);
                    Test.iArrFld[i11 - 1][i9 - 1] -= (int)Test.instanceCount;
                    i6 += (-4 + (i11 * i11));
                    Test.instanceCount *= i10;
                    Test.iArrFld[(i9 >>> 1) % N][i11 + 1] <<= (int)Test.instanceCount;
                    lArr1 = FuzzerUtils.long1array(N, (long)14L);
                    Test.instanceCount = Test.sFld;
                }
                lArr1 = lArr1;
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth1(int i, int i1, byte by) {

        int i2=28731, i3=-212, i4=-17988, i5=15733, i12=94, i13=1, i14=7, i15=17730, i16=0;
        double d=1.63048;
        boolean b=false;

        Test.iArrFld[(i1 >>> 1) % N] = Test.iArrFld[(i >>> 1) % N];
        for (i2 = 14; 266 > i2; ++i2) {
            i1 = -13317;
            Test.iArrFld[i2][i2 + 1] -= (int)(++d);
            b = (b == b);
        }
        try {
            for (i4 = 149; 1 < i4; --i4) {
                i3 -= i3;
                vMeth(-46429);
            }
            for (i12 = 10; i12 < 324; i12++) {
                for (i14 = i12; i14 < 5; i14++) {
                    i16 = 1;
                    while (++i16 < 1) {
                        i3 -= (int)Test.fFld;
                        i5 *= i12;
                        Test.iArrFld[i12 - 1][i12] = i2;
                    }
                }
            }
        }
        catch (ArithmeticException exc1) {
            Test.sFld -= (short)Test.instanceCount;
        }
        long meth_res = i + i1 + by + i2 + i3 + Double.doubleToLongBits(d) + (b ? 1 : 0) + i4 + i5 + i12 + i13 + i14 +
            i15 + i16;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(float f1) {

        byte by2=15;
        int i17=-33742, i18=-13, i19=17935, i20=-4, i22=-47459, i23=2, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -11L);
        FuzzerUtils.init(iArr, 2);

        lArr[(iFld >>> 1) % N] = (long)((iMeth1(iFld, iFld, by2) << 254) * -2.335F);
        for (i17 = 1; i17 < 125; ++i17) {
            iFld -= 22;
            switch ((i17 % 8) + 106) {
            case 106:
                for (i19 = 1; i19 < 13; ++i19) {
                    Test.instanceCount += i20;
                }
                Test.dArrFld[i17] = Test.fFld;
                for (i22 = i17; 13 > i22; ++i22) {
                    i18 *= 24751;
                    iFld += i18;
                }
                break;
            case 107:
                Test.instanceCount = i19;
            case 108:
                i23 += (((i17 * i17) + i17) - Test.instanceCount);
                break;
            case 109:
                Test.fFld *= Test.instanceCount;
                if (Test.bFld) continue;
                i18 += (int)f1;
                break;
            case 110:
                Test.instanceCount *= i23;
                break;
            case 111:
                i18 = iFld;
            case 112:
                i23 = 7;
                break;
            case 113:
            }
        }
        long meth_res = Float.floatToIntBits(f1) + by2 + i17 + i18 + i19 + i20 + i22 + i23 + FuzzerUtils.checkSum(lArr)
            + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-86.459F;
        int i24=-162, i25=-3;

        iFld = (int)(f - iMeth(Test.fFld));
        iFld = (int)Test.fFld;
        iFld -= iFld;
        iFld *= iFld;
        iFld >>>= (int)Test.instanceCount;
        for (i24 = 6; i24 < 263; i24++) {
            Test.instanceCount *= (long)Test.fFld;
            iFld -= (int)Test.instanceCount;
            Test.instanceCount = (long)f;
            i25 += iFld;
        }

        FuzzerUtils.out.println("f i24 i25 = " + Float.floatToIntBits(f) + "," + i24 + "," + i25);

        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.sFld Test.bFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Test.sFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
