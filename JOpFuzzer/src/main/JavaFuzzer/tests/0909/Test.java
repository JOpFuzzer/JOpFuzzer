// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public static float fFld=-2.971F;
    public float fFld1=-119.508F;
    public static double dFld=1.82256;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 24779);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(short s) {

        int i2=-63915, i3=229, i4=40103, i5=9, i6=-14;
        float f2=1.426F;
        boolean b=false;

        i2 *= (int)Test.instanceCount;
        Test.iArrFld[(i2 >>> 1) % N] = 82;
        i3 = 1;
        do {
            Test.instanceCount = i2;
            i2 += (i3 + i2);
            for (f2 = i3; 5 > f2; f2++) {
                if (b) {
                    i4 -= i3;
                    switch ((int)(((f2 % 2) * 5) + 26)) {
                    case 30:
                        i4 += (int)f2;
                        break;
                    case 28:
                        s -= (short)i4;
                    }
                    for (i5 = i3; i5 < 1; i5++) {
                        i4 += (36 + (i5 * i5));
                        i4 >>= (int)Test.instanceCount;
                    }
                } else {
                    Test.instanceCount = i5;
                }
            }
        } while (++i3 < 338);
        vMeth2_check_sum += s + i2 + i3 + Float.floatToIntBits(f2) + i4 + i5 + i6 + (b ? 1 : 0);
    }

    public static void vMeth1(float f1, int i1, long l) {


        i1 <<= i1;
        i1 = (int)(Test.instanceCount = (i1--));
        vMeth2((short)(4897));
        Test.iArrFld[(i1 >>> 1) % N] += 2439;
        l = l;
        vMeth1_check_sum += Float.floatToIntBits(f1) + i1 + l;
    }

    public static void vMeth(float f, int i) {

        int i7=3, i8=148, i9=7, i10=-52568, i11=5, i12=6459;
        float f3=10.848F, fArr[]=new float[N];
        byte by=-101, byArr[]=new byte[N];
        double d=-1.36807;
        boolean b1=true;
        short sArr[][]=new short[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)4356);
        FuzzerUtils.init(lArr, -5L);
        FuzzerUtils.init(byArr, (byte)-92);
        FuzzerUtils.init(fArr, -25.654F);

        vMeth1(f, i, Test.instanceCount);
        for (i7 = 192; 2 < i7; --i7) {
            sArr[i7 + 1][i7 - 1] >>= (short)8;
        }
        f = i7;
        for (i9 = 279; i9 > 9; i9 -= 3) {
            for (f3 = 1; 17 > f3; f3++) {
                i12 = 1;
                do {
                    lArr[i9 + 1] <<= i7;
                } while (++i12 < 2);
                Test.iArrFld[i9 - 1] = by;
                if (true) {
                    d = f;
                } else if (b1) {
                    i &= -13;
                    Test.iArrFld[(int)(f3 - 1)] *= (int)d;
                } else if (b1) {
                    byArr[i9 - 1] *= (byte)i10;
                }
                fArr[i9] = i;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i7 + i8 + i9 + i10 + Float.floatToIntBits(f3) + i11 + i12 + by
            + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i13=1, i14=39, i15=1191, i16=-4, i17=7, i18=133, i19=-14, i20=167;
        short s1=-23674;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 2.875F);

        vMeth(Test.fFld, 6);
        i13 = (int)Test.instanceCount;
        for (i14 = 222; i14 > 9; i14 -= 3) {
            Test.instanceCount = i14;
            i13 -= -100;
            i15 += (((i14 * i13) + Test.fFld) - i14);
            i16 = 1;
            while (++i16 < 353) {
                Test.instanceCount = -18034;
                Test.instanceCount -= i13;
                for (i17 = 1; i17 > 1; i17--) {
                    Test.iArrFld[i16] -= (int)fFld1;
                    fFld1 += i17;
                }
                Test.dFld = -22994;
                for (i19 = 1; 1 > i19; i19++) {
                    Test.fFld += (i19 * i19);
                    Test.iArrFld[i16] -= (int)Test.instanceCount;
                    switch ((i19 % 9) + 61) {
                    case 61:
                        i18 += i19;
                        i18 ^= (int)1444071833L;
                        break;
                    case 62:
                        Test.instanceCount >>= 3811543172752057634L;
                        break;
                    case 63:
                        s1 = (short)Test.dFld;
                        Test.iArrFld[i14 + 1] = 0;
                        break;
                    case 64:
                        Test.instanceCount -= Test.instanceCount;
                        if (false) {
                            i13 <<= 108;
                            Test.dFld = i14;
                        } else {
                            Test.iArrFld = Test.iArrFld;
                            i20 -= i18;
                            Test.iArrFld[i19 - 1] *= i17;
                        }
                        fArr1 = fArr1;
                        break;
                    case 65:
                    case 66:
                        i18 += (i19 * i19);
                        break;
                    case 67:
                        Test.fFld /= 4435698217171670354L;
                        break;
                    case 68:
                        Test.instanceCount >>= Test.instanceCount;
                        break;
                    case 69:
                        i13 = i14;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 s1 = " + i19 + "," + i20 + "," + s1);
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld fFld1 = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Float.floatToIntBits(fFld1));
        FuzzerUtils.out.println("Test.dFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
