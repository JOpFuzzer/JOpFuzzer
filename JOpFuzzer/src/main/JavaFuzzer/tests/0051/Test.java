// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static int iFld=-64711;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -15.447F);
        FuzzerUtils.init(Test.lArrFld, 213L);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(long l1) {

        int i9=-62, i10=4789, i11=155, i12=-236, i13=128, i14=7, i15=9554;
        double d=121.102436;
        float f=-9.743F;

        for (i9 = 361; i9 > 4; i9--) {
            for (d = 1; d < 5; d++) {
                i10 = 56740;
            }
            l1 = 184;
            for (i12 = 1; i12 < 5; ++i12) {
                Test.instanceCount -= 5L;
                switch (((i9 % 3) * 5) + 23) {
                case 24:
                    i10 >>= i9;
                    break;
                case 29:
                    switch ((i12 % 2) + 101) {
                    case 101:
                    case 102:
                        Test.fArrFld[i9] += i13;
                        for (i14 = 1; i14 < 2; i14++) {
                            i15 >>= 60;
                            i10 -= (int)l1;
                            i11 *= i14;
                        }
                        i15 = (int)3126900737753278632L;
                        break;
                    }
                    break;
                case 32:
                    f -= -76.383F;
                    break;
                default:
                    if (i12 != 0) {
                    }
                }
            }
        }
        long meth_res = l1 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + i15 +
            Float.floatToIntBits(f);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(int i5, int i6) {

        int i7=-16355, i8=13;

        for (i7 = 6; i7 < 211; ++i7) {
            i5 += (sMeth(Test.instanceCount) * i6);
        }
        vMeth_check_sum += i5 + i6 + i7 + i8;
    }

    public static boolean bMeth(long l) {

        int i2=-9799, i3=4, i4=9, iArr[]=new int[N];
        byte by=13, byArr[]=new byte[N];
        boolean b=false, bArr[][]=new boolean[N][N];
        short s1=-12643;

        FuzzerUtils.init(iArr, -57);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(byArr, (byte)-75);

        i2 += (int)((by - (--iArr[(-53052 >>> 1) % N])) + ((5 * (l++)) - Test.fArrFld[(i2 >>> 1) % N]));
        iArr[(i2 >>> 1) % N] >>= 11560;
        for (i3 = 18; 378 > i3; i3++) {
            if ((b | bArr[i3][i3 + 1]) | b) continue;
            i2 *= -57621;
            i2 <<= s1;
            i2 += (int)(-4994869343104106165L + (i3 * i3));
            vMeth(172, i4);
            try {
                iArr[i3] = (i3 / -62134);
                iArr[(i3 >>> 1) % N] = (iArr[i3] / iArr[i3 - 1]);
                i4 = (i4 % 28940);
            } catch (ArithmeticException a_e) {}
            switch ((((-32641 >>> 1) % 10) * 5) + 88) {
            case 120:
                i4 <<= i3;
            case 114:
                i4 >>= i4;
                i2 *= -203;
                iArr[i3 - 1] = i4;
                break;
            case 93:
                i2 -= i2;
                break;
            case 103:
                i4 = i2;
                break;
            case 102:
                i2 = (int)27L;
                break;
            case 100:
                i2 >>>= (int)Test.instanceCount;
                break;
            case 89:
                byArr = byArr;
                break;
            case 108:
                i4 -= (int)-2.187F;
                break;
            case 129:
                iArr[i3] += (int)Test.instanceCount;
            case 95:
                i2 >>= (int)l;
                break;
            }
        }
        long meth_res = l + i2 + by + i3 + i4 + (b ? 1 : 0) + s1 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(byArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-9, i1=-6, i16=-18587, i17=223, i18=40491, i19=181, i20=-2, i21=14, iArr1[]=new int[N];
        float f1=-1.243F;
        byte by1=116;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)10481);
        FuzzerUtils.init(iArr1, -12);

        for (short s : sArr) {
            for (i = 1; i < 63; ++i) {
                boolean b1=true;
                if (bMeth(Test.instanceCount) && b1) continue;
                if (b1) break;
                i1 -= (int)Test.instanceCount;
                i16 = 1;
                while (++i16 < 2) {
                    i1 -= i;
                    i1 >>= i1;
                    i1 &= i;
                    i1 += (i16 * Test.instanceCount);
                }
                switch (((i % 1) * 5) + 90) {
                case 93:
                default:
                    iArr1[i + 1] -= (int)f1;
                    for (i17 = 2; i < i17; i17 -= 3) {
                        iArr1[i - 1] = (int)Test.instanceCount;
                        f1 += (i17 * i17);
                        Test.iFld = i1;
                        i1 -= Test.iFld;
                        Test.iFld *= i17;
                        Test.iFld = by1;
                        Test.lArrFld[i] *= i16;
                    }
                    for (i19 = 1; i19 < 2; ++i19) {
                        double d1=1.46272;
                        i20 += i19;
                        i1 = i1;
                        iArr1[i19] &= 39116;
                        Test.iFld >>>= (int)Test.instanceCount;
                        f1 *= Test.iFld;
                        switch ((i19 % 5) + 3) {
                        case 3:
                            dArrFld[i] *= i;
                            if (b1) continue;
                            i21 >>= i;
                            break;
                        case 4:
                            Test.lArrFld[i + 1] <<= i20;
                            break;
                        case 5:
                            d1 = f1;
                            break;
                        case 6:
                            i21 ^= (int)Test.instanceCount;
                        case 7:
                            if (b1) continue;
                            break;
                        }
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i16 = " + i + "," + i1 + "," + i16);
        FuzzerUtils.out.println("f1 i17 i18 = " + Float.floatToIntBits(f1) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("by1 i19 i20 = " + by1 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 sArr iArr1 = " + i21 + "," + FuzzerUtils.checkSum(sArr) + "," +
            FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fArrFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.lArrFld dArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
