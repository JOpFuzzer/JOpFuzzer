// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=9011113482603342272L;
    public float fFld=-2.899F;
    public static byte byFld=-28;
    public short sFld=-22634;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -129L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(double d2, long l) {

        int i11=14, i12=1, i13=59127, i14=53767, i15=-253, i16=-238, iArr2[]=new int[N];
        float f2=-2.321F;
        byte by1=35;
        boolean b=true;
        double d3=126.5406;

        FuzzerUtils.init(iArr2, -80);

        i11 += -164;
        if (b) {
            for (i12 = 4; 211 > i12; i12 += 2) {
                f2 += (((i12 * Test.instanceCount) + f2) - i12);
                f2 += (((i12 * by1) + i12) - i12);
                iArr2[i12 - 1] = (int)1.72257;
                l = i11;
                i13 += i12;
            }
        } else if (b) {
            i13 = (int)f2;
            f2 += 32193;
        } else {
            d3 = 1;
            do {
                i14 = 6;
                do {
                    for (i15 = 1; i15 < 1; i15++) {
                        by1 >>= (byte)i12;
                        i11 = i14;
                    }
                } while (--i14 > 0);
            } while (++d3 < 298);
        }
        long meth_res = Double.doubleToLongBits(d2) + l + i11 + i12 + i13 + Float.floatToIntBits(f2) + by1 + (b ? 1 :
            0) + Double.doubleToLongBits(d3) + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i7, int i8) {

        int i9=30, i10=-14, i17=-180, i18=-36928, i19=-14, i20=36384, iArr1[]=new int[N];
        double d4=2.51023;
        boolean b1=true;
        float f3=36.641F;

        FuzzerUtils.init(iArr1, -32896);

        for (i9 = 4; i9 < 254; ++i9) {
            Test.instanceCount = (Test.instanceCount >>= (iArr1[i9]--));
            i10 = (int)(iMeth(d4, Test.instanceCount) - Test.instanceCount);
            Test.byFld = (byte)6639579302863853932L;
            for (i17 = 1; i17 < 7; i17++) {
                Test.instanceCount <<= i18;
                if (b1) break;
                for (i19 = 1; i19 < 2; ++i19) {
                    i18 |= i9;
                    i10 -= i8;
                    i18 += (((i19 * Test.instanceCount) + i20) - i19);
                    d4 -= Test.instanceCount;
                    Test.instanceCount += (((i19 * i17) + i8) - Test.byFld);
                    iArr1[i19] <<= i20;
                    Test.instanceCount *= (long)f3;
                }
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + Double.doubleToLongBits(d4) + i17 + i18 + (b1 ? 1 : 0) + i19 + i20 +
            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(float f, float f1, int i6) {

        double d1=113.69208;
        short s=8883;
        int i21=-61030, i22=-129, i23=-2, i24=24, i25=248, i26=-146;
        boolean b2=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 82.835F);

        Test.instanceCount >>>= (i6 *= (int)(Test.instanceCount--));
        d1 *= Math.max(s - (i6 + -34188L), Test.lArrFld[(i6 >>> 1) % N]);
        vMeth(i21, i6);
        f1 = s;
        i22 = 1;
        while (++i22 < 280) {
            d1 -= 57;
            i21 += (i22 ^ i6);
            for (i23 = 1; i23 < 6; ++i23) {
                for (i25 = 1; i25 < 2; ++i25) {
                    fArr[i25 - 1] -= Test.byFld;
                    d1 = i23;
                    i24 *= (int)Test.instanceCount;
                    i26 = i25;
                    i26 *= i21;
                }
                if (b2) continue;
            }
        }
        long meth_res = Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i6 + Double.doubleToLongBits(d1) + s + i21
            + i22 + i23 + i24 + i25 + i26 + (b2 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-6023, i1=61829, i2=-94, i3=-6883, i4=-202, i5=47393, i27=-64493, i28=5, i29=-32179, i30=2, i31=-90,
            iArr[]=new int[N];
        double d=89.34895;
        boolean b3=false;

        FuzzerUtils.init(iArr, 3996);

        for (i = 2; i < 187; i++) {
            byte by=121;
            by += (byte)(((i * i) + i1) - i);
        }
        i2 = 1;
        while ((i2 += 2) < 273) {
            switch (((i2 % 3) * 5) + 94) {
            case 100:
            case 109:
                switch (((((--iArr[i2]) >>> 1) % 2) * 5) + 71) {
                case 79:
                    iArr[i2 + 1] = iArr[i2 - 1];
                    Test.instanceCount = (long)(-((i1--) - d));
                    for (i3 = 184; i3 > 2; i3 -= 2) {
                        if (((-i3) - (iArr[i3 + 1]++)) != (109.129F - ((d--) - i))) break;
                        fFld = Integer.reverseBytes(++i1);
                        iArr[i3 - 1] = ((i1 + (13384 + (i4 / (i2 | 1)))) - i3);
                    }
                    try {
                        i4 = (i % 2106978955);
                        i1 = (i2 / i);
                        i1 = (35 % i);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 76:
                    i5 = 1;
                    while (++i5 < 184) {
                        iArr = iArr;
                    }
                    i4 = (int)((lMeth(0.266F, fFld, -59) - Test.instanceCount) + i1);
                    i27 = sFld;
                    i27 = -2727;
                }
                switch (((i2 % 9) * 5) + 13) {
                case 37:
                    i28 = 1;
                    while (++i28 < 184) {
                        for (i29 = 1; i29 < 1; ++i29) {
                            b3 = b3;
                            i4 -= (int)Test.instanceCount;
                            fFld += i2;
                            Test.lArrFld[i2] += 24175;
                            i27 = Test.byFld;
                            fFld += i3;
                            Test.lArrFld = FuzzerUtils.long1array(N, (long)335343231L);
                            i4 -= -7279;
                            i1 += (i29 ^ i27);
                            i30 >>= (int)Test.instanceCount;
                        }
                    }
                    break;
                case 25:
                    iArr[i2 - 1] = i27;
                    break;
                case 29:
                    i1 += sFld;
                    break;
                case 51:
                    iArr[i2 + 1] |= i31;
                    break;
                case 55:
                    fFld -= fFld;
                    break;
                case 21:
                    Test.lArrFld[i2 - 1] = i29;
                    break;
                case 41:
                    Test.byFld >>= (byte)sFld;
                    break;
                case 20:
                    i4 += (int)Test.instanceCount;
                    break;
                case 32:
                    fFld = i1;
                    break;
                default:
                    iArr[i2] -= (int)d;
                }
                break;
            case 108:
                fFld -= Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("d i3 i4 = " + Double.doubleToLongBits(d) + "," + i3 + "," + i4);
        FuzzerUtils.out.println("i5 i27 i28 = " + i5 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 b3 = " + i29 + "," + i30 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("i31 iArr = " + i31 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("sFld Test.lArrFld = " + sFld + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
