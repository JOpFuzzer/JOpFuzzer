// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6025848499566744120L;
    public static short sFld=-4059;
    public static boolean bFld=false;
    public static double dFld=-25.87513;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)23667);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i2, int i3) {

        int i4=-3, i5=57046, i6=139, i7=-2805, i8=11, i9=-59317, i10=17902, iArr[]=new int[N];
        double d=-1.43730;
        float f2=-1.985F;

        FuzzerUtils.init(iArr, 3580);

        for (i4 = 2; 153 > i4; ++i4) {
            i3 <<= i3;
            Test.instanceCount += i4;
            iArr[i4 - 1] -= (int)98.250F;
        }
        Test.sArrFld[(i3 >>> 1) % N] *= (short)i4;
        for (i6 = 14; i6 < 320; ++i6) {
            for (i8 = i6; i8 < 5; i8 += 2) {
                switch (((i6 % 6) * 5) + 45) {
                case 73:
                case 47:
                    i7 = (int)-226L;
                    i3 ^= i8;
                    i3 *= i4;
                    i10 = 1;
                    while (++i10 < 1) {
                        i5 += (int)d;
                        i3 += i10;
                        i2 += i10;
                    }
                    break;
                case 69:
                case 48:
                    i2 += (i8 * Test.instanceCount);
                    break;
                case 51:
                    Test.sFld += (short)(i8 + f2);
                    break;
                case 52:
                    iArr[i6] *= i7;
                    break;
                default:
                    f2 = -7;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1() {

        int i1=-11, i11=-182, i12=14, i13=6, i14=7643, i15=188, i16=12;
        short s=-23520;
        float f1=10.636F;
        double d1=-1.81469;

        i1 >>>= ((s++) - ((++i1) + i1));
        f1 = Test.instanceCount;
        i1 += 4107;
        lMeth(i1, -7);
        for (i11 = 364; 3 < i11; --i11) {
            i12 = (int)f1;
            i12 -= (int)-98.364F;
            i12 += i11;
        }
        Test.instanceCount -= i12;
        try {
            for (i13 = 7; i13 < 250; i13++) {
                i12 += (((i13 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                for (i15 = i13; i15 < 7; i15++) {
                    f1 = (float)d1;
                    f1 += (float)d1;
                }
            }
        }
        catch (ArithmeticException exc1) {
            f1 = i12;
        }
        long meth_res = i1 + s + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(d1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i) {

        int i17=-58762, i18=-18, i19=-21, i20=-14, i21=172, iArr1[]=new int[N];
        byte by=-127;
        double d2=-6.96704, d3=-2.39004;
        float f3=0.427F;

        FuzzerUtils.init(iArr1, -44785);

        Test.instanceCount *= (-(iMeth1() + Test.sFld));
        i17 = 168;
        do {
            for (i18 = 1; i18 < 9; ++i18) {
                by *= (byte)d2;
                Test.bFld = Test.bFld;
                try {
                    i = (i18 / iArr1[i17 - 1]);
                    i19 = (3993 / i);
                    i = (-48 / iArr1[i17 - 1]);
                } catch (ArithmeticException a_e) {}
                for (i20 = 1; i20 < 2; ++i20) {
                    f3 = -108;
                    i = (int)Test.instanceCount;
                    iArr1[i20 + 1] *= (int)d2;
                    if (Test.bFld) break;
                    Test.instanceCount += (i20 ^ i);
                    Test.instanceCount *= Test.instanceCount;
                    Test.instanceCount += (i20 ^ i21);
                    d3 = d2;
                }
            }
        } while (--i17 > 0);
        long meth_res = i + i17 + i18 + i19 + by + Double.doubleToLongBits(d2) + i20 + i21 + Float.floatToIntBits(f3) +
            Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=62.639F;
        int i22=-58879, i23=-195, i24=13, i25=-54, i26=174, i27=-18, i28=182, i29=-11624, i30=-1, i31=-53664, i32=5725,
            i33=-13;
        byte by1=-92;
        long l=-46145L;

        f *= (12 - iMeth(i22));
        by1 += (byte)18.343F;
        for (i23 = 18; i23 < 322; i23++) {
            Test.instanceCount += Test.instanceCount;
            i22 = i24;
            for (i25 = 1; i25 < 83; i25++) {
                Test.dFld -= Test.instanceCount;
                Test.dFld += 103.536F;
                i22 += (int)Test.instanceCount;
            }
            for (i27 = 1; 83 > i27; i27++) {
                Test.instanceCount >>= Test.instanceCount;
                i26 -= i24;
                for (i29 = i27; i29 < 2; ++i29) {
                    i28 >>= i26;
                    i30 += -245;
                }
                i30 = 8857;
                i28 = i27;
                Test.dFld += i28;
            }
            for (i31 = 2; i31 < 83; ++i31) {
                i33 = 1;
                do {
                    i26 += (i33 - i23);
                    switch (((i23 % 1) * 5) + 34) {
                    case 36:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    default:
                        i22 -= (int)Test.dFld;
                        i28 += (i33 * i25);
                        switch (((i33 % 2) * 5) + 40) {
                        case 49:
                            i28 += (int)Test.instanceCount;
                            break;
                        case 43:
                            i22 *= (int)f;
                            l += i33;
                            i26 = (int)Test.instanceCount;
                        default:
                            f = 2.1018F;
                        }
                    }
                } while (++i33 < 2);
            }
        }

        FuzzerUtils.out.println("f i22 by1 = " + Float.floatToIntBits(f) + "," + i22 + "," + by1);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 l = " + i32 + "," + i33 + "," + l);

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld Test.sArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
