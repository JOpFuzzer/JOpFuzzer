// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=51428L;
    public boolean bFld=true;
    public static float fFld=19.767F;
    public static long lArrFld[][]=new long[N][N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -5L);
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6) {

        byte by1=125;
        boolean b=true;
        float f1=2.69F;
        int i7=-3, i8=-136, i9=31240;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2L);

        by1 <<= (byte)i6;
        b = b;
        for (f1 = 134; f1 > 7; f1--) {
            for (i8 = 12; i8 > f1; --i8) {
                short s=28123;
                i9 = i6;
                Test.instanceCount = i6;
                i6 += (i8 * i8);
                if (b) {
                    Test.instanceCount += i8;
                } else if (b) {
                    i7 &= i8;
                    i9 += (i8 * i8);
                    i6 += i7;
                    vMeth_check_sum += i6 + by1 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i7 + i8 + i9 +
                        FuzzerUtils.checkSum(lArr);
                    return;
                } else if (b) {
                    by1 *= (byte)i8;
                    lArr[i8 - 1] *= -2453;
                    i9 = i7;
                } else {
                    s <<= (short)i9;
                }
            }
        }
        vMeth_check_sum += i6 + by1 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i7 + i8 + i9 +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i5, float f) {

        int i10=194, i11=-128, i12=-24148, i13=3145, i14=-27, i15=3;
        byte by2=-47;
        double d2=0.108788;

        vMeth(-35225);
        i10 = 263;
        while ((i10 -= 2) > 0) {
            for (i11 = 1; i11 < 12; ++i11) {
                i13 ^= (int)Test.instanceCount;
                Test.instanceCount = i11;
            }
            by2 -= (byte)i5;
            i12 += (int)Test.instanceCount;
            i5 *= i12;
        }
        i5 |= i13;
        for (i14 = 5; i14 < 201; i14++) {
            Test.lArrFld[i14] = Test.lArrFld[i14 - 1];
            i5 -= (int)d2;
            Test.iArrFld[i14 + 1] -= i11;
        }
        by2 += (byte)f;
        i15 += i13;
        long meth_res = i5 + Float.floatToIntBits(f) + i10 + i11 + i12 + i13 + by2 + i14 + i15 +
            Double.doubleToLongBits(d2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i2, int i3, int i4) {

        byte by=67;

        by = (byte)iMeth(i2, Test.fFld);
        vSmallMeth_check_sum += i2 + i3 + i4 + by;
    }

    public void mainTest(String[] strArr1) {

        double d=108.48810, d1=2.99224, d3=-20.58121;
        int i=-9, i1=-254, i16=-34110, i17=8, i19=-5255, i20=75;
        long l=113L;
        byte by3=119;

        for (d = 17; d < 293; ++d) {
            bFld = (((i + l) != 14) && bFld);
            i1 = 91;
            do {
                d1 += (-i);
            } while (--i1 > 0);
        }
        for (int smallinvoc=0; smallinvoc<894; smallinvoc++) vSmallMeth(i1, 59, i1);
        d1 -= i1;
        i16 = 1;
        do {
            i17 = 1;
            do {
                int i18=11;
                i18 += (((i17 * i1) + l) - i18);
                l += (long)d3;
                Test.iArrFld[i16 + 1] -= (int)d;
                for (i19 = 1; i19 > 1; i19 -= 2) {
                    Test.iArrFld[i16 + 1] ^= 17;
                    d1 = l;
                    Test.iArrFld[i16 - 1] = i18;
                    l += by3;
                    i -= (int)Test.instanceCount;
                    i18 += (178 + (i19 * i19));
                    i18 -= i17;
                    i >>= i;
                    d3 /= ((long)(Test.fFld) | 1);
                    i20 -= (int)Test.instanceCount;
                }
                switch (((i16 % 10) * 5) + 122) {
                case 143:
                    if (bFld) continue;
                    if (true) break;
                    d1 *= Test.fFld;
                    break;
                case 123:
                    i = i19;
                    i18 = i;
                    Test.lArrFld[i16 - 1][i16] = 28787;
                    d3 = i17;
                case 159:
                    Test.instanceCount -= i;
                    break;
                case 170:
                    i18 = i16;
                    break;
                case 172:
                    d1 -= i16;
                    break;
                case 146:
                    i20 *= (int)l;
                    break;
                case 150:
                    Test.instanceCount = i20;
                case 127:
                    try {
                        i18 = (i % 1133);
                        i18 = (-15 % i20);
                        i = (i19 / i19);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 134:
                    i20 += i;
                    break;
                case 154:
                    i += (i17 * i17);
                    break;
                }
            } while (++i17 < 220);
        } while ((i16 += 3) < 344);

        FuzzerUtils.out.println("d i l = " + Double.doubleToLongBits(d) + "," + i + "," + l);
        FuzzerUtils.out.println("i1 d1 i16 = " + i1 + "," + Double.doubleToLongBits(d1) + "," + i16);
        FuzzerUtils.out.println("i17 d3 i19 = " + i17 + "," + Double.doubleToLongBits(d3) + "," + i19);
        FuzzerUtils.out.println("i20 by3 = " + i20 + "," + by3);

        FuzzerUtils.out.println("Test.instanceCount bFld Test.fFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
