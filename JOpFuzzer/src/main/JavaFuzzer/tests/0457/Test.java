// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1019042843318210881L;
    public static short sFld=24165;
    public static byte byFld=-43;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -74);
        FuzzerUtils.init(Test.fArrFld, 0.865F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(double d, int i4, int i5) {

        int i6=11, i7=-22329, i8=-14474, i9=17000, i10=-168, i11=5, i12=139, i13=-11;
        float f2=1.657F;

        for (i6 = 213; i6 > 9; --i6) {
            i5 = -233;
            i4 = i4;
            i4 = Test.sFld;
            for (i8 = i6; i8 < 8; ++i8) {
                i9 += (i8 - f2);
                for (i10 = 1; 1 > i10; i10++) {
                    f2 += (i10 - i9);
                    f2 = -3;
                }
                for (i12 = i8; i12 < 1; ++i12) {
                    boolean b=false;
                    f2 *= Test.instanceCount;
                    f2 -= i13;
                    b = false;
                    i5 = i10;
                    i9 = i9;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + i10 + i11
            + i12 + i13;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i3=-39899, i14=35900, i15=200, i16=148, i17=176;
        float f1=119.404F;
        double d1=-112.82605;
        boolean b1=true;

        Test.iArrFld[(-4 >>> 1) % N] -= (int)(((i3 <<= i3) * (f1--)) + (Test.fArrFld[(12 >>> 1) % N][(i3 >>> 1) % N] +
            iMeth(d1, -61, i3)));
        i3 -= 12;
        for (i14 = 15; i14 < 281; ++i14) {
            if (b1) {
                i15 = i15;
                Test.iArrFld[i14 + 1] = i14;
            }
            i15 >>>= i15;
            i3 -= (int)-2.869F;
            try {
                i3 = (i3 % i15);
                i15 = (i15 % 209);
                i3 = (i15 % 996969578);
            } catch (ArithmeticException a_e) {}
            i15 >>= i3;
            i15 += (int)Test.instanceCount;
            Test.instanceCount += i14;
            for (i16 = 1; i16 < 6; i16++) {
                Test.iArrFld[i14 - 1] -= Test.byFld;
                f1 = i14;
            }
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i14 + i15 + (b1 ? 1 : 0) +
            i16 + i17;
    }

    public static void vMeth(float f, int i1, int i2) {

        boolean b2=false;
        int i19=-13, i20=9, i21=3, i22=13, i23=0;
        double d2=94.59402, d3=-52.18079;

        vMeth1();
        for (int i18 : Test.iArrFld) {
            if (b2) continue;
            for (i19 = 1; i19 < 4; ++i19) {
                i20 += i19;
                for (d2 = 1; d2 < 2; d2++) {
                    i21 >>= i1;
                }
                i20 = i18;
                i21 -= 18;
                switch ((((i1 >>> 1) % 5) * 5) + 16) {
                case 27:
                    b2 = b2;
                    break;
                case 39:
                    for (i22 = 1; i22 < 2; ++i22) {
                        Test.iArrFld[(-9748 >>> 1) % N] = i22;
                        f += (-217 + (i22 * i22));
                        d3 -= f;
                    }
                    break;
                case 28:
                    i23 += (i19 * i20);
                    break;
                case 24:
                    try {
                        i1 = (150 % i20);
                        Test.iArrFld[i19 + 1] = (i2 / Test.iArrFld[i19 - 1]);
                        Test.iArrFld[i19] = (10390 / i21);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 34:
                    Test.sFld = (short)i18;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i1 + i2 + (b2 ? 1 : 0) + i19 + i20 + Double.doubleToLongBits(d2) +
            i21 + i22 + i23 + Double.doubleToLongBits(d3);
    }

    public void mainTest(String[] strArr1) {

        int i=-174, i24=-21, i25=3, i26=3, i27=-123, i28=-2, i29=132, i30=153, i31=-8, iArr[]=new int[N];
        float f3=-78.103F;
        double d4=1.87743;

        FuzzerUtils.init(iArr, 51500);

        i = 40998;
        vMeth(f3, i, i);
        i24 = 1;
        do {
            i += (((i24 * i) + Test.instanceCount) - i24);
            if (Test.bFld) {
                i -= i;
                Test.instanceCount -= Test.byFld;
                i = (int)f3;
            }
            for (i25 = 7; i25 < 116; ++i25) {
                Test.fArrFld[i25][i25] *= i;
                Test.byFld += (byte)(i25 | i26);
                i += (int)f3;
                Test.iArrFld[i24] -= i24;
                Test.iArrFld[i24 - 1] = (int)Test.instanceCount;
                for (i27 = 1; 2 > i27; i27 += 2) {
                    if (Test.bFld) break;
                    Test.iArrFld[i24] = i28;
                    Test.iArrFld[i24 - 1] = 12;
                }
            }
            i -= (int)Test.instanceCount;
        } while (++i24 < 217);
        for (d4 = 7; 202 > d4; ++d4) {
            i30 = 1;
            do {
                Test.instanceCount *= Test.instanceCount;
                iArr[(int)(d4 - 1)] = -529;
                if (Test.bFld) {
                    i31 = 1;
                    while (++i31 < 1) {
                        Test.instanceCount *= Test.byFld;
                        i *= i31;
                        Test.iArrFld[i31 - 1] *= -61682;
                        Test.byFld += (byte)i26;
                        Test.iArrFld[i30 - 1] %= 71;
                    }
                } else if (Test.bFld) {
                    try {
                        i29 = (i31 / -231);
                        i28 = (i25 / i24);
                        i29 = (i27 % i25);
                    } catch (ArithmeticException a_e) {}
                }
            } while (++i30 < 129);
        }

        FuzzerUtils.out.println("i f3 i24 = " + i + "," + Float.floatToIntBits(f3) + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 d4 i29 = " + i28 + "," + Double.doubleToLongBits(d4) + "," + i29);
        FuzzerUtils.out.println("i30 i31 iArr = " + i30 + "," + i31 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.byFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.bFld Test.iArrFld Test.fArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
