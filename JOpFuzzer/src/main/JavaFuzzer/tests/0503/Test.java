// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-227L;
    public static byte byFld=-101;
    public static boolean bFld=true;
    public static double dFld=16.130954;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -1);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        byte by1=-86;
        int i11=97, i12=-4, i13=4, i14=-25409, i15=171, i16=-9, i17=-32955;
        double d=1.12590, d1=78.33878;
        float f1=0.534F;
        boolean b=false;

        by1 ^= (byte)i11;
        for (i12 = 12; 219 > i12; i12++) {
            if (b) {
                Test.iArrFld[i12 + 1][i12] = i13;
                d -= Test.instanceCount;
                for (i14 = 1; 8 > i14; ++i14) {
                    i11 += (int)d;
                }
                f1 += f1;
            } else {
                if (b) continue;
                f1 += i12;
                vMeth2_check_sum += by1 + i11 + i12 + i13 + Double.doubleToLongBits(d) + i14 + i15 +
                    Float.floatToIntBits(f1) + (b ? 1 : 0) + i16 + i17 + Double.doubleToLongBits(d1);
                return;
            }
            for (i16 = 1; i16 < 8; i16++) {
                Test.iArrFld[i12 - 1][i16 - 1] = (int)d1;
                i11 = i14;
                Test.instanceCount *= Test.instanceCount;
                i13 -= i15;
            }
        }
        vMeth2_check_sum += by1 + i11 + i12 + i13 + Double.doubleToLongBits(d) + i14 + i15 + Float.floatToIntBits(f1) +
            (b ? 1 : 0) + i16 + i17 + Double.doubleToLongBits(d1);
    }

    public void vMeth1(int i4, int i5, int i6) {

        int i7=-33, i8=3, i9=-24973, i10=-209, i18=-36, i19=-176, i20=6, i21=-8;
        float f=-27.678F;
        boolean b1=false;

        i6 <<= (++i6);
        for (i7 = 4; 149 > i7; i7++) {
            for (i9 = 1; 11 > i9; i9++) {
                f /= (Test.iArrFld[i9][i7 + 1] | 1);
                Test.instanceCount |= Test.instanceCount;
                vMeth2();
                i8 *= i10;
                if (b1) break;
                i10 += i6;
            }
            if (i8 != 0) {
                vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + (b1 ? 1 : 0) + i18 +
                    i19 + i20 + i21;
                return;
            }
            if (b1) break;
            for (i18 = 1; i18 < 11; ++i18) {
                for (i20 = 1; i20 < 2; i20++) {
                    if (true) continue;
                    i5 -= 13;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + (b1 ? 1 : 0) + i18 + i19 +
            i20 + i21;
    }

    public void vMeth(byte by, int i2, int i3) {

        int i22=68, i23=11, i24=58673;
        float f2=-10.46F, fArr[][]=new float[N][N];
        byte by2=-1;
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 0.790F);
        FuzzerUtils.init(dArr, 1.75801);

        i2 <<= (i2++);
        vMeth1(18419, i3, 1);
        Test.iArrFld[(102 >>> 1) % N][(i3 >>> 1) % N] += i2;
        i3 -= i2;
        i3 *= i2;
        fArr[(i3 >>> 1) % N][(i2 >>> 1) % N] *= -9;
        Test.iArrFld[(i3 >>> 1) % N][(i3 >>> 1) % N] >>= -16942;
        dArr[(i3 >>> 1) % N] = i22;
        i22 = (int)f2;
        for (i23 = 1; i23 < 229; ++i23) {
            switch (((i24 >>> 1) % 5) + 90) {
            case 90:
                Test.instanceCount = Test.instanceCount;
            case 91:
                try {
                    i2 = (i24 / Test.iArrFld[i23][i23 + 1]);
                    i2 = (i24 / 29439);
                    i2 = (81 % i22);
                } catch (ArithmeticException a_e) {}
                break;
            case 92:
                i24 -= (int)f2;
                break;
            case 93:
                i3 += by2;
            case 94:
                Test.instanceCount = i22;
                break;
            }
        }
        vMeth_check_sum += by + i2 + i3 + i22 + Float.floatToIntBits(f2) + i23 + i24 + by2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-27655, i1=63757, i25=13, i26=253, i27=-156, i28=178;
        float f3=1.348F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 43481L);

        if (false) {
            Test.iArrFld[(i >>> 1) % N][(i >>> 1) % N] = Math.abs(i >>= (i--));
        } else if (Test.bFld) {
            i1 = 1;
            do {
                vMeth(Test.byFld, -48, i1);
            } while (++i1 < 347);
            f3 = 228;
            while ((f3 -= 2) > 0) {
                for (i25 = 11; i25 < 220; ++i25) {
                    for (i27 = 1; 2 > i27; ++i27) {
                        try {
                            i28 = (-11429 % Test.iArrFld[(int)(f3)][i25]);
                            i26 = (Test.iArrFld[i25 - 1][(int)(f3 + 1)] / -39964);
                            i26 = (Test.iArrFld[i27 + 1][i25 + 1] % -62318);
                        } catch (ArithmeticException a_e) {}
                        switch ((i25 % 8) + 16) {
                        case 16:
                            i = 2;
                            break;
                        case 17:
                            Test.iArrFld[(int)(f3 - 1)][i25] |= -5;
                            break;
                        case 18:
                            i /= -7;
                            switch ((((i26 >>> 1) % 1) * 5) + 114) {
                            case 115:
                                lArr[i25] = i;
                                Test.instanceCount = i28;
                                break;
                            }
                            Test.bFld = true;
                            break;
                        case 19:
                            i28 <<= i;
                            break;
                        case 20:
                            switch ((((-134 >>> 1) % 10) * 5) + 92) {
                            case 139:
                                i26 += i27;
                                Test.instanceCount += (long)-1.150F;
                                break;
                            case 114:
                                i26 = i28;
                                i += -1;
                                i = (int)f3;
                                Test.instanceCount |= i25;
                                break;
                            case 104:
                                i26 = i28;
                                Test.instanceCount -= (long)Test.dFld;
                            case 99:
                                i28 = i27;
                                if (Test.bFld) continue;
                                break;
                            case 127:
                                if (Test.bFld) break;
                                Test.dFld = i1;
                                break;
                            case 97:
                            case 111:
                            case 134:
                                i26 *= i27;
                                break;
                            case 118:
                                i &= i27;
                                break;
                            case 107:
                                i += (int)Test.instanceCount;
                                break;
                            }
                            break;
                        case 21:
                            Test.byFld = (byte)-61.209F;
                            break;
                        case 22:
                        case 23:
                            i28 -= i26;
                            break;
                        }
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 f3 = " + i + "," + i1 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 lArr = " + i28 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.bFld = " + Test.instanceCount + "," + Test.byFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
