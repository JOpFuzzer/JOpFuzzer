// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static boolean bFld=false;
    public static volatile float fFld=85.870F;
    public static double dFld=2.126241;
    public int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i8, long l, long l1) {

        int i9=72, i10=-183, i11=-115, i12=0, i13=1, i14=76, i15=10, i16=12;
        double d=1.85447, dArr[]=new double[N];
        float f1=0.35F;
        short s=26469;

        FuzzerUtils.init(dArr, 2.54377);

        for (i9 = 6; i9 < 361; ++i9) {
            i10 += i9;
        }
        for (i11 = 6; i11 < 204; i11++) {
            for (i13 = 1; i13 < 8; ++i13) {
                i12 = -127;
                i15 = 2;
                while (--i15 > 0) {
                    i14 *= (int)d;
                }
                for (f1 = 1; f1 < 2; ++f1) {
                    dArr[i11 - 1] *= f1;
                    if (i13 != 0) {
                    }
                    i8 += (int)(101.852F + (f1 * f1));
                    i14 += (int)f1;
                    i8 = s;
                    s += (short)i14;
                }
                i10 -= (int)d;
            }
        }
        long meth_res = i8 + l + l1 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f1) + i16 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static float fMeth() {

        int i4=-11589, i5=-39007, i6=18, i7=63968, i17=-99, i18=82, i19=0, i20=4, iArr[]=new int[N];
        long l2=19291L, l3=-4193233472207755252L;

        FuzzerUtils.init(iArr, 4);

        i4 = 1;
        do {
            for (i5 = 7; i5 > 1; --i5) {
                i6 = (i6 += (i5 - (-(-57557 - (i6 <<= i5)))));
                i7 = 1;
                while (++i7 < 2) {
                    boolean b=true;
                    if ((!(b = (40823 != (++Test.instanceCount)))) != b) break;
                    i6 = (int)lMeth(23677, Test.instanceCount, l2);
                    i6 += i6;
                    l3 += i6;
                    if (b) break;
                }
            }
            for (i17 = 1; i17 < 7; ++i17) {
                for (i19 = 1; i19 < 2; i19++) {
                    if (Test.bFld) continue;
                    i6 += -56329;
                    iArr[i17] = i17;
                    Test.fFld += i19;
                }
            }
        } while (++i4 < 218);
        long meth_res = i4 + i5 + i6 + i7 + l2 + l3 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(byte by, byte by1, int i1) {

        int i2=-8, i3=6, i21=12861, i22=-7;
        float f2=0.11F;

        if (Test.bFld) {
            i2 = 1;
            while (++i2 < 297) {
                float f=2.996F;
                Test.instanceCount -= (long)(f++);
                i1 -= (i1++);
                i3 *= (int)fMeth();
                f2 *= Test.instanceCount;
                i1 = (int)6771541310431558846L;
                by = (byte)i2;
            }
        } else {
            for (i21 = 1; i21 < 179; ++i21) {
                i3 ^= i2;
                i3 *= i22;
                i3 = (int)Test.instanceCount;
                i1 *= i2;
            }
            Test.fFld = i3;
            i3 >>>= i22;
        }
        long meth_res = by + by1 + i1 + i2 + i3 + Float.floatToIntBits(f2) + i21 + i22;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=113, i23=0, i24=-18048, i25=61460, i26=11, i27=14, i28=-1, i29=24579;
        byte by2=42;
        float f3=0.208F, f4=-25.690F, f5=24.857F;

        iArrFld[(i >>> 1) % N] += Integer.reverseBytes(iMeth(by2, by2, i));
        for (f3 = 10; f3 < 206; f3++) {
            Test.dFld *= i;
            i += (int)(f3 * f3);
            iArrFld[(int)(f3 - 1)] -= i23;
            Test.instanceCount *= i;
            i23 = i;
        }
        i23 *= (int)Test.instanceCount;
        i24 = 1;
        while (++i24 < 392) {
            Test.instanceCount += (i24 * i24);
            i23 += (i24 * i);
            i23 >>= i24;
            for (i25 = i24; i25 < 64; i25++) {
                i23 = -20565;
                Test.fFld *= -9;
                i -= i24;
                i23 /= (int)(i24 | 1);
                i26 = -23827;
                i26 *= (int)1.813F;
            }
            for (i27 = 4; i27 < 64; i27++) {
                for (f4 = 1; 2 > f4; f4++) {
                    i = i;
                    iArrFld[(int)(f4 + 1)] = i;
                    switch ((i24 % 9) + 97) {
                    case 97:
                        if (true) {
                            switch (((i24 >>> 1) % 9) + 92) {
                            case 92:
                                if (Test.bFld) break;
                                fArrFld[i27 - 1] += Test.instanceCount;
                                break;
                            case 93:
                            case 94:
                                fArrFld[(int)(f4 + 1)] += Test.instanceCount;
                                Test.instanceCount = i28;
                                break;
                            case 95:
                                i23 += (int)f4;
                                break;
                            case 96:
                                f5 *= Test.fFld;
                                break;
                            case 97:
                                fArrFld[i27 - 1] = i24;
                            case 98:
                                i29 = i27;
                                break;
                            case 99:
                                i29 += (int)f5;
                            case 100:
                            default:
                                Test.instanceCount += (116 + (f4 * f4));
                            }
                        } else {
                            Test.instanceCount += (long)((long)f4 | Test.instanceCount);
                        }
                        break;
                    case 98:
                        i26 += i25;
                        break;
                    case 99:
                        i23 += (int)f4;
                        break;
                    case 100:
                        Test.instanceCount *= 2966847847603789476L;
                    case 101:
                        by2 += (byte)(f4 - i24);
                        break;
                    case 102:
                        iArrFld[(int)(f4 - 1)] >>= -4;
                    case 103:
                        i = i;
                        break;
                    case 104:
                        iArrFld = FuzzerUtils.int1array(N, (int)31);
                        break;
                    case 105:
                        i += (int)(((f4 * i24) + i27) - i24);
                        break;
                    default:
                        Test.instanceCount += (long)f4;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i by2 f3 = " + i + "," + by2 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("f4 i29 f5 = " + Float.floatToIntBits(f4) + "," + i29 + "," + Float.floatToIntBits(f5));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld iArrFld fArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
