// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=152L;
    public static byte byFld=-56;
    public short sFld=18678;
    public static int iFld=0;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 94.73695);
        FuzzerUtils.init(Test.iArrFld, 94);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2) {

        int i3=61103, i4=192, i5=6, i6=150, i7=-1487, i8=-182, i9=-178, i10=35360;
        double d=57.54498;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 15.53F);

        for (i3 = 9; i3 < 190; i3++) {
            boolean b=true;
            switch (((i3 % 1) * 5) + 73) {
            case 76:
                if (b) continue;
            default:
                for (i5 = 1; 9 > i5; ++i5) {
                    Test.instanceCount += (i5 * i5);
                    i2 <<= (int)Test.instanceCount;
                    if (b) continue;
                }
                for (i7 = i3; i7 < 9; ++i7) {
                    for (i9 = 1; 1 > i9; i9++) {
                        switch (((i3 % 9) * 5) + 89) {
                        case 123:
                            Test.byFld += (byte)(-7 + (i9 * i9));
                            i4 += i9;
                            fArr = FuzzerUtils.float1array(N, (float)117.256F);
                            i8 ^= (int)Test.instanceCount;
                        case 99:
                            i10 += i7;
                            break;
                        case 97:
                            i10 = (int)103.96647;
                            break;
                        case 91:
                            fArr[i9 + 1] /= (i3 | 1);
                            break;
                        case 132:
                            if (false) continue;
                            break;
                        case 113:
                            i10 += i3;
                        case 120:
                            Test.dArrFld[i3 - 1] -= d;
                            break;
                        case 131:
                            i6 += (i9 * i9);
                        case 92:
                            Test.instanceCount ^= i10;
                        default:
                            if (true) break;
                        }
                    }
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static float fMeth(int i1, short s) {


        vMeth1(i1);
        long meth_res = i1 + s;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(int i, float f, long l) {

        double d1=0.53086;
        int i12=197, i13=-233, i14=8, i15=-51448;

        i ^= (int)(Math.abs(fMeth(5172, sFld)) - -2);
        for (int i11 : Test.iArrFld) {
            Test.iArrFld[(-48427 >>> 1) % N] = i11;
            Test.iArrFld[(i11 >>> 1) % N] -= (int)d1;
        }
        Test.iArrFld[(i >>> 1) % N] >>= -14;
        for (i12 = 141; i12 > 8; i12--) {
            i13 += (i12 + i13);
            for (i14 = i12; i14 < 12; i14++) {
                i = (int)Test.instanceCount;
                Test.instanceCount += (((i14 * i) + i12) - i13);
                i15 += (int)(-35046L + (i14 * i14));
                lArrFld[i12 - 1] >>= Test.instanceCount;
                lArrFld[i12 - 1] -= sFld;
                d1 /= ((long)(d1) | 1);
                Test.iArrFld[i12 + 1] += (int)f;
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + l + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15;
    }

    public void mainTest(String[] strArr1) {

        float f1=85.1015F, fArr1[][]=new float[N][N];
        long l1=-1695784293L, l2=104092184L;
        int i16=220, i17=-184, i18=147, i20=-9068, i21=-8, i22=-11, i23=1670;
        double d2=-2.45111;
        boolean b1=false;

        FuzzerUtils.init(fArr1, 0.309F);

        vMeth(Test.iFld, f1, Test.instanceCount);
        Test.instanceCount = Test.iFld;
        Test.byFld <<= (byte)-59377L;
        for (l1 = 3; l1 < 231; ++l1) {
            sFld *= (short)d2;
            try {
                Test.iFld = (-36800 / i16);
                i16 = (i16 % 913599420);
                Test.iFld = (Test.iFld % Test.iFld);
            } catch (ArithmeticException a_e) {}
            if (b1) {
                i16 |= -8464;
            } else {
                f1 += (l1 + f1);
                for (i17 = 110; l1 < i17; i17 -= 3) {
                    try {
                        i16 = (i18 % -212);
                        i16 = (140 / i17);
                        i18 = (-21187 % i16);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[(int)(l1 - 1)] = (int)3636555298040717666L;
                    Test.iArrFld = Test.iArrFld;
                    lArrFld = lArrFld;
                }
                if (b1) {
                    for (i20 = 1; i20 < 110; ++i20) {
                        i22 = 1;
                        while (++i22 < 2) {
                            i16 = i17;
                            Test.iArrFld[i20] = i22;
                            Test.instanceCount = -21544;
                            Test.dArrFld[(int)(l1)] += i18;
                            sFld -= sFld;
                            switch ((i20 % 4) + 59) {
                            case 59:
                                i16 += (i22 * l2);
                                l2 = Test.iFld;
                                i23 |= 9;
                            case 60:
                                i23 = i22;
                                i18 += i16;
                                break;
                            case 61:
                                i21 = i23;
                                lArrFld[(int)(l1)] = i16;
                                break;
                            case 62:
                                Test.iArrFld[i22 - 1] |= i23;
                                break;
                            }
                        }
                    }
                } else if (b1) {
                    fArr1[(int)(l1)][(int)(l1 - 1)] -= i17;
                } else {
                    Test.instanceCount += Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("f1 l1 i16 = " + Float.floatToIntBits(f1) + "," + l1 + "," + i16);
        FuzzerUtils.out.println("d2 b1 i17 = " + Double.doubleToLongBits(d2) + "," + (b1 ? 1 : 0) + "," + i17);
        FuzzerUtils.out.println("i18 i20 i21 = " + i18 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 l2 i23 = " + i22 + "," + l2 + "," + i23);
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld sFld = " + Test.instanceCount + "," + Test.byFld + "," +
            sFld);
        FuzzerUtils.out.println("Test.iFld Test.dArrFld Test.iArrFld = " + Test.iFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
