// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-30546L;
    public static short sFld=-7683;
    public static float fFld=-1.749F;
    public static boolean bFld=true;
    public long lFld=10235L;
    public float fArrFld[]=new float[N];

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static long lMeth(byte by) {

        int i=17278;

        i >>= i;
        long meth_res = by + i;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(long l, int i9) {

        int i10=64943, i11=-47890, i12=-124, i13=-121, i14=3, i15=62629, iArr[]=new int[N];
        byte by1=60;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(lArr, -43L);

        for (i10 = 241; i10 > 13; i10 -= 2) {
            for (i12 = 1; i12 < 14; i12++) {
                for (i14 = 1; i14 < 2; ++i14) {
                    boolean b=false;
                    switch (((i14 % 2) * 5) + 48) {
                    case 51:
                        iArr[i12 + 1] = i12;
                        i9 %= -210;
                    case 54:
                        iArr[(i15 >>> 1) % N] = i15;
                        lArr[i10 - 1][i10 - 1] <<= -1037649525L;
                        Test.sFld >>>= (short)Test.instanceCount;
                        break;
                    default:
                        i15 = -5397;
                        iArr = iArr;
                    }
                    i9 += (i14 * i14);
                    i13 -= i9;
                    i9 = by1;
                    if (b) break;
                }
            }
        }
        long meth_res = l + i9 + i10 + i11 + i12 + i13 + i14 + i15 + by1 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, int i4, float f1) {

        int i5=74, i6=-25, i7=14, i8=57557, i16=-177, i17=8741;

        for (i5 = 362; i5 > 4; i5--) {
            for (i7 = i5; 5 > i7; ++i7) {
                i4 = (i8++);
                i6 += i7;
                i8 += (int)(iMeth1(Test.instanceCount, i8) * f1);
                i6 -= (int)f1;
                i8 = i4;
                i6 = i6;
                i8 += i7;
                for (i16 = i7; i16 < 1; i16++) {
                    i6 *= i5;
                    i3 += (i16 * i16);
                    f1 += (1 + (i16 * i16));
                    i17 <<= i8;
                    i4 *= (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i16 + i17;
    }

    public static int iMeth() {

        int i2=57597, i18=32414, i19=9, i20=-70, i21=-9, iArr1[]=new int[N];
        byte by2=-1;
        float fArr[][]=new float[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, -27.55F);
        FuzzerUtils.init(iArr1, -105);
        FuzzerUtils.init(lArr1, 14L);

        Test.instanceCount = (++i2);
        vMeth(i2, -14, -1.242F);
        i2 >>= by2;
        for (i18 = 12; 366 > i18; i18++) {
            fArr[i18][i18] -= Test.fFld;
            switch (((i18 % 2) * 5) + 77) {
            case 84:
                i19 = 10765;
                if (Test.bFld) continue;
                for (i20 = 1; i20 < 5; i20++) {
                    i2 = i19;
                    i19 *= (int)-82.70550;
                    i21 += (i20 * i20);
                    try {
                        iArr1[i20] = (i19 / i2);
                        i19 = (i18 % 58457);
                        i21 = (i18 % i19);
                    } catch (ArithmeticException a_e) {}
                    i19 += (i20 * i20);
                    Test.instanceCount -= i19;
                }
            case 79:
                Test.instanceCount += (i18 | Test.instanceCount);
                break;
            default:
                i2 <<= 124;
            }
        }
        long meth_res = i2 + by2 + i18 + i19 + i20 + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=14767;
        float f=2.238F;
        int i1=21777, i22=14217, i23=-40003, i24=-58880, i25=-8193, iArr2[][]=new int[N][N];
        long l2=2082166128L, lArr2[]=new long[N];
        byte by3=-72;
        double d=2.85421;

        FuzzerUtils.init(iArr2, 61434);
        FuzzerUtils.init(lArr2, 29296L);

        s = (short)lMeth((byte)((Test.instanceCount - f) - (f + 10908L)));
        i1 *= (int)((long)((4 - (-(-1.19744 - (-(i1 * i1))))) + iMeth()) & i1);
        Test.instanceCount = Test.instanceCount;
        i22 = 343;
        do {
            i1 += i22;
            i1 >>>= -25389;
            for (l2 = 2; 73 > l2; ++l2) {
                for (i24 = 1; i24 < 2; i24++) {
                    iArr2[i22][i24 - 1] &= i24;
                    f *= i24;
                    i23 >>= (int)l2;
                    Test.instanceCount -= (long)f;
                    if (Test.bFld) {
                        Test.instanceCount += i24;
                        if (Test.bFld) break;
                        by3 = (byte)i1;
                        i23 <<= (int)l2;
                    } else if (Test.bFld) {
                        lArr2[i24 - 1] += Test.instanceCount;
                        i23 -= -9166;
                        fArrFld[(int)(l2 - 1)] = 80;
                        lArr2[i22 - 1] *= i1;
                    } else if (Test.bFld) {
                        d *= i23;
                    } else {
                        i25 += (i24 | i25);
                        i23 += (i24 - Test.instanceCount);
                    }
                    i25 += (int)-2.1002F;
                }
                try {
                    i1 = (i1 / i23);
                    iArr2[(int)(l2 - 1)][(int)(l2 + 1)] = (i24 % -38837);
                    i25 = (14590 / i25);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount *= l2;
                lFld -= i25;
                iArr2[i22 + 1][i22 - 1] -= i1;
                i25 &= i24;
            }
        } while (--i22 > 0);

        FuzzerUtils.out.println("s f i1 = " + s + "," + Float.floatToIntBits(f) + "," + i1);
        FuzzerUtils.out.println("i22 l2 i23 = " + i22 + "," + l2 + "," + i23);
        FuzzerUtils.out.println("i24 i25 by3 = " + i24 + "," + i25 + "," + by3);
        FuzzerUtils.out.println("d iArr2 lArr2 = " + Double.doubleToLongBits(d) + "," + FuzzerUtils.checkSum(iArr2) +
            "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld lFld fArrFld = " + (Test.bFld ? 1 : 0) + "," + lFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
