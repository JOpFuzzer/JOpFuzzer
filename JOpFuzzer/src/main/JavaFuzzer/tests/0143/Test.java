// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public static double dFld=-103.42296;
    public static float fFld=1.906F;
    public boolean bFld=false;
    public int iFld=7;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i4, int i5) {

        int i6=1, i7=-209, i8=-6, i9=-6, i10=10364, i11=15649, i12=35096, iArr[]=new int[N];
        float f=-87.18F, fArr[]=new float[N];
        double d1=0.69843;

        FuzzerUtils.init(fArr, 0.146F);
        FuzzerUtils.init(iArr, -130);

        fArr[(i5 >>> 1) % N] *= i4;
        iArr[(-200 >>> 1) % N] <<= (int)Test.instanceCount;
        for (i6 = 10; i6 < 165; ++i6) {
            i4 += (((i6 * i6) + Test.instanceCount) - Test.instanceCount);
            i8 = 1;
            while (++i8 < 10) {
                i4 += i8;
                i4 *= i8;
                iArr[i8] = (int)f;
            }
        }
        for (i9 = 6; 226 > i9; ++i9) {
            i10 = i8;
            i11 = 7;
            do {
                i12 = 1;
                while (++i12 < 1) {
                    if (i8 != 0) {
                        return ((int)(i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 +
                            Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                            FuzzerUtils.checkSum(iArr))) % 2 > 0;
                    }
                    i5 *= i7;
                    d1 -= i9;
                }
            } while (--i11 > 0);
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth1(int i1) {

        int i2=10, i3=-46055;
        short s=12956;

        for (i2 = 4; 135 > i2; i2++) {
            float f1=14.862F;
            if (bMeth(i2, i3)) break;
            Test.instanceCount <<= Test.instanceCount;
            i3 += i2;
            i3 <<= i2;
            f1 -= i1;
            i1 *= i3;
            Test.instanceCount = s;
        }
        vMeth1_check_sum += i1 + i2 + i3 + s;
    }

    public void vMeth(double d, int i) {

        int i13=52, i14=125, i15=-2, i16=28991, i17=37483, i18=-12, i19=62892, i20=1, iArr1[][]=new int[N][N];
        byte by=7;

        FuzzerUtils.init(iArr1, -29573);

        vMeth1(i);
        for (i13 = 329; i13 > 17; i13 -= 3) {
            i += i13;
        }
        i15 = 1;
        while (++i15 < 297) {
            iArrFld[i15] -= i14;
            for (i16 = 1; i16 < 6; i16++) {
                i += (int)(-9L + (i16 * i16));
                Test.instanceCount <<= i13;
                try {
                    i14 = (i16 % iArrFld[i15]);
                    i18 = (-20396 / i17);
                    i = (iArrFld[i16 - 1] % -214);
                } catch (ArithmeticException a_e) {}
                i14 += by;
                i14 += i15;
                for (i19 = 2; i19 > 1; i19--) {
                    by += (byte)(i19 + i16);
                    if (false) break;
                }
                iArr1 = iArr1;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i13 + i14 + i15 + i16 + i17 + i18 + by + i19 + i20 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i21=-248, i22=-59925, i23=-5, i24=-8772, i25=-16606, i26=41000, i27=3, iArr2[]=new int[N];
        long lArr[]=new long[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr, 155L);
        FuzzerUtils.init(fArr1, 2.946F);
        FuzzerUtils.init(iArr2, 169);

        vMeth(Test.dFld, i21);
        i21 -= -6;
        i21 = i21;
        if (bFld) {
            Test.fFld *= i21;
            i21 = -43;
            i21 *= (int)-1.234F;
        } else {
            for (i22 = 320; 20 < i22; i22 -= 2) {
                switch ((((-13 >>> 1) % 8) * 5) + 33) {
                case 60:
                    Test.fFld += (((i22 * i23) + Test.fFld) - Test.instanceCount);
                    i23 = (int)Test.fFld;
                    break;
                case 44:
                case 40:
                case 47:
                    lArr[i22] = i23;
                    Test.instanceCount += (i22 ^ Test.instanceCount);
                    for (i24 = 5; 167 > i24; i24++) {
                        fArr1[i22] -= Test.fFld;
                        if (bFld) continue;
                        iArrFld = iArr2;
                    }
                    break;
                case 62:
                    i23 += i22;
                    break;
                case 54:
                    i25 *= iFld;
                    i26 = 1;
                    do {
                        Test.instanceCount += (i26 + i26);
                        lArr[i22] -= i26;
                        iFld -= (int)Test.instanceCount;
                        i27 = 1;
                        do {
                            i21 = i21;
                            bFld = bFld;
                        } while (++i27 < 1);
                        i25 += (i26 + i27);
                    } while (++i26 < 167);
                    if (bFld) {
                        Test.dFld = Test.fFld;
                        Test.fFld += i22;
                    } else if (false) {
                        iArr2[i22 - 1] >>= i26;
                    } else if (false) {
                        i25 = i25;
                    } else {
                        i21 |= i26;
                    }
                    break;
                case 71:
                    Test.instanceCount += i22;
                case 39:
                    i21 = (int)Test.instanceCount;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 lArr fArr1 = " + i27 + "," + FuzzerUtils.checkSum(lArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("bFld iFld iArrFld = " + (bFld ? 1 : 0) + "," + iFld + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
