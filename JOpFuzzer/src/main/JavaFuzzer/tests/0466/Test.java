// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=14648L;
    public static int iFld=-33884;
    public static float fFld=89.565F;
    public static double dFld=-10.73045;
    public static boolean bArrFld[]=new boolean[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.iArrFld, 24845);
    }

    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public double dMeth(int i1, int i2) {


        i1 = (--i2);
        long meth_res = i1 + i2;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1() {

        int i3=-4, i4=-104, i5=-12, i6=5, i7=419, i8=211, i9=208, i10=56002, i11=-16, i12=-89, iArr[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr, 206);

        for (i3 = 381; i3 > 5; i3--) {
            if (b) continue;
            i4 %= (int)((long)(Test.dFld) | 1);
        }
        iArr[(i4 >>> 1) % N] = 192;
        for (i5 = 6; i5 < 144; i5++) {
            try {
                i7 = (-136 / iArr[i5 - 1]);
                iArr[i5 + 1] = (i5 / -90);
                i4 = (i7 / i6);
            } catch (ArithmeticException a_e) {}
            Test.dFld -= i8;
            Test.iFld = -60742;
            for (i9 = 1; i9 < 11; ++i9) {
                iArr[i9 + 1] *= -8;
                Test.instanceCount += i9;
                for (i11 = 1; i11 < 2; ++i11) {
                    i7 = i5;
                    i6 = (int)Test.instanceCount;
                    Test.instanceCount += 1414600575L;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d1) {

        short s=-22475;
        int i13=109, i14=-10, i15=-13, i16=-21200, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -4);

        vMeth1();
        Test.iFld += (int)106.651F;
        Test.iFld ^= (int)3043750379L;
        Test.bArrFld[(Test.iFld >>> 1) % N] = true;
        Test.iFld += (int)Test.dFld;
        Test.instanceCount += Test.iFld;
        iArr1[(Test.iFld >>> 1) % N] -= s;
        for (i13 = 1; 154 > i13; ++i13) {
            Test.instanceCount -= i14;
            try {
                i14 = (i14 / 25975);
                Test.iFld = (iArr1[i13 - 1] / 186);
                Test.iFld = (iArr1[i13] % 869387287);
            } catch (ArithmeticException a_e) {}
            i14 += i13;
            for (i15 = 1; i15 < 10; i15++) {
                Test.instanceCount *= -57158;
                Test.iFld += s;
                i14 = i13;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + s + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr1);
    }

    public int iMeth(int i, byte by, long l) {

        double d=0.39638;
        int i17=-17145, i18=129, i19=-142, i20=11, iArr2[][]=new int[N][N];
        boolean b1=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr2, 43207);
        FuzzerUtils.init(byArr, (byte)23);

        Test.fFld -= (float)dMeth(Math.min((int)(d * l), (int)(Test.fFld - d)), -(i--));
        vMeth(Test.dFld);
        iArr2[(i >>> 1) % N][(i >>> 1) % N] = i;
        i &= (int)-180L;
        byArr[(Test.iFld >>> 1) % N] -= (byte)Test.fFld;
        i17 = 1;
        do {
            for (i18 = 1; i18 < 5; ++i18) {
                i20 = 1;
                do {
                    iArr2[i20 + 1][i20 - 1] *= i20;
                    i = -2374;
                    Test.instanceCount = i;
                    if (b1) continue;
                    Test.fFld += Test.fFld;
                    i19 += i20;
                } while (++i20 < 2);
                Test.fFld += (((i18 * by) + i19) - Test.instanceCount);
            }
        } while (++i17 < 326);
        long meth_res = i + by + l + Double.doubleToLongBits(d) + i17 + i18 + i19 + i20 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by1=88;
        int i21=-5, i22=67, i23=-5, i24=-29060, i25=-12, i26=4, i27=-107;
        boolean b2=true;
        short s1=-6441;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -46227L);

        Test.instanceCount ^= Test.instanceCount;
        Test.iFld = iMeth(Test.iFld, by1, -1823395973L);
        Test.iFld = 181;
        for (i21 = 18; i21 < 362; ++i21) {
            for (i23 = 73; i23 > 1; --i23) {
                switch (((i23 % 2) * 5) + 10) {
                case 20:
                    Test.iArrFld[(-3 >>> 1) % N][i23] += i23;
                    b2 = b2;
                    switch ((i23 % 2) + 79) {
                    case 79:
                        Test.fFld = s1;
                        Test.instanceCount += (i23 | (long)Test.fFld);
                        Test.iFld <<= (int)Test.instanceCount;
                        break;
                    case 80:
                        for (i25 = 1; i25 < 2; i25++) {
                            lArr[i21 + 1] = i22;
                            i24 = i23;
                            Test.instanceCount = i21;
                            i24 += i25;
                            switch (((7 >>> 1) % 1) + 63) {
                            case 63:
                            default:
                                i26 -= (int)Test.instanceCount;
                                b2 = true;
                                Test.dFld = s1;
                                i22 &= 18426;
                            }
                            s1 = (short)Test.instanceCount;
                            Test.instanceCount += i22;
                            Test.fFld *= -13;
                            i24 += (i25 | Test.instanceCount);
                        }
                        i22 *= i23;
                        break;
                    default:
                        Test.instanceCount = Test.instanceCount;
                        i27 = i25;
                        Test.iArrFld[i21 - 1][i21 - 1] -= i27;
                    }
                    break;
                case 12:
                    if (b2) continue;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("by1 i21 i22 = " + by1 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 b2 = " + i23 + "," + i24 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("s1 i25 i26 = " + s1 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 lArr = " + i27 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.bArrFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.bArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
