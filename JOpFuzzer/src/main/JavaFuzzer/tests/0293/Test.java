// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4359915536812188863L;
    public static byte byFld=-22;
    public static volatile float fFld=2.978F;
    public boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 1.41908);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5, int i6, double d1) {

        int i7=47465, i8=-78, i9=-48657, i10=0, i11=52635, i12=-36432, i13=19, i14=58, iArr1[]=new int[N];
        float f=0.870F, fArr[]=new float[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, -13);
        FuzzerUtils.init(fArr, 0.768F);

        for (i7 = 3; i7 < 136; ++i7) {
            i5 += (int)Test.instanceCount;
            f -= (float)d1;
            f += (i7 * i7);
            for (i9 = 1; i9 < 12; ++i9) {
                i11 = 1;
                do {
                    if (b) {
                        try {
                            iArr1[i9 - 1] = (123 / i8);
                            iArr1[i11] = (i11 % -124);
                            iArr1[i11 - 1] = (i12 % iArr1[i7 + 1]);
                        } catch (ArithmeticException a_e) {}
                        Test.bArrFld[i11 + 1] = true;
                        Test.instanceCount += (long)f;
                    }
                    i12 *= (int)d1;
                } while (++i11 < 2);
            }
        }
        for (i13 = 2; i13 < 360; i13++) {
            Test.instanceCount += (58264 + (i13 * i13));
        }
        Test.instanceCount <<= i10;
        fArr = fArr;
        vMeth2_check_sum += i5 + i6 + Double.doubleToLongBits(d1) + i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + i11
            + i12 + (b ? 1 : 0) + i13 + i14 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(byte by, double d) {

        int i2=12, i3=1300, i4=-6, i15=-48191, i16=-11, i17=49511, iArr2[]=new int[N];
        double d2=-126.123991;
        boolean b1=false;

        FuzzerUtils.init(iArr2, -71);

        i2 *= (int)d;
        for (i3 = 10; i3 < 223; ++i3) {
            vMeth2(i2, -135, -5.29323);
            iArr2 = iArr2;
            for (i15 = 1; 8 > i15; i15++) {
                i16 -= i3;
                by += (byte)i15;
                i4 = (int)d;
                for (d2 = 1; d2 < 2; ++d2) {
                    i4 += (-106 + (d2 * d2));
                    i16 += i17;
                    switch ((i3 % 1) + 89) {
                    case 89:
                        i16 = i2;
                        b1 = false;
                        if (i16 != 0) {
                            vMeth1_check_sum += by + Double.doubleToLongBits(d) + i2 + i3 + i4 + i15 + i16 +
                                Double.doubleToLongBits(d2) + i17 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr2);
                            return;
                        }
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += by + Double.doubleToLongBits(d) + i2 + i3 + i4 + i15 + i16 + Double.doubleToLongBits(d2) +
            i17 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(long l, int i1) {

        double d3=0.39973;
        int i18=-3, i19=-13124, i20=-241, i21=153, i22=0, i23=-110, i24=5, iArr3[]=new int[N];
        boolean b2=false;

        FuzzerUtils.init(iArr3, -28049);

        vMeth1(Test.byFld, d3);
        i1 = (int)-1.837F;
        for (i18 = 12; i18 < 242; i18++) {
            switch ((i18 % 1) + 53) {
            case 53:
                i20 = 1;
                while (++i20 < 7) {
                    for (i21 = 1; i21 > i18; i21 -= 3) {
                        i22 |= (int)-80L;
                        Test.instanceCount = i19;
                        Test.instanceCount = (long)Test.fFld;
                        iArr3[i21] &= -228;
                        Test.byFld += (byte)(i21 * i21);
                        Test.fFld += -3441;
                    }
                    for (i23 = 1; i23 < 1; i23++) {
                        iArr3[i18] = (int)Test.instanceCount;
                        i19 = (int)Test.instanceCount;
                    }
                }
                break;
            default:
                if (b2) break;
            }
        }
        vMeth_check_sum += l + i1 + Double.doubleToLongBits(d3) + i18 + i19 + i20 + i21 + i22 + i23 + i24 + (b2 ? 1 :
            0) + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=9, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 57);

        Test.dArrFld[(i >>> 1) % N] *= (++iArr[(i >>> 1) % N]);
        vMeth(Test.instanceCount, i);
        bFld = false;
        Test.instanceCount += i;

        FuzzerUtils.out.println("i iArr = " + i + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("bFld Test.dArrFld Test.bArrFld = " + (bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
