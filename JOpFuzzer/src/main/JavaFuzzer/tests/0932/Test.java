// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1666546229284874747L;
    public byte byFld=-57;
    public static byte byFld1=-52;
    public static float fFld=-34.304F;
    public short sFld=-9805;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -6553851823357299776L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        double d2=-1.25694;
        int i7=150;

        d2 = i7;
        long meth_res = Double.doubleToLongBits(d2) + i7;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(double d1) {

        int i3=11, i4=237, i5=-117, i6=-202, i8=-10, i9=-22674, i10=-25500, i11=-6, iArr[]=new int[N];
        float f=91.431F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -9.388F);
        FuzzerUtils.init(iArr, 4);

        for (i3 = 3; i3 < 300; i3++) {
            switch ((i3 % 2) + 6) {
            case 6:
                for (i5 = 6; i5 > 1; --i5) {
                    if (i3 != (-lMeth())) break;
                    Test.instanceCount += (i5 * i5);
                    fArr[i5 - 1] *= i4;
                    f = i3;
                    iArr[i3] = -97;
                }
                for (i8 = 6; i8 > 1; i8 -= 2) {
                    i4 *= i5;
                    fArr = fArr;
                    for (i10 = 1; i10 < 3; ++i10) {
                        i4 += (i10 - Test.instanceCount);
                        i4 += (int)f;
                        d1 = Test.byFld1;
                    }
                }
                break;
            case 7:
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i8 + i9 + i10 +
            i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i2) {

        double d3=0.31993;
        int i12=9, i13=82, i14=9, i15=40481, i16=48, iArr1[]=new int[N];
        byte byArr[]=new byte[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(byArr, (byte)-88);
        FuzzerUtils.init(iArr1, -19);
        FuzzerUtils.init(lArr, 6719911811085529254L);

        byArr[(-4 >>> 1) % N] = (byte)Test.instanceCount;
        vMeth(d3);
        d3 += i2;
        switch (((i2 >>> 1) % 2) + 105) {
        case 105:
            for (i12 = 12; 280 > i12; ++i12) {
                i14 = 1;
                while (++i14 < 6) {
                    Test.fFld += i14;
                    try {
                        i13 = (i13 % iArr1[i12]);
                        iArr1[i14 + 1] = (i12 % -446859323);
                        i2 = (i14 / iArr1[i14 - 1]);
                    } catch (ArithmeticException a_e) {}
                }
            }
            for (i15 = 3; 197 > i15; i15++) {
                i16 += Test.byFld1;
            }
            iArr1[(i15 >>> 1) % N] -= 8176;
            break;
        case 106:
        }
        i2 *= -12618;
        lArr = FuzzerUtils.long2array(N, (long)-226678064L);
        iArr1[(i13 >>> 1) % N] = (int)d3;
        i2 += (int)Test.instanceCount;
        long meth_res = i2 + Double.doubleToLongBits(d3) + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-19, i1=7006, i17=-44, i18=-158, i19=8599, i20=2, iArr2[]=new int[N];
        double d=-2.47369, d4=-1.103022;
        boolean b1=true;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr2, 92);
        FuzzerUtils.init(fArr1, 25.539F);

        i = 1;
        do {
            switch ((i % 7) + 71) {
            case 71:
                if (b1) {
                    for (d = 104; d > 1; d -= 2) {
                        i1 += (int)(((d * i) + i) - byFld);
                        i1 = (int)((Test.instanceCount--) + Math.min(i, i1));
                        iMeth(i1);
                        i1 >>= i;
                        i17 = 1;
                        while (++i17 < 3) {
                            i1 = (int)Test.fFld;
                        }
                        iArr2[i - 1] &= i1;
                        iArr2[i] += i;
                        i1 *= (int)Test.instanceCount;
                        i1 = i;
                    }
                    i18 = 1;
                    do {
                        if (b1) {
                            for (i19 = 1; i19 < 1; i19 += 2) {
                                boolean b=false;
                                i1 = sFld;
                                iArr2[i19] = i;
                                if (b) break;
                                i1 *= (int)Test.instanceCount;
                                i1 = i19;
                            }
                            Test.byFld1 = (byte)4;
                            i1 += -58783;
                            Test.fFld += i19;
                        } else {
                        }
                        Test.byFld1 >>= (byte)i19;
                        fArr1[i] *= -24550;
                    } while (++i18 < 104);
                    i20 = 9;
                } else if (true) {
                    d4 = Test.instanceCount;
                }
            case 72:
                if (false) break;
                break;
            case 73:
                b1 = b1;
                break;
            case 74:
                Test.instanceCount -= -2;
            case 75:
                Test.lArrFld[i] = i20;
                break;
            case 76:
                i20 = (int)Test.fFld;
                break;
            case 77:
                try {
                    i20 = (-2102212767 / i20);
                    i20 = (iArr2[i] % -28086);
                    iArr2[i] = (i17 / 39023);
                } catch (ArithmeticException a_e) {}
                break;
            }
        } while (++i < 241);

        FuzzerUtils.out.println("i d i1 = " + i + "," + Double.doubleToLongBits(d) + "," + i1);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 b1 d4 = " + i20 + "," + (b1 ? 1 : 0) + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("iArr2 fArr1 = " + FuzzerUtils.checkSum(iArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount byFld Test.byFld1 = " + Test.instanceCount + "," + byFld + "," +
            Test.byFld1);
        FuzzerUtils.out.println("Test.fFld sFld Test.lArrFld = " + Float.floatToIntBits(Test.fFld) + "," + sFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
