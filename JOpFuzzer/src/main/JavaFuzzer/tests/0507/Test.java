// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=4090998816L;
    public int iFld=8;
    public static byte byFld=83;
    public static int iFld1=8;
    public static volatile double dFld=2.25182;
    public static boolean bFld=false;
    public static int iFld2=7;
    public static byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-30);
        FuzzerUtils.init(Test.iArrFld, -15013);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        float f1=-1.231F;
        int i16=-230, i17=-29447, iArr[]=new int[N];
        double d=39.57325;
        boolean b=true, bArr[][]=new boolean[N][N];
        short s=31260;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -48126);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(byArr, (byte)-45);

        f1 = f1;
        Test.byFld = (byte)Test.iFld1;
        for (i16 = 19; i16 < 339; i16++) {
            iArr[i16 + 1] = (int)Test.instanceCount;
            iArr[i16] |= i17;
            Test.iFld1 = 4;
            iArr[i16 - 1] = (int)Test.instanceCount;
            f1 = (float)Test.dFld;
        }
        d = 1;
        while (++d < 125) {
            iArr[(int)(d + 1)] <<= (int)Test.instanceCount;
            bArr[(int)(d)][(int)(d)] = b;
        }
        switch (((i16 >>> 1) % 6) + 6) {
        case 6:
            i17 >>= i17;
            byArr[(Test.iFld1 >>> 1) % N] -= (byte)Test.iFld1;
            i17 += Test.byFld;
        case 7:
            i17 = (int)f1;
            break;
        case 8:
            iArr = iArr;
            break;
        case 9:
            Test.byFld = (byte)i17;
        case 10:
            s -= (short)-12;
        case 11:
            Test.iFld1 += s;
            break;
        default:
            Test.byFld = (byte)5475;
        }
        long meth_res = Float.floatToIntBits(f1) + i16 + i17 + Double.doubleToLongBits(d) + (b ? 1 : 0) + s +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i11, int i12, int i13) {

        int i14=9, i15=-114, i18=5, i19=9, i20=17530, iArr1[]=new int[N];
        float f2=1.197F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 135L);
        FuzzerUtils.init(iArr1, -57375);

        for (i14 = 6; i14 < 318; i14++) {
            i15 <<= (++i13);
            lArr1[i14 - 1] -= lMeth();
            i13 = i14;
        }
        for (i18 = 6; i18 < 303; ++i18) {
            i20 = 1;
            while (++i20 < 6) {
                if (Test.bFld) break;
                switch ((i18 % 3) + 76) {
                case 76:
                    Test.iFld1 -= (int)f2;
                    break;
                case 77:
                    i19 += i20;
                    Test.byArrFld = Test.byArrFld;
                    break;
                case 78:
                    if (Test.bFld) break;
                    Test.instanceCount -= Test.byFld;
                    Test.dFld -= i19;
                    break;
                }
                try {
                    iArr1[i18 - 1] = (Test.iFld1 / i18);
                    iArr1[i18 - 1] = (i15 / iArr1[i18]);
                    i12 = (i19 / -507869230);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = i11 + i12 + i13 + i14 + i15 + i18 + i19 + i20 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4) {

        int i5=10, i6=-7028, i7=48, i8=78, i9=-31, i10=45226, iArr2[]=new int[N];
        byte by=-47;
        float f3=24.605F;
        long lArr[]=new long[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(lArr, 214L);
        FuzzerUtils.init(sArr, (short)19334);
        FuzzerUtils.init(iArr2, 4);

        for (i5 = 3; i5 < 213; i5++) {
            for (i7 = 8; i7 > i5; i7--) {
                by = (byte)i7;
                i4 -= (int)(((Test.instanceCount - i5) - (i7 - i8)) * i4);
                i4 >>>= i8;
                lArr = (lArr = (lArr = (lArr = lArr)));
            }
            try {
                i8 = (-22934 / i5);
                i4 = (i7 / -1255873429);
                i4 = (36524 % i7);
            } catch (ArithmeticException a_e) {}
            for (i9 = 1; i9 < 8; i9++) {
                i8 = 23;
            }
            i6 = (-(i10 - iMeth(Test.iFld2, Test.iFld2, i10)));
            f3 -= i10;
            i6 += (((i5 * Test.instanceCount) + i5) - i5);
            sArr[i5] = sArr[i5];
            iArr2[i5] = i7;
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + by + i9 + i10 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=9, i1=248, i2=40533, i3=-50111, i22=0, i23=-8, i24=9, i25=-46333, i27=12086, i28=3463;
        double dArr[]=new double[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(dArr, 42.49919);
        FuzzerUtils.init(lArr2, -9L);

        for (i = 6; i < 151; i++) {
            float f=-31.278F;
            Test.instanceCount *= (long)((i1++) + (--f));
            for (i2 = 6; i2 < 173; ++i2) {
                dArr[i2] = Math.min(i, ~(i1 + 135));
                i3 += (int)((Test.instanceCount * (i - i3)) * ((i1 + Test.instanceCount) * (i1 * Test.instanceCount)));
                i1 += (i3++);
                iFld = (i3--);
                vMeth(Test.iFld1);
            }
            f = i;
            f -= i22;
            for (i23 = 2; i23 < 173; i23++) {
                Test.dFld -= i;
                Test.instanceCount += -63703;
                Test.iFld2 = i2;
                iFld = (int)Test.instanceCount;
                i25 = 1;
                do {
                    f = (float)Test.dFld;
                    f = Test.instanceCount;
                } while (++i25 < 2);
                Test.iArrFld[i23] = i22;
                Test.byFld = (byte)f;
                Test.iFld1 += (((i23 * Test.instanceCount) + Test.instanceCount) - f);
            }
            Test.dFld -= Test.instanceCount;
        }
        i1 = i;
        for (int i26 : Test.iArrFld) {
            for (i27 = 63; i27 > 2; --i27) {
                Test.iFld1 = (int)Test.instanceCount;
                Test.iFld2 -= i27;
                Test.dFld += iFld;
            }
            lArr2[(iFld >>> 1) % N] -= 42;
            i28 = (int)Test.instanceCount;
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i22 i23 = " + i3 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i27 = " + i24 + "," + i25 + "," + i27);
        FuzzerUtils.out.println("i28 dArr lArr2 = " + i28 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.iFld1 Test.dFld Test.bFld = " + Test.iFld1 + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld2 Test.byArrFld Test.iArrFld = " + Test.iFld2 + "," +
            FuzzerUtils.checkSum(Test.byArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
