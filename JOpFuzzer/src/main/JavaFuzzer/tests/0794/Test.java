// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=62989L;
    public static float fFld=55.249F;
    public static boolean bFld=false;
    public static byte byFld=-32;
    public double dFld=-27.24089;
    public static short sFld=-19042;
    public static short sFld1=-3670;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i3, boolean b, boolean b1) {

        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        bArr[(i3 >>> 1) % N] = b;
        Test.fFld = i3;
        long meth_res = i3 + (b ? 1 : 0) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(bArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(long l, long l1, int i2) {

        float f=-53.394F;

        f += (fMeth(i2, Test.bFld, Test.bFld) + l);
        vMeth1_check_sum += l + l1 + i2 + Float.floatToIntBits(f);
    }

    public static void vMeth(int i1) {

        int i4=55405, i5=-2, i6=123, iArr[]=new int[N];
        short s=11682;

        FuzzerUtils.init(iArr, 56811);

        vMeth1(Test.instanceCount, -16901L, i1);
        for (i4 = 23; i4 < 385; i4++) {
            Test.instanceCount = Test.instanceCount;
            i1 >>= -2;
            i5 += (((i4 * Test.fFld) + Test.byFld) - Test.byFld);
            i1 += (((i4 * i5) + Test.fFld) - i4);
            i1 += s;
            i1 = (int)Test.instanceCount;
            Test.instanceCount -= (long)Test.fFld;
            i6 = 1;
            while (++i6 < 5) {
                Test.instanceCount += i1;
                i5 += i6;
                iArr = iArr;
                i5 *= i4;
                i1 += i6;
            }
        }
        vMeth_check_sum += i1 + i4 + i5 + s + i6 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d=92.48229, d1=73.126792;
        int i=-51682, i7=14, i8=44, i9=4, i10=-3934, iArr1[]=new int[N];
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -160L);
        FuzzerUtils.init(iArr1, 50826);
        FuzzerUtils.init(byArr, (byte)-20);

        for (d = 220; 11 < d; d--) {
            vMeth(i);
            switch ((int)((d % 6) + 27)) {
            case 27:
                switch ((int)(((d % 9) * 5) + 92)) {
                case 101:
                    Test.instanceCount >>= i;
                    if (false) {
                        Test.instanceCount -= i;
                        i = (int)Test.instanceCount;
                    } else if (true) {
                        i = -32885;
                        Test.instanceCount -= Test.instanceCount;
                        for (d1 = 1; d1 < 120; d1++) {
                            i += i7;
                            i = i7;
                            lArr = lArr;
                            dFld = Test.fFld;
                            i = i7;
                        }
                        i7 = i;
                    }
                    iArr1[(int)(d - 1)] = 2;
                case 117:
                    i += (int)(d * d);
                    Test.sFld *= (short)i7;
                    i = -209;
                    break;
                case 125:
                    for (i8 = 2; i8 < 120; i8++) {
                        i10 = 1;
                        do {
                            i7 += (int)Test.instanceCount;
                            switch ((i10 % 8) + 116) {
                            case 116:
                                iArr1[i10 - 1] = (int)Test.instanceCount;
                                break;
                            case 117:
                                i9 = (int)Test.instanceCount;
                                iArr1[i10 + 1] += (int)dFld;
                                break;
                            case 118:
                                Test.instanceCount += i10;
                                Test.instanceCount /= (i | 1);
                                break;
                            case 119:
                                Test.instanceCount -= i8;
                                break;
                            case 120:
                            case 121:
                                iArr1[(int)(d)] -= i10;
                                break;
                            case 122:
                                i7 ^= 40;
                                break;
                            case 123:
                                i9 |= i10;
                                break;
                            default:
                                i <<= -1;
                            }
                        } while (++i10 < 2);
                    }
                case 109:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 114:
                case 110:
                    i9 += (int)(-4153723007196236106L + (d * d));
                    break;
                case 118:
                    i += (int)(((d * i9) + Test.instanceCount) - i);
                    break;
                case 99:
                    i7 += (int)((long)d | Test.instanceCount);
                    break;
                case 135:
                    Test.instanceCount -= i7;
                    break;
                }
            case 28:
                try {
                    i = (i / i7);
                    i = (-30164 % i);
                    iArr1[(int)(d - 1)] = (iArr1[(int)(d)] / 140);
                } catch (ArithmeticException a_e) {}
                break;
            case 29:
                Test.fFld += (float)(((d * i) + i10) - i7);
                break;
            case 30:
                byArr[(int)(d - 1)] |= (byte)-158;
                break;
            case 31:
                byArr[(int)(d)] *= (byte)Test.sFld1;
                break;
            case 32:
                i9 += (-8 + (d * d));
                break;
            }
        }

        FuzzerUtils.out.println("d i d1 = " + Double.doubleToLongBits(d) + "," + i + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i7 i8 i9 = " + i7 + "," + i8 + "," + i9);
        FuzzerUtils.out.println("i10 lArr iArr1 = " + i10 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld dFld Test.sFld = " + Test.byFld + "," + Double.doubleToLongBits(dFld) + ","
            + Test.sFld);
        FuzzerUtils.out.println("Test.sFld1 = " + Test.sFld1);

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
