// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=25L;
    public short sFld=17820;
    public static float fFld=-93.1007F;
    public static float fFld1=9.131F;
    public static int iFld=-3;
    public static double dFld=-2.83578;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 91);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(double d, int i4, long l2) {

        int i5=25919, i6=57055, i7=-166, i8=8, iArr[]=new int[N];
        float f1=0.591F;
        byte by=-48;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, -88);
        FuzzerUtils.init(lArr, -5L);

        i5 = 370;
        do {
            l2 += i5;
            i4 >>= (int)-3739913440L;
            iArr[i5 - 1] *= i4;
            Test.instanceCount -= -38933;
            i4 = i5;
            iArr[i5] = i6;
            for (i7 = 1; i7 < 5; i7++) {
                boolean b=true;
                switch (((i7 >>> 1) % 7) + 85) {
                case 85:
                    if (b) continue;
                    iArr[i7 + 1] &= (int)Test.instanceCount;
                    f1 = 1;
                    while (++f1 < 2) {
                        lArr[(int)(f1 + 1)][(int)(f1 - 1)] = l2;
                        Test.instanceCount = i6;
                        l2 = i4;
                    }
                case 86:
                    i6 -= 42076;
                case 87:
                    iArr[i7 - 1] += by;
                case 88:
                    i8 = i4;
                    break;
                case 89:
                    Test.fFld += i7;
                    break;
                case 90:
                    Test.instanceCount = l2;
                    break;
                case 91:
                    i8 = i4;
                    break;
                default:
                    i6 += (((i7 * i6) + i6) - i6);
                }
            }
        } while (--i5 > 0);
        vMeth_check_sum += Double.doubleToLongBits(d) + i4 + l2 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + by +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth1(long l1) {

        double d1=13.86312;
        int i9=-172, i10=4, i11=-140, i12=-141, i13=8, iArr1[]=new int[N], iArr2[]=new int[N];
        float f2=1.159F;
        long l3=-202L;

        FuzzerUtils.init(iArr1, -62028);
        FuzzerUtils.init(iArr2, 1585);

        vMeth(d1, i9, Test.instanceCount);
        i9 -= (int)39.87346;
        i9 -= (int)Test.fFld1;
        for (i10 = 122; i10 > 2; --i10) {
            i11 = -91;
            for (f2 = 1; f2 < 13; ++f2) {
                switch (((i10 % 2) * 5) + 84) {
                case 85:
                    Test.fFld1 += (15362 + (f2 * f2));
                    break;
                case 87:
                    i11 += (-26 + (f2 * f2));
                    i12 += (int)(((f2 * i12) + i9) - i12);
                    Test.instanceCount -= i10;
                    break;
                default:
                    for (l3 = 2; l3 > 1; l3 -= 2) {
                        i11 -= (int)l1;
                        try {
                            iArr1[(int)(f2)] = (-19 / i12);
                            i9 = (i13 / 1586512020);
                            iArr1[(int)(f2)] = (i9 % i10);
                        } catch (ArithmeticException a_e) {}
                        try {
                            iArr1[(int)(f2)] = (i11 % i9);
                            i11 = (-4715 % iArr2[i10 - 1]);
                            iArr2[(int)(f2)] = (54 % i9);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        }
        long meth_res = l1 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + Float.floatToIntBits(f2) + i12 + l3 + i13 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2, long l, int i3) {

        int i14=-34086, i15=38672, i16=148, i17=-1141, iArr3[]=new int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr3, -4);
        FuzzerUtils.init(dArr, -5.100207);

        Test.fFld -= (-iMeth1(Test.instanceCount));
        iArr3[(46785 >>> 1) % N] = (int)Test.fFld1;
        i14 = 1;
        while (++i14 < 129) {
            for (i15 = 1; 12 > i15; i15++) {
                iArr3[i15] += i2;
                i17 = 1;
                do {
                    i3 += i15;
                    iArr3[i15 + 1] = (int)l;
                    i2 |= 0;
                    i16 |= i14;
                    dArr = dArr;
                    switch (((5 >>> 1) % 2) + 85) {
                    case 85:
                        try {
                            i3 = (i3 / -1820428554);
                            i2 = (-238 / i2);
                            i3 = (i15 / -15026);
                        } catch (ArithmeticException a_e) {}
                        i2 += i17;
                        i3 = i15;
                        break;
                    case 86:
                        iArr3 = FuzzerUtils.int1array(N, (int)17083);
                        break;
                    default:
                        i16 += -20444;
                    }
                } while (++i17 < 2);
            }
        }
        long meth_res = i2 + l + i3 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-56930, i1=9, i18=216, i19=65, i20=-3, i21=54123, i22=-12, i23=-64297, i24=1;
        float f=-20.189F;
        byte by1=-80;
        boolean b1=true;

        for (i = 5; i < 126; i++) {
            i1 -= (int)(sFld = (short)((f - i) - (-3165057868703385609L * iMeth(132, Test.instanceCount, i1))));
            for (i18 = i; 207 > i18; ++i18) {
                Test.instanceCount &= 50729;
                for (i20 = 1; i20 < 1; i20++) {
                    by1 += (byte)(224 + (i20 * i20));
                    b1 = b1;
                    i19 = -62;
                    i19 += (i20 * i20);
                    Test.instanceCount += (i20 * i20);
                    i19 = i21;
                    Test.instanceCount = i22;
                    Test.fFld1 = -180;
                }
                Test.iFld += (((i18 * i21) + i1) - i19);
            }
            i1 -= i20;
            for (i23 = 6; i23 < 207; i23++) {
                i19 += (((i23 * i18) + i20) - i22);
                Test.iArrFld[i] >>= i23;
                i1 *= i20;
                Test.dFld -= i21;
                Test.instanceCount += i22;
                Test.iArrFld[i23] *= -10;
                switch ((i % 4) + 87) {
                case 87:
                    i22 >>= Test.iFld;
                    Test.iArrFld[i + 1] >>>= i1;
                    try {
                        i1 = (i18 % 166);
                        i24 = (-1597454961 % i24);
                        i1 = (Test.iArrFld[(Test.iFld >>> 1) % N] % 92);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 88:
                    i22 += i23;
                    break;
                case 89:
                    b1 = b1;
                    Test.iFld *= (int)Test.dFld;
                    Test.fFld1 *= i24;
                case 90:
                    Test.instanceCount += (((i23 * i24) + i22) - i24);
                }
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 by1 b1 = " + i21 + "," + by1 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);

        FuzzerUtils.out.println("Test.instanceCount sFld Test.fFld = " + Test.instanceCount + "," + sFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.fFld1 Test.iFld Test.dFld = " + Float.floatToIntBits(Test.fFld1) + "," +
            Test.iFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
