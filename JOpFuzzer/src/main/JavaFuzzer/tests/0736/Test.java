// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=51312L;
    public static int iFld=-121;
    public static long lFld=55705L;
    public static int iFld1=-9550;
    public static boolean bFld=true;
    public static byte byFld=85;
    public double dFld=-2.20780;
    public static volatile float fArrFld[][]=new float[N][N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -123.738F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        short s=211;
        double d=0.79125;
        byte by=-32;
        int i5=-33586, i6=34076, i7=5, i8=0, i9=52722, i10=13, i11=-12, i12=149, iArr[]=new int[N];
        float f=-113.50F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 110L);
        FuzzerUtils.init(iArr, -5627);

        Test.instanceCount -= Test.iFld;
        s = (short)Test.iFld;
        d = by;
        for (i5 = 217; i5 > 11; --i5) {
            Test.iFld += i5;
        }
        for (i7 = 3; i7 < 366; i7++) {
            f += (-11087 + (i7 * i7));
        }
        Test.iFld = i5;
        d -= i5;
        i8 = (int)Test.lFld;
        for (i9 = 9; 354 > i9; ++i9) {
            iArr[i9] = i6;
            for (i11 = 1; i11 < 5; i11++) {
                i8 += 49;
                f += i11;
            }
        }
        vMeth1_check_sum += s + Double.doubleToLongBits(d) + by + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i9 +
            i10 + i11 + i12 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i3=10, i4=157, i13=-4, i14=-94, i15=-56599, i16=-48076, i17=-110, i18=-17485;
        boolean b1=true;

        Test.iFld -= (int)(Test.lFld >>= (Test.iFld--));
        Test.iFld *= (int)Test.lFld;
        for (i3 = 8; i3 < 166; i3++) {
            vMeth1();
            i4 -= Test.iFld;
            Test.iFld -= Test.iFld;
        }
        i13 = 238;
        while ((i13 -= 3) > 0) {
            Test.iFld = (int)Test.instanceCount;
            for (i14 = 1; 19 > i14; i14++) {
                double d1=1.49175;
                d1 -= i13;
            }
            for (i16 = 1; i16 < 19; ++i16) {
                b1 = true;
                i15 += i16;
            }
            Test.instanceCount ^= i18;
            Test.instanceCount = 4;
        }
        long meth_res = i3 + i4 + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) + i18;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i, boolean b) {

        int i1=-2, i2=-10, i19=40741, i20=-47467, iArr1[]=new int[N];
        short s1=-19623;
        byte by1=11;
        long l2=61748L, lArr[][]=new long[N][N];
        float f1=0.268F;

        FuzzerUtils.init(lArr, 19008L);
        FuzzerUtils.init(iArr1, 5);

        i += (int)-9004420978996106248L;
        for (i1 = 3; 158 > i1; i1++) {
            lArr[i1][i1 + 1] <<= iMeth();
            Test.iFld >>= i1;
            try {
                Test.iFld1 = (-216 / iArr1[i1 + 1]);
                i2 = (i1 % -107);
                i = (i2 / 232);
            } catch (ArithmeticException a_e) {}
            Test.fArrFld[i1 - 1] = Test.fArrFld[i1];
            s1 += (short)(i1 - by1);
            l2 += 89;
        }
        for (f1 = 6; f1 < 133; f1 += 2) {
            iArr1[(int)(f1)] -= i2;
        }
        lArr[(i >>> 1) % N][(159 >>> 1) % N] = -14;
        i20 = 1;
        do {
            if (b) {
                b = b;
            } else if (b) {
                i >>>= i20;
            } else {
                Test.iFld = i19;
            }
        } while (++i20 < 354);
        vMeth_check_sum += l + i + (b ? 1 : 0) + i1 + i2 + s1 + by1 + l2 + Float.floatToIntBits(f1) + i19 + i20 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i21=-53, i22=-179, i23=7, i24=-13, i25=-1, i26=-7, i27=-5, i28=-6;
        float f2=1.470F, f3=-124.467F;

        vMeth(Test.instanceCount, Test.iFld1, Test.bFld);
        Test.iFld1 *= Test.byFld;
        for (i21 = 12; 335 > i21; i21++) {
            dFld *= Test.iFld1;
            i22 = Test.iFld1;
            i22 <<= 93;
            switch ((((Test.iFld >>> 1) % 8) * 5) + 110) {
            case 146:
                for (i23 = 3; i23 < 78; i23 += 3) {
                    i24 += i23;
                    i22 = 61682;
                }
                break;
            case 120:
            case 127:
                Test.instanceCount = i23;
                break;
            case 149:
                for (i25 = i21; i25 < 78; i25++) {
                    Test.byFld <<= (byte)i25;
                    f2 = 63608;
                    Test.bFld = Test.bFld;
                    i26 = i24;
                    Test.iFld1 += (((i25 * i21) + f2) - Test.iFld);
                    for (i27 = 1; i27 < 1; ++i27) {
                        i24 += i26;
                        Test.byFld ^= (byte)i23;
                        i24 += Test.iFld1;
                        Test.iFld1 += (((i27 * f2) + f2) - Test.byFld);
                    }
                    Test.iFld1 = i24;
                }
                switch (((i24 >>> 1) % 2) + 20) {
                case 20:
                    Test.iFld1 *= Test.iFld;
                    i28 += (i21 - i28);
                    dArrFld = dArrFld;
                    f3 = 1;
                    do {
                        try {
                            i26 = (i28 % i21);
                            i28 = (38753 % i27);
                            Test.iFld = (i25 % 58094);
                        } catch (ArithmeticException a_e) {}
                        f2 = i27;
                    } while (++f3 < 78);
                    break;
                case 21:
                    i24 = Test.byFld;
                    break;
                }
                break;
            case 124:
                i24 += (-23540 + (i21 * i21));
            case 111:
            case 140:
                Test.byFld /= (byte)-7;
            case 136:
                Test.iFld = -173;
                break;
            default:
                f2 -= -32136;
            }
        }

        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("f2 i27 i28 = " + Float.floatToIntBits(f2) + "," + i27 + "," + i28);
        FuzzerUtils.out.println("f3 = " + Float.floatToIntBits(f3));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.lFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.lFld);
        FuzzerUtils.out.println("Test.iFld1 Test.bFld Test.byFld = " + Test.iFld1 + "," + (Test.bFld ? 1 : 0) + "," +
            Test.byFld);
        FuzzerUtils.out.println("dFld Test.fArrFld dArrFld = " + Double.doubleToLongBits(dFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
