// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public double dFld=-33.64250;
    public static int iFld=0;
    public static float fFld=0.105F;
    public static boolean bFld=true;
    public int iFld1=-43335;
    public static int iFld2=57635;
    public byte byArrFld[]=new byte[N];
    public int iArrFld[]=new int[N];
    public static volatile int iArrFld1[]=new int[N];
    public int iArrFld2[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -26311);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        float f=-1.243F;
        int i8=-14, i9=-57889, i10=-54695, i11=-12, i12=6, i13=91, i14=43678, iArr[]=new int[N];
        byte by1=-104;
        boolean b=false;

        FuzzerUtils.init(iArr, 246);

        iArr[(Test.iFld >>> 1) % N] = (int)f;
        Test.iFld = Test.iFld;
        i8 = 357;
        while (--i8 > 0) {
            by1 = (byte)i9;
            Test.iFld <<= i9;
        }
        for (i10 = 6; i10 < 130; i10 += 3) {
            switch ((i10 % 1) + 60) {
            case 60:
            default:
                i12 = 37;
                while ((i12 -= 3) > 0) {
                    for (i13 = 1; i13 < 3; i13++) {
                        iArr[i13] = -8;
                    }
                    b = b;
                    Test.instanceCount += (i12 ^ Test.instanceCount);
                    i11 = i8;
                }
            }
            iArr[i10] *= i13;
            i14 += (i10 ^ i10);
        }
        long meth_res = Float.floatToIntBits(f) + i8 + by1 + i9 + i10 + i11 + i12 + i13 + i14 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i5, long l) {

        int i6=9, i7=-1, i15=-26688, i16=-9, i17=-1;
        byte by2=-32;
        float f1=125.618F, fArr1[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr1, -2.806F);
        FuzzerUtils.init(lArr, -1001592949568332416L);

        for (i6 = 12; i6 < 302; i6++) {
            i5 += (int)(fArr1[i6 - 1]++);
            iMeth();
            i5 *= 13;
            Test.iArrFld1[i6 - 1] >>= Test.iFld;
        }
        for (i15 = 10; i15 < 224; i15++) {
            by2 += (byte)i15;
            for (f1 = 1; f1 < 8; f1++) {
                double d=-28.52731;
                switch (((i17 >>> 1) % 7) + 36) {
                case 36:
                    i17 += (int)d;
                    lArr[i15 + 1] -= Test.instanceCount;
                    break;
                case 37:
                    Test.iFld += (int)Test.instanceCount;
                    i7 += (int)(((f1 * l) + Test.iFld) - Test.instanceCount);
                    Test.iArrFld1[i15 - 1] += (int)Test.instanceCount;
                    by2 += (byte)i17;
                    break;
                case 38:
                    i5 -= -2;
                    break;
                case 39:
                    i5 = i6;
                case 40:
                case 41:
                    Test.fFld -= i16;
                    break;
                case 42:
                    i5 = (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i5 + l + i6 + i7 + i15 + i16 + by2 + Float.floatToIntBits(f1) + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i3=-11, i4=-241, i18=2, i19=26232, i20=-205, i21=0;
        double d1=-2.37594;

        for (i3 = 10; 205 > i3; ++i3) {
            vMeth1(Test.iFld, Test.instanceCount);
            Test.iFld += (i3 + Test.instanceCount);
        }
        Test.iFld = (int)-51.201F;
        i4 -= (int)1.33620;
        for (i18 = 8; i18 < 318; i18++) {
            Test.fFld = i19;
            Test.iFld -= (int)Test.instanceCount;
            if (Test.bFld) break;
            for (i20 = 1; i20 < 5; i20 += 2) {
                if (true) continue;
                Test.iFld = i4;
                i21 += (((i20 * Test.instanceCount) + Test.instanceCount) - i20);
                Test.iArrFld1[i18] = (int)Test.instanceCount;
                d1 = Test.instanceCount;
            }
        }
        vMeth_check_sum += i3 + i4 + i18 + i19 + i20 + i21 + Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i=53978, i1=221, i2=8, i22=24, i23=-7, i24=-229, i25=11, i26=41254, i27=-122, i28=-33453, i29=13, i30=212;
        byte by=25;
        short s=-27071;
        double d2=-90.125844, d3=-63.116098;
        float fArr[][]=new float[N][N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(fArr, 105.309F);
        FuzzerUtils.init(lArr1, -29239L);

        i = 1;
        while (++i < 146) {
            for (i1 = 10; 172 > i1; i1++) {
                byArrFld[i1 - 1] += (byte)11;
            }
            fArr[i][i] *= (float)((iArrFld[i] - (i1 + dFld)) + (by++));
            vMeth();
            for (i22 = 172; i22 > i; i22--) {
                switch ((i22 % 1) * 5) {
                case 2:
                    Test.fFld *= i23;
                    break;
                }
                for (i24 = i; 1 > i24; i24++) {
                    lArr1[i24 - 1][i22] += 128;
                    byArrFld[i24] <<= (byte)i22;
                    s = (short)i24;
                    Test.fFld -= i;
                    i23 -= Test.iFld;
                }
                Test.bFld = true;
                for (d2 = 1; d2 < 1; d2++) {
                    s += (short)1.441F;
                }
            }
            i26 += (((i * i23) + iFld1) - Test.instanceCount);
            for (i27 = 3; i27 < 172; ++i27) {
                fArr[i27 + 1][i27 + 1] += i2;
                switch ((i % 4) + 9) {
                case 9:
                    Test.instanceCount >>>= Test.instanceCount;
                    for (i29 = 2; 1 < i29; i29 -= 3) {
                        iArrFld2[i - 1] = i24;
                        i26 = i2;
                        Test.instanceCount -= i22;
                        by += (byte)(i29 ^ i26);
                        Test.fFld = Test.iFld2;
                        i2 -= i22;
                        Test.instanceCount += 675662296L;
                    }
                    break;
                case 10:
                case 11:
                    dFld *= d3;
                    break;
                case 12:
                    Test.iFld = 18626;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("by i22 i23 = " + by + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 s = " + i24 + "," + i25 + "," + s);
        FuzzerUtils.out.println("d2 i26 i27 = " + Double.doubleToLongBits(d2) + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("d3 fArr lArr1 = " + Double.doubleToLongBits(d3) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.bFld iFld1 = " + Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1
            : 0) + "," + iFld1);
        FuzzerUtils.out.println("Test.iFld2 byArrFld iArrFld = " + Test.iFld2 + "," + FuzzerUtils.checkSum(byArrFld) +
            "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 iArrFld2 = " + FuzzerUtils.checkSum(Test.iArrFld1) + "," +
            FuzzerUtils.checkSum(iArrFld2));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
