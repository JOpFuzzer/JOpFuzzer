// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-210L;
    public static int iFld=-4;
    public static double dFld=0.15430;
    public static byte byFld=119;
    public int iArrFld[]=new int[N];
    public short sArrFld[]=new short[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1) {

        int i1=-9, i2=3, i3=0, i4=63859, i5=-11, i6=-38263, i7=6, iArr[]=new int[N];
        short s=-6570;
        boolean b=false;

        FuzzerUtils.init(iArr, -1);

        for (i1 = 396; i1 > 1; i1 -= 3) {
            switch ((i1 % 2) + 24) {
            case 24:
                if (b) {
                    Test.iFld += (i1 * i1);
                    i2 = Test.iFld;
                    f1 -= (float)Test.dFld;
                    for (i3 = i1; i3 < 12; i3++) {
                        s <<= (short)i2;
                        for (i5 = 1; i5 < 1; ++i5) {
                            i4 = i7;
                            switch (((i5 >>> 1) % 7) + 63) {
                            case 63:
                                i2 = Test.iFld;
                                if (i5 != 0) {
                                }
                                i4 -= i3;
                                i7 -= -2;
                                break;
                            case 64:
                                Test.instanceCount ^= Test.instanceCount;
                                break;
                            case 65:
                                iArr[i3 - 1] = i2;
                                break;
                            case 66:
                                Test.byFld += (byte)i5;
                                break;
                            case 67:
                                Test.instanceCount *= i3;
                                break;
                            case 68:
                                i4 -= i6;
                                break;
                            case 69:
                                s += (short)(i5 * i5);
                            }
                        }
                    }
                } else {
                    i7 += Test.iFld;
                }
            case 25:
                s = (short)i1;
            default:
                f1 += Test.iFld;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i1 + i2 + i3 + i4 + s + i5 + i6 + i7 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(double d) {

        int i8=50195, i9=7154, iArr1[]=new int[N];
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -1.96284);
        FuzzerUtils.init(iArr1, -119);
        FuzzerUtils.init(lArr, 1473505905212693422L);

        dArr[(Test.iFld >>> 1) % N] = iMeth(2.633F);
        iArr1[(Test.iFld >>> 1) % N] = (int)Test.instanceCount;
        i8 = 1;
        while (++i8 < 278) {
            boolean b1=false;
            Test.instanceCount = Test.iFld;
            if (b1) {
                switch (((Test.iFld >>> 1) % 2) + 39) {
                case 39:
                    lArr[i8 + 1] += i8;
                    Test.iFld = i8;
                    lArr[i8] >>= i8;
                    lArr = lArr;
                    break;
                case 40:
                    i9 >>= (int)Test.instanceCount;
                    Test.iFld = i9;
                    break;
                default:
                    d = -6L;
                }
                Test.iFld += 11;
                Test.iFld ^= (int)Test.instanceCount;
            } else if (b1) {
                if (i8 != 0) {
                    vMeth1_check_sum += Double.doubleToLongBits(d) + i8 + i9 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1) +
                        FuzzerUtils.checkSum(lArr);
                    return;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i8 + i9 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))
            + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(float f, int i, long l) {

        float f2=0.695F;
        int i10=9, i11=6, i12=75, i13=-22526, i14=1, iArr2[]=new int[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(iArr2, -13);
        FuzzerUtils.init(dArr1, 0.26582);

        vMeth1(Test.dFld);
        for (f2 = 372; f2 > 1; --f2) {
            for (i11 = 1; i11 < 5; ++i11) {
                Test.byFld >>= (byte)i11;
                for (i13 = 1; 2 > i13; ++i13) {
                    if (i11 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + i + l + Float.floatToIntBits(f2) + i10 + i11 + i12
                            + i13 + i14 + FuzzerUtils.checkSum(iArr2) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                        return;
                    }
                    Test.instanceCount -= i;
                    Test.byFld |= (byte)Test.instanceCount;
                    i10 += (((i13 * i14) + l) - Test.iFld);
                    iArr2 = iArr2;
                }
                iArr2[(int)(f2 - 1)] <<= Test.byFld;
                i14 -= (int)l;
                i12 += (i11 * i11);
                dArr1[(int)(f2)] -= i12;
                try {
                    i12 = (i % 82);
                    i10 = (iArr2[(13236 >>> 1) % N] % -89);
                    i12 = (105 % i14);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + l + Float.floatToIntBits(f2) + i10 + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {

        float f3=-61.527F, fArr[]=new float[N];
        int i15=136, i16=5, i17=5, i18=59517, i19=-52614, i20=-4, i21=10639, i22=-20920;
        short s1=14858;
        boolean b2=true, b3=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 44.1014F);
        FuzzerUtils.init(lArr1, 55904L);

        vMeth(f3, Test.iFld, Test.instanceCount);
        iArrFld[(Test.iFld >>> 1) % N] -= (int)f3;
        if (b2) {
            iArrFld[(-8228 >>> 1) % N] -= Test.iFld;
            Test.instanceCount *= Test.iFld;
            for (i15 = 5; i15 < 226; i15++) {
                i16 += i15;
                Test.byFld >>= (byte)Test.iFld;
                Test.iFld = i16;
                i16 = i15;
                Test.iFld <<= 3;
                Test.iFld += (i15 * f3);
                i17 = 114;
                while (--i17 > 0) {
                    for (i18 = 1; i18 < 1; ++i18) {
                        Test.iFld = i18;
                        fArr[i17] += i18;
                        Test.dFld += Test.instanceCount;
                    }
                    lArr1 = lArr1;
                    for (i20 = 1; i20 < 1; ++i20) {
                        Test.instanceCount *= i15;
                        sArrFld[i17] >>= (short)i20;
                        i21 >>>= (int)Test.instanceCount;
                        Test.iFld -= i18;
                    }
                    i22 = 1;
                    do {
                        i16 += i22;
                        i19 = (int)65.584F;
                        s1 += (short)i22;
                        b2 = b2;
                        i21 += (((i22 * Test.instanceCount) + i19) - i15);
                        Test.dFld *= i21;
                    } while (++i22 < 1);
                }
            }
        } else if (b3) {
            Test.dFld *= Test.instanceCount;
        } else {
            b2 = true;
        }

        FuzzerUtils.out.println("f3 i15 i16 = " + Float.floatToIntBits(f3) + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("s1 b2 b3 = " + s1 + "," + (b2 ? 1 : 0) + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("fArr lArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld iArrFld sArrFld = " + Test.byFld + "," + FuzzerUtils.checkSum(iArrFld) +
            "," + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
