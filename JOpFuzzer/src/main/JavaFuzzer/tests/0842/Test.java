// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-26429L;
    public static int iFld=38541;
    public static short sFld=-24673;
    public static boolean bFld=true;
    public float fFld=81.178F;
    public double dFld=93.3063;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10598);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d) {

        float f1=0.431F, fArr[]=new float[N];
        short s=-18296, sArr[]=new short[N];
        long l=-94L;
        int i4=-6, i5=-1, i6=7598, i7=47635, iArr[][]=new int[N][N];
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, 2.540F);
        FuzzerUtils.init(iArr, 10);
        FuzzerUtils.init(sArr, (short)-7090);
        FuzzerUtils.init(dArr, 0.3982);

        f1 *= s;
        l = 1;
        do {
            Test.iFld += Test.iFld;
            f1 = Test.instanceCount;
            fArr[(int)(l + 1)] *= Test.iFld;
        } while (++l < 275);
        iArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = Test.iFld;
        for (i4 = 5; i4 < 265; ++i4) {
            if (b1) break;
            sArr[i4] = (short)Test.iFld;
            i5 *= (int)f1;
            dArr[i4 - 1] = l;
            for (i6 = 1; i6 < 6; ++i6) {
                Test.instanceCount += (i6 * i7);
                i7 = i7;
                iArr[i6][i4] *= i5;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + s + l + i4 + i5 + (b1 ? 1 : 0) + i6
            + i7 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(boolean b) {

        double d1=-1.10812;
        int i8=2, i9=-89, i10=-41653;
        long l1=-5352L;
        float f2=0.1006F;
        byte by=105;

        vMeth1(d1);
        i8 = 1;
        do {
            d1 = -4;
            l1 = 5;
            do {
                f2 += (float)d1;
                Test.iFld <<= i8;
                d1 -= f2;
                Test.instanceCount += i8;
                for (i9 = i8; i9 < 1; ++i9) {
                    Test.iArrFld[(int)(l1 + 1)] -= 35074;
                    i10 += -167;
                    d1 *= 26879;
                    i10 += Test.sFld;
                    i10 >>>= by;
                    Test.iFld = i9;
                }
            } while (--l1 > 0);
        } while (++i8 < 346);
        vMeth_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d1) + i8 + l1 + Float.floatToIntBits(f2) + i9 + i10 +
            by;
    }

    public static int iMeth(float f, int i1) {

        int i2=1, i3=130, i12=13, i13=20, i14=56, i15=-5;

        for (i2 = 244; i2 > 11; i2 -= 2) {
            vMeth(Test.bFld);
            Test.iArrFld[i2 - 1] >>= i3;
            switch (((i2 % 1) * 5) + 118) {
            case 122:
            }
            Test.iFld = i2;
            f *= Test.iFld;
            Test.iFld = Test.iFld;
            Test.instanceCount += -4;
        }
        for (i12 = 5; 393 > i12; ++i12) {
            i13 += (((i12 * f) + Test.sFld) - Test.instanceCount);
            Test.sFld += (short)(i12 | i12);
            if (i12 != 0) {
            }
            for (i14 = 1; i14 < 4; i14++) {
                i1 += (i14 - i15);
                Test.iArrFld[i14 + 1] = (int)Test.instanceCount;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + i2 + i3 + i12 + i13 + i14 + i15;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=70, i16=53891, i17=-109, i18=-134, i19=153, i20=2;
        float f3=1.749F;
        double d2=0.49905;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        i = 1;
        while (++i < 181) {
            Test.iFld = (Test.iFld--);
            Test.iFld -= iMeth(fFld, Test.iFld);
            Test.instanceCount += (i * i);
            for (i16 = 2; i16 < 139; i16++) {
                byte by1=-48;
                fFld += i16;
                Test.iFld += (int)fFld;
                for (i18 = 2; i18 > 1; i18 -= 2) {
                    i17 += Test.iFld;
                    Test.iArrFld[i16] <<= -66;
                    i19 <<= (int)Test.instanceCount;
                    i19 += (i18 * Test.instanceCount);
                    Test.instanceCount >>= Test.iFld;
                }
                switch (((i17 >>> 1) % 1) + 107) {
                case 107:
                    bArr[i] = true;
                    Test.instanceCount >>= -135;
                    i19 = i;
                    Test.instanceCount += by1;
                default:
                    switch (((i16 % 5) * 5) + 95) {
                    case 108:
                        i19 += (-36935 + (i16 * i16));
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 118:
                        f3 = 1;
                        do {
                            by1 <<= (byte)i18;
                        } while (++f3 < 2);
                        i17 = 131;
                        switch (((-7 >>> 1) % 6) + 49) {
                        case 49:
                            for (d2 = 1; 2 > d2; ++d2) {
                                i17 = Test.iFld;
                            }
                            lArrFld[i + 1] = (long)fFld;
                            break;
                        case 50:
                            i17 = -21225;
                            Test.iArrFld[i] += i19;
                            break;
                        case 51:
                            if (true) continue;
                        case 52:
                            i20 = i19;
                        case 53:
                            Test.iFld = (int)d2;
                            break;
                        case 54:
                            i17 &= 47671;
                            break;
                        }
                    case 116:
                        dFld *= -27630L;
                    case 117:
                        lArrFld[i - 1] <<= i17;
                        break;
                    case 105:
                        Test.instanceCount += (i16 + Test.instanceCount);
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i16 i17 = " + i + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 f3 = " + i18 + "," + i19 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("d2 i20 bArr = " + Double.doubleToLongBits(d2) + "," + i20 + "," +
            FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld fFld dFld = " + (Test.bFld ? 1 : 0) + "," + Float.floatToIntBits(fFld) + ","
            + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iArrFld lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
