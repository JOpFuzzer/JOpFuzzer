// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public volatile long lFld=3363086038L;
    public static double dFld=-1.86879;
    public int iArrFld[]=new int[N];
    public volatile boolean bArrFld[]=new boolean[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static int iMeth(int i3, int i4, int i5) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 46068L);

        i5 >>= (int)(lArr[(i4 >>> 1) % N] + i4);
        long meth_res = i3 + i4 + i5 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(long l1, int i7, long l2) {

        int i8=-195, i9=33841, i10=-241, iArr[]=new int[N];
        byte by1=-70;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(dArr, -2.18177);

        for (i8 = 4; i8 < 138; ++i8) {
            switch ((((i8 >>> 1) % 2) * 5) + 84) {
            case 87:
                if (i7 != 0) {
                }
                i7 >>= i9;
                break;
            case 91:
                try {
                    i7 = (i7 % -412066640);
                    i9 = (i7 / i8);
                    i10 = (iArr[i8 + 1] % i8);
                } catch (ArithmeticException a_e) {}
                break;
            default:
                switch (((i7 >>> 1) % 2) + 81) {
                case 81:
                    i10 += -11;
                    i9 += (i8 ^ i7);
                    switch (((i8 % 2) * 5) + 1) {
                    case 9:
                        switch (((i8 % 2) * 5) + 112) {
                        case 118:
                            i9 = 244;
                            i10 <<= (int)l1;
                            break;
                        case 113:
                            i9 <<= i9;
                            l2 -= -179;
                            break;
                        default:
                            i10 = 0;
                        }
                        break;
                    case 6:
                        i9 = by1;
                        break;
                    }
                    break;
                case 82:
                    i10 += (((i8 * i10) + i7) - i7);
                }
            }
        }
        long meth_res = l1 + i7 + l2 + i8 + i9 + i10 + by1 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth1(double d1, int i6) {

        byte by=50;
        int i11=-11, i12=13640, i13=13, i14=167, i15=127, i16=60620, i17=13, i18=-12843;
        float f1=1.1002F, f2=-13.820F;

        i6 -= (int)(by - lMeth(Test.instanceCount, i6, Test.instanceCount));
        for (i11 = 374; i11 > 13; --i11) {
            for (i13 = i11; i13 < 5; ++i13) {
                i14 += (-7270 + (i13 * i13));
                for (i15 = i13; i15 < 1; ++i15) {
                    i16 += (int)f1;
                    f1 += i15;
                    i12 -= i11;
                    d1 *= i12;
                }
                lFld -= Test.instanceCount;
                lFld += (-146 + (i13 * i13));
                for (i17 = 1; i17 < 1; i17++) {
                    int i19=45802;
                    Test.instanceCount += (i17 * i17);
                    i6 = (int)f2;
                    i19 = -7297;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + i6 + by + i11 + i12 + i13 + i14 + i15 + i16 +
            Float.floatToIntBits(f1) + i17 + i18 + Float.floatToIntBits(f2);
    }

    public void vMeth(long l, float f) {

        int i2=48218, i20=22510, i21=-60863, i22=95, i23=189;
        double d=121.100615, dArr1[]=new double[N];
        byte by2=43;
        short s=-10450;
        boolean b=true;
        float f3=0.693F;

        FuzzerUtils.init(dArr1, -46.6122);

        iArrFld[(i2 >>> 1) % N] <<= iMeth(101 - i2, i2, i2--);
        switch ((((i2 * i2) >>> 1) % 10) + 121) {
        case 121:
            i2 = (int)((++iArrFld[(11865 >>> 1) % N]) - d);
            vMeth1(50.46158, i2);
            by2 = (byte)s;
            break;
        case 122:
            bArrFld[(i2 >>> 1) % N] = b;
            break;
        case 123:
            for (i20 = 1; i20 < 122; i20++) {
                i2 = (int)f;
                i2 >>>= 38492;
                f += lFld;
                for (i22 = 1; i22 < 13; i22++) {
                    i21 += (((i22 * l) + lFld) - l);
                    dArr1[i20] -= i22;
                    f = i2;
                    by2 *= (byte)0;
                }
            }
            break;
        case 124:
            by2 >>= (byte)i23;
            break;
        case 125:
            f = f3;
            break;
        case 126:
            s <<= (short)Test.instanceCount;
            break;
        case 127:
        case 128:
            s = (short)i20;
            break;
        case 129:
            iArrFld[(i22 >>> 1) % N] *= i2;
            break;
        case 130:
            i2 <<= i2;
            break;
        default:
            i23 *= i22;
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + i2 + Double.doubleToLongBits(d) + by2 + s + (b ? 1 : 0) + i20
            + i21 + i22 + i23 + Float.floatToIntBits(f3) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {

        int i=-9, i1=-170, i24=8, i25=6, i26=-68, i27=73, i28=62544, i29=-184;
        float f4=2.47F, fArr[][]=new float[N][N];
        double d3=-63.114487;
        short s1=7198;
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 71.168F);
        FuzzerUtils.init(lArr1, -1024470937L);

        for (i = 4; i < 245; ++i) {
            Test.instanceCount *= -43429L;
            vMeth(lFld, f4);
            fArr[i - 1][i - 1] += i;
            i1 <<= (int)lFld;
            for (d3 = 1; 104 > d3; d3++) {
                i1 -= i1;
                Test.instanceCount *= i24;
                i1 += (int)d3;
                i1 = (int)f4;
                i1 -= (int)lFld;
                i24 += (int)lFld;
            }
            i24 = i1;
            iArrFld[i] *= i24;
            for (i25 = 6; i25 < 104; i25++) {
                lArr1[i25] *= lFld;
            }
            iArrFld[i - 1] = (int)Test.instanceCount;
        }
        i27 = 1;
        while (++i27 < 199) {
            Test.dFld = i25;
            i1 += (i27 * i27);
            i24 -= i27;
            s1 ^= (short)i;
            fArr[i27 - 1][i27 - 1] += i27;
            lFld %= (i27 | 1);
            i24 = s1;
            for (i28 = 3; i28 < 126; ++i28) {
                i26 -= (int)lFld;
                i29 = i26;
                Test.instanceCount += (((i28 * i1) + i25) - Test.instanceCount);
                Test.instanceCount &= 687;
            }
        }

        FuzzerUtils.out.println("i i1 f4 = " + i + "," + i1 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("d3 i24 i25 = " + Double.doubleToLongBits(d3) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 s1 = " + i26 + "," + i27 + "," + s1);
        FuzzerUtils.out.println("i28 i29 fArr = " + i28 + "," + i29 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount lFld Test.dFld = " + Test.instanceCount + "," + lFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iArrFld bArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
