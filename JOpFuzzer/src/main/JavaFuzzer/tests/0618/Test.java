// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2934819719L;
    public static int iFld1=9;
    public static short sFld=27205;
    public static double dFld=88.44753;
    public static float fFld=70.815F;
    public byte byFld=51;
    public static volatile long lArrFld[]=new long[N];
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 46442L);
        FuzzerUtils.init(Test.sArrFld, (short)7969);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i13, int i14, double d) {

        int i15=13, i16=2, i17=2, i18=11, i19=-207;
        float f1=-60.995F;

        Test.lArrFld[(Test.iFld1 >>> 1) % N] *= Test.iFld1;
        i15 = 1;
        do {
            Test.iFld1 += -94;
            Test.sFld >>= (short)i15;
            i16 = 1;
            do {
                f1 += -812749648L;
                for (i17 = 1; i17 > 1; i17 -= 3) {
                    i19 <<= (int)Test.instanceCount;
                    Test.sFld = (short)d;
                    Test.instanceCount *= (long)f1;
                    i13 -= 11;
                    i14 >>= 167;
                }
                i18 -= i14;
                i19 ^= i16;
                f1 += (((i16 * i19) + Test.iFld1) - i16);
            } while (++i16 < 5);
        } while (++i15 < 343);
        vMeth1_check_sum += i13 + i14 + Double.doubleToLongBits(d) + i15 + i16 + Float.floatToIntBits(f1) + i17 + i18 +
            i19;
    }

    public static void vMeth(int i9, int i10) {

        int i11=34143, i12=9, i20=-134, i21=-113, i22=6, i23=-227, i24=-29988, iArr1[][]=new int[N][N];
        double d1=0.28948;
        float f2=0.842F;

        FuzzerUtils.init(iArr1, 187);

        for (i11 = 10; 297 > i11; ++i11) {
            try {
                i9 = (-1495461339 / i9);
                i12 = (i12 % i9);
                i9 = (i10 / i11);
            } catch (ArithmeticException a_e) {}
            vMeth1(Test.iFld1, i10, d1);
            iArr1[i11 - 1][i11 + 1] = i12;
        }
        for (i20 = 1; i20 < 176; i20++) {
            for (i22 = 1; i22 < 9; i22++) {
                i23 -= i20;
                i24 = 1;
                while (++i24 < 2) {
                    i9 += (((i24 * Test.instanceCount) + i11) - Test.instanceCount);
                    Test.instanceCount -= -13;
                }
                Test.instanceCount += (long)f2;
                i12 = (int)Test.instanceCount;
                i9 <<= i9;
                i10 = (int)f2;
                i9 ^= i11;
            }
        }
        vMeth_check_sum += i9 + i10 + i11 + i12 + Double.doubleToLongBits(d1) + i20 + i21 + i22 + i23 + i24 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(int i1, int i2) {

        int i3=39809, i4=4, i5=-39, i6=6, i7=-29439, i8=-20733, iArr[]=new int[N];
        byte by=-44;
        float f=-15.127F, fArr[]=new float[N];
        double dArr[]=new double[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(dArr, 0.111538);
        FuzzerUtils.init(iArr, 39174);
        FuzzerUtils.init(fArr, 2.958F);
        FuzzerUtils.init(lArr, 207332934L);

        for (i3 = 19; i3 < 374; ++i3) {
            i2 = (int)(((by + 118.9025) * (i3 - i1)) + ((10899 - (i4 + Test.iFld1)) - i1));
            Test.iFld1 >>= (int)(-dArr[i3]);
            iArr[i3] ^= (Test.iFld1 % ((iArr[i3 + 1]++) | 1));
            for (i5 = 1; i5 < 5; i5 += 3) {
                for (i7 = 1; i7 < 5; ++i7) {
                    dArr[i7 - 1] = (Test.instanceCount - Math.max(Test.instanceCount + i2, 43486L));
                    i1 <<= i4;
                }
                i4 = (int)(Test.instanceCount = (-(-(Test.instanceCount - Test.instanceCount))));
                fArr = (fArr = (fArr = fArr));
                lArr[i3 + 1][i3 + 1] = Test.instanceCount;
                i1 = (i2++);
                iArr[i3 + 1] += (int)((-(60 * (49612 - (Test.iFld1 - i6)))) - Math.min(Test.instanceCount, (long)(f /
                    ((long)(f) | 1))));
            }
        }
        vMeth(i4, i3);
        Test.instanceCount = Test.instanceCount;
        long meth_res = i1 + i2 + i3 + i4 + by + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i=7601, i25=42144, i26=-7, i27=-57, i28=-171, i29=9911, i30=-5, i31=-49, iArr2[]=new int[N];
        boolean b=false;
        float f3=102.524F;

        FuzzerUtils.init(iArr2, -126);

        i ^= (int)Test.instanceCount;
        lMeth(202, Test.iFld1);
        Test.lArrFld[(i >>> 1) % N] >>= Test.iFld1;
        if (b) {
            Test.instanceCount += (long)Test.dFld;
            i25 = 1;
            while (++i25 < 246) {
                i += i25;
            }
            Test.iFld1 = i25;
            Test.lArrFld[(Test.iFld1 >>> 1) % N] = i;
        }
        Test.fFld %= (Test.iFld1 | 1);
        Test.instanceCount += i25;
        for (f3 = 5; f3 < 317; ++f3) {
            for (i27 = 4; 81 > i27; i27++) {
                i26 += (i27 | i28);
                Test.instanceCount += (i27 * Test.instanceCount);
                for (i29 = 1; 2 > i29; i29++) {
                    Test.fFld *= Test.fFld;
                    i = i;
                    Test.sArrFld[i29] = (short)Test.instanceCount;
                    Test.fFld -= i27;
                    iArr2[i27] += (int)Test.dFld;
                }
                i28 = i;
                i31 = i30;
                iArr2[(int)(f3 + 1)] <<= -27078;
                Test.instanceCount += i28;
                i28 = (int)Test.instanceCount;
                Test.fFld += (float)Test.dFld;
                Test.sArrFld[i27 + 1] = (short)Test.instanceCount;
            }
            Test.instanceCount += (long)(((f3 * i26) + i) - i25);
            iArr2[(int)(f3 - 1)] += byFld;
        }

        FuzzerUtils.out.println("i i25 b = " + i + "," + i25 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("f3 i26 i27 = " + Float.floatToIntBits(f3) + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 iArr2 = " + i31 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld1 Test.sFld = " + Test.instanceCount + "," + Test.iFld1 +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.dFld Test.fFld byFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Float.floatToIntBits(Test.fFld) + "," + byFld);
        FuzzerUtils.out.println("Test.lArrFld Test.sArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
