// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-1471146627L;
    public static boolean bFld=false;
    public static double dFld=2.15491;
    public static short sFld=17752;
    public static long lFld=167L;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -13004L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(float f1, int i6, int i7) {

        int i9=14, i10=144, i11=1, i12=-7, iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(fArr, 2.123F);

        for (int i8 : iArr) {
            Test.bFld = Test.bFld;
            i8 *= (int)Test.instanceCount;
        }
        i7 -= i7;
        i7 *= i7;
        Test.dFld -= i7;
        f1 += i7;
        switch (((10 >>> 1) % 2) + 119) {
        case 119:
            for (i9 = 224; i9 > 13; i9 -= 2) {
                Test.bFld = Test.bFld;
                for (i11 = i9; i11 < 15; i11++) {
                    switch ((i9 % 2) + 9) {
                    case 9:
                        i10 = (int)Test.instanceCount;
                        i10 <<= i7;
                        break;
                    case 10:
                        i6 += (i11 * i11);
                        break;
                    default:
                        fArr[i11] += Test.sFld;
                    }
                }
            }
            break;
        case 120:
            iArr = iArr;
        }
        long meth_res = Float.floatToIntBits(f1) + i6 + i7 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(float f, int i5) {

        byte by=45;
        double d=-69.94080;
        int i13=6, i14=85, i15=-165, i16=-16113, i17=7, iArr1[]=new int[N];
        long l1=2029236675L;

        FuzzerUtils.init(iArr1, 576);

        i5 = i5;
        by = (byte)((long)((Test.instanceCount + d) - (by + i5)) >>> lMeth(f, i5, i5));
        Test.instanceCount -= (long)f;
        for (i13 = 20; i13 < 386; i13++) {
            Test.instanceCount += i13;
            switch ((i13 % 10) + 52) {
            case 52:
            case 53:
                i5 *= (int)1.505F;
                break;
            case 54:
                f *= Test.instanceCount;
                f += (((i13 * i14) + by) - Test.instanceCount);
                for (l1 = i13; l1 < 5; l1++) {
                    Test.instanceCount += (l1 + i5);
                    Test.sFld = (short)i13;
                }
                break;
            case 55:
                for (i16 = 1; i16 < 5; ++i16) {
                    i17 = (int)l1;
                }
                break;
            case 56:
                by = (byte)-3;
                break;
            case 57:
                if (i13 != 0) {
                    vMeth_check_sum += Float.floatToIntBits(f) + i5 + by + Double.doubleToLongBits(d) + i13 + i14 + l1
                        + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                break;
            case 58:
                iArr1[i13] >>= 0;
                break;
            case 59:
                i5 = by;
                break;
            case 60:
                i5 += (((i13 * i16) + Test.instanceCount) - f);
                break;
            case 61:
                i14 = i16;
                break;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i5 + by + Double.doubleToLongBits(d) + i13 + i14 + l1 + i15 + i16
            + i17 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(long l, int i3, int i4) {

        float f2=1.1008F;

        vMeth(f2, i4);
        f2 *= Test.lFld;
        vSmallMeth_check_sum += l + i3 + i4 + Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        int i=-63993, i1=-58300, i2=-48, i18=-40648, i19=-11, i20=33559, i21=50, i22=11, i23=17152, i24=-230;
        float f3=0.45F, fArr1[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr1, 65.834F);
        FuzzerUtils.init(dArr, 79.23728);

        switch (((((int)(Test.instanceCount * i)) >>> 1) % 10) + 9) {
        case 9:
            for (i1 = 13; i1 < 280; i1++) {
                for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(Test.instanceCount, i1, i1);
            }
            Test.instanceCount = (long)-23.25482;
            break;
        case 10:
            fArr1[(i >>> 1) % N] -= i2;
            i = -36;
            i18 = 1;
            while (++i18 < 183) {
                switch ((i18 % 5) + 106) {
                case 106:
                    i2 += i1;
                    Test.instanceCount *= (long)1.38F;
                    Test.instanceCount = (long)f3;
                    break;
                case 107:
                    for (i19 = i18; i19 < 137; ++i19) {
                        i *= i2;
                        iArrFld[i18 + 1] = i2;
                        Test.lArrFld[i19 - 1] -= i19;
                    }
                    Test.instanceCount = Test.sFld;
                    i += i;
                    for (i21 = 6; 137 > i21; i21++) {
                        byte by1=-104;
                        i20 ^= (int)Test.instanceCount;
                        Test.instanceCount = (long)116.65433;
                        i += (i21 | i1);
                        i2 += i21;
                        byArrFld[i18 - 1] = by1;
                        i20 = -58114;
                        Test.dFld -= i18;
                        i20 |= i2;
                        i20 = (int)Test.lFld;
                    }
                    break;
                case 108:
                    for (i23 = i18; i23 < 137; i23++) {
                        iArrFld[i23 - 1] -= i24;
                        Test.lFld += (i23 * i23);
                    }
                    break;
                case 109:
                    i20 *= i2;
                    break;
                case 110:
                    i24 = i2;
                    break;
                }
            }
            break;
        case 11:
            i24 += (int)Test.lFld;
            break;
        case 12:
            dArr[(i2 >>> 1) % N] -= i;
            break;
        case 13:
            i22 = (int)2.91F;
            break;
        case 14:
            iArrFld[(-42952 >>> 1) % N] >>= (int)-98L;
        case 15:
            i = i21;
            break;
        case 16:
            Test.instanceCount <<= Test.instanceCount;
        case 17:
        case 18:
            i -= (int)Test.lFld;
            break;
        default:
            i = i20;
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i18 f3 i19 = " + i18 + "," + Float.floatToIntBits(f3) + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 fArr1 = " + i23 + "," + i24 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.dFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld Test.lFld iArrFld = " + Test.sFld + "," + Test.lFld + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.lArrFld byArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
