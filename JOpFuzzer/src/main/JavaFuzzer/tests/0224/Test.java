// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4961815302578965755L;
    public static int iFld=1;
    public static double dFld=0.5853;
    public static volatile boolean bFld=false;
    public static byte byFld=5;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static int iMeth() {

        double d=27.50665;
        float f1=88.844F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -124.312F);

        d /= ((++Test.instanceCount) | 1);
        fArr[(Test.iFld >>> 1) % N] = (--f1);
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        float f2=-64.79F, f3=5.843F;
        int i=-151, i1=-5689, i2=64105, i3=-27, i4=7, iArr[]=new int[N];
        byte by=40;

        FuzzerUtils.init(iArr, 101);

        Test.instanceCount = (long)Float.intBitsToFloat((10933 ^ Math.abs(Test.iFld)) + (Test.iFld - Test.iFld));
        iMeth();
        Test.iFld += (int)(f2 %= ((iArr[(Test.iFld >>> 1) % N] & (long)(Test.iFld * f2)) | 1));
        Test.iFld *= (++Test.iFld);
        for (i = 7; 167 > i; i++) {
            Test.iFld = -223;
            switch ((i % 1) + 67) {
            case 67:
                Test.iFld >>>= (int)(i + (Test.dFld - (-(i - 0.69F))));
                Test.iFld *= i;
                for (i2 = 10; 1 < i2; i2--) {
                    i4 = 2;
                    while (--i4 > 0) {
                        by += (byte)iArr[i4 + 1];
                        f3 = 0;
                        i3 += i4;
                        i3 += i4;
                    }
                }
                break;
            default:
                Test.dFld *= (-Math.max(Test.iFld++, i2));
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i + i1 + i2 + i3 + i4 + by + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l, byte by1) {

        int i7=35519, i8=-7, i9=1, i10=167;
        float f4=2.201F;
        short s1=-5315;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 7965581428245933676L);

        for (i7 = 263; i7 > 11; --i7) {
            f4 -= i8;
            l += i7;
            l += (((i7 * f4) + Test.iFld) - i8);
            vMeth();
            if (i8 != 0) {
                vMeth1_check_sum += l + by1 + i7 + i8 + Float.floatToIntBits(f4) + i9 + i10 + s1 +
                    FuzzerUtils.checkSum(lArr);
                return;
            }
            i8 <<= 7;
            if (Test.bFld) {
                switch ((i7 % 8) + 125) {
                case 125:
                    lArr[i7] = i8;
                    for (i9 = 6; i9 > i7; --i9) {
                        l += (i9 * i9);
                        i8 *= Test.iFld;
                        i8 -= i8;
                        i10 += i9;
                    }
                    break;
                case 126:
                    s1 += (short)(55 + (i7 * i7));
                case 127:
                    i10 += i7;
                    break;
                case 128:
                    i8 -= (int)l;
                case 129:
                    i8 *= i10;
                    break;
                case 130:
                    l >>= Test.iFld;
                    break;
                case 131:
                    i8 += (i7 + i9);
                    break;
                case 132:
                    Test.instanceCount %= 3;
                    break;
                }
            } else {
                i10 += (int)Test.dFld;
            }
        }
        vMeth1_check_sum += l + by1 + i7 + i8 + Float.floatToIntBits(f4) + i9 + i10 + s1 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        float f=102.891F;
        short s=-5701;
        int i5=3, i6=-254, i11=-11, i12=-201, i13=-79, i14=172, i15=-5, i16=-24782;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -43.16588);

        try {
            Test.iFld = (int)(((-253 / ((Test.iFld - Test.iFld) | 1)) - (2471580320L + (f - Test.iFld))) -
                Test.instanceCount);
            Test.iFld += (int)191L;
            s = (short)(((Test.iFld << Test.iFld) + (--iArrFld[(Test.iFld >>> 1) % N])) * Math.max(Test.instanceCount =
                Test.iFld, Test.iFld - Test.iFld));
            vMeth();
            for (i5 = 1; i5 < 304; ++i5) {
                i6 *= Test.iFld;
            }
            vMeth1(Test.instanceCount, Test.byFld);
        }
        catch (ArithmeticException exc2) {
            Test.iFld = 6392;
        }
        catch (NegativeArraySizeException exc3) {
            Test.instanceCount += Test.iFld;
            for (i11 = 8; i11 < 305; ++i11) {
                Test.instanceCount = i12;
                for (i13 = 3; 85 > i13; ++i13) {
                    i6 = s;
                    Test.instanceCount = Test.instanceCount;
                    i14 >>= (int)Test.instanceCount;
                    Test.iFld -= (int)Test.instanceCount;
                    f += (i13 - f);
                    Test.instanceCount += (i13 * i13);
                    i6 *= Test.byFld;
                    dArr[i13] = Test.dFld;
                }
                f = 5;
                Test.iFld = i5;
                i15 = 85;
                while (--i15 > 0) {
                    Test.iFld -= -4192;
                    switch ((Test.iFld >>> 1) % 1) {
                    case 0:
                        i14 += (i15 + i13);
                        break;
                    }
                    i16 = 1;
                    while (++i16 < 1) {
                        i12 = (int)Test.instanceCount;
                        try {
                            i6 = (1239131180 / iArrFld[i15 - 1]);
                            iArrFld[i11 - 1] = (i6 / i6);
                            iArrFld[i11 + 1] = (-207 / i12);
                        } catch (ArithmeticException a_e) {}
                        i12 += (int)Test.instanceCount;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f s i5 = " + Float.floatToIntBits(f) + "," + s + "," + i5);
        FuzzerUtils.out.println("i6 i11 i12 = " + i6 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 dArr = " + i16 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.byFld iArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.byFld + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest vMeth1
//DEBUG  iMeth ->  iMeth vMeth mainTest vMeth1
//DEBUG  vMeth1 ->  vMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
