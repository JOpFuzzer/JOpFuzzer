// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=37740L;
    public static int iFld=-45741;
    public static float fFld=105.219F;
    public static int iFld1=-58628;
    public static boolean bFld=false;
    public byte byFld=-111;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
        FuzzerUtils.init(Test.lArrFld, 5886764313197705114L);
    }

    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l1) {

        double d=9.39152, dArr[]=new double[N];
        int i5=-22173, i6=31190, i7=3, i8=47841, i9=7877, i10=33260, i11=55761;
        float f1=-1.512F;
        boolean b=false;

        FuzzerUtils.init(dArr, 2.18358);

        Test.fFld += (float)d;
        Test.fFld = -60247L;
        for (i5 = 5; i5 < 195; ++i5) {
            for (f1 = 1; f1 < 8; ++f1) {
                try {
                    Test.iFld1 = (-3238 % i6);
                    Test.iFld = (17978 % i5);
                    Test.iArrFld[(int)(f1)] = (-29680 % Test.iFld1);
                } catch (ArithmeticException a_e) {}
                for (i8 = 1; i8 < 2; i8++) {
                    i9 <<= -9;
                    d = i5;
                    Test.fFld *= 59406;
                    Test.iArrFld[(int)(f1 - 1)] += i8;
                    Test.iFld1 *= (int)-2.586F;
                    dArr[(int)(f1 - 1)] *= l1;
                }
                for (i10 = 1; 2 > i10; ++i10) {
                    Test.iFld += (int)Test.instanceCount;
                }
                if (b) break;
            }
        }
        long meth_res = l1 + Double.doubleToLongBits(d) + i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11
            + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i2, long l) {

        int i3=38524, i4=1788, i12=2, i13=14329;
        byte by=20;
        float f=-21.530F;
        short s=-7543;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -4.120194);

        for (i3 = 2; i3 < 299; i3++) {
            by += (byte)(i3 - i4);
            f *= (iMeth(Test.instanceCount) + i2);
            f *= i2;
            Test.iFld -= i3;
            for (i12 = 1; i12 < 6; i12++) {
                i4 = i2;
                i2 -= s;
                Test.iArrFld[i3 + 1] <<= Test.iFld;
                dArr1[i3] *= i3;
                Test.iArrFld[i12] -= i12;
                Test.iFld <<= -217;
                Test.iFld -= (int)l;
                Test.iFld += (((i12 * Test.instanceCount) + i13) - by);
            }
        }
        Test.lArrFld[(i2 >>> 1) % N] |= Test.instanceCount;
        long meth_res = i2 + l + i3 + i4 + by + Float.floatToIntBits(f) + i12 + i13 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public long lMeth(int i) {

        int i1=26069, i14=-57701, i15=-239, i16=8;

        i1 = 1;
        do {
            i <<= (int)((Test.instanceCount >>= (-247 - (Test.iFld * Test.iFld))) * fMeth(i1, Test.instanceCount));
            Test.lArrFld[i1] = i14;
            i14 <<= -41757;
            Test.iFld1 += -55749;
            i14 += i1;
            for (i15 = 1; i15 < 6; i15++) {
                try {
                    i14 = (-244680242 / Test.iFld1);
                    i = (i1 / i1);
                    i14 = (Test.iFld / Test.iArrFld[i15]);
                } catch (ArithmeticException a_e) {}
                i14 = i15;
                try {
                    Test.iArrFld[i15] = (Test.iArrFld[i15] / -46506);
                    Test.iArrFld[i15 + 1] = (17 % i1);
                    i14 = (-40996 % Test.iArrFld[i1]);
                } catch (ArithmeticException a_e) {}
                i += (i15 ^ Test.iFld);
                Test.instanceCount += (((i15 * Test.instanceCount) + i1) - Test.instanceCount);
                i16 += i15;
            }
            Test.iArrFld[i1 - 1] = (int)99.589F;
            if (Test.bFld) continue;
        } while (++i1 < 264);
        long meth_res = i + i1 + i14 + i15 + i16;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17=-110, i18=64169, i19=-5, i20=54552, i21=-114, iArr[]=new int[N];
        short s1=18424;
        long l2=-235L;

        FuzzerUtils.init(iArr, -12);

        Test.instanceCount = ((Test.instanceCount--) - (Test.iFld--));
        Test.iFld = (int)(((iArr[(Test.iFld >>> 1) % N]--) * (Test.iFld--)) + lMeth(Test.iFld1));
        for (i17 = 352; 8 < i17; i17--) {
            Test.instanceCount += i17;
            if (Test.bFld) {
                Test.instanceCount = Test.iFld1;
            } else if (Test.bFld) {
                for (i19 = 3; i19 < 73; ++i19) {
                    s1 -= s1;
                    iArr[i17] *= (int)Test.instanceCount;
                    for (l2 = i19; l2 < 2; l2++) {
                        byFld += (byte)(((l2 * Test.iFld1) + i21) - Test.iFld1);
                        Test.instanceCount += l2;
                        iArr[(int)(l2)] *= i21;
                        i18 <<= -3;
                        Test.lArrFld = Test.lArrFld;
                        Test.iFld *= i19;
                        iArr[i17] = i19;
                        Test.bFld = Test.bFld;
                        Test.iFld1 = (int)l2;
                    }
                    Test.fFld *= i17;
                }
                i21 = i19;
                Test.iFld *= i17;
            } else {
                Test.fFld *= l2;
                if (Test.bFld) break;
                Test.iFld1 -= i19;
                Test.fFld %= -9.279F;
            }
            switch ((i17 % 1) + 78) {
            case 78:
                Test.fFld = Test.fFld;
                if (false) break;
                break;
            default:
                Test.lArrFld[i17] |= l2;
            }
        }

        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 s1 l2 = " + i20 + "," + s1 + "," + l2);
        FuzzerUtils.out.println("i21 iArr = " + i21 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld1 Test.bFld byFld = " + Test.iFld1 + "," + (Test.bFld ? 1 : 0) + "," + byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
