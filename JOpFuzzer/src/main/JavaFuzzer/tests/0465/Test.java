// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=5508009509730489834L;
    public static double dFld=27.97476;
    public static byte byFld=-79;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -61716);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long fMeth1_check_sum = 0;

    public static void vMeth() {

        float f=85.1012F, fArr[][]=new float[N][N];
        int i=182;

        FuzzerUtils.init(fArr, 18.661F);

        f -= ((-(-(i + i))) + (i = (int)(fArr[(i >>> 1) % N][(i >>> 1) % N]--)));
        vMeth_check_sum += Float.floatToIntBits(f) + i + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static float fMeth1() {

        int i9=11, i10=-10625, i11=5, i12=-2123, i13=-30105, i14=-160, iArr[]=new int[N];
        float f4=0.427F, fArr1[]=new float[N];
        short s=30597;

        FuzzerUtils.init(fArr1, -119.315F);
        FuzzerUtils.init(iArr, -11);

        for (i9 = 13; i9 < 266; i9++) {
            for (i11 = 1; i11 < 6; i11++) {
                for (i13 = i11; 2 > i13; i13++) {
                    f4 = i14;
                    i10 += Test.byFld;
                    i12 -= (int)Test.instanceCount;
                    Test.instanceCount -= Test.instanceCount;
                    i14 <<= i10;
                    i12 += (i13 * i13);
                    i10 &= i11;
                    Test.dFld = -52;
                    s += (short)(i13 - i13);
                    fArr1[i13] = 0;
                }
                iArr[i11 + 1] <<= (int)Test.instanceCount;
                f4 -= i14;
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f4) + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr);
        fMeth1_check_sum += meth_res;
        return (float)meth_res;
    }

    public static float fMeth() {

        float f3=-29.284F;
        int i8=-8, i15=4703, i16=-57188, i17=-13, i18=-155, i19=-19449;
        double d2=-10.60151;
        short s1=11117;
        boolean b1=false;

        f3 = i8;
        fMeth1();
        if (b1) {
            for (i15 = 20; i15 < 346; i15++) {
                i16 -= i8;
                i16 += (int)Test.instanceCount;
                d2 = 5;
                do {
                    try {
                        i8 = (Test.iArrFld[(int)(d2 + 1)] / i8);
                        i16 = (i15 % i8);
                        Test.iArrFld[(int)(d2 + 1)] = (Test.iArrFld[(int)(d2 + 1)] / i15);
                    } catch (ArithmeticException a_e) {}
                    for (i17 = 1; i17 < 1; i17++) {
                        i16 = (int)Test.instanceCount;
                        switch ((((i8 >>> 1) % 9) * 5) + 9) {
                        case 53:
                            i18 += 10909;
                            Test.instanceCount -= Test.instanceCount;
                            i8 = i18;
                            i18 = s1;
                            break;
                        case 45:
                            i19 += 0;
                            break;
                        case 17:
                            i16 -= i19;
                            break;
                        case 24:
                            Test.instanceCount = 82;
                        case 20:
                            Test.iArrFld[i17] -= i17;
                        case 30:
                            i16 += (i17 * i17);
                            break;
                        case 44:
                            i16 -= i8;
                        case 27:
                            i8 *= (int)27.40764;
                            break;
                        case 23:
                            i19 += (((i17 * Test.instanceCount) + i17) - i16);
                        }
                    }
                } while (--d2 > 0);
            }
        } else if (b1) {
            b1 = b1;
        }
        long meth_res = Float.floatToIntBits(f3) + i8 + i15 + i16 + Double.doubleToLongBits(d2) + i17 + i18 + s1 + i19
            + (b1 ? 1 : 0);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth(int i5, double d, double d1) {

        long l=-2979262765L, lArr[]=new long[N];
        int i6=4, i7=-21678, i20=4, i21=-51;
        float f2=-51.445F;
        boolean b=false;

        FuzzerUtils.init(lArr, -2378794510L);

        l += (i5 - i5);
        i5 = (i5--);
        i5 -= (int)lArr[(-124 >>> 1) % N];
        switch ((((i5--) >>> 1) % 7) * 5) {
        case 6:
            for (i6 = 7; 350 > i6; i6 += 2) {
                i7 += (int)((f2--) - ((--d) - i6));
                i7 += (int)Float.intBitsToFloat((int)((Test.instanceCount - Test.dFld) +
                    (-(-Long.reverseBytes(-62009L)))));
                vMeth();
                b = b;
                vMeth();
                i7 = (int)((++f2) - 4761162084827077764L);
            }
            break;
        case 12:
            i7 = (int)(((f2 * 0.814F) + fMeth()) + i7);
            for (i20 = 4; i20 < 156; i20++) {
                i21 -= i21;
                if (b) continue;
            }
            break;
        case 3:
            i7 = i6;
        case 34:
            i7 += i5;
            break;
        case 16:
            lArr[(38707 >>> 1) % N] += i5;
            break;
        case 31:
            i5 >>= Test.byFld;
            break;
        case 20:
            Test.iArrFld[(i5 >>> 1) % N] = (int)l;
            break;
        }
        long meth_res = i5 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + l + i6 + i7 +
            Float.floatToIntBits(f2) + (b ? 1 : 0) + i20 + i21 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-71, i2=60894, i3=241, i4=61550;
        float f1=-43.938F;
        short s2=-8111;
        boolean b2=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 3182804428833197948L);

        vMeth();
        vMeth();
        vMeth();
        vMeth();
        for (i1 = 11; i1 < 183; i1++) {
            i3 = 1;
            do {
                f1 += (-4396 + (i3 * i3));
                i4 = 1;
                while (++i4 < 1) {
                    Test.dFld += lMeth(i4, Test.dFld, Test.dFld);
                    i2 = (int)2.927F;
                    s2 += (short)(((i4 * i3) + Test.byFld) - Test.instanceCount);
                    Test.byFld ^= (byte)-22;
                    Test.dFld += 0L;
                    switch (((i1 % 7) * 5) + 111) {
                    case 117:
                        i2 >>>= -57;
                        Test.dFld -= Test.dFld;
                        lArr1[i4 + 1] = i4;
                        Test.iArrFld[i4] = i4;
                    case 142:
                        Test.dFld *= i3;
                        switch (((i4 % 7) * 5) + 120) {
                        case 133:
                            i2 += i4;
                            break;
                        case 142:
                            i2 <<= (int)35781L;
                            Test.iArrFld[i4] = i4;
                            i2 = i2;
                            break;
                        case 127:
                            Test.iArrFld[i1 - 1] += i1;
                        case 151:
                            Test.iArrFld[i4] += i4;
                            lArr1[i3] = i4;
                            Test.instanceCount = -75;
                            break;
                        case 136:
                            Test.byFld = (byte)14L;
                            i2 &= i3;
                            break;
                        case 123:
                        case 143:
                            if (b2) break;
                            break;
                        default:
                            Test.dFld += s2;
                        }
                        break;
                    case 120:
                        i2 -= Test.byFld;
                        break;
                    case 118:
                        Test.instanceCount += (((i4 * Test.instanceCount) + i4) - f1);
                        break;
                    case 129:
                        i2 = (int)f1;
                        break;
                    case 140:
                        i2 += i2;
                    case 128:
                        Test.dFld -= i4;
                        break;
                    default:
                        f1 = Test.instanceCount;
                    }
                }
            } while (++i3 < 146);
        }

        FuzzerUtils.out.println("i1 i2 i3 = " + i1 + "," + i2 + "," + i3);
        FuzzerUtils.out.println("f1 i4 s2 = " + Float.floatToIntBits(f1) + "," + i4 + "," + s2);
        FuzzerUtils.out.println("b2 lArr1 = " + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth1_check_sum: " + fMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth mainTest
//DEBUG  fMeth1 ->  fMeth1 fMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
