// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-62443L;
    public static float fFld=-108.253F;
    public static double dFld=2.13462;
    public static short sFld=-20719;
    public static int iFld=22802;
    public static int iFld1=-9;
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-23205);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1() {

        int i10=-38861, i11=13, i12=1, i13=-72, i14=228;
        boolean b=true;

        for (i10 = 4; i10 < 191; i10++) {
            i11 += (i10 | i10);
            i11 /= (int)((long)(Test.dFld) | 1);
            for (i12 = 1; i12 < 9; i12 += 2) {
                Test.fFld += (i12 - Test.fFld);
            }
            b = b;
            Test.instanceCount *= i11;
        }
        switch (((i13 >>> 1) % 3) + 15) {
        case 15:
            i14 = 1;
            while (++i14 < 326) {
                i11 *= (int)Test.fFld;
                i13 += (((i14 * i13) + Test.instanceCount) - Test.instanceCount);
                i13 += (int)-37503L;
                Test.sFld += (short)Test.fFld;
                i13 = (int)196L;
                i11 += (((i14 * Test.fFld) + Test.instanceCount) - i12);
            }
            break;
        case 16:
            Test.fFld = Test.instanceCount;
            break;
        case 17:
            i13 = (int)-48363L;
        default:
            Test.fFld *= i10;
        }
        long meth_res = i10 + i11 + i12 + i13 + (b ? 1 : 0) + i14;
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(float f, int i8) {

        long l=85L;
        int i9=-14512, i15=-116, i16=131, i17=-17335, iArr1[][]=new int[N][N];
        boolean b1=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -7);
        FuzzerUtils.init(fArr, 2.40F);

        iArr1[(i8 >>> 1) % N][(i8 >>> 1) % N] = (int)(-((Test.instanceCount - -68) - (-38270 * i8)));
        Test.instanceCount = i8;
        for (l = 19; 329 > l; ++l) {
            i8 = (int)(-((i9 + i9) - lMeth1()));
            if (true) continue;
            Test.iFld >>= (int)Test.instanceCount;
        }
        i15 = 1;
        do {
            Test.iFld = -7;
            for (i16 = i15; i16 < 13; i16++) {
                b1 = b1;
                i17 = (int)l;
                switch ((((i17 >>> 1) % 5) * 5) + 78) {
                case 80:
                    i17 >>>= (int)l;
                    break;
                case 84:
                    f *= 0.935F;
                    fArr[i16] += i8;
                    break;
                case 99:
                    if (i8 != 0) {
                    }
                    break;
                case 82:
                    Test.iFld = i8;
                    break;
                case 87:
                    Test.instanceCount += (i16 * i15);
                }
            }
        } while (++i15 < 124);
        long meth_res = Float.floatToIntBits(f) + i8 + l + i9 + i15 + i16 + i17 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public int iMeth(short s, int i3, double d) {

        int i4=-26373, i5=7, i6=215, i7=56165, i18=-55749, i19=24344, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 162);

        for (i4 = 5; i4 < 262; ++i4) {
            for (i6 = i4; i6 < 6; i6++) {
                s += (short)14;
                i3 += (int)((i5 * (i7 - i7)) + ((Test.fFld++) - 0.372F));
                i7 *= iArr[i4 - 1];
                i5 -= (int)lMeth(42.510F, i6);
                Test.fFld -= i7;
            }
            d -= Test.instanceCount;
            s -= (short)0L;
            i7 = 0;
            for (i18 = 6; i18 > i4; i18--) {
                Test.fFld -= i6;
                d -= i6;
                d *= s;
                i19 = s;
            }
        }
        long meth_res = s + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i18 + i19 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=-219, i2=-6, i20=-29140, i21=33538, iArr2[]=new int[N];
        byte by=-109;
        boolean b2=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.109009);
        FuzzerUtils.init(iArr2, -4499);

        i = 1;
        while (++i < 211) {
            for (i1 = 2; i1 < 119; i1++) {
                Test.instanceCount *= (~iMeth((short)(21165), i2, 1.96500));
                i2 = i2;
                if (b2) {
                    Test.fFld += i2;
                    try {
                        i2 = (i1 / 61152);
                        i2 = (i2 / i);
                        i2 = (i1 / i2);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld += i1;
                    dArr[i1] -= i;
                } else if (b2) {
                    Test.iFld += (int)(21L + (i1 * i1));
                    i20 = 1;
                    do {
                        i2 = 14653;
                        Test.instanceCount = i1;
                        i2 += (((i20 * i2) + Test.instanceCount) - i21);
                        i21 += 48289;
                        switch ((i1 % 8) + 61) {
                        case 61:
                            Test.sFld *= (short)i;
                            iArr2[i1 + 1] -= i21;
                            break;
                        case 62:
                            Test.fFld -= Test.fFld;
                            Test.iFld = i20;
                            i2 = -13;
                            break;
                        case 63:
                            switch (((Test.iFld >>> 1) % 4) + 46) {
                            case 46:
                                i2 += i2;
                                iArr2[i20 + 1] >>= by;
                                break;
                            case 47:
                                switch ((i % 10) + 105) {
                                case 105:
                                    switch ((i20 % 1) + 48) {
                                    case 48:
                                        i21 = 13;
                                        i2 -= Test.iFld;
                                        Test.dFld = Test.fFld;
                                        break;
                                    }
                                    iArr2[i1 + 1] = Test.iFld;
                                    break;
                                case 106:
                                    i21 -= i21;
                                case 107:
                                    Test.sArrFld[i1 - 1] = (short)-9;
                                case 108:
                                    iArr2[i1 + 1] = Test.iFld1;
                                    break;
                                case 109:
                                    iArr2[i] <<= -238;
                                    break;
                                case 110:
                                    iArr2[i20] = Test.iFld;
                                    break;
                                case 111:
                                    Test.instanceCount >>= Test.iFld1;
                                case 112:
                                    Test.iFld1 *= 9467;
                                    break;
                                case 113:
                                    Test.fFld += -14;
                                    break;
                                case 114:
                                    i2 = (int)Test.instanceCount;
                                    break;
                                default:
                                    if (b2) break;
                                }
                                break;
                            case 48:
                                Test.fFld -= (float)Test.dFld;
                                break;
                            case 49:
                                Test.fFld = i21;
                                break;
                            default:
                                i21 += i;
                            }
                        case 64:
                            iArr2[i1] += Test.iFld;
                            break;
                        case 65:
                            Test.instanceCount += (i20 + i);
                        case 66:
                            Test.iFld1 += (i20 * i20);
                            break;
                        case 67:
                            Test.iFld1 *= (int)Test.instanceCount;
                            break;
                        case 68:
                            iArr2 = iArr2;
                            break;
                        default:
                            Test.dFld += Test.iFld;
                        }
                    } while (++i20 < 2);
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i20 i21 by = " + i20 + "," + i21 + "," + by);
        FuzzerUtils.out.println("b2 dArr iArr2 = " + (b2 ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld Test.iFld Test.iFld1 = " + Test.sFld + "," + Test.iFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.sArrFld = " + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
