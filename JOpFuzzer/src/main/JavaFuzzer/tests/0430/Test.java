// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-931234520L;
    public static byte byFld=-31;
    public static short sFld=18835;
    public static double dFld=1.85791;
    public static boolean bFld=true;
    public long lArrFld[]=new long[N];
    public byte byArrFld[][]=new byte[N][N];
    public double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i3, int i4) {

        int i5=-35912, i6=-123, i7=81, i8=144, i9=62743, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 44421);

        i3 <<= (int)Test.instanceCount;
        Test.byFld = (byte)34219;
        for (i5 = 17; 371 > i5; i5++) {
            for (i7 = 5; 1 < i7; --i7) {
                if (false) continue;
                Test.instanceCount += (9 + (i7 * i7));
                i6 += i3;
                i9 -= (int)57669L;
                Test.byFld >>>= (byte)i4;
                iArr[i7] = i4;
                Test.instanceCount += Test.instanceCount;
                Test.instanceCount *= 41100L;
            }
            Test.instanceCount += i6;
        }
        i6 -= (int)Test.instanceCount;
        iArr[(i4 >>> 1) % N] = (int)Test.instanceCount;
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(long l, int i2, double d1) {

        float f1=-104.977F;
        int i10=97, i11=-204, i12=244, i13=-13, i14=13;
        boolean b=false;

        i2 = (int)(f1 + fMeth(i2, i2));
        for (i10 = 6; i10 < 312; i10++) {
            i2 += (i10 ^ (long)f1);
            i12 = 1;
            while ((i12 += 3) < 5) {
                f1 = Test.instanceCount;
                b = b;
                for (i13 = 1; i13 < 5; ++i13) {
                    l += (i13 * i13);
                    Test.sFld += (short)(((i13 * i2) + i2) - i12);
                    if (false) continue;
                    Test.byFld >>= (byte)54683L;
                    i2 += (int)(0.867F + (i13 * i13));
                    i2 -= i11;
                    if (i11 != 0) {
                        vMeth1_check_sum += l + i2 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i10 + i11
                            + i12 + (b ? 1 : 0) + i13 + i14;
                        return;
                    }
                    i2 += (i13 * i13);
                }
            }
        }
        vMeth1_check_sum += l + i2 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i10 + i11 + i12 + (b ? 1
            : 0) + i13 + i14;
    }

    public static void vMeth(int i) {

        float f=114.616F, fArr[]=new float[N];
        int i1=-4188, i15=105, i16=-33404, i17=7, i18=-26740, iArr1[]=new int[N];
        double d=77.48221;

        FuzzerUtils.init(iArr1, -5261);
        FuzzerUtils.init(fArr, 0.30F);

        for (f = 4; f < 313; ++f) {
            d = 1;
            do {
                vMeth1(Test.instanceCount, i, d);
                for (i15 = (int)(f); 3 > i15; i15++) {
                    iArr1[i15] = i16;
                    Test.dFld += Test.sFld;
                }
                for (i17 = 1; i17 < 3; ++i17) {
                    Test.instanceCount >>= i18;
                    if (Test.bFld) break;
                    i16 = i;
                }
                i = -22491;
                Test.instanceCount >>= Test.instanceCount;
                i16 = (int)Test.instanceCount;
                Test.instanceCount = i18;
                fArr[(int)(d)] += Test.instanceCount;
            } while ((d += 2) < 5);
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + Double.doubleToLongBits(d) + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i19=-192, i20=-88, i21=-40506, i22=6, i23=-30229, i24=0, i25=-142, i26=-70, i27=9, iArr2[]=new int[N];
        float f2=1.786F;

        FuzzerUtils.init(iArr2, -50);

        vMeth(i19);
        f2 *= i19;
        for (i20 = 8; i20 < 299; i20++) {
            iArr2[i20] -= 13;
            i19 = (int)-35240L;
            for (i22 = 3; i22 < 86; i22 += 2) {
                lArrFld[i20] *= i21;
                switch (((i19 >>> 1) % 3) + 77) {
                case 77:
                    try {
                        i19 = (3 / i23);
                        i19 = (iArr2[i22 + 1] % iArr2[i22 - 1]);
                        i21 = (i22 % i21);
                    } catch (ArithmeticException a_e) {}
                    switch ((i22 % 2) + 103) {
                    case 103:
                        for (i24 = 1; i24 < 3; ++i24) {
                            Test.instanceCount = 137;
                            i21 &= i19;
                            iArr2[i22] = (int)395122515L;
                            i23 >>>= i19;
                            i23 += (((i24 * i23) + i19) - i25);
                            byArrFld[i22][i20] = Test.byFld;
                            Test.byFld = (byte)i21;
                            Test.instanceCount = 64034L;
                            lArrFld[i20 + 1] = (long)f2;
                            f2 = 129L;
                        }
                        break;
                    case 104:
                        f2 += i22;
                        break;
                    default:
                        i21 -= (int)f2;
                    }
                    i21 *= i22;
                    Test.instanceCount += (i22 * i22);
                    break;
                case 78:
                    i19 >>= i25;
                    break;
                case 79:
                    f2 += (i22 + Test.instanceCount);
                    for (i26 = i22; 3 > i26; i26 += 3) {
                        dArrFld[i26 - 1] = Test.instanceCount;
                        i21 += (((i26 * Test.byFld) + Test.instanceCount) - i26);
                    }
                default:
                    i19 >>= Test.sFld;
                }
            }
        }

        FuzzerUtils.out.println("i19 f2 i20 = " + i19 + "," + Float.floatToIntBits(f2) + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 iArr2 = " + i27 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.sFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.dFld Test.bFld lArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            (Test.bFld ? 1 : 0) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("byArrFld dArrFld = " + FuzzerUtils.checkSum(byArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
