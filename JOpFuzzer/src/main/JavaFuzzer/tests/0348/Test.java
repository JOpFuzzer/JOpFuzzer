// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1L;
    public static float fFld=0.49F;
    public static boolean bFld=true;
    public static volatile byte byFld=-78;
    public static int iFld=2;
    public int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)7749);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8, int i9) {

        int i10=-181, i11=62247, i12=963, i13=-36732, i14=-64387, iArr[]=new int[N];
        double d=-67.73554;
        boolean b=true, bArr[]=new boolean[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr, 0.331F);
        FuzzerUtils.init(iArr, -13);

        i9 -= (int)Test.instanceCount;
        for (i10 = 123; i10 > 6; i10 -= 2) {
            Test.fFld += (i10 * i10);
            d += 1.934F;
            i12 = 1;
            while (++i12 < 26) {
                switch (((i12 % 9) * 5) + 1) {
                case 4:
                    for (i13 = 1; i13 < 1; i13++) {
                        i9 *= i14;
                        if (Test.bFld) break;
                        i14 += (i13 - i14);
                        bArr = bArr;
                        i9 += (int)(-2552052988L + (i13 * i13));
                        fArr = fArr;
                        Test.instanceCount -= i9;
                        iArr[i12] -= (int)Test.instanceCount;
                    }
                    break;
                case 19:
                    i8 += i12;
                case 40:
                    Test.byFld += (byte)Test.fFld;
                    break;
                case 6:
                    if (i9 != 0) {
                        vMeth1_check_sum += i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 + i14 + (b ? 1
                            : 0) + FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    break;
                case 30:
                    d += i10;
                case 34:
                    b = Test.bFld;
                    break;
                case 9:
                    i11 *= (int)d;
                    break;
                case 38:
                    i8 += (int)(3L + (i12 * i12));
                    break;
                case 27:
                    Test.fFld *= Test.instanceCount;
                    break;
                }
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 + i14 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i7) {

        byte by=85, byArr[]=new byte[N];
        float f=-114.324F;
        int i15=-27754, i16=-5, iArr1[][]=new int[N][N];
        double d1=-2.116941, dArr[]=new double[N];
        short s=17489;

        FuzzerUtils.init(byArr, (byte)-36);
        FuzzerUtils.init(iArr1, -15180);
        FuzzerUtils.init(dArr, -96.16863);

        Test.instanceCount = i7;
        i7 += (int)(((Test.instanceCount * -144) * (by++)) + (f++));
        vMeth1(i7, i7);
        byArr[(i7 >>> 1) % N] *= (byte)i7;
        i7 = (int)49L;
        for (i15 = 15; 384 > i15; ++i15) {
            Test.instanceCount = 163;
            Test.fFld = -196;
            i16 = (int)d1;
            i16 = (int)f;
            Test.sArrFld[i15 + 1] |= s;
            switch ((i15 % 7) + 21) {
            case 21:
                i16 += (i15 + f);
            case 22:
                i16 <<= i16;
                break;
            case 23:
                iArr1[i15][i15] &= i16;
                break;
            case 24:
                i7 *= i7;
                break;
            case 25:
                Test.instanceCount = -2812082485602921964L;
                break;
            case 26:
                dArr[i15 - 1] -= Test.instanceCount;
            case 27:
            default:
                i7 >>= i15;
            }
        }
        vMeth_check_sum += i7 + by + Float.floatToIntBits(f) + i15 + i16 + Double.doubleToLongBits(d1) + s +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public float fMeth() {

        int i4=-48, i5=-49, i6=-11, i17=-6, i18=214, i19=-6;
        short s1=-7340;

        for (i4 = 147; i4 > 2; --i4) {
            i6 = 1;
            do {
                vMeth(-195);
                Test.instanceCount -= Test.instanceCount;
                i5 += (int)-1.37167;
                Test.fFld -= i4;
                i5 -= (int)5L;
                i5 = i6;
                iArrFld[i6] = i6;
                i5 *= s1;
                i17 = i4;
                i17 += (int)Test.fFld;
            } while (++i6 < 11);
        }
        for (i18 = 2; 202 > i18; i18++) {
            Test.fFld += Test.instanceCount;
            i17 += (i18 * i5);
        }
        long meth_res = i4 + i5 + i6 + s1 + i17 + i18 + i19;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-48183, i1=22, i2=35493, i3=18806, i20=7, i21=17932, i22=7, i23=64733, i24=9299;
        long l=10L, lArr[]=new long[N];
        double d2=0.82355;
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(lArr, -5237931424603470572L);
        FuzzerUtils.init(fArr1, 94.393F);

        if (Test.bFld) {
            for (i = 3; 155 > i; ++i) {
                for (i2 = 1; i2 < 165; ++i2) {
                    Test.instanceCount = (Test.instanceCount * Integer.reverseBytes(--i3));
                }
                try {
                    iArrFld[i - 1] = (i % 210);
                    iArrFld[(64700 >>> 1) % N] = (-1578845534 / i);
                    i1 = (i % i1);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = (long)(fMeth() - Test.instanceCount);
                for (l = 3; l < 165; l++) {
                    i3 += (int)(l * l);
                    i21 = 1;
                    do {
                        Test.byFld *= (byte)i20;
                        Test.instanceCount <<= i1;
                        iArrFld[i21] = (int)l;
                        try {
                            iArrFld[i21] = (-255 % i3);
                            iArrFld[i21] = (i20 % 57);
                            iArrFld[i] = (i20 / i21);
                        } catch (ArithmeticException a_e) {}
                        i3 = (int)d2;
                        i1 += (i21 | i1);
                    } while ((i21 += 3) < 2);
                    Test.byFld += (byte)(l * l);
                    iArrFld[(int)(l - 1)] *= Test.iFld;
                    iArrFld[(int)(l - 1)] -= (int)d2;
                    lArr[(int)(l - 1)] = i;
                    fArr1[(int)(l + 1)][i] = i1;
                }
            }
            i1 += (int)Test.instanceCount;
            i20 += (int)l;
            for (i22 = 9; i22 < 196; i22++) {
                i20 += i22;
                Test.fFld = i3;
                i24 = 1;
                while (++i24 < 134) {
                    i3 += i;
                    Test.fFld = 112.187F;
                    i1 = (int)l;
                    Test.instanceCount = i;
                }
            }
        } else {
            i1 = i1;
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 l i20 = " + i3 + "," + l + "," + i20);
        FuzzerUtils.out.println("i21 d2 i22 = " + i21 + "," + Double.doubleToLongBits(d2) + "," + i22);
        FuzzerUtils.out.println("i23 i24 lArr = " + i23 + "," + i24 + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld Test.iFld iArrFld = " + Test.byFld + "," + Test.iFld + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.sArrFld = " + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
