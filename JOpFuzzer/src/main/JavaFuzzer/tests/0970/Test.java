// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2576632376L;
    public static boolean bFld=false;
    public static float fFld=-1.964F;
    public static int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -28);
        FuzzerUtils.init(Test.iArrFld1, 14563);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(double d, int i6) {

        int i7=134, i8=-61456, i9=-204, i10=23482, i11=-1, iArr[]=new int[N], iArr1[]=new int[N];
        float f1=1.730F, fArr[]=new float[N];
        short s1=25226;
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 39.768F);
        FuzzerUtils.init(iArr, 104);
        FuzzerUtils.init(lArr1, -23476L);
        FuzzerUtils.init(iArr1, 13);

        for (i7 = 3; i7 < 200; ++i7) {
            switch ((i7 % 3) + 13) {
            case 13:
                switch ((i7 % 5) + 75) {
                case 75:
                    fArr[i7 + 1] -= -11;
                    for (i9 = i7; i9 < 8; i9++) {
                        iArr[i9 - 1] = i7;
                        i10 |= i7;
                        i8 -= i7;
                        lArr1[i7] += Test.instanceCount;
                        f1 -= i7;
                    }
                    break;
                case 76:
                    iArr[i7 - 1] = (int)1.493F;
                case 77:
                    i11 = 1;
                    do {
                        i10 <<= i10;
                        i8 += i11;
                        Test.instanceCount += (-5L + (i11 * i11));
                    } while (++i11 < 8);
                case 78:
                    i6 -= (int)f1;
                case 79:
                    s1 += (short)(((i7 * i9) + i10) - i8);
                    break;
                default:
                    iArr1[i7] = i7;
                }
                break;
            case 14:
                iArr1[i7] >>= (int)Test.instanceCount;
                break;
            case 15:
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f1) + i11 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(int i1, int i2) {

        int i3=8, i4=16, i5=-34212, i12=136, iArr2[]=new int[N];
        float f=114.868F;
        double d1=-1.2562, d2=-47.107133;
        byte by=61;

        FuzzerUtils.init(iArr2, -189);

        for (i3 = 15; i3 < 334; ++i3) {
            for (f = 1; 5 > f; f++) {
                Test.instanceCount -= (((i2 | i1) + sMeth(d1, i2)) - i2);
                i1 *= i1;
                for (d2 = 1; 2 > d2; ++d2) {
                    i2 = (int)d1;
                    iArr2[(int)(f - 1)] = i1;
                    if (Test.bFld) break;
                    if (Test.bFld) {
                        switch ((int)((f % 2) + 11)) {
                        case 11:
                            if (false) continue;
                            i5 += (-9 + (d2 * d2));
                            i4 += (int)(((d2 * Test.instanceCount) + i2) - Test.instanceCount);
                            i2 = by;
                            break;
                        case 12:
                            iArr2[(int)(f)] += (int)Test.instanceCount;
                        }
                    } else if (Test.bFld) {
                        i2 += (int)f;
                        vMeth_check_sum += i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + i5 +
                            Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i12 + by +
                            FuzzerUtils.checkSum(iArr2);
                        return;
                    } else {
                        Test.fFld += (float)(d2 * d2);
                    }
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(d2) + i12 + by + FuzzerUtils.checkSum(iArr2);
    }

    public static void vSmallMeth(short s) {

        int i=-60490;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -187L);

        lArr[(i >>> 1) % N] >>= (((--i) + (-229 + (i - i))) + Math.abs(i + -18729));
        vMeth(i, i);
        vSmallMeth_check_sum += s + i + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        short s2=22148;
        int i13=0, i14=-87, i15=0, i16=-13025, i17=4, i19=-8921, i20=42450, i21=-27900;
        byte by2=-18;

        for (int smallinvoc=0; smallinvoc<180; smallinvoc++) vSmallMeth(s2);
        Test.iArrFld[(i13 >>> 1) % N][(i13 >>> 1) % N] -= i13;
        Test.instanceCount -= 1;
        i13 = (int)Test.instanceCount;
        for (i14 = 16; i14 < 321; i14 += 3) {
            i15 = i14;
            for (i16 = 6; 248 > i16; ++i16) {
                byte by1=-4;
                i17 += i16;
                i13 *= i17;
                by1 = (byte)-33610;
                try {
                    i15 = (i14 % Test.iArrFld[i14][i16 - 1]);
                    i17 = (i15 % 25064);
                    i17 = (i14 / -1133500199);
                } catch (ArithmeticException a_e) {}
                i17 = (int)Test.instanceCount;
            }
            for (i19 = 1; i19 < 248; i19++) {
                i21 = 1;
                do {
                    double d3=1.88179;
                    switch ((i14 % 6) + 20) {
                    case 20:
                        Test.fFld = i16;
                        i13 -= (int)d3;
                        i15 = i20;
                        i20 = i21;
                        break;
                    case 21:
                        i20 -= (int)-2.470F;
                        i17 += (i21 | i16);
                        i15 += i21;
                        i13 = i14;
                        break;
                    case 22:
                        Test.iArrFld1 = Test.iArrFld1;
                        Test.instanceCount -= s2;
                        break;
                    case 23:
                        Test.fFld *= 13;
                        if (true) continue;
                        d3 = Test.instanceCount;
                        break;
                    case 24:
                        Test.fFld -= s2;
                        by2 = (byte)-3;
                        break;
                    case 25:
                        Test.fFld %= ((long)(Test.fFld) | 1);
                        break;
                    }
                } while (++i21 < 2);
            }
        }

        FuzzerUtils.out.println("s2 i13 i14 = " + s2 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("by2 = " + by2);

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  sMeth ->  sMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
