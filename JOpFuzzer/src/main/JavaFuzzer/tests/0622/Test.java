// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8213753853578479037L;
    public static float fFld=27.393F;
    public static short sFld=-18572;
    public static int iFld=85;
    public static boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 93.44949);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, long l) {

        int i5=-8, i6=-40832, i7=10, i8=17, i9=-39, i10=84;
        float f1=7.897F;
        double d1=123.29049;
        byte by=-6;

        for (i5 = 4; i5 < 281; ++i5) {
            for (i7 = 1; 6 > i7; i7++) {
                Test.fFld -= i6;
                i4 -= i5;
                Test.dArrFld[i7 + 1] -= Test.instanceCount;
                i8 -= (int)f1;
                for (i9 = 1; i9 < 2; i9++) {
                    d1 -= i5;
                    by |= (byte)i7;
                    i8 = (int)l;
                    i10 = -100;
                    Test.instanceCount = i7;
                    i6 += i9;
                    l -= i8;
                    l -= -1;
                }
            }
        }
        vMeth2_check_sum += i4 + l + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 +
            Double.doubleToLongBits(d1) + by;
    }

    public static void vMeth1(int i2, int i3, float f) {

        int i11=-10, i12=47652, i13=61707, i14=-222, i15=10, i16=6, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -162);

        vMeth2(i2, Test.instanceCount);
        for (i11 = 3; i11 < 216; i11++) {
            boolean b1=true;
            if (b1) break;
            Test.sFld += (short)i11;
            i2 += -11;
            for (i13 = 1; 8 > i13; i13++) {
                iArr1 = iArr1;
                Test.fFld *= i13;
                try {
                    i2 = (i12 / i12);
                    i3 = (828169996 % i14);
                    i12 = (115 % i3);
                } catch (ArithmeticException a_e) {}
                try {
                    i3 = (i13 / i13);
                    i12 = (i11 / -282856647);
                    i14 = (i11 % -121);
                } catch (ArithmeticException a_e) {}
                iArr1[i11 + 1] = i12;
            }
        }
        for (i15 = 1; i15 < 139; ++i15) {
            i3 = Test.iFld;
            Test.instanceCount <<= i3;
        }
        iArr1 = iArr1;
        vMeth1_check_sum += i2 + i3 + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(boolean b, int i1) {

        double d=0.1017;
        int i17=11, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -37949);

        d = (++iArr[(43485 >>> 1) % N]);
        vMeth1(36246, Test.iFld, Test.fFld);
        i17 = 1;
        while (++i17 < 386) {
            iArr[i17] = (int)Test.instanceCount;
            i1 = i1;
            iArr[i17 + 1] |= -237;
        }
        vMeth_check_sum += (b ? 1 : 0) + i1 + Double.doubleToLongBits(d) + i17 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-9, i18=-72, i19=-31, i20=184, i21=-119, i22=181, i23=-63710, i24=13, i25=-6;
        float f2=-24.706F;

        i = 1;
        while (++i < 202) {
            vMeth(false, -9);
            Test.iFld += (i * i);
            if (Test.bFld) continue;
            f2 = 1;
            do {
                Test.iFld >>= i;
                Test.iFld = Test.iFld;
                iArrFld[(int)(f2 - 1)] -= (int)Test.instanceCount;
                for (i18 = 1; i18 < 1; ++i18) {
                    Test.iFld += i18;
                    iArrFld[(int)(f2)] += Test.sFld;
                    i19 += i18;
                    try {
                        Test.iFld = (-28095 / i19);
                        i19 = (i18 / 50680);
                        Test.iFld = (iArrFld[i18 - 1] / -3226);
                    } catch (ArithmeticException a_e) {}
                }
                Test.fFld -= i;
                iArrFld[i + 1] = -1;
                Test.iFld = i18;
            } while (++f2 < 124);
        }
        Test.iFld /= (int)(Test.instanceCount | 1);
        Test.instanceCount = Test.iFld;
        for (i20 = 2; 334 > i20; i20++) {
            for (i22 = 2; i22 < 76; i22++) {
                for (i24 = i22; i24 < 2; i24++) {
                    if (Test.bFld) {
                        i25 += Test.iFld;
                        i19 = i20;
                    } else {
                        i25 = i20;
                        iArrFld = iArrFld;
                        Test.bFld = true;
                        Test.instanceCount = i18;
                    }
                    i23 *= (int)Test.fFld;
                    i19 += i24;
                }
            }
        }

        FuzzerUtils.out.println("i f2 i18 = " + i + "," + Float.floatToIntBits(f2) + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 = " + i25);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld Test.bFld Test.dArrFld = " + Test.iFld + "," + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
