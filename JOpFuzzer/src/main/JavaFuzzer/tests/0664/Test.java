// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static int iFld=13;
    public static float fFld=-1.309F;
    public static byte byFld=-22;
    public static boolean bFld=true;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 0);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f1, float f2) {

        int i7=53929, i8=-10, i9=-26097, i10=-235, iArr[]=new int[N];
        double d2=-5.65622;
        boolean b=true;
        float f3=81.364F, fArr[]=new float[N];
        short s=6290;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -12292);
        FuzzerUtils.init(fArr, 1.828F);
        FuzzerUtils.init(lArr, -119L);

        iArr[(37768 >>> 1) % N] = Test.iFld;
        switch ((((Test.iFld >>> 1) % 7) * 5) + 34) {
        case 46:
            fArr[(Test.iFld >>> 1) % N] += Test.iFld;
            i7 = 1;
            while (++i7 < 242) {
                if (b) {
                    iArr[i7 + 1] += (int)d2;
                    d2 = 46345;
                } else {
                    for (f3 = 1; f3 < 7; f3 += 3) {
                        i8 = (int)-108.5986;
                        i8 = (int)-83.900F;
                        f1 = Test.instanceCount;
                        for (i9 = 1; i9 < 4; ++i9) {
                            lArr[i7 + 1] += Test.iFld;
                            Test.iFld = i10;
                            Test.instanceCount += (-5 + (i9 * i9));
                        }
                    }
                }
            }
            break;
        case 63:
            fArr[(i9 >>> 1) % N] -= 37;
            break;
        case 61:
            s -= (short)i8;
            break;
        case 49:
            Test.instanceCount = -5481623581628398075L;
            break;
        case 66:
            i10 = i10;
            break;
        case 60:
            iArr[(24591 >>> 1) % N] = i8;
            break;
        case 38:
            d2 -= -58L;
            break;
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i7 + Double.doubleToLongBits(d2) + (b
            ? 1 : 0) + Float.floatToIntBits(f3) + i8 + i9 + i10 + s + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth1(double d1) {

        int i6=-10, i12=-236, i13=-228, i14=-26914, i15=2;
        boolean b1=true;

        Test.iFld = (int)(Test.iFld <<= (int)((0L + Test.iFld) * Test.iFld));
        i6 = 1;
        do {
            vMeth(Test.fFld, Test.fFld);
            for (i12 = 1; i12 < 14; i12++) {
                try {
                    i13 = (Test.iFld / 33552);
                    i13 = (i12 % Test.iFld);
                    Test.iFld = (i6 % Test.iArrFld1[i6 + 1]);
                } catch (ArithmeticException a_e) {}
                for (i14 = 1; i14 < 2; i14++) {
                    Test.instanceCount += i14;
                    Test.iFld = (int)-92L;
                }
                Test.iArrFld1[i12 - 1] >>= i6;
            }
            switch ((i6 % 1) + 24) {
            case 24:
                i15 *= i13;
                Test.iArrFld1 = Test.iArrFld1;
                break;
            default:
                b1 = true;
                try {
                    i13 = (i6 / 762634169);
                    i13 = (56 / i6);
                    i15 = (i13 / i13);
                } catch (ArithmeticException a_e) {}
            }
            Test.iFld += i6;
        } while ((i6 += 3) < 326);
        long meth_res = Double.doubleToLongBits(d1) + i6 + i12 + i13 + i14 + i15 + (b1 ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, int i1, float f) {

        byte by=11;
        int i2=39, i3=173, i4=-3, i5=3925, i16=10, i17=201, i18=13, i19=-14;
        double d=89.29316, d3=2.77828;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)25241);

        i1 -= (int)(((i1 - l) + (by++)) - i1);
        for (i2 = 14; i2 < 254; ++i2) {
            boolean b2=false;
            if (b2) {
                i3 -= (int)(Test.instanceCount * (254 + sArr[i2 + 1]));
                for (d = i2; d < 7; d++) {
                    i5 = 1;
                    do {
                        i3 += (int)((i2 >> i2) + f);
                        Test.instanceCount = (((Test.iFld * by) + (i3++)) - ((i3 - Test.instanceCount) *
                            iMeth1(55.17388)));
                        Test.instanceCount -= i5;
                    } while (++i5 < 1);
                    for (i16 = 1; i16 < 1; i16++) {
                        Test.instanceCount += (long)-1.31407;
                        d3 -= i17;
                    }
                    for (i18 = 1; i18 > 1; i18--) {
                        i19 += (i18 + i3);
                        l |= -14;
                    }
                }
            } else if (b2) {
                i3 = (int)l;
            } else if (false) {
                i1 = i4;
            }
        }
        long meth_res = l + i1 + Float.floatToIntBits(f) + by + i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i16 +
            i17 + Double.doubleToLongBits(d3) + i18 + i19 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=13, i20=23, i21=-97, i22=54575, i23=56389, i24=-159, i25=12, i26=-26741, i27=-145;
        short s1=-6098, sArr1[]=new short[N];
        long l1=-40767L, l2=-1129000406547687822L, l3=-7L;
        double d4=-87.69780;

        FuzzerUtils.init(sArr1, (short)3327);

        iArrFld[(i >>> 1) % N] = iMeth(Test.instanceCount, Test.iFld, Test.fFld);
        Test.iFld += (int)70.907F;
        Test.iFld >>= s1;
        i = Test.iFld;
        for (i20 = 10; i20 < 290; ++i20) {
            Test.instanceCount += (((i20 * i) + l1) - Test.instanceCount);
            i21 <<= i;
            Test.iFld /= (int)((long)(d4) | 1);
            Test.iFld -= Test.iFld;
            Test.byFld &= (byte)l2;
            Test.instanceCount = Test.iFld;
            Test.fFld -= (float)d4;
            i = i21;
        }
        Test.iArrFld1[(Test.iFld >>> 1) % N] = Test.iFld;
        for (l3 = 4; l3 < 134; l3++) {
            Test.fFld -= i21;
            if (Test.bFld) continue;
            for (i23 = 9; i23 < 193; i23++) {
                i22 >>>= i23;
                l2 = i22;
                for (i25 = i23; i25 < 2; ++i25) {
                    i22 <<= s1;
                    sArr1[(int)(l3 - 1)] -= (short)i;
                    iArrFld[i25] *= (int)d4;
                    i *= -12;
                    i26 *= Test.byFld;
                    i22 += (int)(-85.411F + (i25 * i25));
                    if (Test.bFld) break;
                }
                l1 *= i27;
            }
            Test.instanceCount *= s1;
        }

        FuzzerUtils.out.println("i s1 i20 = " + i + "," + s1 + "," + i20);
        FuzzerUtils.out.println("i21 l1 d4 = " + i21 + "," + l1 + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("l2 l3 i22 = " + l2 + "," + l3 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 sArr1 = " + i26 + "," + i27 + "," + FuzzerUtils.checkSum(sArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld Test.bFld iArrFld = " + Test.byFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
