// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-49621L;
    public static boolean bFld=true;
    public static double dFld=0.127723;
    public static volatile float fFld=2.761F;
    public int iFld=12;
    public static double dArrFld[][]=new double[N][N];
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.32894);
        FuzzerUtils.init(Test.lArrFld, 1717952434L);
        FuzzerUtils.init(Test.iArrFld, -77);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public void vMeth(float f, int i2) {

        double d=-126.109418;

        Test.dArrFld[(i2 >>> 1) % N][(i2 >>> 1) % N] = (i2--);
        i2 *= (int)d;
        vMeth_check_sum += Float.floatToIntBits(f) + i2 + Double.doubleToLongBits(d);
    }

    public static int iMeth(short s, int i11) {

        float f1=2.336F, f2=0.794F;
        int i12=-143, i13=-15635, i14=-2, i15=-3, i16=-72, i17=13, i18=-20868, i19=11;
        short s1=13835;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 49502L);

        for (f1 = 8; f1 < 140; f1++) {
            f2 = i11;
            for (i13 = 1; i13 < 12; ++i13) {
                Test.dFld = -53101;
            }
            Test.dFld += 140L;
            for (i15 = (int)(f1); i15 < 12; ++i15) {
                i12 += (i15 | (long)f1);
                i17 = 1;
                do {
                    s1 ^= (short)i12;
                } while (++i17 < 1);
                for (i18 = 1; i18 < 1; i18++) {
                    if (Test.bFld) break;
                    i16 = (int)-7592929110864154761L;
                    i16 *= -11;
                    Test.instanceCount += i18;
                    if (i13 != 0) {
                    }
                }
            }
        }
        long meth_res = s + i11 + Float.floatToIntBits(f1) + i12 + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 +
            i17 + s1 + i18 + i19 + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth() {

        short s2=7103;
        int i20=235, i21=-24, i22=22712, i23=211, i24=-56090, i25=-64;
        double d1=-1.68431;
        float f3=81.228F;
        byte by=-85;

        Test.dFld = (++Test.instanceCount);
        iMeth(s2, i20);
        for (d1 = 9; d1 < 300; ++d1) {
            f3 += i20;
            i20 += -115;
            if (i22 != 0) {
            }
        }
        for (i23 = 23; i23 < 375; i23++) {
            i24 += (-11 + (i23 * i23));
            if (Test.bFld) continue;
        }
        i25 = 1;
        while (++i25 < 181) {
            f3 += -6814086313260918801L;
            i20 = i25;
            Test.lArrFld[i25 - 1] = 164;
            by -= (byte)f3;
            i24 += i25;
        }
        long meth_res = s2 + i20 + Double.doubleToLongBits(d1) + i21 + Float.floatToIntBits(f3) + i22 + i23 + i24 + i25
            + by;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public long lMeth(int i3, int i4, int i5) {

        int i6=-10, i7=-72, i8=73, i9=-10, i10=14, iArr[]=new int[N];
        long l1=8800543603065246950L, lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, 249);
        FuzzerUtils.init(lArr, 7131977300569281960L);

        i5 -= (~(i3--));
        for (i6 = 180; i6 > 6; i6--) {
            for (i8 = i6; i8 < 9; i8++) {
                Test.instanceCount += (-i6);
                i10 = 1;
                do {
                    iArr[i6 - 1] = (--i3);
                    Test.bFld = (((i10 - Test.instanceCount) - (--i9)) > (-(Test.instanceCount - i7)));
                    i4 += i10;
                    lArr[i6 - 1][i10] += (iArr[i6 - 1]++);
                    i3 = (int)(lArr[(i7 >>> 1) % N][i8 + 1] = sMeth());
                    switch ((i6 % 6) + 44) {
                    case 44:
                        if (false) {
                            iArr[i10 - 1] = (int)49.49127;
                            i3 -= (int)Test.instanceCount;
                        }
                    case 45:
                        i5 += i10;
                        break;
                    case 46:
                        Test.instanceCount += l1;
                        break;
                    case 47:
                        i5 += (int)Test.fFld;
                        break;
                    case 48:
                        Test.lArrFld[i10] += 51114;
                        break;
                    case 49:
                        Test.lArrFld = lArr[i6];
                        break;
                    }
                } while (++i10 < 1);
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + l1 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-122, i1=111, i26=36273, i27=0, i28=89, i29=-48291, i30=-11, i31=12, i32=-16672, i33=19085;
        byte by1=0;
        float f4=-1.687F;
        short s3=-23537;

        for (i = 9; i < 170; i++) {
            i1 |= i1;
        }
        vMeth(661484623019762503L * (lMeth(i, i1, i1) * i), i);
        for (i26 = 24; i26 < 384; i26++) {
            i27 = (int)Test.instanceCount;
        }
        i1 &= by1;
        if (Test.bFld) {
            Test.iArrFld[(i >>> 1) % N][(i26 >>> 1) % N] += 14;
        } else if (Test.bFld) {
            Test.fFld = Test.instanceCount;
            for (i28 = 3; i28 < 253; ++i28) {
                try {
                    i29 = (i / -81);
                    i27 = (i26 % 229);
                    i29 = (i29 / i);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (i28 * i28);
                Test.fFld += i26;
                for (f4 = 3; f4 < 101; ++f4) {
                    Test.fFld = -197;
                    for (i31 = 1; 2 > i31; ++i31) {
                        Test.instanceCount = Test.instanceCount;
                        i27 += (i31 - s3);
                        if (Test.bFld) continue;
                        Test.lArrFld[i28 + 1] += i30;
                        Test.instanceCount = i28;
                        Test.instanceCount = i26;
                        Test.iArrFld[(int)(f4)][i28 + 1] = i32;
                        switch ((i31 % 6) + 85) {
                        case 85:
                            i30 += (2 + (i31 * i31));
                            break;
                        case 86:
                            i30 >>>= i26;
                            i29 = iFld;
                            Test.iArrFld[(int)(f4 + 1)][i28] = i33;
                            i32 = i27;
                        case 87:
                            i30 = (int)Test.instanceCount;
                            break;
                        case 88:
                            i1 -= i;
                            break;
                        case 89:
                            i33 *= i31;
                            break;
                        case 90:
                            Test.instanceCount += (long)f4;
                        default:
                            iFld = (int)Test.fFld;
                        }
                    }
                }
            }
        } else if (Test.bFld) {
            Test.lArrFld[(3 >>> 1) % N] = i28;
        }

        FuzzerUtils.out.println("i i1 i26 = " + i + "," + i1 + "," + i26);
        FuzzerUtils.out.println("i27 by1 i28 = " + i27 + "," + by1 + "," + i28);
        FuzzerUtils.out.println("i29 f4 i30 = " + i29 + "," + Float.floatToIntBits(f4) + "," + i30);
        FuzzerUtils.out.println("i31 i32 s3 = " + i31 + "," + i32 + "," + s3);
        FuzzerUtils.out.println("i33 = " + i33);

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.dFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld iFld Test.dArrFld = " + Float.floatToIntBits(Test.fFld) + "," + iFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  sMeth ->  sMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
