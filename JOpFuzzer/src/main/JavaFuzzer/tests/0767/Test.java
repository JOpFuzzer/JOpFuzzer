// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=7896729000514532720L;
    public static float fFld=108.104F;
    public static int iFld=52845;
    public static short sFld=6719;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -98);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i7=-6, i8=197, i9=4092, i10=-34716, iArr1[]=new int[N];
        byte by1=-103;
        double d1=-59.83835;
        short s=19576;

        FuzzerUtils.init(iArr1, 9);

        for (i7 = 16; i7 < 308; ++i7) {
            Test.iFld -= Test.iFld;
            Test.fFld *= Test.iFld;
            for (i9 = 1; i9 < 6; ++i9) {
                if (Test.iFld != 0) {
                }
                Test.iFld = by1;
                Test.fFld = i9;
                Test.iFld += Test.iFld;
                iArr1[i7] = Test.iFld;
                Test.instanceCount = i9;
                Test.instanceCount = -33001;
                Test.fFld += i8;
            }
        }
        d1 = i7;
        i8 = (int)Test.instanceCount;
        s <<= (short)Test.instanceCount;
        long meth_res = i7 + i8 + i9 + i10 + by1 + Double.doubleToLongBits(d1) + s + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i11=-2, i12=-26209, i13=137, i14=-31;
        double d2=101.55823, d3=-2.60442;
        byte by2=-18;
        float f=-113.903F;
        short s1=11321;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -13L);

        Test.iFld += (int)lMeth();
        Test.instanceCount = 78;
        switch ((((Test.iFld >>> 1) % 10) * 5) + 1) {
        case 47:
            for (i11 = 300; i11 > 13; i11 -= 2) {
                Test.fFld = Test.iFld;
                i12 <<= (int)Test.instanceCount;
                switch ((i11 % 3) + 71) {
                case 71:
                    for (d2 = i11; d2 < 11; d2++) {
                        Test.instanceCount += (long)(((d2 * i11) + Test.fFld) - by2);
                    }
                    Test.instanceCount = by2;
                    break;
                case 72:
                    Test.iFld += 131;
                    Test.instanceCount = i13;
                    for (f = 1; f < 11; ++f) {
                        Test.iArrFld[i11 + 1] += (int)3867143788548955443L;
                        Test.instanceCount *= i12;
                    }
                case 73:
                    i12 <<= i12;
                    break;
                default:
                    Test.instanceCount -= i14;
                }
            }
            break;
        case 25:
            Test.instanceCount *= (long)-5.26477;
            break;
        case 30:
            Test.iArrFld = Test.iArrFld;
        case 45:
            lArr[(i11 >>> 1) % N] *= 146;
            break;
        case 46:
            Test.iFld ^= Test.iFld;
        case 27:
            Test.iFld = (int)734951071L;
            break;
        case 15:
            i14 = 117;
            break;
        case 32:
        case 51:
            i13 -= (int)Test.fFld;
        case 29:
            d3 += i12;
            break;
        default:
            i12 -= s1;
        }
        long meth_res = i11 + i12 + Double.doubleToLongBits(d2) + i13 + by2 + Float.floatToIntBits(f) + i14 +
            Double.doubleToLongBits(d3) + s1 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i) {

        int i1=0, i2=-236, i3=40354, i4=-5, i5=-38971, i6=-120, iArr[][]=new int[N][N];
        byte by=0;
        double d=118.119388;
        boolean b=false;

        FuzzerUtils.init(iArr, 229);

        for (i1 = 333; i1 > 6; i1--) {
            for (i3 = 1; i3 < 5; ++i3) {
                i4 += (((i3 * Test.fFld) + Test.fFld) - Test.fFld);
                iArr[i1 - 1][i1 + 1] = (i++);
                for (i5 = 1; i5 < 2; i5++) {
                    if ((i - ((by + i6) + (l - i1))) <= ((Test.instanceCount++) + (i2 += (int)(Test.instanceCount -
                        d)))) break;
                    l -= -147;
                    l = iMeth();
                    Test.instanceCount = i5;
                    Test.iFld -= i3;
                    i6 *= i2;
                    i2 -= (int)31.28214;
                    if (b) break;
                    iArr[i3 + 1][i5] = i4;
                    Test.sFld <<= (short)i1;
                }
            }
        }
        vMeth_check_sum += l + i + i1 + i2 + i3 + i4 + i5 + i6 + by + Double.doubleToLongBits(d) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        byte by3=-49, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-7);

        vMeth(Test.instanceCount, -1);
        by3 = (byte)Test.iFld;
        byArr[(Test.iFld >>> 1) % N] = (byte)Test.iFld;

        FuzzerUtils.out.println("by3 byArr = " + by3 + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld Test.iArrFld = " + Test.sFld + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
