// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=252L;
    public static double dFld=34.65931;
    public static boolean bFld=false;
    public static volatile short sFld=25179;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -8759768772707195661L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1) {

        int i7=-16627, i8=9919, i9=-132, i10=-35123, i11=-132, i12=63527, iArr[]=new int[N];
        long l2=-45302L;

        FuzzerUtils.init(iArr, 0);

        i7 = 1;
        while (++i7 < 136) {
            for (i8 = 1; i8 < 12; i8++) {
                if (i8 != 0) {
                    vMeth1_check_sum += l1 + i7 + i8 + i9 + l2 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr);
                    return;
                }
                for (l2 = 1; 2 > l2; l2++) {
                    iArr[i8 - 1] += (int)Test.dFld;
                    i10 += 149;
                }
                Test.instanceCount += -13;
                for (i11 = 1; i11 < 2; i11++) {
                    i9 = (int)l1;
                    Test.bFld = Test.bFld;
                    i10 -= i9;
                    i12 = (int)l1;
                }
                i9 = -45359;
                iArr[i8] = i12;
                i10 = i9;
            }
        }
        vMeth1_check_sum += l1 + i7 + i8 + i9 + l2 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l) {

        int i5=-7, i6=-5, i13=14, i14=-162, i15=-29826, i16=223, i17=2, i18=57371, i19=100, i20=-2, i21=14, iArr1[]=new
            int[N];
        float f2=1.937F;

        FuzzerUtils.init(iArr1, -2);

        for (i5 = 6; i5 < 264; i5++) {
            vMeth1(3L);
            iArr1 = iArr1;
            iArr1 = iArr1;
        }
        i6 = i5;
        i13 = i6;
        for (i14 = 10; i14 < 310; ++i14) {
            for (i16 = 1; i16 < 6; i16 += 2) {
                if (false) break;
            }
            for (i18 = 1; i18 < 6; ++i18) {
                f2 = Test.sFld;
            }
            for (i20 = 1; i20 < 6; i20 += 3) {
                i13 += (int)698825908974586070L;
                l *= Test.instanceCount;
                Test.dFld += -3;
            }
        }
        vMeth_check_sum += l + i5 + i6 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + Float.floatToIntBits(f2) + i20 + i21
            + FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(double d) {

        int i4=-47;

        i4 = (i4--);
        vMeth(2088245144875137243L);
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + i4;
    }

    public void mainTest(String[] strArr1) {

        float f=-2.427F, f1=2.984F;
        int i=11, i1=-50998, i2=124, i3=-2, i22=-4, i23=13917, i24=90;
        byte by=79;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.92422);

        iArrFld[(6 >>> 1) % N] -= (int)(103 + (f + (++i)));
        for (i1 = 16; i1 < 310; i1++) {
            for (f1 = 1; f1 < 86; f1++) {
                f += (((f1 * i) + f) - i);
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(Test.dFld);
                for (i22 = 1; i22 < 2; ++i22) {
                    i2 ^= i3;
                    switch ((i22 % 4) + 5) {
                    case 5:
                        Test.instanceCount -= i1;
                        i2 = by;
                        i ^= i24;
                        i2 = (int)Test.instanceCount;
                        break;
                    case 6:
                    case 7:
                    case 8:
                        i3 = (int)Test.instanceCount;
                        Test.lArrFld[i1] = Test.instanceCount;
                        break;
                    default:
                        i23 += (int)Test.instanceCount;
                        iArrFld[i1] -= i24;
                        dArr[i22 + 1] *= -89.685F;
                        f += (((i22 * f1) + i3) - f1);
                    }
                    Test.lArrFld[i1 - 1] -= Test.instanceCount;
                    dArr[i1 - 1] = i23;
                    i3 = i24;
                    Test.bFld = true;
                    by -= (byte)i23;
                    i24 -= 8;
                    switch ((i22 % 9) + 122) {
                    case 122:
                        iArrFld[i22 + 1] -= (int)f;
                        Test.instanceCount = i22;
                        i3 -= (int)f;
                        i24 *= i;
                        break;
                    case 123:
                        Test.lArrFld[(int)(f1 + 1)] &= Test.instanceCount;
                    case 124:
                        Test.dFld -= -5L;
                        break;
                    case 125:
                        iArrFld[(int)(f1 - 1)] -= i23;
                        break;
                    case 126:
                        iArrFld[i22] >>= 246;
                        break;
                    case 127:
                        iArrFld[i22 - 1] *= (int)f1;
                        break;
                    case 128:
                        f -= 4530;
                        break;
                    case 129:
                        iArrFld[i1] -= (int)f;
                        break;
                    case 130:
                    default:
                        iArrFld[i22] -= (int)Test.instanceCount;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 f1 i3 = " + i2 + "," + Float.floatToIntBits(f1) + "," + i3);
        FuzzerUtils.out.println("i22 i23 by = " + i22 + "," + i23 + "," + by);
        FuzzerUtils.out.println("i24 dArr = " + i24 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld iArrFld Test.lArrFld = " + Test.sFld + "," + FuzzerUtils.checkSum(iArrFld) +
            "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
