// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-130046035L;
    public static float fFld=-93.779F;
    public static double dFld=119.65680;
    public boolean bFld=true;

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i9=-144;

        Test.fFld -= i9;
        long meth_res = i9;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(double d, int i4) {

        int i5=2, i6=-59964, i7=59, i8=-3, iArr1[]=new int[N];
        short s=27041;

        FuzzerUtils.init(iArr1, 57762);

        for (i5 = 12; i5 < 351; ++i5) {
            byte by=-81;
            for (i7 = 1; i7 < 5; i7++) {
                Test.fFld += ((-(-iMeth1())) - i6);
                Test.instanceCount += i4;
            }
            iArr1[i5 - 1] = i5;
            i6 += (i5 + Test.instanceCount);
            s += (short)(-204 + (i5 * i5));
            i8 /= (int)(i7 | 1);
            i8 = (int)Test.instanceCount;
            by ^= (byte)i8;
            Test.instanceCount -= i6;
            iArr1 = iArr1;
            Test.instanceCount *= i8;
        }
        i6 = i6;
        Test.instanceCount = Test.instanceCount;
        long meth_res = Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + s + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i, int i1, int i2) {

        short s1=11226;
        int iArr[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -13469);
        FuzzerUtils.init(fArr, -2.228F);

        fArr[(6 >>> 1) % N] -= ((iMeth(Test.dFld, i1) - i) - s1);
        iArr[(i >>> 1) % N] = i1;
        vSmallMeth_check_sum += i + i1 + i2 + s1 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i10=3, i11=122, i12=138, i13=17681, i14=-14, i15=-229, i16=-24351, i17=58812, i18=-10, i19=-11, iArr2[]=new
            int[N];
        short s2=-31241;
        boolean bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, 133);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, -3732007638L);

        for (int smallinvoc=0; smallinvoc<311; smallinvoc++) vSmallMeth(i10, i10, i10);
        for (i11 = 9; 380 > i11; ++i11) {
            Test.instanceCount <<= i11;
            for (i13 = 4; i13 < 68; ++i13) {
                iArr2[i11 + 1] = -12;
                i14 = (int)Test.instanceCount;
                for (i15 = 1; i15 < 2; ++i15) {
                    i10 += i15;
                    i10 *= i14;
                    i14 += (i15 ^ i15);
                    Test.instanceCount = s2;
                    bArr[i11] = bFld;
                    Test.fFld += i15;
                }
                i16 += (i13 - i11);
                i12 *= (int)Test.fFld;
                Test.instanceCount = -61198;
                i14 += (int)Test.instanceCount;
                i16 = -868;
                i16 -= (int)Test.instanceCount;
                i16 -= (int)Test.fFld;
            }
            for (i17 = 2; 68 > i17; i17 += 3) {
                Test.instanceCount >>= i11;
                i19 = 1;
                do {
                    Test.instanceCount = i19;
                    i18 &= (int)Test.instanceCount;
                    lArr[i17 - 1] *= i19;
                    i18 ^= i17;
                    i10 += (i19 | i16);
                    i14 += (-29255 + (i19 * i19));
                    Test.instanceCount += i19;
                } while (++i19 < 4);
            }
        }

        FuzzerUtils.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 s2 i17 = " + i16 + "," + s2 + "," + i17);
        FuzzerUtils.out.println("i18 i19 iArr2 = " + i18 + "," + i19 + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("bArr lArr = " + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("bFld = " + (bFld ? 1 : 0));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  iMeth1 ->  iMeth1 iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
