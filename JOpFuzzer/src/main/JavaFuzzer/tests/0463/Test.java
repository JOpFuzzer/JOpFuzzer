// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=49592L;
    public static byte byFld=38;
    public boolean bFld=false;
    public static short sFld=31488;
    public static long lArrFld[]=new long[N];
    public volatile float fArrFld[]=new float[N];
    public float fArrFld1[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2082771866285138955L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i5, long l1) {

        int i6=8, i7=13, i8=18089, i9=53802, i10=49993, i11=-2, iArr1[]=new int[N];
        float f=0.303F;
        double d=12.85071;
        boolean b=true;

        FuzzerUtils.init(iArr1, 59227);

        for (i6 = 11; i6 < 352; ++i6) {
            iArr1[i6 - 1] = (int)l1;
            i7 &= -142;
            if (i7 != 0) {
                vMeth_check_sum += i5 + l1 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) +
                    (b ? 1 : 0) + i10 + i11 + FuzzerUtils.checkSum(iArr1);
                return;
            }
        }
        for (i8 = 7; 190 > i8; i8++) {
            l1 = i9;
            if (i7 != 0) {
                vMeth_check_sum += i5 + l1 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) +
                    (b ? 1 : 0) + i10 + i11 + FuzzerUtils.checkSum(iArr1);
                return;
            }
            i9 *= i7;
            f += (((i8 * f) + i8) - i9);
            f -= i9;
            f = (float)d;
            b = b;
            for (i10 = 1; i10 < 9; ++i10) {
                i9 &= i9;
                i11 = i7;
            }
        }
        vMeth_check_sum += i5 + l1 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + (b ? 1
            : 0) + i10 + i11 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i2, int i3) {

        int i12=-168, i13=15264, i14=-109, i15=-197, i16=32, i17=56742, iArr[]=new int[N];
        float f1=2.164F;
        double d1=18.5885, dArr[]=new double[N];
        byte by=-10;

        FuzzerUtils.init(iArr, 28448);
        FuzzerUtils.init(dArr, 51.107637);

        Test.instanceCount <<= (--i3);
        for (int i4 : iArr) {
            vMeth(i2, Test.instanceCount);
        }
        for (i12 = 2; i12 < 177; ++i12) {
            for (i14 = 1; i14 < 9; ++i14) {
                for (i16 = i12; i16 < 2; ++i16) {
                    i17 += (((i16 * i17) + i12) - f1);
                    i13 += (((i16 * i16) + f1) - i17);
                    dArr = dArr;
                    d1 *= i16;
                    Test.instanceCount <<= i13;
                    iArr[i14] &= i2;
                    i3 >>= by;
                    i2 += (i16 | by);
                }
                Test.instanceCount = (long)f1;
            }
        }
        long meth_res = i2 + i3 + i12 + i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d1) + by + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i, int i1) {

        float f2=-2.335F;
        int iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -31636);

        i1 ^= (int)(Math.max(iMeth(i1, -151), i) * f2);
        iArr2[(-3 >>> 1) % N] = i1;
        vSmallMeth_check_sum += i + i1 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i18=56, i19=-196, i20=12, i21=-4, i22=57127, i23=-59055, i24=48, iArr3[]=new int[N];
        float f3=76.79F;

        FuzzerUtils.init(iArr3, -5466);

        for (int smallinvoc=0; smallinvoc<276; smallinvoc++) vSmallMeth(i18, i18);
        i18 &= i19;
        iArr3[(i19 >>> 1) % N] >>= (int)Test.instanceCount;
        iArr3[(i19 >>> 1) % N] -= Test.byFld;
        for (i20 = 18; 336 > i20; i20++) {
            i21 = i19;
            if (bFld) continue;
            i21 >>>= i20;
            Test.lArrFld[i20 - 1] = i19;
            Test.instanceCount += (i20 | Test.instanceCount);
            Test.instanceCount *= 65217;
            Test.instanceCount += (((i20 * Test.instanceCount) + Test.sFld) - Test.sFld);
        }
        iArr3[(i20 >>> 1) % N] += i18;
        Test.instanceCount = i21;
        fArrFld[(i18 >>> 1) % N] = Test.instanceCount;
        i21 *= i18;
        i22 = 1;
        do {
            fArrFld1 = fArrFld1;
            i21 += i20;
            i21 = 13062;
            for (i23 = i22; i23 < 84; ++i23) {
                i24 += (-135 + (i23 * i23));
                i19 = i21;
                iArr3[i22] *= 2;
                try {
                    i21 = (i18 % iArr3[i23 + 1]);
                    i18 = (i18 / i23);
                    i24 = (i20 / i22);
                } catch (ArithmeticException a_e) {}
            }
            f3 -= Test.sFld;
            i18 += i18;
            i24 >>= (int)Test.instanceCount;
            i21 += i22;
        } while (++i22 < 300);
        fArrFld[(i22 >>> 1) % N] += i21;

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 f3 iArr3 = " + i24 + "," + Float.floatToIntBits(f3) + "," +
            FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld bFld = " + Test.instanceCount + "," + Test.byFld + "," +
            (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld Test.lArrFld fArrFld = " + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("fArrFld1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld1)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
