// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public static float fFld=-34.366F;
    public static float fFld1=-81.929F;
    public static volatile boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
        FuzzerUtils.init(Test.lArrFld, 2491698782L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, int i3, boolean b) {

        int i4=160, i5=50568, i6=15442, i7=-171, i8=92;
        double d=106.97339;
        short s=-27911;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 6.355F);

        i3 = i3;
        Test.instanceCount ^= i3;
        i4 = 1;
        do {
            d = -112L;
        } while (++i4 < 138);
        i3 -= i4;
        i5 = 1;
        while (++i5 < 382) {
            fArr[i5] += i4;
            i3 += (i5 | i5);
            i3 = s;
        }
        i6 = 1;
        while (++i6 < 121) {
            Test.fFld1 -= -56712;
            for (i7 = 1; 13 > i7; ++i7) {
                i3 += i7;
                Test.iArrFld[i6 + 1] += (int)252L;
                i3 *= 14;
            }
        }
        vMeth1_check_sum += l + i3 + (b ? 1 : 0) + i4 + Double.doubleToLongBits(d) + i5 + s + i6 + i7 + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i9=27437, i10=-254, i11=171, i12=-26, i13=-26800, i14=184, i15=-43915, i16=-64092;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -117.894F);

        vMeth1(Test.instanceCount, -130, Test.bFld);
        if (true) {
            for (i9 = 19; 334 > i9; i9 += 2) {
                i11 = 1;
                while (++i11 < 10) {
                    Test.instanceCount = Test.instanceCount;
                }
                fArr1 = fArr1;
                fArr1[i9 + 1] += i10;
                for (i12 = 10; i12 > 1; i12--) {
                    i10 = -131;
                }
                Test.instanceCount -= i13;
                i14 = 10;
                while (--i14 > 0) {
                    if (Test.bFld) break;
                    for (i15 = 1; i15 < 1; i15++) {
                        Test.bFld = Test.bFld;
                        try {
                            i10 = (1905992595 % i10);
                            i10 = (i13 / 160);
                            i10 = (848746325 % i12);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        } else {
            Test.fFld1 = i12;
        }
        vMeth_check_sum += i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static long lMeth(int i, int i1, int i2) {

        int i17=50302, i18=-8341, i19=-9, i20=-17992, i21=1075;
        float fArr2[]=new float[N];

        FuzzerUtils.init(fArr2, 2.129F);

        vMeth();
        for (i17 = 7; i17 < 258; i17++) {
            Test.fFld1 += Test.instanceCount;
            Test.lArrFld[i17] = i1;
            for (i19 = 1; 6 > i19; ++i19) {
                switch (((i17 % 2) * 5) + 1) {
                case 6:
                    fArr2[i19] = i1;
                    i = i20;
                    break;
                case 5:
                    switch ((i17 % 3) + 48) {
                    case 48:
                    case 49:
                        i21 += (((i19 * i1) + Test.instanceCount) - Test.fFld1);
                        break;
                    case 50:
                        i18 += (i19 * i19);
                        i = i;
                        i += i21;
                        Test.iArrFld[i19] *= 4836;
                        break;
                    default:
                        i20 = i21;
                    }
                default:
                    Test.fFld = 191;
                }
            }
        }
        long meth_res = i + i1 + i2 + i17 + i18 + i19 + i20 + i21 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i22=-4, i23=78, i24=-40596, i25=-54818, i26=116, i27=-12486, i28=7628, i29=-37068, i30=-9;
        double d1=11.28582;
        short s1=-4474;
        byte by=-121;

        Test.fFld = (-((-25853 * lMeth(i22, i22, -16113)) * Test.fFld));
        for (i23 = 5; i23 < 250; ++i23) {
            Test.iArrFld[i23 + 1] <<= i22;
            if (Test.bFld) {
                for (i25 = 4; i25 < 103; ++i25) {
                    for (i27 = i23; i27 < 2; ++i27) {
                        Test.fFld1 -= i24;
                        i26 += (int)(-32749L + (i27 * i27));
                        i24 += (int)40.444F;
                        i26 = i28;
                        i22 += (int)Test.instanceCount;
                        try {
                            i26 = (i22 % 49321);
                            i22 = (i24 % -28263);
                            i24 = (i28 % -91);
                        } catch (ArithmeticException a_e) {}
                        i26 += i27;
                        i22 = (int)d1;
                        d1 *= Test.fFld;
                        Test.instanceCount += (i27 + Test.instanceCount);
                    }
                    Test.instanceCount += i25;
                    Test.instanceCount = 57;
                    i24 = (int)Test.fFld1;
                    Test.instanceCount = s1;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)16);
                    Test.fFld1 = i24;
                    for (i29 = 1; 2 > i29; i29++) {
                        i26 += (((i29 * i27) + Test.fFld) - i26);
                        iArrFld1 = iArrFld1;
                        if (Test.bFld) {
                            Test.iArrFld[i23] = (int)97.686F;
                            i26 += (((i29 * by) + i25) - i23);
                            Test.iArrFld[i29] *= (int)Test.instanceCount;
                            i28 += (i29 * i29);
                        } else if (false) {
                            iArrFld1[i29 + 1][i25 + 1] >>= i22;
                        } else if (Test.bFld) {
                            iArrFld1[i29][i25 - 1] >>= 23786;
                        } else {
                            i26 += (((i29 * Test.instanceCount) + i25) - Test.instanceCount);
                        }
                    }
                }
            } else if (false) {
                i22 += i23;
            } else if (Test.bFld) {
                i22 = i27;
            }
        }

        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 d1 s1 = " + i28 + "," + Double.doubleToLongBits(d1) + "," + s1);
        FuzzerUtils.out.println("i29 i30 by = " + i29 + "," + i30 + "," + by);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.fFld1 = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Float.floatToIntBits(Test.fFld1));
        FuzzerUtils.out.println("Test.bFld Test.iArrFld Test.lArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("iArrFld1 = " + FuzzerUtils.checkSum(iArrFld1));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
