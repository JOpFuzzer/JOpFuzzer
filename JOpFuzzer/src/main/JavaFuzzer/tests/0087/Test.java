// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=135L;
    public static float fFld=-1.469F;
    public static double dFld=-97.54448;
    public static short sFld=9784;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 62101L);
        FuzzerUtils.init(Test.iArrFld, 9);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, int i5, int i6) {

        float f=-49.616F, f1=57.559F;
        int i7=213, i8=-28, i9=23425, i10=227, i11=-89, iArr[]=new int[N];
        short s=-4958;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -13L);
        FuzzerUtils.init(iArr, 24506);

        for (f = 9; f < 370; f++) {
            lArr[(int)(f - 1)] -= -41204L;
        }
        i4 >>= 47215;
        iArr[(i6 >>> 1) % N] = i5;
        Test.instanceCount -= i6;
        f1 = i7;
        iArr[(104 >>> 1) % N] >>= i5;
        i8 = 1;
        while (++i8 < 152) {
            s += (short)i8;
            Test.instanceCount = i6;
            if (false) continue;
            for (i9 = 1; 10 > i9; i9 += 3) {
                i5 -= i11;
                i4 -= i6;
                i5 += i8;
            }
        }
        vMeth2_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + Float.floatToIntBits(f1) + i8 + s + i9 + i10
            + i11 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i3) {

        int i12=104, i13=0, i14=118, i15=-22014, iArr1[]=new int[N];
        double d=2.59857;
        long l=-170L;
        byte by=-111;
        boolean b=true;

        FuzzerUtils.init(iArr1, 148);

        vMeth2(i3, 14310, i3);
        Test.fFld -= Test.fFld;
        i12 = 1;
        do {
            iArr1[i12] = (int)Test.instanceCount;
            Test.fFld = (float)d;
            for (i13 = 1; i13 < 7; i13 += 3) {
                for (l = 4; l > i12; --l) {
                    iArr1[i12 + 1] -= i13;
                }
                switch (((i13 % 2) * 5) + 111) {
                case 121:
                    i15 += (((i13 * i12) + by) - l);
                    i3 += i13;
                    Test.instanceCount += (188 + (i13 * i13));
                    b = b;
                case 113:
                    Test.instanceCount >>= -1425;
                    i15 %= (int)(i15 | 1);
                    break;
                }
            }
        } while (++i12 < 217);
        vMeth1_check_sum += i3 + i12 + Double.doubleToLongBits(d) + i13 + i14 + l + i15 + by + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i) {

        int i1=51919, i2=-91, i16=1, i17=-179, i18=24576, i19=-32824;
        byte by1=-4;

        for (i1 = 1; i1 < 168; ++i1) {
            vMeth1(i);
            i16 = 9;
            do {
                i2 |= 11;
                i += (i16 * i16);
                Test.fFld *= Test.instanceCount;
                i2 -= 37834;
                Test.dFld = i1;
                i2 = (int)Test.instanceCount;
                Test.sFld <<= (short)i2;
                i17 += (i16 * i16);
            } while ((i16 -= 3) > 0);
            i17 ^= i17;
            for (i18 = i1; i18 < 9; i18++) {
                if (i18 != 0) {
                    vMeth_check_sum += i + i1 + i2 + i16 + i17 + i18 + i19 + by1;
                    return;
                }
                by1 += (byte)i1;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i16 + i17 + i18 + i19 + by1;
    }

    public void mainTest(String[] strArr1) {

        int i20=-32745, i21=2, i22=-10, i23=54917, i24=2041, i25=51701, i26=-61186, i27=27200, i28=-110, i29=-95;
        byte by2=-117;
        boolean b1=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.797F);

        vMeth(i20);
        for (i21 = 1; i21 < 298; i21++) {
            i20 >>= by2;
            i22 = (int)-41980L;
            i20 += (((i21 * i21) + i22) - Test.instanceCount);
            fArr[i21] += i21;
            Test.instanceCount = Test.instanceCount;
            for (i23 = 1; i23 < 85; ++i23) {
                Test.lArrFld[i21 + 1] = i22;
                i22 &= i21;
                Test.iArrFld[i21] = i23;
                for (i25 = i23; i25 < 2; i25++) {
                    Test.iArrFld[i21 - 1] = i20;
                    Test.instanceCount = i26;
                }
                for (i27 = 1; 2 > i27; ++i27) {
                    i24 -= i20;
                    Test.iArrFld[i23 + 1] = (int)Test.instanceCount;
                    i28 ^= i28;
                    by2 /= (byte)-7;
                }
            }
            i24 /= (int)(Test.instanceCount | 1);
            if (b1) {
                i28 += (((i21 * i20) + i21) - i28);
                Test.iArrFld[i21 - 1] = (int)-1635L;
                i28 = 14113;
                Test.instanceCount += i21;
            } else if (false) {
                i29 = 1;
                do {
                    by2 += (byte)i22;
                    try {
                        i26 = (-144 / i23);
                        i20 = (24354 / Test.iArrFld[i21]);
                        i22 = (Test.iArrFld[i21 - 1] % i24);
                    } catch (ArithmeticException a_e) {}
                    Test.fFld -= Test.instanceCount;
                    i22 = (int)Test.instanceCount;
                } while (++i29 < 85);
            } else if (b1) {
                Test.fFld += i29;
            } else {
                i28 *= (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("by2 i23 i24 = " + by2 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 b1 = " + i28 + "," + i29 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld Test.lArrFld Test.iArrFld = " + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
