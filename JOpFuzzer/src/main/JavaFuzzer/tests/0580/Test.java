// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2180626175L;
    public boolean bFld=false;
    public static short sFld=4178;
    public static int iFld=-12975;

    public static long vMeth_check_sum = 0;
    public static long vSmallMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(boolean b) {

        int i1=43325;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 52.845F);

        i1 %= (int)(((long)(fArr[(-28 >>> 1) % N] * (i1++))) | 1);
        vMeth_check_sum += (b ? 1 : 0) + i1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1() {

        int i5=37042, i6=14, i7=114, i8=-9, iArr1[]=new int[N];
        boolean b1=false;
        long l=-262365338L;
        double d=101.924;
        float f2=0.175F;

        FuzzerUtils.init(iArr1, -24726);

        i5 += (((i5 + i5) - (--i5)) - (iArr1[(i5 >>> 1) % N] - (-(i5--))));
        vMeth(b1);
        i5 += 28874;
        for (l = 2; l < 264; ++l) {
            i5 += (int)d;
            for (i7 = 1; i7 < 6; i7++) {
                i6 -= (int)Test.instanceCount;
                i6 *= i8;
                f2 += i5;
            }
            i5 += i7;
            switch ((int)(((l % 4) * 5) + 72)) {
            case 90:
                try {
                    i8 = (-75 / i5);
                    iArr1[(int)(l)] = (-10817 % i6);
                    iArr1[(int)(l)] = (214 / i8);
                } catch (ArithmeticException a_e) {}
                i5 += (int)(l * Test.instanceCount);
                Test.instanceCount *= Test.instanceCount;
                Test.instanceCount = i6;
                break;
            case 88:
                i5 = i6;
                break;
            case 82:
                Test.instanceCount += (long)d;
                break;
            case 73:
                i8 = (int)163L;
            default:
                i5 >>= i5;
            }
        }
        vMeth1_check_sum += i5 + (b1 ? 1 : 0) + l + i6 + Double.doubleToLongBits(d) + i7 + i8 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(int i4) {

        float f1=0.900F;

        vMeth((Test.sFld /= (short)((long)(f1) | 1)) == (f1++));
        vMeth1();
        vSmallMeth_check_sum += i4 + Float.floatToIntBits(f1);
    }

    public void mainTest(String[] strArr1) {

        int i=-9, i2=-25062, i3=-10, i9=-9096, i10=-182, i11=-189, i12=-3212, i13=-43807, i14=-148, i15=2, iArr[]=new
            int[N];
        float f=-1.959F;
        double d1=2.88929;
        byte by=93;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, 52086);
        FuzzerUtils.init(lArr, -60843L);

        i += (int)(-24845L - iArr[(i >>> 1) % N]);
        vMeth((Test.instanceCount != (i--)) && ((i - i) >= (i + -9)));
        vMeth(bFld = (bFld = (bFld = bFld)));
        vMeth((i * (Test.instanceCount--)) == ((-(f + Test.instanceCount)) * i));
        for (i2 = 8; i2 < 330; ++i2) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(i);
            iArr = iArr;
            for (i9 = i2; i9 < 78; i9++) {
                i11 = 1;
                do {
                    i3 = (int)Test.instanceCount;
                } while (++i11 < 1);
                i3 *= i11;
                i10 = -28026;
                lArr[i9][i2 - 1] = i3;
                i3 += (int)(-227L + (i9 * i9));
                d1 -= f;
                i = Test.iFld;
                for (i12 = 1; i12 < 1; ++i12) {
                    d1 -= i;
                    Test.instanceCount = 162L;
                }
                iArr = iArr;
            }
            Test.instanceCount <<= 105L;
            switch ((i2 % 8) + 97) {
            case 97:
                by += (byte)(((i2 * i) + i) - i12);
                break;
            case 98:
                for (i14 = 2; i14 < 78; i14++) {
                    f += i9;
                    i10 -= (int)Test.instanceCount;
                    if (bFld) continue;
                    bFld = bFld;
                    i13 = (int)Test.instanceCount;
                    iArr = iArr;
                }
                break;
            case 99:
                lArr[i2 + 1][i2] = Test.sFld;
                break;
            case 100:
                d1 = -24765;
                break;
            case 101:
                i15 -= by;
                break;
            case 102:
                try {
                    i = (63833 % i14);
                    i15 = (i10 / 233);
                    i3 = (17 / i);
                } catch (ArithmeticException a_e) {}
            case 103:
                i *= Test.iFld;
                break;
            case 104:
                i10 -= i15;
            default:
                i13 = (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i f i2 = " + i + "," + Float.floatToIntBits(f) + "," + i2);
        FuzzerUtils.out.println("i3 i9 i10 = " + i3 + "," + i9 + "," + i10);
        FuzzerUtils.out.println("i11 d1 i12 = " + i11 + "," + Double.doubleToLongBits(d1) + "," + i12);
        FuzzerUtils.out.println("i13 by i14 = " + i13 + "," + by + "," + i14);
        FuzzerUtils.out.println("i15 iArr lArr = " + i15 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount bFld Test.sFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld = " + Test.iFld);

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest vSmallMeth Test vMeth1
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
