// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2771143040151788798L;
    public static float fFld=0.719F;
    public volatile byte byFld=-65;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public volatile long lArrFld[]=new long[N];
    public static int iArrFld2[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 43);
        FuzzerUtils.init(Test.iArrFld1, -136);
        FuzzerUtils.init(Test.iArrFld2, 2);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3) {

        int i4=-13639, i5=4, i6=-7025, i7=44, i8=44827, i9=56801;
        boolean b=false;
        byte by=15;
        double d1=38.41422;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1269033296L);

        for (i4 = 1; i4 < 143; ++i4) {
            if (b) {
                Test.iArrFld[(i3 >>> 1) % N] = i3;
            } else if (b) {
                Test.iArrFld[i4] -= i3;
                i5 += (i4 * i4);
            }
            switch (((i3 >>> 1) % 8) + 119) {
            case 119:
                i5 = i4;
                break;
            case 120:
                i5 <<= (int)Test.instanceCount;
                for (i6 = i4; i6 < 11; i6++) {
                    Test.instanceCount *= Test.instanceCount;
                    i5 |= i5;
                    lArr = FuzzerUtils.long1array(N, (long)-2504143905L);
                    for (i8 = 1; i8 < 1; ++i8) {
                        by -= (byte)-90.179F;
                        Test.fFld *= i9;
                    }
                }
            case 121:
                i7 = i9;
                break;
            case 122:
                i7 = i5;
                break;
            case 123:
                Test.instanceCount -= i7;
                break;
            case 124:
                Test.iArrFld[i4 + 1] += i7;
            case 125:
                d1 -= Test.instanceCount;
                break;
            case 126:
                lArr[i4 - 1] += i5;
                break;
            default:
                Test.fFld = i4;
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + (b ? 1 : 0) + i6 + i7 + i8 + i9 + by + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr);
    }

    public static float fMeth(int i1, double d, int i2) {

        int i10=29621, i11=-56625, i12=13, i13=-233, i14=5, i15=-6594;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        vMeth(i1);
        for (i10 = 15; 357 > i10; ++i10) {
            Test.instanceCount = Test.instanceCount;
            d = i1;
            Test.iArrFld1[i10 - 1] = 1;
            Test.fFld *= -8704620378053986255L;
        }
        for (i12 = 248; i12 > 14; --i12) {
            d %= (i11 | 1);
            switch ((((17936 >>> 1) % 6) * 5) + 78) {
            case 102:
                i1 |= (int)Test.instanceCount;
                bArr[i12 - 1] = false;
                for (i14 = 1; i14 < 7; i14++) {
                    i13 += (i14 | i10);
                    i1 = i12;
                    i15 += (17900 + (i14 * i14));
                }
            case 100:
                Test.iArrFld1[i12] <<= (int)29373L;
            case 88:
                i1 -= -58658;
                break;
            case 91:
                i1 += i12;
                break;
            case 83:
                try {
                    i2 = (Test.iArrFld[i12] / 62);
                    i1 = (-907234613 / i1);
                    i2 = (i15 / -57284);
                } catch (ArithmeticException a_e) {}
                break;
            case 101:
                i13 = i12;
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + i2 + i10 + i11 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(bArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vSmallMeth(long l) {

        int i=-11;
        double d2=1.60682;

        i *= (int)fMeth(i, d2, i);
        i = (int)Test.fFld;
        vSmallMeth_check_sum += l + i + Double.doubleToLongBits(d2);
    }

    public void mainTest(String[] strArr1) {

        double d3=72.42769, d4=-100.31758;
        int i16=-12, i17=-165, i18=-10, i19=-100, i20=0, i21=20513, i22=13, i23=218, i24=-208, i25=-33864;
        boolean b1=true, bArr1[]=new boolean[N];

        FuzzerUtils.init(bArr1, false);

        for (int smallinvoc=0; smallinvoc<477; smallinvoc++) vSmallMeth(Test.instanceCount);
        d3 = i16;
        try {
            d3 += 12;
            i16 += i16;
            lArrFld[(i16 >>> 1) % N] |= 219;
            for (d4 = 3; d4 < 138; d4++) {
                Test.iArrFld1[(int)(d4 - 1)] |= (int)Test.instanceCount;
                i17 *= i17;
                Test.iArrFld = Test.iArrFld1;
                for (i18 = (int)(d4); i18 < 186; ++i18) {
                    i19 = byFld;
                    for (i20 = 1; i20 < 1; ++i20) {
                        i21 += (((i20 * i20) + i21) - i17);
                        i16 = i16;
                        Test.iArrFld1[(int)(d4 - 1)] *= i19;
                        Test.fFld = Test.instanceCount;
                        i17 -= (int)Test.fFld;
                        i16 += (i20 + i17);
                        i21 *= i21;
                        Test.instanceCount = 61L;
                    }
                    Test.instanceCount -= i20;
                    byFld = (byte)i21;
                    try {
                        i17 = (i16 % -120);
                        Test.iArrFld2[i18 + 1] = (i20 / -79732232);
                        i17 = (-13172 / i21);
                    } catch (ArithmeticException a_e) {}
                    for (i22 = 1; 1 < i22; i22--) {
                        Test.fFld *= Test.instanceCount;
                    }
                    if (b1) break;
                    for (i24 = 1; 1 < i24; --i24) {
                        d3 *= Test.instanceCount;
                        i17 -= (int)Test.instanceCount;
                    }
                }
            }
        }
        catch (ArithmeticException exc2) {
            Test.fFld = i22;
        }
        catch (ArrayIndexOutOfBoundsException exc3) {
            bArr1 = bArr1;
        }

        FuzzerUtils.out.println("d3 i16 d4 = " + Double.doubleToLongBits(d3) + "," + i16 + "," +
            Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 b1 i24 = " + i23 + "," + (b1 ? 1 : 0) + "," + i24);
        FuzzerUtils.out.println("i25 bArr1 = " + i25 + "," + FuzzerUtils.checkSum(bArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.iArrFld1 lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld1) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.iArrFld2 = " + FuzzerUtils.checkSum(Test.iArrFld2));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth fMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
