// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-41941L;
    public int iFld=63219;
    public static byte byFld=43;
    public static int iFld1=-47422;
    public static int iArrFld[]=new int[N];
    public short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i11) {

        int i12=140, i13=-13, i14=-3, iArr1[][]=new int[N][N];
        byte by=13;
        short s=-12545, sArr[][]=new short[N][N];
        double d=-19.9001;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 241);
        FuzzerUtils.init(sArr, (short)-10289);
        FuzzerUtils.init(fArr, 1.982F);

        i11 -= i11;
        i12 = 1;
        while (++i12 < 180) {
            by = (byte)i11;
            if (false) {
                by *= (byte)-50.89020;
                Test.iArrFld[i12] = i11;
                iArr1 = FuzzerUtils.int2array(N, (int)-1);
                Test.instanceCount = Test.instanceCount;
            } else if (false) {
                i11 += i12;
                sArr[i12][i12 - 1] = (short)152;
            }
            i11 = i12;
            fArr[i12 + 1] += s;
        }
        for (i13 = 4; i13 < 183; i13++) {
            i11 = i12;
            d = i11;
        }
        long meth_res = i11 + i12 + by + s + i13 + i14 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1() {

        int i7=111, i8=0, i9=9, i10=-39440, i15=231, iArr[]=new int[N];
        float f1=0.666F;
        long l1=2658391827L;
        boolean b=false;

        FuzzerUtils.init(iArr, 59);

        for (i7 = 12; 266 > i7; i7++) {
            f1 /= ((iArr[i7]--) | 1);
            for (i9 = 1; i9 < 6; ++i9) {
                if (b) {
                    if (dMeth(i10) > i10) break;
                    if (i8 != 0) {
                        vMeth1_check_sum += i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 + l1 + i15 + (b ? 1 : 0) +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    i10 -= i10;
                    i8 <<= i10;
                    vMeth1_check_sum += i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 + l1 + i15 + (b ? 1 : 0) +
                        FuzzerUtils.checkSum(iArr);
                    return;
                } else if (b) {
                    i8 += i8;
                    i8 += i9;
                    Test.iArrFld[i9 - 1] = i7;
                } else if (b) {
                    for (l1 = 1; l1 < 2; l1++) {
                        b = false;
                        i15 += Test.byFld;
                        i10 >>= i10;
                    }
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 + l1 + i15 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, int i4) {

        int i5=3076, i6=-23347, i16=3, i17=66, i18=21924, i19=-56084, i20=189;

        for (i5 = 10; i5 < 350; i5++) {
            vMeth1();
            for (i16 = 1; i16 < 5; i16++) {
                float f2=-84.858F;
                Test.byFld *= (byte)Test.iFld1;
                Test.iArrFld[i16] *= (int)l;
                i6 += i4;
                f2 = i16;
                i4 += (((i16 * Test.byFld) + i16) - i16);
                i17 <<= (int)Test.instanceCount;
                i4 ^= (int)l;
                f2 /= (Test.instanceCount | 1);
            }
        }
        for (i18 = 11; i18 < 269; ++i18) {
            l += i18;
            Test.instanceCount -= i20;
            Test.instanceCount = i20;
        }
        vMeth_check_sum += l + i4 + i5 + i6 + i16 + i17 + i18 + i19 + i20;
    }

    public void mainTest(String[] strArr1) {

        float f=72.840F;
        int i=-127, i1=49195, i2=-13, i3=11, i21=-5, i22=-175, i23=-2, i24=46213, i25=99;
        double d1=-2.110212;
        boolean b1=false;
        long l2=2189707484757580793L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1292929973L);

        lArr[(iFld >>> 1) % N] = (long)(-(--f));
        i = 1;
        do {
            for (i1 = 5; i1 < 106; ++i1) {
                iFld += (i1 | Test.instanceCount);
                i3 = 2;
                while (--i3 > 0) {
                    i2 += (((i3 * i1) + i) - i2);
                }
                vMeth(Test.instanceCount, 4947);
                i21 = 1;
                do {
                    Test.iFld1 -= i1;
                    Test.iArrFld[i21] = i1;
                    d1 += i2;
                    i2 -= i1;
                    i2 += (int)d1;
                    i2 -= i21;
                    sArrFld[i21 - 1][i1 + 1] = Test.byFld;
                } while (++i21 < 2);
                Test.iFld1 += (int)Test.instanceCount;
            }
            if (b1) break;
            Test.iFld1 += (i * i);
            Test.instanceCount = Test.iFld1;
            f *= f;
            i22 = 1;
            do {
                i2 = -144;
                i2 -= Test.byFld;
                Test.iArrFld[i22] = (int)-2.27F;
                try {
                    Test.iFld1 = (i22 % 11);
                    Test.iFld1 = (1917250504 / iFld);
                    Test.iFld1 = (-63256 % i22);
                } catch (ArithmeticException a_e) {}
            } while (++i22 < 106);
            for (l2 = i; l2 < 106; l2++) {
                for (i24 = 1; i24 > 1; i24 -= 2) {
                    Test.iArrFld = Test.iArrFld;
                    i25 <<= i1;
                    f += Test.byFld;
                }
            }
        } while (++i < 236);

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 i21 = " + i2 + "," + i3 + "," + i21);
        FuzzerUtils.out.println("d1 b1 i22 = " + Double.doubleToLongBits(d1) + "," + (b1 ? 1 : 0) + "," + i22);
        FuzzerUtils.out.println("l2 i23 i24 = " + l2 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 lArr = " + i25 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.iFld1 Test.iArrFld sArrFld = " + Test.iFld1 + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
