// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-882965484L;
    public static volatile double dFld=2.64829;
    public static long lFld=2L;
    public static long lFld1=-7252411953193044572L;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -84);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(long l3, int i5, int i6) {

        double d=2.80388;
        int i7=157, i8=-8, i9=-11, i10=-8240, i11=-13, i12=6, i13=-224;
        float f2=-42.743F, f3=0.735F;
        boolean bArr[]=new boolean[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr1, 10L);

        Test.dFld = i6;
        for (d = 7; d < 377; d++) {
            bArr[(int)(d)] = true;
        }
        for (f2 = 21; f2 < 396; ++f2) {
            for (i9 = 1; i9 < 5; i9++) {
                i11 = 1;
                while (++i11 < 2) {
                    lArr1[i9 + 1] -= i6;
                    i7 = 50827;
                }
                i6 = i8;
                i6 = 0;
                Test.iArrFld[(int)(f2 + 1)] = 235;
            }
            for (i12 = 5; i12 > 1; --i12) {
                i6 = i6;
                f3 = f3;
                l3 = i12;
            }
        }
        long meth_res = l3 + i5 + i6 + Double.doubleToLongBits(d) + i7 + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11
            + i12 + i13 + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth1(long l1, long l2) {

        int i3=162, i4=87, i14=13, i15=55819, i16=4, i17=-13, iArr[][]=new int[N][N];
        float f1=-30.268F;
        byte by=97;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3206686976L);
        FuzzerUtils.init(iArr, -8931);

        for (i3 = 4; i3 < 135; ++i3) {
            boolean b=false;
            lArr[i3] >>>= (long)(((f1--) - Double.longBitsToDouble(Test.instanceCount)) + (--i4));
            iArr[i3][i3 - 1] -= (int)((Integer.reverseBytes(-5056) + (2 * (i3 - by))) * ((f1++) / (i3 | 1)));
            dMeth(Test.lFld, i3, i4);
            if (b) {
                iArr[i3 + 1][i3 + 1] >>>= (int)Test.instanceCount;
            } else {
                for (i14 = 1; 12 > i14; i14++) {
                    l1 += -1;
                    b = b;
                }
            }
            iArr[i3][i3 - 1] = -31;
            i15 = i14;
            Test.lFld += (((i3 * i4) + Test.instanceCount) - i15);
            for (i16 = i3; i16 < 12; i16++) {
                i15 = i17;
                if (i3 != 0) {
                }
            }
        }
        long meth_res = l1 + l2 + i3 + i4 + Float.floatToIntBits(f1) + by + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, int i) {

        float f=-86.882F;
        short s1=1954;
        int i1=39471, i2=-1, i18=48871, i19=-10, i20=-8;
        byte by1=75;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -24172258L);

        f = (l = (long)((s1 * 254) - (i = (int)Test.dFld)));
        for (i1 = 7; 261 > i1; i1 += 2) {
            if (iMeth1(l, l) < 93.995F) break;
            i -= i2;
            by1 += (byte)(i1 ^ i);
            i18 = 12;
            while (--i18 > 0) {
                Test.lFld = i2;
                i &= i;
                try {
                    i2 = (i18 % Test.iArrFld[i18 + 1]);
                    Test.iArrFld[i1] = (Test.iArrFld[i18] / Test.iArrFld[i1]);
                    i = (i2 / i18);
                } catch (ArithmeticException a_e) {}
                i2 -= i18;
            }
        }
        Test.dFld %= (i1 | 1);
        for (i19 = 2; i19 < 134; ++i19) {
            if (i2 != 0) {
            }
            Test.iArrFld[i19 - 1] |= i1;
            f += (i19 * i19);
        }
        long meth_res = l + i + Float.floatToIntBits(f) + s1 + i1 + i2 + by1 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=1648;
        int i21=7021, i22=246, i23=-87, i24=-1343, i25=-59129, i26=-29223, i27=-4, i28=-1487;
        float f4=121.792F;
        byte by2=-113;
        long lArr3[][]=new long[N][N];

        FuzzerUtils.init(lArr3, -6L);

        s *= (short)(Test.instanceCount + iMeth(Test.lFld1, i21));
        for (i22 = 3; i22 < 234; i22++) {
            i24 = 1;
            while (++i24 < 109) {
                Test.lFld = (long)f4;
                i23 = i22;
                for (i25 = i22; i25 < 1; ++i25) {
                    boolean b1=true;
                    Test.lFld = (long)1.59593;
                    f4 += (i25 * i25);
                    Test.dFld /= (i23 | 1);
                    i21 += (i25 - Test.lFld);
                    i23 += -127;
                    switch ((i24 % 5) + 94) {
                    case 94:
                        i26 += (i25 | i26);
                        f4 -= i21;
                        i23 += i27;
                        Test.lFld1 *= Test.lFld1;
                        break;
                    case 95:
                        i27 += (((i25 * s) + Test.lFld) - i23);
                        Test.lFld1 -= Test.lFld1;
                        break;
                    case 96:
                        Test.dFld -= 32347;
                        if (b1) {
                            i26 = i25;
                            f4 += (((i25 * by2) + i23) - i27);
                        } else if (b1) {
                            i27 -= i25;
                            Test.instanceCount += (((i25 * Test.lFld1) + i23) - i27);
                            i27 = i28;
                        }
                        Test.lFld = Test.lFld;
                        break;
                    case 97:
                        Test.iArrFld[i24 - 1] %= (int)(Test.lFld | 1);
                        lArr3[i24 + 1][i24 - 1] = Test.instanceCount;
                        break;
                    case 98:
                        i27 = i28;
                        Test.instanceCount += (i25 * i25);
                        break;
                    default:
                        Test.iArrFld[i24] = (int)Test.lFld1;
                    }
                }
            }
        }

        FuzzerUtils.out.println("s i21 i22 = " + s + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 f4 = " + i23 + "," + i24 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("by2 i28 lArr3 = " + by2 + "," + i28 + "," + FuzzerUtils.checkSum(lArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.lFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.lFld);
        FuzzerUtils.out.println("Test.lFld1 Test.iArrFld = " + Test.lFld1 + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
