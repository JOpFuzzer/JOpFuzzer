// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=34175L;
    public static byte byFld=-14;
    public static double dFld=1.116655;
    public static volatile boolean bFld=false;
    public static float fFld=-2.463F;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -40379);
    }

    public static long fMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        long l2=-94L;
        int i13=13, iArr1[][]=new int[N][N];
        double d1=0.4013;
        boolean b2=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -5270);
        FuzzerUtils.init(fArr, 74.426F);

        Test.byFld += (byte)109;
        for (l2 = 10; l2 < 384; l2++) {
            d1 = 1;
            do {
                Test.iArrFld[(int)(d1 + 1)] |= -244;
                Test.iArrFld[(int)(l2 + 1)] = (int)-2005630431L;
                i13 += (-254 + (d1 * d1));
                iArr1 = iArr1;
            } while (++d1 < 5);
            if (b2) continue;
            i13 = (int)Test.instanceCount;
            Test.dFld += -638649833L;
            switch ((int)((l2 % 3) + 109)) {
            case 109:
            case 110:
                if (b2) break;
                Test.instanceCount = i13;
                i13 += (int)(l2 | i13);
                break;
            case 111:
                fArr[(int)(l2)] -= l2;
                break;
            }
        }
        long meth_res = l2 + i13 + Double.doubleToLongBits(d1) + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static boolean bMeth(int i8) {

        float f1=-1.40F;
        int i9=218, i10=-129, i11=57, i12=-49307;
        double d=113.26705;
        boolean bArr[]=new boolean[N];
        short sArr[]=new short[N], sArr1[]=new short[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(sArr, (short)17559);
        FuzzerUtils.init(byArr, (byte)-117);
        FuzzerUtils.init(sArr1, (short)17507);

        bArr[(i8 >>> 1) % N] = (((i8 * f1) * (247 - Test.instanceCount)) != ((i8++) * (--Test.instanceCount)));
        for (i9 = 4; i9 < 264; i9++) {
            try {
                Test.iArrFld[i9 - 1] = (137189599 / i10);
                i10 = (i8 % i8);
                i10 = (i10 / i10);
            } catch (ArithmeticException a_e) {}
            f1 = 6;
            d += Test.instanceCount;
            i10 += (28 + (i9 * i9));
            i8 += (9 + (i9 * i9));
            i11 = 1;
            do {
                switch ((i11 % 3) + 33) {
                case 33:
                    sArr[i9] *= (short)((--byArr[i9 - 1]) - (--Test.iArrFld[i11]));
                    break;
                case 34:
                    i12 = 1;
                    do {
                        i8 += (i12 ^ (long)f1);
                        if (Test.bFld) {
                            sArr = (sArr = (sArr = sArr1));
                            i8 >>= (int)(((-100 + lMeth()) - d) * i12);
                            return ((int)(i8 + Float.floatToIntBits(f1) + i9 + i10 + Double.doubleToLongBits(d) + i11 +
                                i12 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(sArr) +
                                FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr1))) % 2 > 0;
                        }
                    } while ((i12 += 3) < 1);
                    break;
                case 35:
                    i8 += i11;
                    break;
                }
            } while (++i11 < 6);
        }
        long meth_res = i8 + Float.floatToIntBits(f1) + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(sArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static float fMeth(int i5, long l) {

        int i6=-22919, i7=-5, i14=112, i15=19083;
        long l1=-4143919164500784959L;
        boolean b1=true;
        float f2=-2.349F;

        Test.iArrFld[(i5 >>> 1) % N] -= (++i5);
        i5 = i5;
        i6 = 1;
        while (++i6 < 258) {
            for (l1 = 1; l1 < 6; l1 += 2) {
                float f=-2.242F;
                switch ((((--i5) >>> 1) % 1) + 32) {
                case 32:
                    l = Integer.reverseBytes((int)((-1287675056L * (i6 * 83L)) - (i7--)));
                    Test.instanceCount += ((i7--) * (i7 | Math.min(i7, i7)));
                    break;
                }
                f += (l1 * l1);
                try {
                    i7 = (i7 % 938758656);
                    i5 = (53 % i5);
                    i5 = (i5 / i7);
                } catch (ArithmeticException a_e) {}
                b1 = bMeth(i5);
                f += l1;
                l += (l1 * l1);
            }
            for (i14 = 1; i14 < 6; i14++) {
                i5 -= (int)f2;
            }
            i7 -= (int)Test.instanceCount;
        }
        long meth_res = i5 + l + i6 + l1 + i7 + (b1 ? 1 : 0) + i14 + i15 + Float.floatToIntBits(f2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-4, i1=224, i2=25751, i3=-7, i4=-12, i16=-37736, i17=-11, i18=5, i19=210, i20=-7, i21=-120, iArr[]=new
            int[N];
        boolean b=false;
        float f3=2.399F;

        FuzzerUtils.init(iArr, 203);

        i *= (int)Test.instanceCount;
        for (i1 = 8; i1 < 307; ++i1) {
            i += iArr[i1 + 1];
            b = (!((i2++) != (--i)));
            for (i3 = 5; i3 < 84; ++i3) {
                Test.iArrFld[i3 - 1] = (int)fMeth(i4, Test.instanceCount);
                Test.instanceCount -= (long)f3;
                i *= (int)Test.dFld;
                Test.dFld += Test.instanceCount;
                i2 += (((i3 * i16) + Test.instanceCount) - i4);
                i17 = 1;
                while (++i17 < 2) {
                    i -= 13;
                    switch (((i17 % 2) * 5) + 116) {
                    case 118:
                        Test.iArrFld[i3 - 1] -= i4;
                        break;
                    case 120:
                        Test.instanceCount += i16;
                        i4 = i;
                        Test.fFld *= (float)Test.dFld;
                        i16 -= i16;
                    }
                    Test.dFld += i4;
                    i4 += (i17 * i17);
                    Test.byFld = (byte)i3;
                    i += i17;
                    i = 4;
                }
                for (i18 = 2; i18 > 1; --i18) {
                    Test.iArrFld[i1] += (int)Test.instanceCount;
                }
                for (i20 = 1; i20 < 2; i20++) {
                    Test.fFld -= i17;
                    i4 = (int)Test.instanceCount;
                    i21 >>>= i19;
                    Test.instanceCount = i2;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("b i3 i4 = " + (b ? 1 : 0) + "," + i3 + "," + i4);
        FuzzerUtils.out.println("f3 i16 i17 = " + Float.floatToIntBits(f3) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 iArr = " + i21 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.fFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  bMeth ->  bMeth fMeth mainTest
//DEBUG  lMeth ->  lMeth bMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
