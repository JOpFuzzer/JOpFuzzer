// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-40859L;
    public static int iFld=8;
    public static boolean bFld=false;
    public static volatile float fFld=-1.392F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -73);
        FuzzerUtils.init(Test.lArrFld, 169L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public static long vMeth3_check_sum = 0;

    public static void vMeth1() {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -62245);

        Test.iFld >>= (Math.max(Test.iFld + Test.iFld, ++Test.iFld) - iArr[(Test.iFld >>> 1) % N]);
        vMeth1_check_sum += FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth3() {

        int i2=14945, i3=163, i4=223;
        double d1=67.29113;
        short s=-19728;
        byte by1=-102;

        i2 = 1;
        do {
            Test.instanceCount <<= Test.iFld;
            Test.iFld -= Test.iFld;
            for (i3 = 1; 4 > i3; i3 += 3) {
                Test.iFld -= i3;
            }
            i4 = (int)Test.instanceCount;
        } while (++i2 < 380);
        Test.iFld = (int)d1;
        i4 = s;
        i4 += i2;
        Test.instanceCount >>= Test.iFld;
        Test.instanceCount <<= 59;
        i4 = by1;
        vMeth3_check_sum += i2 + i3 + i4 + Double.doubleToLongBits(d1) + s + by1;
    }

    public static void vMeth2(boolean b, long l) {

        float f=18.491F;
        int i5=-5, i6=-12773, i7=63451, i8=14, i9=-6;
        long l1=41825L;
        double d2=-96.6582;

        vMeth3();
        f -= f;
        l += Test.instanceCount;
        for (i5 = 8; 370 > i5; i5++) {
            if (b) continue;
            for (i7 = i5; i7 < 5; ++i7) {
                Test.instanceCount = Test.instanceCount;
                i6 *= (int)f;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-35839);
                i6 += i7;
                l1 += (-9 + (i7 * i7));
                Test.iFld += i8;
                d2 *= i9;
                l += i5;
            }
            Test.lArrFld[i5] -= 63403;
        }
        vMeth2_check_sum += (b ? 1 : 0) + l + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + l1 +
            Double.doubleToLongBits(d2) + i9;
    }

    public static void vMeth(double d) {

        int i=93, i1=225, i10=-27804, i11=2, i12=8, i13=0, i14=-9;
        byte by=2;

        vMeth1();
        for (i = 385; i > 5; i -= 2) {
            Test.bFld = (Test.bFld = ((true && Test.bFld) | (Test.instanceCount >= Test.iFld)));
            Test.instanceCount = (long)(((by + i1) + 0.78458) - Math.abs(i1++));
            vMeth1();
        }
        vMeth2(Test.bFld, Test.instanceCount);
        i1 &= (int)Test.instanceCount;
        i10 = 1;
        while (++i10 < 213) {
            for (i11 = 1; i11 < 8; ++i11) {
                Test.instanceCount += i11;
                if (Test.bFld) break;
                for (i13 = i11; i13 < 2; ++i13) {
                    Test.fFld += (i13 - Test.instanceCount);
                }
                Test.fFld = i;
                d -= Test.fFld;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + by + i10 + i11 + i12 + i13 + i14;
    }

    public void mainTest(String[] strArr1) {

        double d3=0.72256, dArr[]=new double[N];
        int i15=-27334, i16=11, i17=-182, i18=214, i19=-7, i20=169, i21=0, i22=-41;
        float f1=-75.739F;
        short s1=10389;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr, -1.120504);

        vMeth(d3);
        Test.iArrFld[(Test.iFld >>> 1) % N] >>= 133;
        for (i15 = 5; i15 < 132; i15++) {
            for (f1 = 10; f1 < 197; f1++) {
                i16 += i15;
                s1 -= (short)d3;
                for (i18 = i15; i18 < 2; i18 += 3) {
                    if (false) break;
                    Test.instanceCount += i19;
                    Test.fFld = i15;
                    if (Test.bFld) break;
                    bArr[i18] = true;
                    d3 = Test.iFld;
                    i17 += (i18 * i18);
                    dArr[i15 - 1] -= i18;
                }
                switch ((int)(((f1 % 6) * 5) + 7)) {
                case 26:
                    for (i20 = (int)(f1); 2 > i20; i20++) {
                        if (Test.bFld) continue;
                        Test.instanceCount |= i20;
                        i17 += i20;
                        Test.instanceCount = i15;
                        Test.instanceCount += (((i20 * i21) + i20) - i17);
                        i16 *= Test.iFld;
                        Test.fFld += (i20 - i22);
                    }
                    if (Test.bFld) {
                        Test.iFld <<= -187;
                        Test.iArrFld[(int)(f1)] = s1;
                    }
                    Test.fFld = i16;
                    break;
                case 15:
                    i16 += (int)(f1 * f1);
                    break;
                case 12:
                    Test.iFld *= i15;
                    break;
                case 17:
                    Test.lArrFld[(int)(f1 - 1)] += (long)16.881F;
                    break;
                case 27:
                    i17 += (int)(f1 * f1);
                    break;
                case 10:
                    try {
                        i17 = (52672 / i22);
                        i16 = (Test.iFld / -11689);
                        Test.iArrFld[i15 + 1] = (i20 / Test.iArrFld[(int)(f1 - 1)]);
                    } catch (ArithmeticException a_e) {}
                    break;
                }
            }
        }

        FuzzerUtils.out.println("d3 i15 i16 = " + Double.doubleToLongBits(d3) + "," + i15 + "," + i16);
        FuzzerUtils.out.println("f1 i17 s1 = " + Float.floatToIntBits(f1) + "," + i17 + "," + s1);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 bArr = " + i21 + "," + i22 + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.iArrFld Test.lArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth3_check_sum: " + vMeth3_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth mainTest
//DEBUG  vMeth3 ->  vMeth3 vMeth2 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
