// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5494L;
    public static float fFld=-5.1007F;
    public static boolean bFld=true;
    public long lFld=36377L;
    public short sFld=-10442;
    public static double dFld=1.53300;
    public byte byFld=-120;
    public int iArrFld[]=new int[N];

    public static long dMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8, int i9, boolean b) {

        int i10=-72, i11=-224, i12=44877, iArr[]=new int[N];
        short s1=-26697;
        double d=0.48466;

        FuzzerUtils.init(iArr, 8);

        for (i10 = 2; 378 > i10; i10++) {
            Test.fFld += Test.fFld;
            Test.instanceCount += i11;
            try {
                i11 = (1787927440 % iArr[i10 + 1]);
                i11 = (i8 % -49302);
                i11 = (i9 / 15809);
            } catch (ArithmeticException a_e) {}
            i8 += (i10 ^ (long)Test.fFld);
            i9 = -194;
            switch (((i10 % 3) * 5) + 116) {
            case 123:
                s1 += (short)i10;
                i12 = 1;
                while (++i12 < 4) {
                    i11 <<= (int)Test.instanceCount;
                    Test.fFld *= i12;
                    i9 += 12;
                    i11 = s1;
                }
                break;
            case 128:
                Test.fFld *= -42059;
                d %= (i8 | 1);
                break;
            case 121:
                Test.instanceCount <<= Test.instanceCount;
                break;
            default:
                Test.instanceCount >>= i11;
            }
        }
        long meth_res = i8 + i9 + (b ? 1 : 0) + i10 + i11 + s1 + i12 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(int i5, int i6, int i7) {

        int i13=-7, i14=-7, i15=4, i16=-58772, iArr1[][]=new int[N][N];
        double d1=-82.83626;

        FuzzerUtils.init(iArr1, -105);

        if (Test.bFld) {
            i7 <<= (iMeth(i6, i7, true) - i6);
            for (i13 = 11; 359 > i13; ++i13) {
                iArr1[i13 + 1][i13] = 0;
                i6 = i7;
                if (true) continue;
                Test.instanceCount /= (i5 | 1);
                i5 *= (int)d1;
                i7 += (((i13 * i7) + Test.instanceCount) - i5);
                for (i15 = 1; i15 < 5; ++i15) {
                    i14 >>= i6;
                    i7 *= i16;
                    i7 += (i15 * i15);
                    Test.fFld = i13;
                    i7 += (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i13 + i14 + Double.doubleToLongBits(d1) + i15 + i16 +
            FuzzerUtils.checkSum(iArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static double dMeth(int i2, int i3, long l) {

        long l1=-10487L, lArr[]=new long[N];
        int i4=-340, i17=224, i18=-11;
        short s=15434, sArr[]=new short[N];
        double d2=106.130057;

        FuzzerUtils.init(lArr, 12782L);
        FuzzerUtils.init(sArr, (short)26627);

        l1 = 1;
        while (++l1 < 189) {
            i4 = 1;
            do {
                Test.fFld = l1;
                Test.instanceCount += s;
                if (bMeth(i17, i2, i2)) break;
                lArr[(int)(l1 - 1)] += i2;
                i18 = 1;
                while (++i18 < 1) {
                    i3 <<= (int)l;
                    i3 += i18;
                    i3 >>= i2;
                    i3 *= (int)l;
                    sArr[i4] = (short)-7;
                }
                d2 = 1;
                do {
                    i3 += (int)d2;
                    l += (long)(d2 * d2);
                } while (++d2 < 1);
            } while (++i4 < 8);
        }
        long meth_res = i2 + i3 + l + l1 + i4 + s + i17 + i18 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-6060, i1=227, i19=-12, i20=-176, i21=-33367, i22=201, i23=8, i24=-5248, i25=-7, i26=-7, iArr2[][]=new
            int[N][N];
        long lArr1[]=new long[N];
        boolean bArr[]=new boolean[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, -197);
        FuzzerUtils.init(lArr1, 2077944068L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, -17.55F);

        for (i = 19; i < 383; i++) {
            Test.instanceCount = (Math.min(i + i1, (int)(5 << (Test.instanceCount + i))) - iArrFld[i]);
        }
        Test.instanceCount -= (long)(i * Test.fFld);
        dMeth(i, i, -7L);
        for (i19 = 3; i19 < 176; ++i19) {
            i1 = i;
            for (i21 = 145; i21 > 2; --i21) {
                switch (((i21 % 1) * 5) + 59) {
                case 61:
                    switch ((i19 % 4) + 111) {
                    case 111:
                        iArrFld[i19] += i19;
                        for (i23 = 1; i23 < 2; i23++) {
                            iArr2[i19][i21 - 1] = i22;
                        }
                        switch ((i19 % 4) + 115) {
                        case 115:
                            lArr1[i21] *= i1;
                            i24 += (((i21 * lFld) + i) - i24);
                            Test.bFld = true;
                            break;
                        case 116:
                            iArr2[i21][i21] += i;
                            break;
                        case 117:
                            sFld >>= sFld;
                            break;
                        case 118:
                            for (i25 = 1; i25 < 2; i25++) {
                                i1 += (i25 | i1);
                                bArr = bArr;
                                fArr[i25 - 1] = Test.instanceCount;
                                switch ((i25 % 1) + 103) {
                                case 103:
                                    if (Test.bFld) continue;
                                    if (Test.bFld) continue;
                                    i20 <<= i20;
                                default:
                                    i22 = i20;
                                    i22 -= i20;
                                }
                                lArr1[i25] >>= -1756161491L;
                                Test.bFld = Test.bFld;
                            }
                            break;
                        default:
                            Test.dFld *= i22;
                        }
                        break;
                    case 112:
                        Test.fFld += i21;
                    case 113:
                        iArrFld[i21] <<= (int)lFld;
                        break;
                    case 114:
                        Test.fFld += i24;
                        break;
                    default:
                        byFld += (byte)(((i21 * sFld) + Test.fFld) - i19);
                    }
                    break;
                default:
                    Test.dFld /= 5823;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i19 = " + i + "," + i1 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 iArr2 lArr1 = " + i26 + "," + FuzzerUtils.checkSum(iArr2) + "," +
            FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("bArr fArr = " + FuzzerUtils.checkSum(bArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("lFld sFld Test.dFld = " + lFld + "," + sFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("byFld iArrFld = " + byFld + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  bMeth ->  bMeth dMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
