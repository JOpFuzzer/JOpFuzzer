// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-162L;
    public static short sFld=5352;
    public static double dFld=-64.67165;
    public static int iFld=-215;
    public volatile byte byFld=-2;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 124L);
        FuzzerUtils.init(Test.iArrFld, 176);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8, int i9) {

        int i10=-14, i11=57822, i12=-24312;
        double d=-1.23589;

        for (long l1 : Test.lArrFld) {
            Test.iArrFld[(i8 >>> 1) % N] = i8;
            i8 <<= i9;
            Test.instanceCount += Test.instanceCount;
            for (i10 = 4; i10 > 1; --i10) {
                i12 = 1;
                while (++i12 < 2) {
                    float f3=-16.530F;
                    i11 *= (int)l1;
                    i9 >>= 5;
                    switch ((i12 % 2) + 45) {
                    case 45:
                        i9 += (i12 | i10);
                    case 46:
                        i8 += (i12 | (long)f3);
                        i8 += (-14609 + (i12 * i12));
                        break;
                    }
                    i8 -= i12;
                    d -= i10;
                    d *= f3;
                }
            }
        }
        vMeth2_check_sum += i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d);
    }

    public static void vMeth1(long l, float f2) {

        int i6=-1, i7=5, i13=-11, i14=-20606, i15=-75, i16=1439, i17=-4, i18=-137;
        double d1=1.74292;

        for (i6 = 5; i6 < 328; ++i6) {
            i7 += (i6 - i6);
            i7 *= (int)Test.instanceCount;
        }
        vMeth2(i7, 21916);
        for (i13 = 15; i13 < 269; i13++) {
            i14 += (i13 * i13);
            i14 -= -10960;
            for (i15 = i13; i15 < 6; ++i15) {
                i14 >>= (int)195L;
                for (i17 = 1; i17 < 1; i17++) {
                    i14 = (int)f2;
                    i18 = (int)d1;
                    Test.sFld &= (short)i17;
                    i18 = (int)2L;
                    i18 += (i17 * i17);
                }
            }
        }
        vMeth1_check_sum += l + Float.floatToIntBits(f2) + i6 + i7 + i13 + i14 + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(d1);
    }

    public static void vMeth(int i, int i1) {

        int i2=-9, i3=-6, i4=-243, i5=54058, i19=-50458, i20=-145, iArr[]=new int[N];
        float f=38.453F, f1=-101.547F, f4=53.485F;
        byte by=-2;

        FuzzerUtils.init(iArr, -7608);

        i |= (int)(iArr[(i1 >>> 1) % N] + ((--i) * Test.instanceCount));
        for (i2 = 358; i2 > 13; i2 -= 2) {
            i3 += (i2 * i2);
            for (i4 = 1; i4 < 9; i4++) {
                f *= (((Test.instanceCount + f1) + (~(Test.lArrFld[i4]--))) - (--i1));
                vMeth1(Test.instanceCount, f1);
                by += (byte)(52093L + (i4 * i4));
                i5 <<= 12306;
                try {
                    i = (1591674727 % i5);
                    i = (Test.iArrFld[i4 - 1] / -27128);
                    i3 = (i / -157);
                } catch (ArithmeticException a_e) {}
            }
            i19 = 1;
            do {
                i -= Test.sFld;
                for (f4 = i19; 1 > f4; f4++) {
                    Test.dFld = i20;
                    i -= (int)f1;
                    i1 = i2;
                }
            } while (++i19 < 9);
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + by + i19 +
            Float.floatToIntBits(f4) + i20 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=49, i22=0, i23=-42887, i24=164, i25=41222, i26=-8, i27=47713, i28=13, i29=-1, i30=-29115;
        float f5=-1.710F, f6=-62.30F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 29.851F);

        vMeth(9, Test.iFld);
        i21 = 1;
        while ((i21 += 2) < 263) {
            Test.dFld += Test.instanceCount;
            switch ((((i21 >>> 1) % 8) * 5) + 81) {
            case 86:
                switch ((i21 % 8) + 71) {
                case 71:
                    Test.iArrFld[i21] <<= (int)Test.instanceCount;
                    for (i22 = 191; i22 > 9; i22 -= 2) {
                        Test.iFld += i22;
                        Test.sFld += (short)Test.instanceCount;
                        Test.instanceCount &= 35456;
                        Test.dFld += i22;
                        for (i24 = i22; i24 < 3; i24++) {
                            Test.lArrFld[i22] -= (long)Test.dFld;
                            i25 += (((i24 * Test.iFld) + i25) - Test.instanceCount);
                            Test.instanceCount = -45484;
                            Test.iArrFld = Test.iArrFld;
                            i23 += (i24 * i24);
                            i25 += i22;
                            byFld += (byte)(i24 * i24);
                        }
                        for (i26 = 3; i26 > 1; i26--) {
                            f5 %= 13328;
                        }
                        Test.instanceCount += (-5 + (i22 * i22));
                        i25 = 108;
                        fArr = FuzzerUtils.float2array(N, (float)0.508F);
                    }
                    for (i28 = i21; 191 > i28; ++i28) {
                        i30 = 1;
                        do {
                            Test.instanceCount += -14;
                            Test.sFld += (short)(((i30 * i29) + i24) - i21);
                            Test.iArrFld[i28] = (int)Test.instanceCount;
                            Test.instanceCount = i30;
                        } while ((i30 -= 2) > 0);
                    }
                    break;
                case 72:
                    Test.instanceCount += (i21 ^ (long)f5);
                case 73:
                    Test.lArrFld = Test.lArrFld;
                    break;
                case 74:
                    i25 -= (int)Test.instanceCount;
                case 75:
                    Test.iFld %= -10;
                case 76:
                    f5 += 75;
                    break;
                case 77:
                    if (true) continue;
                    break;
                case 78:
                    Test.instanceCount += (i21 * i21);
                }
                break;
            case 98:
                Test.sFld -= (short)f6;
                break;
            case 101:
                f6 += i25;
                break;
            case 120:
                Test.instanceCount = i29;
                break;
            case 114:
                Test.iFld *= i24;
                break;
            case 99:
                i25 = (int)Test.instanceCount;
                break;
            case 121:
                Test.iArrFld[i21] -= (int)1.193F;
                break;
            case 91:
                i27 -= byFld;
                break;
            default:
                i29 -= i21;
            }
        }

        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 f5 i28 = " + i27 + "," + Float.floatToIntBits(f5) + "," + i28);
        FuzzerUtils.out.println("i29 i30 f6 = " + i29 + "," + i30 + "," + Float.floatToIntBits(f6));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iFld byFld Test.lArrFld = " + Test.iFld + "," + byFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
