// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2471729876L;
    public int iFld=-2;
    public static volatile short sFld=-6579;
    public static double dFld=0.31025;
    public static float fFld=-2.113F;
    public static volatile long lArrFld[][]=new long[N][N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3353553767484820038L);
        FuzzerUtils.init(Test.fArrFld, 0.268F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(double d, long l1, int i4) {

        float f1=27.321F;
        byte by1=43;
        int i5=50, i6=-49998, i7=-12368, i8=-5, i9=174;

        f1 = l1;
        i4 >>>= by1;
        for (i5 = 3; 230 > i5; i5++) {
            l1 += (((i5 * Test.instanceCount) + i5) - i6);
            d = l1;
            i4 += i5;
            i6 = i5;
            i7 = 1;
            while (++i7 < 7) {
                Test.instanceCount = Test.sFld;
                i8 = 1;
                do {
                    i4 *= i9;
                    i9 += (i8 + i8);
                    i6 += (int)-1.551F;
                    i6 = i5;
                    i4 >>= i9;
                } while (++i8 < 1);
            }
        }
        long meth_res = Double.doubleToLongBits(d) + l1 + i4 + Float.floatToIntBits(f1) + by1 + i5 + i6 + i7 + i8 + i9;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i2=-22089, i3=-63, i10=1719, i11=-26866, i12=170, i13=89, i14=-121;
        byte by=-119;
        float f=103.269F;

        for (i2 = 12; i2 < 378; i2++) {
            by *= (byte)(((i2 - i2) + (i3 += (int)f)) % ((i2 * (Test.instanceCount + by)) | 1));
            i3 >>= ((++i3) - Math.max((int)(Test.instanceCount + i3), iMeth1(-26.38015, Test.instanceCount, 5)));
            for (i10 = 1; i10 < 5; ++i10) {
                for (i12 = i2; i12 < 2; ++i12) {
                    by = (byte)f;
                    i13 *= i10;
                    f = -2778117624L;
                }
                switch ((i10 % 1) + 71) {
                case 71:
                    Test.instanceCount = Test.instanceCount;
                    i14 = 1;
                    while (++i14 < 2) {
                        i13 *= i12;
                        i11 += i14;
                        by >>>= (byte)i2;
                        by += (byte)Test.instanceCount;
                    }
                    break;
                default:
                    i13 = (int)f;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + by + Float.floatToIntBits(f) + i10 + i11 + i12 + i13 + i14;
    }

    public static int iMeth(long l) {

        int i15=3;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)-17);

        vMeth();
        Test.lArrFld[(i15 >>> 1) % N][(i15 >>> 1) % N] *= i15;
        byArr = byArr;
        long meth_res = l + i15 + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=8, i16=30, i17=-37471, i18=-121, i19=-253, i21=-101, i22=49982, i23=191, i24=-134, iArr[]=new
            int[N];
        boolean b=false;

        FuzzerUtils.init(iArr, -10);

        iFld = (++iArr[(iFld >>> 1) % N]);
        for (i = 4; i < 166; i++) {
            int i20=-42791;
            Test.instanceCount = iMeth(Test.instanceCount);
            iFld -= (int)Test.dFld;
            i1 = iFld;
            for (i16 = 5; i16 < 155; i16++) {
                for (i18 = 1; i18 < 2; ++i18) {
                    Test.fFld *= (float)54.51577;
                    Test.sFld = (short)iFld;
                    i1 = i1;
                    i19 = i;
                    i19 += i18;
                    i1 -= i17;
                    i17 *= i;
                    Test.instanceCount = Test.instanceCount;
                    iFld -= i;
                }
                Test.instanceCount += (i16 * i16);
            }
            iArr[i] += i20;
            for (i21 = 7; i21 < 155; i21++) {
                Test.instanceCount += (i21 * i21);
                Test.instanceCount = 693;
                Test.fArrFld = Test.fArrFld;
                i19 += (i21 - i17);
                i17 <<= i1;
                i20 <<= (int)-2175971811966324257L;
                for (i23 = 1; i23 < 2; i23++) {
                    i24 = i19;
                    i1 -= (int)Test.dFld;
                    if (b) continue;
                    i17 += (((i23 * i17) + i19) - Test.instanceCount);
                }
            }
        }

        FuzzerUtils.out.println("i i1 i16 = " + i + "," + i1 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 b iArr = " + i24 + "," + (b ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.sFld = " + Test.instanceCount + "," + iFld + "," +
            Test.sFld);
        FuzzerUtils.out.println("Test.dFld Test.fFld Test.lArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
