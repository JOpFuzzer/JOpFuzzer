// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=703252999L;
    public static float fFld=-64.399F;
    public byte byFld=73;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 2);
        FuzzerUtils.init(Test.lArrFld, 7L);
        FuzzerUtils.init(Test.fArrFld, 55.104F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4) {

        boolean b1=true;
        int i5=-3, i6=-233, i7=57484, i8=-13, i9=10;
        double d=1.129639;
        short s=17774;

        Test.lArrFld[(i4 >>> 1) % N] >>= i4;
        b1 = true;
        i4 <<= -61651;
        for (i5 = 7; 198 > i5; ++i5) {
            Test.lArrFld = Test.lArrFld;
            d += -9L;
            Test.instanceCount = i6;
        }
        for (i7 = 174; i7 > 2; --i7) {
            i9 = 1;
            while (++i9 < 9) {
                i4 = i7;
                i8 += i6;
                i6 ^= (int)Test.instanceCount;
                i8 -= (int)Test.instanceCount;
                s -= (short)d;
            }
            Test.instanceCount -= Test.instanceCount;
        }
        vMeth1_check_sum += i4 + (b1 ? 1 : 0) + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + i9 + s;
    }

    public static void vMeth(boolean b, int i3) {

        float f2=0.800F, f3=2.464F;
        int i10=211, i11=122, i12=62430;
        byte by=-77;
        double d1=0.130791;
        long l=15288L;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, false);

        vMeth1(-222);
        for (f2 = 11; f2 < 182; ++f2) {
            f3 *= 36684L;
            i3 %= (int)(by | 1);
            Test.instanceCount -= (long)d1;
            for (i11 = 9; 1 < i11; --i11) {
                Test.lArrFld[i11] = i10;
                bArr[i11 - 1] = bArr[i11 - 1];
                Test.instanceCount ^= i12;
                i12 = (int)d1;
                i10 = (int)d1;
            }
            l = 1;
            while (++l < 9) {
                Test.iArrFld[(int)(f2 + 1)] = 11;
                Test.instanceCount += l;
                i10 -= i3;
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i3 + Float.floatToIntBits(f2) + i10 + Float.floatToIntBits(f3) + by +
            Double.doubleToLongBits(d1) + i11 + i12 + l + FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth(float f, float f1) {

        int i1=-163, i2=4, i13=-3, i14=53872;
        boolean b2=true;
        double d2=0.617;

        for (i1 = 15; i1 < 335; ++i1) {
            vMeth(b2, i1);
            i2 = (int)Test.instanceCount;
        }
        Test.lArrFld[(i1 >>> 1) % N] >>>= i2;
        i2 += (int)Test.instanceCount;
        for (i13 = 9; i13 < 211; i13++) {
            d2 += Test.instanceCount;
        }
        i14 <<= (int)Test.instanceCount;
        i14 += (int)Test.instanceCount;
        long meth_res = Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i1 + i2 + (b2 ? 1 : 0) + i13 + i14 +
            Double.doubleToLongBits(d2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-28991, i15=-130, i16=-15672, i17=2192, i18=-232, i19=-56534, i20=-181, i21=-6;
        double d3=-98.88215;
        boolean b3=false;
        short s1=25827;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)6);

        Test.iArrFld[(i >>> 1) % N] *= (int)(Math.abs(iMeth(1.893F, Test.fFld)) - Test.instanceCount);
        i15 = 1;
        while (++i15 < 392) {
            i = (int)89.129737;
            i += (i15 | (long)Test.fFld);
            for (i16 = 64; i16 > 2; i16--) {
                i17 %= 47523;
                for (i18 = 1; i18 < 2; ++i18) {
                    i17 -= (int)d3;
                    Test.instanceCount += i17;
                    i19 *= i18;
                    i17 -= i;
                    d3 *= Test.instanceCount;
                    if (b3) continue;
                    i17 = i19;
                }
                i20 = 1;
                do {
                    Test.fArrFld[i20 + 1] = i19;
                    i19 += i20;
                    i += i20;
                    byArr[i20 - 1] = byFld;
                    i = byFld;
                    i17 += (int)5470078L;
                } while (++i20 < 2);
                Test.fFld = 61871L;
                i21 = 1;
                do {
                    Test.iArrFld[i21 + 1] -= i18;
                    i17 /= (int)(s1 | 1);
                    i += 114;
                    Test.instanceCount += (i21 * i21);
                    d3 -= -149;
                } while (++i21 < 2);
                i *= i;
            }
            s1 = (short)Test.fFld;
        }

        FuzzerUtils.out.println("i i15 i16 = " + i + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("d3 b3 i20 = " + Double.doubleToLongBits(d3) + "," + (b3 ? 1 : 0) + "," + i20);
        FuzzerUtils.out.println("i21 s1 byArr = " + i21 + "," + s1 + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
