// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=76L;
    public static float fFld=-30.444F;
    public static volatile int iFld=-212;
    public static volatile boolean bFld=false;
    public static short sFld=26646;
    public int iArrFld[]=new int[N];
    public short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -520879966243246947L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=-14, i4=19128, i5=175, i6=18750, i7=0, i8=0, i9=1068, iArr[][]=new int[N][N];
        double d=-66.59690, dArr[]=new double[N];
        short s=18184;

        FuzzerUtils.init(dArr, 16.106892);
        FuzzerUtils.init(iArr, -51270);

        i3 += i3;
        i3 *= i3;
        d = Test.instanceCount;
        dArr[(i3 >>> 1) % N] *= Test.instanceCount;
        iArr[(i3 >>> 1) % N][(i3 >>> 1) % N] -= i3;
        Test.fFld -= 147;
        for (i4 = 253; i4 > 3; --i4) {
            Test.fFld += i4;
            i6 = 1;
            do {
                i5 = i5;
                i5 -= Test.iFld;
                for (i7 = 1; i7 < 3; ++i7) {
                    s = (short)i9;
                    Test.iFld ^= Test.iFld;
                    i9 += (int)Test.fFld;
                }
            } while ((i6 += 2) < 7);
        }
        vMeth2_check_sum += i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + s + i9 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        boolean b=false;
        double d1=-105.118713;
        int i11=-66, i12=149, iArr1[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 22827);
        FuzzerUtils.init(lArr, 209L);

        vMeth2();
        for (int i10 : iArr1) {
            i10 |= 0;
            i10 = i10;
            Test.instanceCount *= Test.iFld;
            b = true;
            i10 &= Test.iFld;
            lArr = lArr;
            Test.iFld *= (int)2.16820;
            Test.instanceCount += (long)d1;
        }
        iArr1[(Test.iFld >>> 1) % N] -= (int)Test.fFld;
        Test.iFld -= (int)Test.fFld;
        for (i11 = 16; i11 < 398; i11++) {
            short s1=-16267;
            lArr[i11 + 1] = i12;
            s1 >>>= (short)i12;
        }
        vMeth1_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d1) + i11 + i12 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i, int i1) {

        int i2=196, i13=55104, i14=11, i15=-14, i16=-2, i17=199;
        float f=-1.904F;

        i2 = 1;
        while (++i2 < 294) {
            f += (i2 * i2);
            f += i2;
            vMeth1();
            Test.instanceCount >>= Test.instanceCount;
        }
        for (i13 = 16; i13 < 317; i13++) {
            for (i15 = 1; i15 < 5; i15++) {
                i17 = 1;
                while (++i17 < 2) {
                    if (Test.bFld) {
                        i1 *= Test.iFld;
                        i16 = i16;
                    } else {
                        i14 -= i1;
                        if (true) {
                            i16 += (int)3580108816839866248L;
                            i16 += (i17 * Test.iFld);
                        } else {
                            i16 += i17;
                        }
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        int i18=3, i19=13, i20=9, i21=46155, i22=6377, i23=45749, i24=18677;
        double d2=102.60359;

        vMeth(Test.iFld, 42653);
        iArrFld[(Test.iFld >>> 1) % N] = (int)Test.instanceCount;
        i18 = 1;
        while ((i18 += 3) < 381) {
            i19 = 243;
            Test.instanceCount = Test.instanceCount;
            switch ((i18 % 6) + 118) {
            case 118:
                Test.iFld += i18;
                break;
            case 119:
                i19 = Test.iFld;
                break;
            case 120:
                Test.iFld = (int)Test.instanceCount;
                break;
            case 121:
                for (i20 = 2; 197 > i20; ++i20) {
                    d2 -= Test.fFld;
                    for (i22 = 2; i22 > 1; i22 -= 3) {
                        sArrFld[i20 + 1] += (short)Test.instanceCount;
                        Test.instanceCount <<= i19;
                        i23 *= (int)Test.instanceCount;
                        Test.fFld += i21;
                        switch ((i20 % 2) + 112) {
                        case 112:
                        case 113:
                            i19 += (int)d2;
                        default:
                            i21 += i20;
                            iArrFld[i18] %= (int)(i19 | 1);
                            i23 = i22;
                            Test.fFld += (i22 * i22);
                        }
                        i19 = Test.iFld;
                        Test.iFld -= Test.iFld;
                    }
                    Test.sFld += (short)(((i20 * Test.fFld) + Test.instanceCount) - Test.fFld);
                    d2 = 2;
                    i24 = 2;
                    do {
                        if (Test.bFld) continue;
                        Test.iFld ^= (int)Test.instanceCount;
                        Test.instanceCount = Test.sFld;
                    } while (--i24 > 0);
                }
                break;
            case 122:
                i19 = -17557;
            case 123:
                i19 += (i18 * i18);
            default:
                Test.lArrFld[i18 - 1] = -13L;
            }
        }

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 d2 i22 = " + i21 + "," + Double.doubleToLongBits(d2) + "," + i22);
        FuzzerUtils.out.println("i23 i24 = " + i23 + "," + i24);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.bFld Test.sFld iArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.sFld + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("sArrFld Test.lArrFld = " + FuzzerUtils.checkSum(sArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
