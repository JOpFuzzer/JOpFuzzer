// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public static volatile byte byFld=-65;
    public static volatile short sFld=7151;
    public static volatile long lFld=61314L;
    public static float fFld=-28.555F;
    public static int iFld=136;
    public int iFld1=56905;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7) {

        int i8=-125, i9=1, i10=-93, iArr[][]=new int[N][N];
        short s=13279;
        double d=-46.111815;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(lArr, 201L);

        iArr[(i7 >>> 1) % N][(i6 >>> 1) % N] = i7;
        lArr[(i7 >>> 1) % N] <<= Test.instanceCount;
        for (i8 = 289; 4 < i8; --i8) {
            switch ((1 >>> 1) % 6) {
            case 0:
                lArr = lArr;
            case 1:
                i9 <<= i8;
                break;
            case 2:
                i9 = (int)Test.instanceCount;
                i9 += (int)12L;
                i6 += (((i8 * s) + i8) - i8);
                break;
            case 3:
                i6 += i8;
                i10 = 1;
                while (++i10 < 6) {
                    Test.instanceCount <<= i7;
                }
                i9 *= i6;
                d = Test.instanceCount;
            case 4:
                i9 = (int)Test.instanceCount;
                break;
            case 5:
                Test.instanceCount += (i8 ^ i7);
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + s + i10 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i4, float f) {

        long l=19000L, l1=10L;
        int i5=-11, i11=141, i12=73, i13=-125, i14=-9906;

        for (l = 307; l > 10; l -= 3) {
            vMeth1(i5, 152);
            Test.instanceCount = i4;
            Test.instanceCount = i5;
            i4 = 3;
            f = -9;
            for (i11 = (int)(l); 16 > i11; ++i11) {
                i12 = (int)Test.instanceCount;
                i12 += -4148;
                switch (((i11 % 1) * 5) + 46) {
                case 47:
                    for (l1 = 1; l1 < 1; ++l1) {
                        f -= f;
                        i14 -= -161;
                    }
                default:
                    i5 = i5;
                    i5 += (int)f;
                }
            }
        }
        vMeth_check_sum += i4 + Float.floatToIntBits(f) + l + i5 + i11 + i12 + l1 + i13 + i14;
    }

    public static int iMeth() {

        int i15=-242, i16=93, i17=47, i18=-10, i19=97, iArr1[]=new int[N];
        long l2=-11L, lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -137);
        FuzzerUtils.init(lArr1, -4029163139L);

        vMeth(i15, 48.123F);
        for (i16 = 3; i16 < 159; ++i16) {
            for (i18 = 1; i18 < 10; ++i18) {
                i15 <<= Test.sFld;
                Test.instanceCount |= i15;
                Test.instanceCount += i18;
                i19 = i18;
                i17 += (((i18 * Test.instanceCount) + i15) - Test.instanceCount);
                l2 = 1;
                while (++l2 < 2) {
                    iArr1[i16 - 1] -= i16;
                    Test.lFld -= -32272;
                    i17 += (int)-59.80158;
                    Test.lFld += (((l2 * Test.fFld) + i19) - i18);
                    lArr1[(int)(l2 - 1)] = (long)-57.96344;
                    iArr1[(int)(l2 - 1)] = Test.byFld;
                }
            }
        }
        long meth_res = i15 + i16 + i17 + i18 + i19 + l2 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=243, i1=-196, i2=27357, i3=152, i20=-10, i21=2, i22=1, iArr2[]=new int[N];
        boolean b=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 6902825767080283413L);
        FuzzerUtils.init(iArr2, 6);

        for (i = 376; i > 11; i -= 3) {
            for (i2 = 2; i2 < 207; i2++) {
                Test.byFld *= (byte)Test.instanceCount;
                i1 = iMeth();
                Test.byFld += (byte)i2;
                for (i20 = 1; i20 < 2; i20++) {
                    double d1=0.68403;
                    switch ((i2 % 8) + 35) {
                    case 35:
                        lArr2[i20] = i1;
                        i3 = i1;
                        Test.lFld += (i20 | (long)Test.fFld);
                        break;
                    case 36:
                        iArr2[i20] += i2;
                        i3 -= i3;
                    case 37:
                        i21 = i1;
                        Test.byFld = (byte)Test.lFld;
                        Test.instanceCount += (long)Test.fFld;
                        break;
                    case 38:
                        if (b) break;
                        break;
                    case 39:
                        if (b) break;
                        d1 = i1;
                        break;
                    case 40:
                        i21 += (int)d1;
                        break;
                    case 41:
                        i1 -= Test.iFld;
                        Test.sFld >>= (short)i22;
                        switch (((iFld1 >>> 1) % 10) + 2) {
                        case 2:
                            i22 -= (int)Test.fFld;
                            break;
                        case 3:
                            Test.byFld += (byte)(i20 * i20);
                            Test.iFld += (i20 + Test.iFld);
                            break;
                        case 4:
                            i22 *= Test.byFld;
                            i1 += i21;
                            Test.lFld *= i3;
                            break;
                        case 5:
                            iFld1 <<= Test.iFld;
                            i22 += (((i20 * Test.instanceCount) + Test.lFld) - i);
                            break;
                        case 6:
                            i22 -= i21;
                            break;
                        case 7:
                            i21 *= i22;
                            break;
                        case 8:
                            Test.iFld += i2;
                            break;
                        case 9:
                            d1 *= i;
                        case 10:
                            lArr2[i] = i20;
                        case 11:
                            Test.byFld *= (byte)d1;
                            break;
                        default:
                            b = false;
                        }
                        break;
                    case 42:
                        Test.sFld += (short)i20;
                        break;
                    default:
                        i3 += i20;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i20 i21 = " + i3 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("b i22 lArr2 = " + (b ? 1 : 0) + "," + i22 + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.sFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.lFld Test.fFld Test.iFld = " + Test.lFld + "," + Float.floatToIntBits(Test.fFld)
            + "," + Test.iFld);
        FuzzerUtils.out.println("iFld1 = " + iFld1);

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
