// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5088750971784314908L;
    public static boolean bFld=false;
    public static volatile double dFld=-116.104128;
    public static byte byFld=2;
    public static float fFld=91.707F;
    public int iFld=17671;
    public static boolean bArrFld[]=new boolean[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=-76, i3=-50940, i4=39, i5=7281;
        float f1=46.318F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -50.613F);

        i2 = i2;
        f1 = i2;
        for (i3 = 13; 240 > i3; ++i3) {
            Test.instanceCount += i3;
            if (i2 != 0) {
            }
            if (Test.bFld) continue;
            i4 >>= i4;
            f1 -= i3;
            fArr[i3 + 1] -= (float)Test.dFld;
            i4 *= i3;
        }
        i4 = (int)Test.dFld;
        i5 = 1;
        while (++i5 < 302) {
            Test.instanceCount = Test.byFld;
            Test.dFld = Test.instanceCount;
        }
        i4 |= i3;
        long meth_res = i2 + Float.floatToIntBits(f1) + i3 + i4 + i5 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i=-5, i1=-6, i6=12391, i7=53759, iArr[]=new int[N];
        float f=-45.544F;
        byte by=121;
        double d=-67.100002;
        long l1=-3L;

        FuzzerUtils.init(iArr, -27965);

        for (i = 213; i > 5; i--) {
            f -= f;
            switch ((((i >> i) >>> 1) % 3) + 102) {
            case 102:
                by += (byte)(i1 = (int)(d * iMeth()));
                for (i6 = 1; i6 < 8; ++i6) {
                    i1 = i7;
                    i1 += (i6 + i1);
                    l1 = 1;
                    do {
                        iArr[(int)(l1 + 1)] = 4652;
                    } while (++l1 < 2);
                    iArr = FuzzerUtils.int1array(N, (int)-19);
                    i7 += -248;
                }
                iArr[i + 1] *= (int)l1;
                Test.bArrFld[i - 1] = Test.bFld;
                break;
            case 103:
                i1 += (-245 + (i * i));
            case 104:
                i7 -= i7;
                break;
            default:
                i1 = -42807;
            }
        }
        vMeth1_check_sum += i + i1 + Float.floatToIntBits(f) + by + Double.doubleToLongBits(d) + i6 + i7 + l1 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l) {

        int i9=-41, i10=-252, i11=0, i12=-21, iArr1[]=new int[N];
        long l2=1881935760L;
        float f2=-1.300F;

        FuzzerUtils.init(iArr1, -23749);

        vMeth1();
        i9 = 1;
        while (++i9 < 178) {
            for (l2 = 1; 9 > l2; ++l2) {
                Test.instanceCount = Test.instanceCount;
                if (Test.bFld) continue;
                for (i11 = 2; i11 > 1; i11 -= 3) {
                    i12 += i11;
                    l -= l;
                    f2 -= -158;
                    Test.instanceCount = (long)84.542F;
                }
                i12 += (int)(((l2 * i11) + i10) - i11);
            }
            i10 -= i9;
            Test.instanceCount += (((i9 * l) + i9) - i11);
        }
        Test.bFld = Test.bFld;
        iArr1[(i11 >>> 1) % N] >>= i10;
        vMeth_check_sum += l + i9 + l2 + i10 + i11 + i12 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i13=-22, i14=1, i15=3, i16=217;
        short s=-6840;
        double d1=-2.31504, d2=12.21218;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2294886938L);

        vMeth(Test.instanceCount);
        Test.instanceCount /= -57996;
        Test.dFld = Test.fFld;
        iFld <<= iFld;
        iFld = iFld;
        Test.instanceCount -= iFld;
        iArrFld[(iFld >>> 1) % N] = 3;
        Test.instanceCount = -47454L;
        switch (((iFld >>> 1) % 2) + 17) {
        case 17:
            for (i13 = 386; i13 > 17; i13--) {
                s = (short)i14;
                iFld = i14;
                switch ((((i13 >>> 1) % 3) * 5) + 118) {
                case 126:
                    iArrFld[i13 - 1] -= i14;
                    Test.instanceCount = i14;
                    iArrFld[i13 - 1] &= i13;
                    for (d1 = 2; d1 < 68; d1++) {
                        iArrFld[(int)(d1 + 1)] = i14;
                        Test.dFld *= i14;
                        for (d2 = 1; d2 < 2; d2++) {
                            Test.instanceCount >>= Test.byFld;
                            i15 = i15;
                            Test.instanceCount = i16;
                            if (Test.bFld) {
                                switch ((i13 % 6) + 13) {
                                case 13:
                                    lArr[(int)(d1 - 1)] = Test.instanceCount;
                                    i16 /= (int)(i15 | 1);
                                    if (Test.bFld) break;
                                    i16 -= i15;
                                case 14:
                                    Test.fFld *= -212L;
                                    break;
                                case 15:
                                    lArr[(int)(d1)] >>= -12;
                                    break;
                                case 16:
                                    iFld += (int)(((d2 * i15) + i15) - Test.instanceCount);
                                    break;
                                case 17:
                                case 18:
                                    Test.instanceCount += (long)(((d2 * Test.fFld) + Test.instanceCount) - iFld);
                                default:
                                    i16 += i13;
                                }
                            } else if (true) {
                                iArrFld[i13 - 1] = iFld;
                            } else if (Test.bFld) {
                                Test.dFld = Test.instanceCount;
                            }
                        }
                    }
                case 119:
                    iArrFld[i13] |= i14;
                    break;
                case 127:
                    Test.instanceCount ^= iFld;
                    break;
                default:
                    Test.bArrFld[i13 + 1] = Test.bFld;
                }
            }
            break;
        case 18:
            Test.instanceCount = iFld;
            break;
        }

        FuzzerUtils.out.println("i13 i14 s = " + i13 + "," + i14 + "," + s);
        FuzzerUtils.out.println("d1 i15 d2 = " + Double.doubleToLongBits(d1) + "," + i15 + "," +
            Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i16 lArr = " + i16 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.dFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld Test.fFld iFld = " + Test.byFld + "," + Float.floatToIntBits(Test.fFld) +
            "," + iFld);
        FuzzerUtils.out.println("Test.bArrFld iArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
