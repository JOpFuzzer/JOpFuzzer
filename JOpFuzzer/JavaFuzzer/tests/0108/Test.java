// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2179675047L;
    public static volatile float fFld=-2.971F;
    public static boolean bFld=true;
    public static double dFld=81.29284;
    public int iFld=-9;
    public static long lArrFld[]=new long[N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -12L);
        FuzzerUtils.init(Test.byArrFld, (byte)-58);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=-93, i4=-5, i5=65, i6=58983, i7=-34, i8=156, i9=-1218, i10=44, i11=10, i12=91;
        boolean b1=true;
        short s=-22126;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 0.1821);
        FuzzerUtils.init(lArr, 23838L);

        for (i3 = 15; i3 < 308; i3++) {
            for (i5 = 6; i5 > i3; --i5) {
                i6 += (-12 + (i5 * i5));
                if (b1) continue;
                for (i7 = 1; i7 < 1; i7++) {
                    Test.fFld = i5;
                    dArr[i7] *= i8;
                    i4 = i8;
                }
            }
            i9 = 1;
            while ((i9 += 2) < 6) {
                Test.fFld -= i9;
                if (b1) break;
                for (i10 = 1; i10 < 2; i10++) {
                    i12 >>= i3;
                    s *= (short)i7;
                    lArr[i10 - 1] *= Test.instanceCount;
                }
            }
        }
        vMeth2_check_sum += i3 + i4 + i5 + i6 + (b1 ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + i12 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(float f, int i1) {

        double d=2.109967;
        int i2=64, i13=3, i14=-16411, i15=-27, iArr1[]=new int[N];
        byte by=14;
        short s1=13104;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr1, -3);
        FuzzerUtils.init(fArr1, 2.41F);

        iArr1[(i1 >>> 1) % N] += (int)((~i1) + (d -= Math.abs(i1)));
        i2 = 359;
        while (--i2 > 0) {
            switch ((i2 % 3) + 30) {
            case 30:
                vMeth2();
                fArr1[i2 + 1] -= i1;
                for (i13 = 1; i13 < 5; ++i13) {
                    Test.bFld = Test.bFld;
                    if (Test.bFld) continue;
                    i14 = (int)175L;
                    switch ((i2 % 4) + 21) {
                    case 21:
                        i15 = 1;
                        while (++i15 < 2) {
                            by = (byte)Test.instanceCount;
                            i14 <<= (int)Test.instanceCount;
                            Test.fFld += (i15 * i15);
                            s1 = (short)Test.instanceCount;
                        }
                    case 22:
                        i14 += i2;
                        break;
                    case 23:
                        s1 += (short)i14;
                        break;
                    case 24:
                        i14 = i2;
                        break;
                    default:
                        iArr1[i13 - 1] |= by;
                    }
                }
                break;
            case 31:
                Test.fFld -= Test.instanceCount;
                break;
            case 32:
                Test.instanceCount += i2;
                break;
            default:
                Test.instanceCount = i14;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i1 + Double.doubleToLongBits(d) + i2 + i13 + i14 + i15 + by + s1
            + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void vMeth(long l) {

        boolean b=true, bArr[]=new boolean[N];
        int i16=-32951, i17=-32, i18=55067, i19=-56007, iArr[]=new int[N];
        short s2=-4566;
        byte by1=-47;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -42391);
        FuzzerUtils.init(fArr, -125.70F);
        FuzzerUtils.init(bArr, false);

        for (int i : iArr) {
            fArr[(i >>> 1) % N] = -210L;
            if (b) continue;
            try {
                i = (i / -1741662589);
                i = (iArr[(-14 >>> 1) % N] / -165);
                i = (i % i);
            } catch (ArithmeticException a_e) {}
            vMeth1(Test.fFld, i);
        }
        for (i16 = 20; i16 < 346; i16++) {
            s2 += (short)i17;
        }
        Test.lArrFld[(i16 >>> 1) % N] = (long)Test.dFld;
        bArr[(i16 >>> 1) % N] = b;
        for (i18 = 19; 353 > i18; i18 += 2) {
            s2 -= (short)Test.instanceCount;
            i17 += (((i18 * i17) + i19) - i16);
            Test.fFld += (((i18 * by1) + Test.fFld) - i18);
            Test.byArrFld[i18 - 1] >>>= (byte)i17;
            b = true;
        }
        vMeth_check_sum += l + (b ? 1 : 0) + i16 + i17 + s2 + i18 + i19 + by1 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=-60, i21=2, i22=9, i23=14, i24=-63, i25=-188, i26=-6, i27=-120, i28=5, i29=-10897, i30=8, i31=3,
            iArr2[]=new int[N];
        long l1=-118406553L;
        double d1=52.120193;

        FuzzerUtils.init(iArr2, 3);

        vMeth(Test.instanceCount);
        iArr2[(iFld >>> 1) % N] /= (int)(iFld | 1);
        for (i20 = 9; i20 < 317; ++i20) {
            for (l1 = 82; l1 > 3; l1--) {
                i22 -= -138;
                iFld = i20;
                Test.lArrFld[(int)(l1)] |= i20;
            }
            Test.instanceCount = (long)Test.dFld;
            iFld = (int)Test.dFld;
        }
        iArr2[(iFld >>> 1) % N] += i20;
        try {
            i23 = 1;
            do {
                for (i24 = 1; i24 < 91; ++i24) {
                    Test.instanceCount = i20;
                    Test.instanceCount += (-11 + (i24 * i24));
                    i22 -= (int)d1;
                    for (i26 = 1; i26 < 2; i26++) {
                        iFld -= (int)l1;
                    }
                    Test.instanceCount = l1;
                }
                for (i28 = 5; 91 > i28; i28++) {
                    i22 += (int)Test.fFld;
                    iArr2 = iArr2;
                    i22 = (int)-13L;
                    Test.lArrFld[i23 - 1] = 0;
                    iFld += i28;
                }
                for (i30 = 1; i30 < 91; i30++) {
                    i22 <<= -64000;
                    i25 = (int)l1;
                    Test.fFld += (i30 * i30);
                    iArr2[i23 + 1] %= (int)-7L;
                }
            } while (++i23 < 277);
        }
        catch (ArrayIndexOutOfBoundsException exc2) {
            i27 >>= i27;
        }
        catch (UserDefinedExceptionTest exc3) {
            i25 = 3;
        }

        FuzzerUtils.out.println("i20 i21 l1 = " + i20 + "," + i21 + "," + l1);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 d1 i26 = " + i25 + "," + Double.doubleToLongBits(d1) + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 iArr2 = " + i30 + "," + i31 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld iFld Test.lArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + iFld +
            "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.byArrFld = " + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
