// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-7900095719327118940L;
    public static float fFld=1.328F;
    public static boolean bFld=false;
    public long lFld=-1990911447L;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 1);
        FuzzerUtils.init(Test.lArrFld, -599374596L);
        FuzzerUtils.init(Test.fArrFld, 36.301F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i3, int i4, double d2) {

        int i5=14, i6=12, i7=237, i8=-43600, i9=50893, i10=-691, iArr[]=new int[N];
        byte by1=-100;

        FuzzerUtils.init(iArr, -12);

        Test.instanceCount = i4;
        for (i5 = 8; i5 < 379; ++i5) {
            for (i7 = 1; i7 < 5; ++i7) {
                try {
                    i3 = (-152 / i3);
                    i6 = (-36816 % i6);
                    i8 = (i3 % i3);
                } catch (ArithmeticException a_e) {}
                i8 += (i7 * i7);
                i6 += (i7 * Test.fFld);
                for (i9 = 2; i9 > i7; i9 -= 3) {
                    i3 >>= (int)Test.instanceCount;
                    iArr[i7 - 1] = i5;
                    i8 -= i4;
                    Test.instanceCount += (((i9 * Test.fFld) + Test.instanceCount) - i6);
                    Test.instanceCount -= -198L;
                    by1 += (byte)(((i9 * Test.instanceCount) + Test.fFld) - i9);
                    Test.instanceCount += i4;
                    i6 += i7;
                }
            }
        }
        long meth_res = i3 + i4 + Double.doubleToLongBits(d2) + i5 + i6 + i7 + i8 + i9 + i10 + by1 +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d1) {

        int i2=-170, i11=-13283, i12=-17018, i13=-11, i14=-23, i15=-38, i16=57404, iArr1[]=new int[N];
        boolean b=true;
        byte by2=-20;

        FuzzerUtils.init(iArr1, 33080);

        i2 = Integer.reverseBytes((int)((Test.fFld - Test.instanceCount) - (i2 % -13)));
        i2 = iMeth1(i2, i2, d1);
        if (b) {
            iArr1[(i2 >>> 1) % N] = i2;
        }
        iArr1[(-52348 >>> 1) % N] = i2;
        for (i11 = 3; 165 > i11; ++i11) {
            i2 = (int)Test.instanceCount;
            for (i13 = 10; 1 < i13; i13--) {
                for (i15 = 1; 2 > i15; ++i15) {
                    Test.instanceCount += (i15 | i11);
                    Test.instanceCount *= by2;
                }
                Test.instanceCount += (-193L + (i13 * i13));
                d1 += Test.instanceCount;
                iArr1[i11] -= 211;
            }
            iArr1 = iArr1;
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i2 + (b ? 1 : 0) + i11 + i12 + i13 + i14 + i15 + i16 + by2 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i1, byte by) {

        double d3=69.6468;
        float f=51.411F, f1=107.945F;
        int i17=202, i18=14, i19=-205, i20=-8, i21=-54435, iArr2[]=new int[N];
        short s=22828;

        FuzzerUtils.init(iArr2, 0);

        vMeth(d3);
        for (f = 1; f < 373; f += 3) {
            if (i1 != 0) {
            }
            i17 += (int)(f + i17);
            i18 = 1;
            while (++i18 < 13) {
                switch ((int)((f % 10) + 37)) {
                case 37:
                    for (i19 = i18; 1 > i19; ++i19) {
                        iArr2[(int)(f)] += i19;
                    }
                    if (i18 != 0) {
                    }
                case 38:
                    Test.iArrFld[(int)(f)] -= i19;
                    break;
                case 39:
                    s += (short)(((i18 * i19) + i17) - i17);
                    for (f1 = 1; f1 > 1; --f1) {
                        i20 += (int)f1;
                        i20 += (int)(((f1 * i17) + i21) - Test.instanceCount);
                        if (Test.bFld) break;
                    }
                    break;
                case 40:
                    Test.fFld = i19;
                case 41:
                    i1 >>= i18;
                    break;
                case 42:
                    i17 *= (int)d3;
                    break;
                case 43:
                    i17 -= (int)Test.instanceCount;
                    break;
                case 44:
                    Test.lArrFld[i18 + 1] += i18;
                case 45:
                    Test.lArrFld[i18] ^= i18;
                    break;
                case 46:
                    Test.fArrFld[i18 + 1] *= (float)d3;
                    break;
                default:
                    by = (byte)i18;
                }
            }
        }
        long meth_res = i1 + by + Double.doubleToLongBits(d3) + Float.floatToIntBits(f) + i17 + i18 + i19 + i20 + s +
            Float.floatToIntBits(f1) + i21 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=203, i22=58, i23=-57566, i24=34910, i25=-80, i26=41103, i27=-247, i28=29791, i29=24, i30=5, i31=1767;
        double d=-1.124622, d4=96.50119;
        byte by3=-41;
        short s1=-11903;

        i = (i & i);
        switch (((-200 >>> 1) % 9) + 49) {
        case 49:
            i -= (--i);
            d *= (iMeth(i, by3) + i);
            break;
        case 50:
            for (i22 = 7; i22 < 342; i22++) {
                i23 = 14830;
                Test.fFld *= i22;
                for (i24 = 75; i22 < i24; --i24) {
                    Test.fFld += 1592;
                    Test.fFld += (i24 * Test.fFld);
                }
                Test.instanceCount += i23;
                i25 -= i22;
                i23 += i22;
                Test.iArrFld[i22 - 1] *= (int)Test.instanceCount;
                i += i22;
                Test.fFld += (i22 * i25);
            }
            d *= i23;
            for (i26 = 9; i26 < 194; ++i26) {
                by3 -= (byte)i23;
            }
            Test.instanceCount %= (long)103.288F;
        case 51:
            for (d4 = 9; d4 < 241; ++d4) {
                i27 = (int)lFld;
                for (i29 = 5; i29 < 108; ++i29) {
                    Test.lArrFld[(int)(d4 + 1)] -= i22;
                    Test.lArrFld[i29] = i30;
                    s1 = (short)i;
                    i25 <<= i28;
                    i31 = 1;
                    do {
                        i25 = i;
                    } while (++i31 < 2);
                    try {
                        i23 = (Test.iArrFld[(int)(d4 + 1)] % 31141);
                        i23 = (i / 178);
                        i27 = (i23 / i31);
                    } catch (ArithmeticException a_e) {}
                }
            }
        case 52:
            i28 += i23;
        case 53:
            i *= by3;
        case 54:
            d += i29;
        case 55:
            i28 = i25;
            break;
        case 56:
            i30 = (int)lFld;
            break;
        case 57:
            i30 *= i29;
        }

        FuzzerUtils.out.println("i d by3 = " + i + "," + Double.doubleToLongBits(d) + "," + by3);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("d4 i28 i29 = " + Double.doubleToLongBits(d4) + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 s1 i31 = " + i30 + "," + s1 + "," + i31);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("lFld Test.iArrFld Test.lArrFld = " + lFld + "," + FuzzerUtils.checkSum(Test.iArrFld) +
            "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
