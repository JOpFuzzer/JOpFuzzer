// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=6879L;
    public static float fFld=-2.906F;
    public static short sFld=27945;
    public static long lFld=-14478L;
    public volatile double dFld=0.18489;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 70.200F);
        FuzzerUtils.init(Test.iArrFld, -35817);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, long l) {

        byte by=76;
        double d=-1.74074;
        int i5=-44437, i6=9914, i7=-14715, i8=7;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2044715094L);

        lArr[(-1 >>> 1) % N] -= (long)f1;
        l <<= by;
        for (d = 14; 388 > d; ++d) {
            i6 = 1;
            while (++i6 < 5) {
                Test.instanceCount = (long)18.237F;
                Test.fArrFld[i6] *= i5;
                by = (byte)i6;
                Test.instanceCount = Test.sFld;
                i5 += (int)-63.61166;
                b = b;
                f1 += i6;
                for (i7 = 1; i7 < 1; ++i7) {
                    i5 = i8;
                    by = (byte)Test.instanceCount;
                    l = (long)-1.890F;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + l + by + Double.doubleToLongBits(d) + i5 + i6 + (b ? 1 : 0) + i7
            + i8 + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i2) {

        int i3=-251, i4=-206, i9=-50960, i10=6, i11=2, i12=35664;

        for (i3 = 3; i3 < 310; ++i3) {
            Test.instanceCount |= (long)(((Test.fFld * i2) * (i3 * i3)) + (Test.sFld--));
            vMeth1(Test.fFld, Test.lFld);
            i2 += (int)(7707218677696838689L + (i3 * i3));
            Test.iArrFld[i3] = i4;
            i4 >>>= i2;
        }
        for (i9 = 157; i9 > 8; --i9) {
            i4 &= (int)13L;
            Test.iArrFld[i9 + 1] /= -7;
            Test.instanceCount += (i9 * i9);
            for (i11 = i9; i11 < 11; i11++) {
                Test.fFld -= i9;
                i10 = (int)Test.instanceCount;
                i12 += (12 + (i11 * i11));
                i2 &= i2;
            }
        }
        long meth_res = i2 + i3 + i4 + i9 + i10 + i11 + i12;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, float f) {

        int i13=0, i14=235, i15=6, i16=0, i17=178, i18=206;
        double d1=40.32621;

        Test.instanceCount += ((i1 + iMeth(i1)) - i1);
        for (i13 = 11; i13 < 275; i13++) {
            i14 += i13;
            Test.iArrFld[i13] = (int)Test.instanceCount;
            i15 = 6;
            do {
                Test.iArrFld[i13 - 1] <<= i14;
                i1 = i13;
                Test.instanceCount -= (long)Test.fFld;
                for (i16 = 1; 3 > i16; ++i16) {
                    Test.instanceCount = i1;
                    d1 = i15;
                }
                i1 >>= (int)-10L;
                i18 = 1;
                do {
                    Test.lFld *= i17;
                    i14 = (int)Test.lFld;
                } while (++i18 < 3);
            } while ((i15 -= 3) > 0);
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d1) +
            i18;
    }

    public void mainTest(String[] strArr1) {

        int i=227, i19=103, i20=24908, i21=64112, i22=-35775, iArr[]=new int[N];
        boolean b1=true;
        byte by1=100;
        double d2=-7.57854, d3=-1.33522;

        FuzzerUtils.init(iArr, 9);

        i = 1;
        do {
            switch (((i % 8) * 5) + 18) {
            case 23:
                vMeth(1, Test.fFld);
                break;
            case 49:
                for (i19 = 2; 202 > i19; ++i19) {
                    Test.iArrFld[i + 1] = 146;
                    if (b1) break;
                    switch (((i20 >>> 1) % 2) + 37) {
                    case 37:
                        i20 |= (int)Test.lFld;
                        by1 += (byte)(i19 | i);
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 38:
                        dFld += Test.lFld;
                        Test.lFld >>= i19;
                    default:
                        Test.sFld += (short)-10;
                        Test.sFld += (short)i;
                    }
                    by1 += (byte)i;
                    for (i21 = 1; i21 < 2; i21++) {
                        i20 += i20;
                        Test.fFld = i19;
                        i20 += (i21 * Test.instanceCount);
                        i20 += (i21 * i21);
                        i20 += -9827;
                        Test.fFld = 0;
                        switch (((i21 >>> 1) % 2) + 62) {
                        case 62:
                            i20 *= -17268;
                            d2 = d3;
                            i22 >>>= i22;
                            i22 -= 152;
                            break;
                        case 63:
                            i22 += (i21 | i19);
                            iArr[i - 1] *= i;
                            break;
                        default:
                            i22 -= i19;
                        }
                    }
                }
                break;
            case 58:
                i20 = (int)Test.lFld;
                break;
            case 47:
                by1 >>>= (byte)88;
            case 26:
                by1 = (byte)Test.sFld;
                break;
            case 38:
                i20 = i20;
                break;
            case 21:
                Test.iArrFld[i] = by1;
                break;
            case 48:
                i22 <<= 141;
                break;
            }
        } while (++i < 124);

        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("b1 by1 i21 = " + (b1 ? 1 : 0) + "," + by1 + "," + i21);
        FuzzerUtils.out.println("i22 d2 d3 = " + i22 + "," + Double.doubleToLongBits(d2) + "," +
            Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.lFld dFld Test.fArrFld = " + Test.lFld + "," + Double.doubleToLongBits(dFld) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
