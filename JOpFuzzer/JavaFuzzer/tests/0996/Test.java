// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-37317L;
    public static short sFld=-13178;
    public static float fFld=-2.265F;
    public static boolean bFld=false;
    public static volatile int iFld=-56743;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i6) {

        int i7=-23422, i8=44224, i9=6262, i10=-48, i11=-1;
        double d1=-88.47690;
        byte by3=0;

        for (i7 = 355; i7 > 7; i7 -= 3) {
            Test.instanceCount += i7;
            try {
                i8 = (-36548 / i8);
                Test.iArrFld[i7][i7 - 1] = (-1945756102 / i7);
                i8 = (37020 % i8);
            } catch (ArithmeticException a_e) {}
            i6 += -42;
            if (Test.bFld) continue;
            Test.iArrFld[i7][i7 - 1] += i7;
            i8 *= i8;
            d1 += -30060;
            for (i9 = 1; i9 < 13; i9++) {
                i11 = 2;
                while (--i11 > 0) {
                    Test.bFld = true;
                    Test.instanceCount -= by3;
                    d1 += i9;
                    i6 *= i8;
                }
                i8 = (int)Test.instanceCount;
            }
        }
        long meth_res = i6 + i7 + i8 + Double.doubleToLongBits(d1) + i9 + i10 + i11 + by3;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(byte by2, int i3) {

        int i4=-12, i5=0, i12=-97, i13=-40646;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -110L);

        for (i4 = 5; 196 > i4; ++i4) {
            Test.instanceCount = (long)(fMeth(i4) - Test.instanceCount);
            for (i12 = 1; 8 > i12; i12++) {
                if (Test.bFld) {
                    i3 *= (int)-2.100124;
                    Test.instanceCount -= (long)Test.fFld;
                    Test.instanceCount = 6;
                } else {
                    i13 *= (int)-2.123F;
                    i3 |= i3;
                    i13 += (((i12 * Test.iFld) + Test.iFld) - Test.instanceCount);
                }
                Test.iFld >>>= i4;
                Test.iArrFld[i4 + 1][i4] -= (int)Test.fFld;
                i3 += (i12 * i12);
                lArr[i12 + 1][i12 - 1] |= i12;
                Test.instanceCount = i13;
            }
        }
        long meth_res = by2 + i3 + i4 + i5 + i12 + i13 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(byte by1) {

        double d=85.127366;
        int i1=-10, i2=12, i14=-10821, i15=-226, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 4876);

        for (d = 8; d < 385; ++d) {
            iArr[(int)(d)] -= (int)(++Test.instanceCount);
            i1 >>= (int)(Test.instanceCount++);
            i2 = 1;
            do {
                Test.instanceCount += (--Test.sFld);
                i1 *= (int)(((-Test.fFld) - iMeth(by1, i1)) + 11);
                Test.instanceCount *= Test.instanceCount;
                Test.iFld = i1;
            } while (++i2 < 4);
            for (i14 = 1; i14 < 4; i14 += 2) {
                Test.iFld += i14;
                Test.fFld += Test.instanceCount;
                Test.iFld -= (int)Test.instanceCount;
                Test.iArrFld[i14 + 1] = Test.iArrFld[(i14 >>> 1) % N];
                Test.iFld += (int)Test.instanceCount;
            }
            i1 -= (int)-5L;
        }
        vMeth_check_sum += by1 + Double.doubleToLongBits(d) + i1 + i2 + i14 + i15 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        byte by=70;
        int i=27479, i16=-94, i17=-46034, i18=-61523, i19=6976, i20=-4, i21=49614, i22=-125;
        double d2=-1.10154;
        float f=0.304F, f1=-9.982F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        by = (byte)(-(i - (i++)));
        i -= Test.sFld;
        vMeth(by);
        for (i16 = 9; i16 < 267; ++i16) {
            if (Test.bFld) {
                i += (int)d2;
                Test.iArrFld[i16 + 1][i16 + 1] *= i17;
                switch (((i16 % 4) * 5) + 112) {
                case 129:
                    Test.iArrFld[i16 - 1][i16 + 1] -= Test.sFld;
                    break;
                case 125:
                    d2 = Test.iFld;
                    Test.instanceCount = Test.instanceCount;
                    for (f = 5; 97 > f; f++) {
                        Test.iArrFld[(-10305 >>> 1) % N][(int)(f - 1)] = (int)Test.instanceCount;
                    }
                    i18 = by;
                case 124:
                    i19 = 1;
                    while (++i19 < 97) {
                        switch ((((-42086 >>> 1) % 5) * 5) + 105) {
                        case 123:
                            Test.fFld -= by;
                            for (i20 = i19; i20 < 1; i20++) {
                                Test.iArrFld[i19][i20 - 1] = i18;
                                i21 += (i20 * i20);
                            }
                            f1 += 217;
                            break;
                        case 109:
                            i18 = i19;
                            i22 = 1;
                            do {
                                i += (int)(-27694L + (i22 * i22));
                                i21 >>= i18;
                                bArr[i22 + 1] = Test.bFld;
                            } while ((i22 += 3) < 1);
                        case 119:
                            Test.instanceCount = (long)d2;
                            Test.sFld = (short)Test.instanceCount;
                            i += (i19 | i16);
                            i21 >>= i20;
                            break;
                        case 117:
                            by += (byte)i19;
                            break;
                        case 111:
                            d2 = Test.iFld;
                            break;
                        }
                    }
                    break;
                case 115:
                    i18 += i;
                default:
                    i17 *= Test.sFld;
                }
            }
        }

        FuzzerUtils.out.println("by i i16 = " + by + "," + i + "," + i16);
        FuzzerUtils.out.println("i17 d2 f = " + i17 + "," + Double.doubleToLongBits(d2) + "," +
            Float.floatToIntBits(f));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 f1 i22 = " + i21 + "," + Float.floatToIntBits(f1) + "," + i22);
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.iFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
