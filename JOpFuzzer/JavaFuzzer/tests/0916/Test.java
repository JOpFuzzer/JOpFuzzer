// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=8674304443333200979L;
    public static byte byFld=-31;
    public static double dFld=-1.2648;
    public static boolean bFld=false;
    public static float fFld=-111.764F;
    public short sFld=-12330;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 12);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i10=-33, i11=-47308, i12=158, i13=42252, i14=-6304, i15=-2;
        boolean b=true;
        short s1=-22490;
        float f1=-2.758F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.819F);

        for (i10 = 13; i10 < 285; ++i10) {
            for (i12 = i10; i12 < 6; i12++) {
                Test.iArrFld[i12 + 1] = i11;
                if (b) continue;
                if (b) continue;
                i11 *= (int)Test.instanceCount;
                fArr[i10] = -6335;
                i13 -= (int)-51.115827;
                i11 += i12;
                i13 *= (int)-33056L;
            }
            i13 = (int)Test.instanceCount;
            for (i14 = 1; 6 > i14; i14++) {
                Test.dFld = s1;
                i11 += (-10 + (i14 * i14));
                f1 -= -5;
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + (b ? 1 : 0) + i14 + i15 + s1 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i7, float f) {

        short s=27336;
        int i8=-33902, i9=12, i16=-12219, i17=-62097, i18=19;

        i7 ^= (int)(((0.82982 - (Test.instanceCount <<= s)) + (i7--)) * (i7--));
        for (i8 = 11; i8 < 334; ++i8) {
            i9 -= iMeth1();
            if (false) break;
            Test.instanceCount = i7;
            i16 = 5;
            while (--i16 > 0) {
                f = Test.instanceCount;
                for (i17 = 1; i17 > 1; --i17) {
                    Test.iArrFld[i8 + 1] *= i18;
                    i9 += (int)Test.instanceCount;
                    Test.dFld = i18;
                    Test.byFld += (byte)Test.dFld;
                    if (Test.bFld) continue;
                    Test.instanceCount += (i17 + i17);
                    Test.bFld = Test.bFld;
                }
            }
        }
        long meth_res = i7 + Float.floatToIntBits(f) + s + i8 + i9 + i16 + i17 + i18;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, long l1, long l2) {

        int i5=5, i6=28179, i20=25, i21=2, i22=-5, i23=-138;
        float f2=-1.897F;
        short s2=-12856;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i5 = 9; i5 < 393; ++i5) {
            iMeth(i4, f2);
            i6 >>= s2;
            i6 += (((i5 * l1) + i6) - Test.instanceCount);
            l2 -= i6;
            bArr = FuzzerUtils.boolean1array(N, (boolean)false);
            for (i20 = 1; i20 < 4; ++i20) {
                if (Test.bFld) {
                    l2 += i20;
                }
                s2 += (short)i5;
                i6 += i6;
                for (i22 = 1; i22 < 2; ++i22) {
                    f2 = i23;
                    if (true) continue;
                    i21 += (i22 * i22);
                }
            }
        }
        vMeth_check_sum += i4 + l1 + l2 + i5 + i6 + Float.floatToIntBits(f2) + s2 + i20 + i21 + i22 + i23 +
            FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=25, i1=-47, i2=-115, i3=227, i24=-230, i25=-238, i26=9;
        long l=119L, lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 53091L);

        for (i = 1; i < 143; i++) {
            i1 = (int)(i1 = (int)(Test.instanceCount - (++i2)));
            i1 |= (int)((Test.iArrFld[i - 1] -= (i1 - i)) - ((-(i2 + i1)) * (Test.instanceCount + Test.byFld)));
            try {
                i1 = (i1 % i1);
                i2 = (i2 / i1);
                i2 = (i / 143446106);
            } catch (ArithmeticException a_e) {}
            Test.iArrFld[i] = (int)(Test.instanceCount--);
            for (l = 5; 177 > l; l++) {
                vMeth(i3, l, -224L);
            }
            i2 = i;
            for (i24 = 5; i24 < 177; i24++) {
                i3 = i1;
                i26 = 1;
                while (++i26 < 2) {
                    Test.iArrFld[i24 + 1] += 11112;
                    Test.bArrFld[i - 1] = true;
                    switch ((i24 % 2) + 101) {
                    case 101:
                        Test.dFld += Test.dFld;
                        i2 += i3;
                        if (Test.bFld) break;
                        Test.byFld = (byte)0L;
                        break;
                    case 102:
                        i2 = (int)Test.fFld;
                        i2 = (int)l;
                        Test.fFld = sFld;
                        break;
                    }
                    Test.instanceCount += (((i26 * i25) + i3) - i);
                    i2 = (int)l;
                    i2 += (i26 ^ Test.byFld);
                    lArr[i26][i + 1] -= -49555;
                    Test.dFld = i24;
                    if (Test.bFld) continue;
                    lArr[i24 + 1][i26] -= (long)Test.fFld;
                }
                i25 &= 7;
                i2 += (((i24 * i24) + Test.instanceCount) - i1);
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("l i3 i24 = " + l + "," + i3 + "," + i24);
        FuzzerUtils.out.println("i25 i26 lArr = " + i25 + "," + i26 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.fFld sFld = " + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld) + "," + sFld);
        FuzzerUtils.out.println("Test.iArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
