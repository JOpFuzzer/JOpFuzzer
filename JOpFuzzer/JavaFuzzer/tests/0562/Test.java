// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public byte byFld=-44;
    public int iFld=-29622;
    public static short sFld=-28690;
    public static int iFld1=130;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public long lMeth(int i5, short s, int i6) {

        int i7=61, i8=-14, i9=-22925, i10=150, i11=229, i12=-29, iArr1[]=new int[N];
        double d2=-114.81550;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -55.965F);
        FuzzerUtils.init(iArr1, 27408);

        iFld *= i6;
        iFld = (int)-20118L;
        i6 += (int)Test.instanceCount;
        for (i7 = 4; i7 < 311; ++i7) {
            fArr[i7] *= iFld;
            Test.instanceCount *= i6;
            for (i9 = 5; i9 > 1; i9--) {
                iFld -= i7;
            }
            Test.instanceCount = i6;
            iArr1[i7] -= iFld;
            for (i11 = i7; i11 < 5; ++i11) {
                i10 += i7;
                Test.instanceCount += i11;
                iArr1[i7] >>= -60;
                i12 *= (int)d2;
            }
        }
        long meth_res = i5 + s + i6 + i7 + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth1(byte by, long l) {

        int i3=23, i4=27, iArr[]=new int[N];
        float f1=0.851F;
        short s1=-14160, sArr[]=new short[N];
        double d3=30.29198, dArr[]=new double[N];

        FuzzerUtils.init(iArr, -111);
        FuzzerUtils.init(sArr, (short)-29154);
        FuzzerUtils.init(dArr, -127.96465);

        for (i3 = 18; i3 < 349; ++i3) {
            iArr[i3] &= (int)((iFld -= 58505) + (f1++));
            l *= iFld;
            iFld = (int)(Math.min(Test.instanceCount--, (long)(iFld - f1)) - l);
            iFld *= (iFld++);
            l = lMeth(i3, s1, i3);
            i4 = (int)Test.instanceCount;
            sArr[i3 - 1] = (short)-6;
            iFld -= (int)d3;
            i4 = (int)Test.instanceCount;
        }
        s1 |= (short)i3;
        i4 *= (int)l;
        for (double d4 : dArr) {
            if (i4 != 0) {
                vMeth1_check_sum += by + l + i3 + i4 + Float.floatToIntBits(f1) + s1 + Double.doubleToLongBits(d3) +
                    FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
            iFld += i4;
        }
        vMeth1_check_sum += by + l + i3 + i4 + Float.floatToIntBits(f1) + s1 + Double.doubleToLongBits(d3) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth(int i) {

        int i1=-11, i2=-20, i13=9, i14=123, i15=-18, iArr2[]=new int[N];
        float f=-2.995F;
        double d=-45.89522, d1=28.25328;
        boolean b=true;
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)43);
        FuzzerUtils.init(lArr, -5711762579047093761L);
        FuzzerUtils.init(iArr2, 23639);

        i1 = 1;
        do {
            i += (((i1 * byFld) + f) - i);
            i = (int)((Test.instanceCount + (byFld = (byte)i1)) + (byArr[i1] += (byte)(f - i1)));
            Test.instanceCount = (long)((-(i1 + i)) * (d--));
            for (d1 = 1; d1 < 11; ++d1) {
                if (true) {
                    vMeth1(byFld, 3996668219997288478L);
                    Test.instanceCount = i;
                    i += (int)((long)d1 | Test.instanceCount);
                } else {
                    for (i13 = i1; i13 < 2; i13++) {
                        Test.sFld += (short)(i13 - i13);
                    }
                }
                i15 = 1;
                do {
                    lArr[i1] *= i1;
                    iArr2[i1] = (int)Test.instanceCount;
                    if (b) continue;
                } while (++i15 < 2);
            }
        } while (++i1 < 143);
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1)
            + i2 + i13 + i14 + i15 + (b ? 1 : 0) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        double d5=0.82044, d6=0.15309, d7=15.116861;
        int i16=5, i17=-6, i18=-192, i19=10;
        boolean b1=false;
        float f2=21.478F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -18347L);

        vMeth(-8);
        for (d5 = 10; d5 < 316; ++d5) {
            i16 -= (int)Test.instanceCount;
            iFld = (int)-9.76F;
            iFld *= (int)Test.instanceCount;
            i16 += (int)d5;
        }
        iArrFld[(i16 >>> 1) % N] += -19466;
        b1 = b1;
        Test.instanceCount = -1380618120L;
        d6 += i16;
        Test.instanceCount = Test.iFld1;
        i16 = iFld;
        for (i17 = 352; i17 > 7; i17--) {
            iArrFld[i17 + 1] += i18;
            f2 += (((i17 * Test.instanceCount) + Test.instanceCount) - i16);
            d7 = 1;
            while (++d7 < 73) {
                switch ((int)((d7 % 5) + 81)) {
                case 81:
                    Test.iFld1 += iFld;
                    i16 += i16;
                    Test.instanceCount += (long)((long)d7 ^ byFld);
                    switch ((i17 % 2) + 101) {
                    case 101:
                        iArrFld[(int)(d7)] <<= (int)Test.instanceCount;
                        i19 = 1;
                        do {
                            iFld = i19;
                            f2 -= i18;
                            Test.instanceCount = -7;
                            Test.iFld1 &= i16;
                            lArr1[(int)(d7 - 1)] += i16;
                        } while (++i19 < 1);
                        break;
                    case 102:
                        Test.instanceCount -= -1;
                        iFld -= 2;
                        break;
                    default:
                        i18 += (int)(1.813F + (d7 * d7));
                    }
                case 82:
                    i18 = (int)Test.instanceCount;
                    break;
                case 83:
                    i18 += Test.iFld1;
                case 84:
                    i16 += (int)f2;
                    break;
                case 85:
                    Test.instanceCount += (long)d7;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("d5 i16 b1 = " + Double.doubleToLongBits(d5) + "," + i16 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("d6 i17 i18 = " + Double.doubleToLongBits(d6) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("f2 d7 i19 = " + Float.floatToIntBits(f2) + "," + Double.doubleToLongBits(d7) + "," +
            i19);
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount byFld iFld = " + Test.instanceCount + "," + byFld + "," + iFld);
        FuzzerUtils.out.println("Test.sFld Test.iFld1 iArrFld = " + Test.sFld + "," + Test.iFld1 + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
