// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5531475576687363319L;
    public static volatile int iFld=107;
    public static boolean bFld=false;
    public volatile float fFld=-102.1009F;
    public static volatile byte byFld=126;
    public short sArrFld[]=new short[N];
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public int iMeth(int i6) {

        int i7=-2391, i8=111, i9=-175;
        byte by=-93, byArr[]=new byte[N];
        float f=45.447F;
        short s=-16753;
        boolean b=false, b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4781853120296409974L);
        FuzzerUtils.init(byArr, (byte)72);

        if (false) {
            i7 = 1;
            while (++i7 < 124) {
                i6 += (((i7 * Test.instanceCount) + by) - i7);
                lArr = lArr;
                f = -95.227F;
                Test.instanceCount = Test.instanceCount;
                i6 = i7;
                sArrFld[i7 + 1] ^= (short)i6;
                for (i8 = 1; i8 < 13; ++i8) {
                    i6 *= i9;
                    byArr[i8 + 1] = (byte)i8;
                    i9 /= (int)-4L;
                    Test.instanceCount = s;
                    Test.iFld += i7;
                    if (b) continue;
                }
            }
        } else if (b1) {
            Test.instanceCount += Test.iFld;
        } else {
            f = Test.iFld;
        }
        long meth_res = i6 + i7 + by + Float.floatToIntBits(f) + i8 + i9 + s + (b ? 1 : 0) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth1(int i1, long l1) {

        int i2=-143, i3=9958, i4=-109, i5=-18991, i10=47727, i11=13, iArr[]=new int[N];
        float f1=0.60F;
        byte by1=84;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(lArr1, 3325501959L);

        for (i2 = 14; i2 < 323; i2++) {
            for (i4 = 1; i4 < 5; i4++) {
                short s1=-23914;
                i3 += (int)Math.abs((i4 - i2) * (i1 * i3));
                i1 -= iMeth(i1);
                switch (((8797 >>> 1) % 6) + 38) {
                case 38:
                    if (Test.bFld) continue;
                    s1 <<= (short)i4;
                    f1 -= i3;
                    break;
                case 39:
                    by1 >>= (byte)i5;
                    Test.bFld = Test.bFld;
                    for (i10 = 1; i10 < 2; ++i10) {
                        i11 += (int)Test.instanceCount;
                        iArr[i10 + 1] &= -12;
                        i11 -= i5;
                        lArr1[i2] <<= i4;
                    }
                    break;
                case 40:
                    i11 *= i1;
                    break;
                case 41:
                    try {
                        i11 = (i4 / 35906);
                        iArr[i4] = (i11 % -3288);
                        i5 = (-30681 % i5);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 42:
                    i1 <<= i3;
                    break;
                case 43:
                    i5 += 35383;
                    break;
                }
            }
        }
        vMeth1_check_sum += i1 + l1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f1) + by1 + i10 + i11 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(int i, long l) {


        vMeth1(-215, Test.instanceCount);
        vMeth_check_sum += i + l;
    }

    public void mainTest(String[] strArr1) {

        int i12=142, i13=-4674, i14=1, i15=22737, i16=-9, i17=-33969, i18=207, i19=3983;
        float fArr[]=new float[N], fArr1[][]=new float[N][N];
        long lArr2[]=new long[N];
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(fArr, 1.174F);
        FuzzerUtils.init(lArr2, 48273L);
        FuzzerUtils.init(fArr1, -94.861F);
        FuzzerUtils.init(byArr1, (byte)-110);

        vMeth(Test.iFld, Test.instanceCount);
        Test.iFld += (int)Test.instanceCount;
        for (float f2 : fArr) {
            iArrFld[(Test.iFld >>> 1) % N] += Test.iFld;
        }
        for (i12 = 138; i12 > 5; i12 -= 2) {
            i14 = 1;
            while (++i14 < 379) {
                fFld += i14;
                for (i15 = i14; i15 < 1; ++i15) {
                    Test.iFld &= -190;
                }
                switch (((Test.iFld >>> 1) % 4) + 28) {
                case 28:
                    iArrFld = iArrFld;
                    switch (((i14 % 8) * 5) + 89) {
                    case 105:
                        i16 += (i14 - i15);
                        lArr2[i14 - 1] = i15;
                        break;
                    case 127:
                        i16 += i14;
                        Test.instanceCount += i14;
                        break;
                    case 96:
                        if (Test.bFld) break;
                        Test.instanceCount = Test.instanceCount;
                        Test.iFld = -144;
                        fArr1 = fArr1;
                        break;
                    case 115:
                        i16 <<= Test.byFld;
                        for (i17 = 1; i17 > 1; i17 -= 3) {
                            Test.instanceCount += (i17 * i15);
                            iArrFld[i12] >>= i16;
                            if (Test.bFld) continue;
                            Test.iFld *= i18;
                            Test.iFld >>= i17;
                        }
                        Test.instanceCount += (i14 * i14);
                        Test.instanceCount += Test.instanceCount;
                        break;
                    case 90:
                    case 126:
                        i19 &= i18;
                    case 113:
                        try {
                            i16 = (i12 / Test.iFld);
                            Test.iFld = (-33 % i16);
                            i16 = (i17 / i13);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 91:
                        i18 += Test.byFld;
                        break;
                    }
                case 29:
                    fFld = Test.instanceCount;
                    break;
                case 30:
                    i19 = i12;
                    break;
                case 31:
                    Test.byFld = (byte)i15;
                    break;
                default:
                    byArr1[i14] += (byte)i13;
                }
            }
        }

        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 fArr = " + i18 + "," + i19 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("lArr2 fArr1 byArr1 = " + FuzzerUtils.checkSum(lArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," + FuzzerUtils.checkSum(byArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("fFld Test.byFld sArrFld = " + Float.floatToIntBits(fFld) + "," + Test.byFld + "," +
            FuzzerUtils.checkSum(sArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
