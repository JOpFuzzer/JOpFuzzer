// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4L;
    public static int iFld=-12;
    public static byte byFld=31;
    public static boolean bFld=false;
    public static double dFld=57.118739;
    public volatile short sFld=28685;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 73);
        FuzzerUtils.init(Test.lArrFld, -2497829015L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i2=-23852, i3=28179, i4=38306, i5=-13, i6=254, i7=13, i8=7;
        float f1=0.9F, f2=0.482F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 243L);

        for (i2 = 1; i2 < 328; i2++) {
            for (i4 = 1; i4 < 5; i4 += 2) {
                for (i6 = i2; i6 < 3; i6++) {
                    i3 = i7;
                    i5 += i2;
                    i7 += (i6 * i6);
                    lArr[i6] /= ((long)(f1) | 1);
                    Test.iArrFld[i2] <<= Test.byFld;
                    Test.iFld >>= (int)Test.instanceCount;
                    Test.iArrFld[i4 - 1] -= i8;
                    Test.instanceCount &= -52668L;
                    Test.instanceCount -= i7;
                    f1 -= f2;
                }
                f2 += (((i4 * i4) + i5) - Test.byFld);
                i8 = i7;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(long l, byte by1, long l1) {

        short s=7440;
        int i9=35724, i10=-56769, i11=-19564, i12=-7671, i13=-12;
        double d=17.73561;
        boolean b1=true;
        float f3=1.341F;

        s *= (short)(-61599 - l);
        Test.iArrFld[(Test.iFld >>> 1) % N] = (int)(((--Test.iFld) + (++Test.iFld)) - lMeth());
        l1 = by1;
        for (i9 = 15; i9 < 251; ++i9) {
            for (d = 1; 7 > d; d++) {
                Test.iFld += (int)d;
                if (b1) continue;
                Test.byFld += (byte)(((d * l1) + i11) - Test.instanceCount);
                i11 *= (int)f3;
                Test.iFld >>= (int)Test.instanceCount;
                Test.lArrFld[i9] = (long)d;
                for (i12 = 2; i12 > 1; i12 -= 2) {
                    i13 >>>= i10;
                    Test.iArrFld = Test.iArrFld;
                    f3 = i10;
                }
            }
        }
        long meth_res = l + by1 + l1 + s + i9 + i10 + Double.doubleToLongBits(d) + i11 + (b1 ? 1 : 0) +
            Float.floatToIntBits(f3) + i12 + i13;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(boolean b, int i1) {

        byte by=81;

        by -= (byte)(-iMeth(Test.instanceCount, Test.byFld, Test.instanceCount));
        vSmallMeth_check_sum += (b ? 1 : 0) + i1 + by;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i14=247, i15=24618, i16=10, i17=-88, i18=51738, i19=-169, i20=4, i21=463, i22=-12, i23=-204, i24=10,
            i25=31291;
        float f=-1.927F;
        double d1=1.113136;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-18087);

        i += (int)f;
        for (int smallinvoc=0; smallinvoc<769; smallinvoc++) vSmallMeth(Test.bFld, i);
        for (d1 = 2; d1 < 196; ++d1) {
            Test.iFld += (int)d1;
            for (i15 = 2; i15 < 129; ++i15) {
                Test.instanceCount -= (long)f;
            }
            for (i17 = 5; 129 > i17; i17++) {
                i14 += (((i17 * i16) + i17) - i18);
                Test.iFld = i16;
                Test.instanceCount &= i15;
                Test.iArrFld[i17 + 1] -= (int)Test.instanceCount;
                for (i19 = 1; i19 < 2; i19++) {
                    Test.iFld += i19;
                    Test.dFld = -635;
                }
                Test.instanceCount *= sFld;
            }
            if (Test.bFld) break;
            i20 = i19;
            i16 -= i15;
        }
        for (i21 = 170; i21 > 4; i21--) {
            i23 = 1;
            while (++i23 < 151) {
                i16 >>= i17;
                i += (((i23 * Test.instanceCount) + i15) - Test.instanceCount);
                sArr[i23] *= (short)Test.iFld;
                i22 = (int)1.48891;
                switch (((i21 % 2) * 5) + 6) {
                case 13:
                    for (i24 = 1; i24 < 1; ++i24) {
                        i22 = i14;
                        i25 ^= 211;
                        Test.lArrFld[i23] += i16;
                        if (false) continue;
                    }
                    break;
                case 10:
                    i14 += Test.byFld;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i f d1 = " + i + "," + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.bFld Test.dFld sFld = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(Test.dFld) + "," + sFld);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
