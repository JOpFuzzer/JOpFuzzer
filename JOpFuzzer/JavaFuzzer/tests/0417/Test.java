// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=578417211L;
    public float fFld=2.953F;
    public static int iFld=-1;
    public static short sFld=21485;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -61);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=88, i4=-24089, i5=147, i6=-10, i7=12, i8=12, i9=-40, i10=-132;
        long l=6L;
        double d=-2.126423;
        float f1=-127.483F;
        byte by=25;
        boolean b=true;

        i3 = 1;
        while (++i3 < 310) {
            l = 1;
            while (++l < 5) {
                i4 += (int)l;
                for (i5 = 1; i5 > 1; --i5) {
                    i4 *= i5;
                    i6 += i6;
                }
            }
            if (false) {
                d = i5;
                for (i7 = i3; i7 < 5; i7++) {
                    i8 = (int)d;
                    i8 += (int)d;
                    for (i9 = 1; i9 < 1; i9 += 2) {
                        f1 += by;
                        if (b) continue;
                        f1 += Test.instanceCount;
                    }
                }
                vMeth1_check_sum += i3 + l + i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 +
                    Float.floatToIntBits(f1) + by + (b ? 1 : 0);
                return;
            } else {
                i8 = (int)95.387F;
            }
        }
        vMeth1_check_sum += i3 + l + i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 +
            Float.floatToIntBits(f1) + by + (b ? 1 : 0);
    }

    public static int iMeth() {

        int i11=24310, i12=3, i13=-77, i15=53472, i16=5;
        short s=6409;

        vMeth1();
        i11 = 1;
        do {
            i12 &= i11;
            i13 = 1;
            while (++i13 < 11) {
                i12 += i13;
                s += (short)(i13 - i12);
                i12 += (12 + (i13 * i13));
                i12 += i13;
            }
            switch (((i11 % 2) * 5) + 1) {
            case 6:
                i12 += 28089;
                i12 -= i13;
                Test.instanceCount += s;
                for (i15 = 1; i15 < 11; ++i15) {
                    i16 -= i16;
                    i16 *= -62853;
                }
                break;
            case 10:
                i16 = i15;
                break;
            default:
                i12 -= i12;
            }
        } while (++i11 < 148);
        long meth_res = i11 + i12 + i13 + s + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2) {

        float f=90.524F;
        int i17=9, i18=63070, i19=-46705, i20=9, iArr1[]=new int[N];
        byte by1=-107;
        double d1=0.102501;
        short s2=22265;
        long l1=3505948698843882185L;

        FuzzerUtils.init(iArr1, -3);

        f *= Math.max(iArr1[(i2 >>> 1) % N] * iMeth(), i1);
        for (i17 = 6; i17 < 146; i17++) {
            for (i19 = 1; i19 < 11; i19++) {
                short s1=31408;
                switch ((i17 % 2) + 70) {
                case 70:
                    i18 += 44416;
                    s1 += (short)(((i19 * Test.instanceCount) + by1) - i19);
                    i20 += -27;
                    break;
                case 71:
                    d1 = i19;
                    iArr1[i19] >>= i19;
                    iArr1[i17 - 1] = s1;
                    break;
                }
            }
            i1 += -37975;
            s2 += (short)(i17 * Test.instanceCount);
            i20 = (int)l1;
            i18 += (12 + (i17 * i17));
        }
        s2 = (short)i2;
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f) + i17 + i18 + i19 + i20 + by1 +
            Double.doubleToLongBits(d1) + s2 + l1 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i21=199, i22=9071, i23=1, i24=157, i25=2, i26=-7, i27=-49012, iArr[]=new int[N];
        boolean b1=true;
        double d2=0.43647;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(lArr, 148L);

        for (int i : iArr) {
            vMeth(i, i);
            fFld += i;
            lArr[(i >>> 1) % N] -= i;
        }
        Test.iFld <<= (int)Test.instanceCount;
        Test.iFld = Test.iFld;
        for (i21 = 10; 321 > i21; ++i21) {
            for (i23 = 1; 81 > i23; ++i23) {
                i24 &= i22;
                Test.iFld -= (int)Test.instanceCount;
                Test.iFld %= (int)(i21 | 1);
            }
            i25 = 1;
            do {
                Test.iArrFld[i25 - 1] -= -94;
                Test.iArrFld[i21 - 1] |= (int)-2115509996381996654L;
                Test.instanceCount = 12;
                Test.iFld *= i24;
                Test.sFld >>>= (short)i24;
                try {
                    i22 = (i24 / 7494);
                    i24 = (i22 % 62384);
                    i24 = (40784 / iArr[i21]);
                } catch (ArithmeticException a_e) {}
                b1 = b1;
                i24 -= (int)d2;
                for (i26 = 1; 1 > i26; i26++) {
                    d2 = i25;
                    Test.sFld -= Test.sFld;
                    if (b1) continue;
                    i22 += (int)Test.instanceCount;
                    iArr[i26] = -3;
                    iArr[i21] *= (int)Test.instanceCount;
                    Test.instanceCount = -24186;
                    if (b1) continue;
                }
                d2 %= (i21 | 1);
            } while (++i25 < 81);
        }

        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 b1 = " + i24 + "," + i25 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("d2 i26 i27 = " + Double.doubleToLongBits(d2) + "," + i26 + "," + i27);
        FuzzerUtils.out.println("iArr lArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld Test.iArrFld = " + Test.sFld + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
