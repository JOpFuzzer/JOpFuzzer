// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=7446016607494137784L;
    public static double dFld=93.45787;
    public static volatile short sFld=-13457;
    public static byte byFld=-107;
    public static boolean bFld=false;
    public static float fFld=0.209F;
    public static volatile long lArrFld[]=new long[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 13452L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, int i8) {

        int i9=98, i10=8, iArr1[][]=new int[N][N];
        float f=0.444F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.206F);
        FuzzerUtils.init(iArr1, -172);

        i7 *= i8;
        fArr[(-92 >>> 1) % N] *= i8;
        for (i9 = 2; i9 < 162; i9++) {
            Test.dFld *= i9;
            Test.sFld -= (short)Test.instanceCount;
            i7 = i8;
            Test.byFld += (byte)(((i9 * f) + i9) - i7);
            i10 += i9;
            i7 = 56;
            switch (((i9 % 6) * 5) + 97) {
            case 98:
                i7 -= (int)f;
                if (Test.bFld) {
                    Test.sFld += (short)(12 + (i9 * i9));
                }
                i8 -= (int)f;
                iArr1[i9][i9 + 1] <<= i10;
                break;
            case 105:
                iArr1[i9 - 1][i9 + 1] += i7;
                break;
            case 117:
                i8 = i8;
                break;
            case 107:
                Test.instanceCount ^= Test.sFld;
                break;
            case 127:
                Test.lArrFld[i9] = i7;
                break;
            case 113:
                if (true) break;
                break;
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + Float.floatToIntBits(f) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, long l1, int i2) {

        int i3=10, i4=-13, i5=64866, i6=-76, iArr[]=new int[N];
        double d=-41.111582;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, 57930);
        FuzzerUtils.init(lArr, -9025952617821564384L);

        i2 = (int)(Test.dFld * (iArr[(-558 >>> 1) % N] = i2));
        iArr = (iArr = (iArr = (iArr = iArr)));
        for (i3 = 10; i3 < 306; ++i3) {
            Test.sFld += (short)(i3 - Test.instanceCount);
            i5 = 1;
            while (++i5 < 6) {
                lArr = (lArr = (lArr = (lArr = lArr)));
                l1 = i3;
                i2 += i5;
                for (d = 1; 1 > d; ++d) {
                    Test.dFld -= (-((i5 % (l1 | 1)) * iMeth(i2, 252)));
                    i6 *= (int)Test.instanceCount;
                    if (Test.bFld) continue;
                    lArr[i5][(int)(d)] += Test.byFld;
                    i6 >>= -10;
                }
                if (true) break;
            }
        }
        vMeth_check_sum += l + l1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + i6 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(int i, int i1) {

        long l2=-1852844704L;

        vMeth(Test.instanceCount, l2, 54);
        vSmallMeth_check_sum += i + i1 + l2;
    }

    public void mainTest(String[] strArr1) {

        int i11=-47580, i12=9, i13=-153, i14=-4, i15=173, i16=222, iArr2[]=new int[N];
        short s=-12774;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr2, -27396);
        FuzzerUtils.init(fArr1, 116.691F);

        for (int smallinvoc=0; smallinvoc<395; smallinvoc++) vSmallMeth(142, 2837);
        for (i11 = 17; i11 < 365; i11++) {
            Test.dFld -= -64;
            i13 = 72;
            do {
                i12 >>= i12;
                switch (((i13 >>> 1) % 2) + 20) {
                case 20:
                    for (i14 = i11; 3 > i14; i14++) {
                        i15 ^= -96;
                        switch ((i14 % 8) + 16) {
                        case 16:
                            Test.byFld <<= (byte)i15;
                            Test.instanceCount = i15;
                            break;
                        case 17:
                            iArr2[i13 - 1] += i11;
                            Test.lArrFld[i13 + 1] += i15;
                            i16 >>= i14;
                            break;
                        case 18:
                            switch ((i11 % 9) + 92) {
                            case 92:
                                Test.fFld = i12;
                                break;
                            case 93:
                                fArr1[i14 - 1] = 88.722F;
                                i16 <<= -62242;
                                break;
                            case 94:
                                Test.dFld += i12;
                                i12 += i14;
                                break;
                            case 95:
                                try {
                                    i12 = (i16 / -65);
                                    i12 = (i13 / 63);
                                    iArr2[i13] = (i14 / -4156);
                                } catch (ArithmeticException a_e) {}
                                i12 *= i14;
                                Test.sFld = (short)i11;
                                break;
                            case 96:
                                i15 -= (int)Test.instanceCount;
                                byArrFld[i14 - 1] *= (byte)i13;
                                i16 = Test.sFld;
                                iArr2[i13 + 1] = (int)125L;
                            case 97:
                                s += (short)i14;
                            case 98:
                                i12 += i11;
                                i15 = i16;
                                break;
                            case 99:
                                iArr2[i14 + 1] = (int)Test.dFld;
                                break;
                            case 100:
                                Test.fFld = Test.fFld;
                                break;
                            }
                        case 19:
                            Test.lArrFld[i11 - 1] *= 13037;
                            break;
                        case 20:
                            s *= (short)i14;
                            break;
                        case 21:
                            Test.sFld = (short)i13;
                            break;
                        case 22:
                            i16 += (int)Test.instanceCount;
                            break;
                        case 23:
                            Test.bFld = Test.bFld;
                            break;
                        default:
                            i16 <<= i16;
                        }
                    }
                case 21:
                    i12 = -7;
                    break;
                }
            } while ((i13 -= 3) > 0);
        }

        FuzzerUtils.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("s iArr2 fArr1 = " + s + "," + FuzzerUtils.checkSum(iArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld Test.bFld Test.fFld = " + Test.byFld + "," + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.lArrFld byArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
