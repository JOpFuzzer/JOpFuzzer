// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=6763511635113288628L;
    public static float fFld=31.282F;
    public static int iFld=-189;
    public static short sFld=22640;
    public static double dFld=99.44724;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 57080);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b) {

        int i1=63801;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 13.727F);

        Test.iArrFld[(i1 >>> 1) % N] = (int)Test.fFld;
        Test.instanceCount = (long)1.812F;
        i1 = (int)Test.fFld;
        fArr[(i1 >>> 1) % N] -= i1;
        vMeth2_check_sum += (b ? 1 : 0) + i1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(double d) {

        int i2=-7, i3=14715, i4=226, i5=-11;
        boolean b1=true, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, true);

        vMeth2(true);
        Test.iFld += (int)d;
        Test.iFld *= Test.iFld;
        i2 = 1;
        while (++i2 < 177) {
            Test.iFld += (-15404 + (i2 * i2));
            Test.iFld += (((i2 * i2) + Test.iFld) - Test.sFld);
            if (Test.iFld != 0) {
                vMeth1_check_sum += Double.doubleToLongBits(d) + i2 + i3 + i4 + (b1 ? 1 : 0) + i5 +
                    FuzzerUtils.checkSum(bArr);
                return;
            }
            for (i3 = 1; i3 < 9; ++i3) {
                bArr = bArr;
                if (b1) continue;
                Test.iFld -= -20651;
            }
            i5 = 1;
            while (++i5 < 9) {
                Test.fFld += 13;
                Test.instanceCount = (long)Test.fFld;
                if (b1) continue;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i2 + i3 + i4 + (b1 ? 1 : 0) + i5 + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth() {

        int i=-3348, i6=223, i7=-63048, i8=-136, i9=34, i10=1;
        byte by=-109;
        double d1=-78.103143, dArr[]=new double[N];

        FuzzerUtils.init(dArr, -125.14336);

        Test.fFld = (float)((-dArr[(i >>> 1) % N]) - Integer.reverseBytes(i));
        i = by;
        vMeth1(Test.dFld);
        Test.iArrFld[(11 >>> 1) % N] = (int)Test.instanceCount;
        i = -756;
        for (d1 = 172; d1 > 5; --d1) {
            for (i7 = 1; i7 < 9; i7++) {
                Test.iFld = i6;
            }
            dArr[(int)(d1 - 1)] -= i7;
            Test.instanceCount += -43;
        }
        Test.instanceCount = i6;
        for (i9 = 13; i9 < 288; ++i9) {
            i8 *= (int)-434317854178775936L;
            by += (byte)i;
            Test.iFld += Test.iFld;
        }
        vMeth_check_sum += i + by + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + i10 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i11=-19639, i12=14515, i13=177, i14=-36276, i16=-52143, i17=-65, i18=-9386;
        long lArr[]=new long[N];
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(lArr, 3410217484481783675L);
        FuzzerUtils.init(bArr1, false);

        vMeth();
        i11 = 1;
        do {
            for (i12 = 72; i12 > 2; --i12) {
                i13 = (int)Test.instanceCount;
                i13 = Test.iFld;
                Test.iFld = (int)14L;
                Test.iArrFld[i11] = i13;
                Test.instanceCount = i13;
                Test.iFld >>= (int)Test.instanceCount;
            }
            if (Test.bFld) {
                i13 = i12;
                Test.fFld = Test.instanceCount;
                i14 = 1;
                do {
                    Test.iFld = i12;
                } while (++i14 < 72);
            } else if (Test.bFld) {
                lArr[i11] = i13;
            }
            i13 |= Test.sFld;
            Test.dFld *= i14;
            Test.iArrFld[i11 + 1] = i11;
            Test.iFld = i12;
            i16 = 1;
            while (++i16 < 72) {
                bArr1[i16] = Test.bFld;
                for (i17 = 1; i17 < 1; i17++) {
                    Test.sFld = (short)i13;
                    i13 += (int)Test.fFld;
                    iArrFld1[i16 - 1] &= (int)Test.instanceCount;
                    Test.instanceCount += (-63 + (i17 * i17));
                }
                Test.instanceCount = Test.instanceCount;
                Test.iFld -= i13;
                Test.instanceCount = i16;
            }
        } while (++i11 < 349);
        Test.iFld -= (int)Test.instanceCount;

        FuzzerUtils.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i16 i17 = " + i14 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 lArr bArr1 = " + i18 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(bArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld Test.dFld Test.bFld = " + Test.sFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld1));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
