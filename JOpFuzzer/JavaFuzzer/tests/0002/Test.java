// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8185L;
    public static float fFld=2.33F;
    public volatile int iFld=-22525;
    public static boolean bFld=false;
    public static int iFld1=-12;
    public static volatile double dFld=-31.78981;
    public static byte byFld=-48;

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth() {

        double d=1.94970;
        int i=-51;

        d = (((Test.fFld - i) + i) - i);
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + i;
    }

    public static void vMeth1(int i1) {

        int i2=249, i3=12, i4=6, i5=-4836, i6=-17586, i7=-56, i8=-51, i9=52992;
        double d1=-88.40963;
        float f=-62.505F;
        long l=-1L;

        Test.instanceCount >>= Test.instanceCount;
        for (i2 = 6; i2 < 185; ++i2) {
            switch ((i2 % 6) + 49) {
            case 49:
                for (i4 = i2; i4 < 9; ++i4) {
                    i6 += (i4 - i2);
                    i5 <<= (int)Test.instanceCount;
                    if (Test.bFld) break;
                    for (i7 = 1; i7 > 1; i7 -= 3) {
                        Test.instanceCount -= (long)Test.fFld;
                        i3 += (-104 + (i7 * i7));
                    }
                    i6 /= (int)(Test.instanceCount | 1);
                    Test.fFld = (float)d1;
                    for (f = 1; f < 1; f += 3) {
                        if (i7 != 0) {
                            vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) +
                                Float.floatToIntBits(f) + i9 + l;
                            return;
                        }
                        i8 += i7;
                    }
                }
                break;
            case 50:
                d1 *= i4;
                break;
            case 51:
            case 52:
                i9 += i2;
                break;
            case 53:
                i1 = (int)l;
                break;
            case 54:
                i5 += (int)f;
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f) + i9 + l;
    }

    public static void vMeth() {

        int i10=14, i11=234, i12=-102, i13=1, iArr[]=new int[N];
        float f1=29.653F;

        FuzzerUtils.init(iArr, -76);

        vMeth1(Test.iFld1);
        Test.iFld1 *= (int)Test.fFld;
        Test.iFld1 >>= (int)2452750462L;
        for (i10 = 3; i10 < 229; ++i10) {
            i11 = (int)Test.instanceCount;
        }
        for (i12 = 7; i12 < 171; i12++) {
            i13 -= (int)f1;
            Test.dFld *= i13;
            Test.instanceCount = i10;
            f1 += (((i12 * i12) + i10) - i11);
            iArr[i12 - 1] += i13;
            iArr[i12] = (int)Test.instanceCount;
            Test.instanceCount *= Test.instanceCount;
            i11 += i11;
            Test.bFld = false;
        }
        vMeth_check_sum += i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
    }

    public int iMeth() {


        vMeth();
        long meth_res = 0;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=-3699;
        long l1=-3341019969794382318L;
        int i14=0, i15=-56, i16=59145, i17=-13, i18=14, i19=1, iArr1[][]=new int[N][N];
        double d2=103.87416;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 125);
        FuzzerUtils.init(fArr, 35.387F);

        for (int smallinvoc=0; smallinvoc<214; smallinvoc++) vSmallMeth();
        iFld = ((iMeth() + iFld) + s);
        iArr1 = FuzzerUtils.int2array(N, (int)-41811);
        for (l1 = 2; l1 < 185; l1++) {
            fArr = FuzzerUtils.float1array(N, (float)2.565F);
            Test.dFld = 26918;
            i14 = (int)l1;
            for (d2 = 7; d2 < 137; d2++) {
                Test.iFld1 = (int)13794L;
                i14 = (int)Test.dFld;
                i15 += i15;
                Test.instanceCount += (long)(d2 * d2);
                Test.instanceCount -= i14;
                switch (((i16 >>> 1) % 5) + 11) {
                case 11:
                    i17 = 1;
                    do {
                        i16 += (-47409 + (i17 * i17));
                    } while (++i17 < 2);
                    break;
                case 12:
                    s += Test.byFld;
                    iArr1[(int)(l1 - 1)] = iArr1[(int)(d2)];
                    Test.instanceCount += (long)(d2 * d2);
                    break;
                case 13:
                    switch (((iFld >>> 1) % 5) + 15) {
                    case 15:
                        for (i18 = 1; 2 > i18; ++i18) {
                            switch ((int)((l1 % 8) + 66)) {
                            case 66:
                                i15 >>= i17;
                                i19 >>= i19;
                                Test.instanceCount *= i17;
                                break;
                            case 67:
                                iFld += (i18 * i18);
                                Test.instanceCount -= l1;
                                Test.instanceCount += (i18 * i18);
                                i16 *= i19;
                            case 68:
                                Test.byFld += (byte)i18;
                                break;
                            case 69:
                            case 70:
                                Test.iFld1 = i17;
                                break;
                            case 71:
                                Test.iFld1 += (int)Test.fFld;
                                break;
                            case 72:
                                Test.instanceCount >>= Test.instanceCount;
                                break;
                            case 73:
                                Test.dFld = iFld;
                                break;
                            }
                        }
                        break;
                    case 16:
                        fArr[(int)(d2 + 1)] = i15;
                        break;
                    case 17:
                        Test.byFld += (byte)((long)d2 ^ s);
                        break;
                    case 18:
                        Test.iFld1 >>= i17;
                        break;
                    case 19:
                        fArr[(int)(l1)] *= Test.fFld;
                    }
                    break;
                case 14:
                    i15 += Test.iFld1;
                case 15:
                    i14 -= iFld;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("s l1 i14 = " + s + "," + l1 + "," + i14);
        FuzzerUtils.out.println("d2 i15 i16 = " + Double.doubleToLongBits(d2) + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("iArr1 fArr = " + FuzzerUtils.checkSum(iArr1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + iFld);
        FuzzerUtils.out.println("Test.bFld Test.iFld1 Test.dFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld1 + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld = " + Test.byFld);

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
