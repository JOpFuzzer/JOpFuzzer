// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3L;
    public static int iFld=5;
    public static short sFld=583;
    public static boolean bFld=true;
    public double dFld=40.25323;
    public static double dArrFld[][]=new double[N][N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -73.95615);
        FuzzerUtils.init(Test.iArrFld, 52632);
        FuzzerUtils.init(Test.lArrFld, -8L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i) {

        int i1=123, i2=-30195, i3=-14, i4=19303, i5=-59, i6=-27741, i7=-163;
        float f=-1.244F;
        double d1=-12.19859;

        Test.iFld *= 14;
        for (i1 = 7; i1 < 130; ++i1) {
            Test.iFld += (((i1 * Test.instanceCount) + Test.iFld) - f);
            i3 = 1;
            do {
                i -= Test.sFld;
                Test.iFld = i1;
                Test.instanceCount = Test.instanceCount;
            } while ((i3 += 3) < 13);
        }
        for (i4 = 3; i4 < 145; i4++) {
            d1 = 2.103F;
            Test.iArrFld[i4 + 1] *= (int)Test.instanceCount;
            i2 >>= i4;
        }
        if (Test.bFld) {
            for (i6 = 161; i6 > 1; i6 -= 3) {
                Test.lArrFld[i6 - 1] >>= i5;
                d1 -= f;
            }
        } else {
            Test.dArrFld[(Test.iFld >>> 1) % N][(i1 >>> 1) % N] -= d1;
        }
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(double d) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2862003873L);

        Test.instanceCount = (lArr[(-7 >>> 1) % N]--);
        iMeth1(Test.iFld);
        long meth_res = Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i8=-218, i9=-8, i10=4, i11=-208, i12=-134, i13=-4, i14=-3, i15=162;
        float f1=1.818F;
        byte by=5;

        Test.dArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] -= iMeth(54.97378);
        for (i8 = 5; i8 < 124; ++i8) {
            for (i10 = i8; i10 < 13; ++i10) {
                i11 -= (int)f1;
                Test.instanceCount &= Test.sFld;
                if (true) {
                    i9 += i8;
                    i9 += (((i10 * i9) + i11) - by);
                } else if (Test.bFld) {
                    for (i12 = 1; 1 < i12; i12 -= 2) {
                        i11 = i12;
                    }
                    for (i14 = 1; i14 < 1; i14++) {
                        f1 = i9;
                        Test.iFld += (((i14 * i14) + i11) - i11);
                        Test.lArrFld[i8] = i11;
                        by *= (byte)Test.instanceCount;
                    }
                } else {
                    i15 = i15;
                }
            }
        }
        vMeth_check_sum += i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + by + i12 + i13 + i14 + i15;
    }

    public void mainTest(String[] strArr1) {

        long l=-23L;
        int i16=-31, i17=8208, i18=-59, i19=169, i20=-152, i21=-59386, i22=206;
        float f2=-1.940F;
        double d2=0.31915;
        byte by1=-21;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        vMeth();
        for (l = 4; l < 304; l++) {
            Test.iFld -= i16;
            fArrFld[(int)(l)] -= f2;
            Test.iFld = Test.iFld;
            Test.instanceCount *= -2;
            for (i17 = 3; i17 < 84; ++i17) {
                Test.iFld = -17422;
                bArr[(int)(l - 1)] = true;
                dFld = l;
                f2 -= i18;
                Test.instanceCount += (((i17 * f2) + f2) - Test.sFld);
                i18 += i17;
                for (d2 = 2; d2 > 1; d2--) {
                    Test.lArrFld[(int)(d2)] <<= Test.iFld;
                }
            }
            i20 = 84;
            while (--i20 > 0) {
                for (i21 = 1; i21 < 1; ++i21) {
                    i22 += (((i21 * Test.instanceCount) + i20) - i19);
                    i19 >>= i19;
                    fArrFld[(int)(l + 1)] += l;
                    i19 *= i21;
                    Test.instanceCount += (i21 + l);
                    i19 += (i21 | i21);
                    f2 *= Test.sFld;
                    by1 += (byte)(i21 * i21);
                }
                i19 += (i20 - Test.instanceCount);
                f2 -= i18;
                Test.instanceCount -= l;
                f2 -= l;
                fArrFld[(int)(l)] = (float)dFld;
            }
        }

        FuzzerUtils.out.println("l i16 f2 = " + l + "," + i16 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i17 i18 d2 = " + i17 + "," + i18 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 by1 bArr = " + i22 + "," + by1 + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld dFld Test.dArrFld = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
