// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public int iFld=23180;
    public static byte byFld=117;
    public static short sFld=-16084;
    public long lFld=408575398L;

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6) {

        int i7=-11, i8=26932, i9=11, i10=-62432, iArr[]=new int[N];
        double d=60.114006;

        FuzzerUtils.init(iArr, -13);

        i7 = 1;
        do {
            float f3=-122.882F;
            iArr[i7] *= i6;
            f3 += (12 + (i7 * i7));
            i8 = 1;
            do {
                i6 -= i6;
                i6 += i8;
                i6 -= (int)365637738018121683L;
                switch ((i8 % 5) + 113) {
                case 113:
                    f3 += (((i8 * Test.instanceCount) + i7) - i6);
                    break;
                case 114:
                    i6 *= Test.byFld;
                    Test.instanceCount >>= -19559;
                    break;
                case 115:
                    for (i9 = 1; i9 < 1; i9++) {
                        iArr[i9] -= (int)Test.instanceCount;
                        i10 -= i9;
                        Test.instanceCount += i10;
                    }
                    break;
                case 116:
                    Test.byFld = (byte)Test.instanceCount;
                case 117:
                    i10 = i6;
                    break;
                default:
                    d += f3;
                }
            } while (++i8 < 5);
        } while (++i7 < 310);
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i4, boolean b, int i5) {

        int i11=62983, i12=22757, i13=13, i14=-4, i15=-8623, i16=-57102;
        float f4=0.430F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 42.369F);

        i4 -= (int)-2.119430;
        vMeth1(i5);
        i11 = 1;
        while (++i11 < 248) {
            for (i12 = 1; i12 < 7; ++i12) {
                i4 += (((i12 * i14) + i12) - i12);
                for (i15 = 1; i15 < 2; i15++) {
                    i13 -= i5;
                    if (b) break;
                    i14 += i15;
                    i14 += (((i15 * i15) + f4) - i13);
                    fArr1[i12 + 1] = i15;
                    Test.instanceCount += i14;
                    if (i13 != 0) {
                    }
                    Test.instanceCount = i13;
                    i13 ^= (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i4 + (b ? 1 : 0) + i5 + i11 + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f4) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l) {

        int i1=-6, i2=-12, i3=-1421, i17=11, i18=34703;
        byte by=26;
        float f2=55.823F, f5=-118.393F, fArr[]=new float[N];
        boolean b1=false;

        FuzzerUtils.init(fArr, 84.477F);

        i1 = 1;
        do {
            by = (byte)(--i2);
            for (f2 = 1; f2 < 15; f2++) {
                i3 = Math.min(Integer.reverseBytes((int)(2.47173 - (++l))), (int)(i2 * lMeth(11, b1, -86)));
                if (b1) {
                    Test.instanceCount += (long)f2;
                    for (i17 = 1; i17 < 2; ++i17) {
                        l = Test.instanceCount;
                        Test.instanceCount <<= 53;
                        if (b1) continue;
                        i3 = i1;
                        i18 = Test.sFld;
                        Test.instanceCount /= (long)54.74963;
                    }
                } else if (b1) {
                    f5 += Test.instanceCount;
                    l += (long)((long)f2 ^ i17);
                    vMeth_check_sum += l + i1 + by + i2 + Float.floatToIntBits(f2) + i3 + (b1 ? 1 : 0) + i17 + i18 +
                        Float.floatToIntBits(f5) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
            }
        } while ((i1 += 2) < 214);
        vMeth_check_sum += l + i1 + by + i2 + Float.floatToIntBits(f2) + i3 + (b1 ? 1 : 0) + i17 + i18 +
            Float.floatToIntBits(f5) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr3) {

        float f=0.761F;
        int i19=71, i20=-50249, i21=-223, i22=23946, i23=51915, i24=-57361, i25=412, i26=-247, i27=1, i28=21364,
            iArr1[]=new int[N];
        double d1=-45.48931;

        FuzzerUtils.init(iArr1, 3);

        iFld >>= Math.max((int)((iFld - iFld) * (-(iFld * Test.instanceCount))), (int)(iFld - (Test.instanceCount =
            (long)f)));
        vMeth(-34003L);
        for (i19 = 14; i19 < 276; i19++) {
            try {
                iFld = (iFld % iFld);
                iFld = (-61071 / i19);
                i20 = (-226 % iFld);
            } catch (ArithmeticException a_e) {}
            for (i21 = 5; i21 < 96; ++i21) {
                i20 >>= (int)Test.instanceCount;
                i20 += i19;
                for (i23 = 2; i23 > 1; i23--) {
                    i25 -= iFld;
                    switch ((i19 % 1) + 40) {
                    case 40:
                        iFld *= Test.sFld;
                        Test.instanceCount <<= i24;
                        lFld >>= Test.sFld;
                        iFld += -5;
                        break;
                    }
                }
            }
            lFld >>= i25;
            iFld -= i22;
        }
        i26 = 1;
        while (++i26 < 353) {
            Test.instanceCount += (i26 | i26);
            iArr1[i26 - 1] = (int)f;
            i27 = 1;
            while (++i27 < 71) {
                i25 -= (int)f;
                iFld += (i27 + i25);
                for (d1 = 1; d1 < 1; d1++) {
                    iFld -= -52834;
                    i28 >>= i28;
                    lFld += (long)(d1 * d1);
                    i24 += i25;
                    iFld += iFld;
                    f += Test.sFld;
                    i22 += (int)Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("f i19 i20 = " + Float.floatToIntBits(f) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 d1 i28 = " + i27 + "," + Double.doubleToLongBits(d1) + "," + i28);
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.sFld lFld = " + Test.sFld + "," + lFld);

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
