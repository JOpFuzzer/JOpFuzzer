// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=39769L;
    public static byte byFld=66;
    public static float fFld=-1.983F;
    public volatile int iFld=-37;
    public double dFld=2.41643;
    public static short sArrFld[]=new short[N];
    public long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-9624);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3) {

        int i4=-138, i5=-161, i6=125, i7=169, i8=46840, i9=-10, iArr1[][]=new int[N][N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 24851);
        FuzzerUtils.init(dArr, -1.92909);

        iArr1[(i3 >>> 1) % N][(-58311 >>> 1) % N] -= i3;
        for (i4 = 3; i4 < 133; i4++) {
            dArr = dArr;
            for (i6 = 12; 1 < i6; i6 -= 2) {
                iArr1[i6][i4] += i4;
                for (i8 = 1; i8 < 3; i8++) {
                    float f1=0.724F;
                    i3 -= i4;
                    f1 += (i8 + i5);
                    i5 *= i5;
                    Test.instanceCount = i9;
                    i3 = (int)Test.instanceCount;
                }
                i7 += (40 + (i6 * i6));
                i5 += i6;
            }
        }
        iArr1[(-9 >>> 1) % N][(i4 >>> 1) % N] = i3;
        i9 *= i3;
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i2=33766, i10=-54450, i11=10, i12=-154, i13=-12242, i14=60376, i15=138, i16=-45, i17=89, iArr[]=new int[N];
        short s=30691;
        double d=0.12079;
        boolean b=false;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, -14216);
        FuzzerUtils.init(lArr, 1421265461261502799L);

        iArr[(i2 >>> 1) % N] *= (int)((Test.sArrFld[(i2 >>> 1) % N]--) / (((s * Test.instanceCount) * (i2 + i2)) | 1));
        i2 *= (((i2 + 214) - iMeth(i2)) - i2);
        lArr = lArr;
        for (i10 = 7; i10 < 341; i10++) {
            switch ((i10 % 8) + 64) {
            case 64:
                for (i12 = 5; i12 > 1; i12--) {
                    lArr[i10 - 1][i12 + 1] -= i2;
                    i2 = i2;
                    Test.instanceCount += (((i12 * Test.fFld) + Test.fFld) - Test.instanceCount);
                }
                Test.instanceCount += (i10 + i2);
                for (i14 = 5; i14 > 1; i14--) {
                    for (i16 = 1; i16 < 2; ++i16) {
                        Test.instanceCount = -2417067256L;
                    }
                    i13 += 44614;
                    i13 += (int)d;
                }
                break;
            case 65:
                i17 = (int)d;
                break;
            case 66:
                s = (short)i11;
                break;
            case 67:
                Test.instanceCount -= i12;
                break;
            case 68:
                iArr[i10] += 8;
            case 69:
                i17 = (int)Test.instanceCount;
                break;
            case 70:
                i15 -= 0;
            case 71:
                b = false;
            default:
                s += (short)(i10 * i10);
            }
        }
        vMeth1_check_sum += i2 + s + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d) + (b ?
            1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i=-4506, i1=42, i18=1593, i19=112, i20=10, i21=-35144, i22=-42231, iArr2[]=new int[N];
        float f=2.859F;
        long l=-9079680686401520236L;
        short s1=501;

        FuzzerUtils.init(iArr2, 45);

        i /= (int)((i >>= Test.byFld) | 1);
        i = (int)(2.852F * ((i + i) + i1));
        f *= (Test.instanceCount--);
        vMeth1();
        if (false) {
            for (i18 = 2; i18 < 305; i18++) {
                for (l = 5; l > 1; --l) {
                    i += s1;
                    i += (int)l;
                    for (i21 = (int)(l); i21 < 2; ++i21) {
                        double d1=-83.29742;
                        i -= i;
                        iArr2[(int)(l)] = i22;
                        i19 |= -39684;
                        d1 = i18;
                        Test.fFld = Test.fFld;
                    }
                }
            }
        } else {
            Test.instanceCount += (long)f;
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + i18 + i19 + l + i20 + s1 + i21 + i22 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i23=169, i24=-56885, i25=254, i26=-112, i27=5680, i28=-9, i29=-42868, i30=1, i31=45182, i32=-7, i33=8,
            i34=10282, i35=-2, iArr3[]=new int[N];
        boolean b1=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr3, -7);
        FuzzerUtils.init(fArr, -1.672F);

        vMeth();
        Test.instanceCount = iFld;
        Test.instanceCount <<= Test.instanceCount;
        Test.byFld += (byte)8072;
        for (i23 = 10; i23 < 174; i23++) {
            i24 += (((i23 * Test.instanceCount) + Test.fFld) - iFld);
            for (i25 = 6; i25 < 153; i25++) {
                short s2=-3206;
                iFld += (i25 + s2);
                i26 <<= i23;
            }
            i26 *= i25;
            if (b1) continue;
            for (i27 = 153; i27 > 2; --i27) {
                i26 += i28;
                i24 += i27;
                Test.fFld *= i27;
                i29 = 2;
                while ((i29 -= 2) > 0) {
                    dFld += i26;
                    Test.fFld -= i28;
                }
                for (i30 = 2; i30 > 1; i30 -= 2) {
                    iArr3[i23 + 1] = (int)-1.289F;
                    i24 += (((i30 * Test.fFld) + i32) - Test.instanceCount);
                }
                fArr[i27] = i24;
                Test.instanceCount = (long)Test.fFld;
                lArrFld[i23][i23] = (long)Test.fFld;
            }
            Test.instanceCount <<= i26;
        }
        i32 = i24;
        for (i33 = 19; 342 > i33; ++i33) {
            short s3=-4076;
            i35 = 1;
            while (++i35 < 78) {
                i26 += (i35 * i35);
            }
            s3 = (short)Test.instanceCount;
        }

        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 b1 i27 = " + i26 + "," + (b1 ? 1 : 0) + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 iArr3 = " + i34 + "," + i35 + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("iFld dFld Test.sArrFld = " + iFld + "," + Double.doubleToLongBits(dFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
