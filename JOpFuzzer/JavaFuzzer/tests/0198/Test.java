// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-250L;
    public volatile int iFld=-11;
    public static volatile boolean bFld=true;
    public static double dFld=-55.31702;
    public volatile long lArrFld[]=new long[N];
    public boolean bArrFld[]=new boolean[N];
    public long lArrFld1[][]=new long[N][N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(int i, long l, long l1) {


        Test.instanceCount <<= (-6 + Math.min(Math.max(i, i), i + i));
        vMeth_check_sum += i + l + l1;
    }

    public void vMeth1(int i5, int i6, int i7) {

        int i8=156, i10=44404, iArr[]=new int[N];
        byte by1=-21;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 53);
        FuzzerUtils.init(fArr, 97.359F);

        i5 = 7;
        i8 = 1;
        do {
            lArrFld[i8 + 1] /= (iFld | 1);
        } while (++i8 < 232);
        for (int i9 : iArr) {
            i10 = 1;
            while (++i10 < 4) {
                i7 += i10;
                switch ((((i10 >>> 1) % 6) * 5) + 75) {
                case 78:
                    i5 += (((i10 * i9) + i7) - i5);
                    fArr[i10] *= -11;
                case 103:
                    Test.bFld = Test.bFld;
                    break;
                case 94:
                    by1 = (byte)Test.instanceCount;
                    bArrFld[i10 - 1] = Test.bFld;
                    i6 -= i5;
                    i6 += (((i10 * i9) + iFld) - i10);
                    break;
                case 105:
                    iFld += (((i10 * i10) + Test.instanceCount) - i10);
                    break;
                case 84:
                    iFld += (int)33.998F;
                    break;
                case 79:
                    if (b) continue;
                    break;
                }
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + i10 + by1 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public long lMeth() {

        int i4=6, i11=-57991, i12=-41362, i13=78, i14=207;
        byte by=34;
        float f=-116.632F;
        boolean bArr[]=new boolean[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr, 0.102442);

        bArr[(iFld >>> 1) % N] = (bArr[(iFld >>> 1) % N] = false);
        iFld += (iFld + (iFld--));
        i4 = 1;
        while (++i4 < 175) {
            dArr[i4 + 1] -= ((Test.instanceCount * dArr[i4]) - by);
            Test.instanceCount *= -137;
            vMeth1(iFld, i4, iFld);
            Test.instanceCount *= i4;
            iFld += -1;
            for (i11 = i4; i11 < 9; ++i11) {
                Test.instanceCount = i12;
                for (i13 = 1; i13 > 1; i13--) {
                    i14 = (int)Test.dFld;
                    by = (byte)i14;
                    f -= i12;
                    f -= i4;
                }
            }
        }
        long meth_res = i4 + by + i11 + i12 + i13 + i14 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public int iMeth(int i1) {

        int i2=-85, i3=-3, i15=-177, iArr1[]=new int[N];
        long l2=49L;

        FuzzerUtils.init(iArr1, 29793);

        for (i2 = 21; i2 < 398; ++i2) {
            l2 += lMeth();
            i15 = 1;
            while (++i15 < 4) {
                switch (((i15 % 2) * 5) + 8) {
                case 10:
                    Test.instanceCount -= i2;
                    break;
                case 12:
                    l2 -= (long)1.997;
                    Test.dFld *= i1;
                    switch ((((i2 >>> 1) % 2) * 5) + 61) {
                    case 62:
                    case 66:
                        switch (((i2 % 2) * 5) + 64) {
                        case 72:
                            switch ((((i2 >>> 1) % 1) * 5) + 19) {
                            case 23:
                            }
                            i3 *= (int)l2;
                            i3 = -16;
                            break;
                        case 66:
                            if (Test.bFld) continue;
                            try {
                                iFld = (-1494654095 / i15);
                                iFld = (iArr1[i2 - 1] % iFld);
                                i1 = (i1 / iArr1[i15 - 1]);
                            } catch (ArithmeticException a_e) {}
                            i3 ^= -1;
                        default:
                            iFld >>= -200;
                        }
                    default:
                        iFld -= (int)-1.74432;
                    }
                    break;
                }
            }
        }
        long meth_res = i1 + i2 + i3 + l2 + i15 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by2=17;
        int i16=-63806, i17=10936, i18=9, i19=9, i20=152, i21=6, i22=-35240, i23=33432, i24=-7612, i25=251, iArr2[]=new
            int[N], iArr3[][]=new int[N][N];
        float f1=87.752F;
        short s=2562;

        FuzzerUtils.init(iArr2, -72);
        FuzzerUtils.init(iArr3, 9);

        vMeth(iFld--, Test.instanceCount, iMeth(iFld) + iFld);
        iFld <<= iFld;
        iFld = by2;
        for (i16 = 11; i16 < 287; ++i16) {
            i17 -= i16;
        }
        for (i18 = 4; 228 > i18; i18++) {
            iArr2[i18] *= 38887;
            if (false) {
                i17 += i18;
                i17 >>>= (int)Test.instanceCount;
            } else if (Test.bFld) {
                for (i20 = i18; i20 < 112; i20++) {
                    iFld *= 53;
                    for (i22 = 1; i22 > 1; i22 -= 2) {
                        iArr2[i20 - 1] -= i19;
                        iFld -= i17;
                    }
                    switch (((i16 >>> 1) % 9) + 48) {
                    case 48:
                        i17 >>= i16;
                        break;
                    case 49:
                        i23 *= (int)Test.instanceCount;
                        try {
                            iArr2[i20] = (-18761 % i16);
                            iArr2[i18 + 1] = (i22 % iFld);
                            iFld = (iFld % 1073821197);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 50:
                        f1 += 5414376127449463832L;
                        i21 -= 14964;
                        i23 <<= -20805;
                        break;
                    case 51:
                        switch (((i19 >>> 1) % 4) + 6) {
                        case 6:
                            iFld *= s;
                            Test.instanceCount -= 43855;
                            i17 += (i20 * i20);
                            for (i24 = i20; i24 < 1; i24++) {
                                f1 += i24;
                                lArrFld1 = lArrFld1;
                                i19 += (int)Test.instanceCount;
                            }
                            break;
                        case 7:
                            Test.instanceCount = Test.instanceCount;
                        case 8:
                            iFld -= (int)Test.instanceCount;
                            break;
                        case 9:
                            iArr2[i18 - 1] <<= iFld;
                            break;
                        default:
                            iArr3 = iArr3;
                        }
                        break;
                    case 52:
                        i17 -= (int)f1;
                        break;
                    case 53:
                    case 54:
                        i21 >>= (int)Test.instanceCount;
                    case 55:
                        f1 = 12L;
                        break;
                    case 56:
                        i17 = i24;
                        break;
                    default:
                        Test.bFld = Test.bFld;
                    }
                }
            } else {
                i17 += (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("by2 i16 i17 = " + by2 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("f1 s i24 = " + Float.floatToIntBits(f1) + "," + s + "," + i24);
        FuzzerUtils.out.println("i25 iArr2 iArr3 = " + i25 + "," + FuzzerUtils.checkSum(iArr2) + "," +
            FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.bFld = " + Test.instanceCount + "," + iFld + "," +
            (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld lArrFld bArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(lArrFld) + "," + FuzzerUtils.checkSum(bArrFld));
        FuzzerUtils.out.println("lArrFld1 = " + FuzzerUtils.checkSum(lArrFld1));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
