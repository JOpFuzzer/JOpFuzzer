// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5983689082037511675L;
    public static int iFld=-12;
    public static boolean bFld=true;
    public float fFld=-2.448F;
    public static int iFld1=15;
    public static boolean bArrFld[]=new boolean[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.lArrFld, 1740209345L);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i5, int i6) {

        int i7=0, i8=14, i9=-126, i10=51181, iArr2[]=new int[N];
        short s1=-18099;
        float f=0.476F;
        double d1=0.94947;

        FuzzerUtils.init(iArr2, 216);

        for (i7 = 3; 211 > i7; i7++) {
            switch (((i5 >>> 1) % 8) + 19) {
            case 19:
                Test.iFld *= i6;
                Test.lArrFld[i7 + 1] = i5;
                s1 = (short)Test.instanceCount;
                for (i9 = 1; 8 > i9; i9++) {
                    Test.iFld += (int)f;
                    i5 += (i9 * i9);
                    d1 -= i7;
                    i5 += (i9 | Test.iFld);
                    i5 = (int)Test.instanceCount;
                    switch (((i10 >>> 1) % 4) + 60) {
                    case 60:
                        Test.instanceCount += (((i9 * f) + Test.instanceCount) - f);
                        if (Test.bFld) break;
                    case 61:
                        try {
                            i10 = (-21905 / i10);
                            i8 = (i9 % 176);
                            Test.iFld = (480055084 / i9);
                        } catch (ArithmeticException a_e) {}
                    case 62:
                        iArr2[i9] -= i8;
                        break;
                    case 63:
                        i8 *= 24793;
                    }
                }
                break;
            case 20:
                iArr2[i7 + 1] = (int)2L;
                break;
            case 21:
                f = i7;
                break;
            case 22:
                Test.lArrFld[i7 - 1] = Test.instanceCount;
                break;
            case 23:
                Test.instanceCount -= Test.iFld;
            case 24:
                Test.iFld -= i8;
                break;
            case 25:
                s1 = (short)17356;
                break;
            case 26:
                Test.bFld = Test.bFld;
                break;
            default:
                Test.instanceCount += (((i7 * Test.instanceCount) + i9) - i5);
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + s1 + i9 + i10 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        float f1=-15.356F;
        int i11=-190, i12=-9, i13=-6, i14=-243, i15=61257, iArr1[]=new int[N];
        double d2=85.24213, dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr1, -33837);
        FuzzerUtils.init(dArr, -49.70568);

        iArr1[(Test.iFld >>> 1) % N] += ((iMeth1(Test.iFld, Test.iFld) * -10374) + 12274);
        for (f1 = 11; 248 > f1; ++f1) {
            Test.instanceCount += (long)(((f1 * Test.iFld) + i11) - i11);
            iArr1[(int)(f1 - 1)] = -6;
            Test.iFld >>= i11;
            for (i12 = 1; i12 < 7; i12++) {
                i13 += (((i12 * Test.iFld) + Test.instanceCount) - Test.iFld);
                if (i11 != 0) {
                }
                Test.iFld *= (int)d2;
                for (i14 = 1; i14 < 2; i14++) {
                    switch ((int)(((f1 % 9) * 5) + 28)) {
                    case 65:
                    case 59:
                        i11 = i12;
                        i15 <<= (int)Test.instanceCount;
                        i11 -= i11;
                        d2 = Test.iFld;
                    case 40:
                        i15 -= i15;
                        break;
                    case 55:
                        iArr1[i12] = (int)Test.instanceCount;
                    case 43:
                        Test.instanceCount *= i13;
                        break;
                    case 53:
                        i11 = i11;
                    case 73:
                        Test.iFld += (-9 + (i14 * i14));
                        break;
                    case 72:
                        dArr[(int)(f1 + 1)][i14 - 1] += i13;
                        break;
                    case 58:
                        i11 = i12;
                        break;
                    default:
                        Test.instanceCount *= (long)f1;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i11 + i12 + i13 + Double.doubleToLongBits(d2) + i14 + i15 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i2, int i3) {

        boolean b=true;
        int i4=6, i16=-6, i17=115, i18=16592, i19=-7, iArr[]=new int[N];
        short s=3154;

        FuzzerUtils.init(iArr, 9941);

        iArr = iArr;
        Test.bArrFld[(i2 >>> 1) % N] = b;
        i4 = 1;
        do {
            s = (short)iMeth();
            i3 += i4;
            for (i16 = 1; i16 < 9; i16++) {
                for (i18 = 2; i18 > 1; i18--) {
                    i17 += -38;
                }
                i19 += (i16 * i16);
                switch (((i16 >>> 1) % 2) + 13) {
                case 13:
                    Test.iFld += (i16 | Test.iFld);
                    b = b;
                    i19 = 173;
                    break;
                case 14:
                    i3 >>= (int)Test.instanceCount;
                    iArr[i4 + 1] = i18;
                    break;
                }
            }
        } while ((i4 += 2) < 353);
        long meth_res = i2 + i3 + (b ? 1 : 0) + i4 + s + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=169, i1=192, i20=-176, i21=-160, i22=23018, i23=-207, i24=-39865, i25=15230, iArr3[]=new int[N];
        double d=-8.37011, dArr1[]=new double[N];
        short s2=-17000;
        byte by=21;
        boolean b1=true;

        FuzzerUtils.init(dArr1, 58.91240);
        FuzzerUtils.init(iArr3, -25951);

        for (i = 392; i > 18; i -= 3) {
            d = ((lMeth(i1, 99) + i1) + Test.iFld);
            Test.instanceCount = -33067;
            Test.instanceCount += (i * i);
            i1 >>= Test.iFld;
            switch ((i % 7) + 38) {
            case 38:
                Test.instanceCount = i;
                break;
            case 39:
                dArr1[i] = fFld;
                Test.instanceCount += Test.iFld;
                Test.instanceCount += (i - i1);
            case 40:
                for (i20 = i; i20 < 202; i20++) {
                    for (i22 = 1; i22 < 1; ++i22) {
                        try {
                            Test.iFld = (iArr3[i20 + 1] / i20);
                            Test.iFld = (-107202388 % i1);
                            iArr3[i] = (iArr3[i22 + 1] / i22);
                        } catch (ArithmeticException a_e) {}
                        Test.iFld >>= -34;
                        switch (((i1 >>> 1) % 2) + 57) {
                        case 57:
                            i23 -= s2;
                            break;
                        case 58:
                            Test.instanceCount >>>= 156;
                            break;
                        default:
                            d += i22;
                            i21 = i1;
                            Test.iFld += i22;
                        }
                        i23 += (250 + (i22 * i22));
                        Test.instanceCount -= i23;
                        Test.iFld |= (int)Test.instanceCount;
                        iArr3[i - 1] -= i23;
                    }
                    Test.iFld -= i20;
                    for (i24 = i20; i24 < 1; ++i24) {
                        Test.iFld -= i1;
                        Test.instanceCount += i20;
                        Test.instanceCount += i24;
                        Test.instanceCount >>= s2;
                    }
                }
            case 41:
                i1 = i22;
                break;
            case 42:
                by = (byte)Test.iFld;
                break;
            case 43:
                Test.iFld1 -= i23;
                break;
            case 44:
                if (b1) continue;
                break;
            default:
                fFld = (float)d;
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 s2 i24 = " + i23 + "," + s2 + "," + i24);
        FuzzerUtils.out.println("i25 by b1 = " + i25 + "," + by + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("dArr1 iArr3 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," +
            FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("fFld Test.iFld1 Test.bArrFld = " + Float.floatToIntBits(fFld) + "," + Test.iFld1 + ","
            + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
