// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-177L;
    public static int iFld=-227;
    public volatile boolean bFld=true;
    public static int iFld1=-7;
    public static int iFld2=-6;
    public static volatile long lArrFld[]=new long[N];
    public static volatile double dArrFld[]=new double[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2L);
        FuzzerUtils.init(Test.dArrFld, -2.92701);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i2) {

        int i3=-21282, i4=51556, i5=52253, i6=7, i7=-49754, iArr[]=new int[N];
        byte by=90;
        long l1=3L;
        double d=0.13250;
        float f3=89.655F, fArr1[]=new float[N];

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(fArr1, -90.503F);

        for (i3 = 20; i3 < 398; i3++) {
            by /= (byte)(Test.iFld | 1);
            for (i5 = 1; i5 < 4; i5++) {
                try {
                    Test.iFld = (iArr[i3] / i6);
                    i2 = (-102 % i4);
                    i6 = (i6 / i2);
                } catch (ArithmeticException a_e) {}
                fArr1[i5 + 1] += 32341;
            }
            switch ((i3 % 2) + 9) {
            case 9:
                iArr[i3 - 1] = (int)Test.instanceCount;
                Test.instanceCount >>= Test.instanceCount;
                break;
            case 10:
                for (l1 = i3; l1 < 4; ++l1) {
                    d *= 0;
                    i4 = i2;
                    d = d;
                    f3 += (l1 * l1);
                    if (true) continue;
                    Test.lArrFld[(int)(l1 - 1)] |= l1;
                }
                break;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + by + i5 + i6 + l1 + i7 + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static int iMeth(long l) {

        float f2=0.726F;
        int i8=-171, i9=147, i10=178, i11=-57323, iArr1[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, -44120);

        Test.instanceCount = (long)(Test.iFld + f2);
        vMeth(Test.iFld);
        for (long l2 : Test.lArrFld) {
            double d1=1.62335;
            Test.iFld = (int)d1;
            if (true) {
                for (i8 = 4; i8 > 1; i8--) {
                    short s=5579;
                    s = (short)i9;
                }
                switch (((Test.iFld >>> 1) % 4) + 29) {
                case 29:
                case 30:
                    Test.iFld += Test.iFld;
                    break;
                case 31:
                    for (i10 = 1; 4 > i10; i10++) {
                        switch ((i10 % 2) + 91) {
                        case 91:
                            Test.iFld /= (int)(i11 | 1);
                            Test.iFld += i10;
                            break;
                        case 92:
                            if (false) break;
                            i9 += (((i10 * l) + i8) - i11);
                            break;
                        }
                    }
                    break;
                case 32:
                    i9 *= (int)Test.instanceCount;
                    break;
                default:
                    iArr1 = iArr1;
                }
            } else if (b) {
                b = b;
            }
        }
        long meth_res = l + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(float f, float f1, int i1) {

        int i12=0, i13=-25, i14=4, i15=-14, iArr2[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr2, 24859);

        i1 *= (int)(Float.intBitsToFloat(i1) * iMeth(45130L));
        Test.instanceCount -= 21865;
        Test.lArrFld = Test.lArrFld;
        i12 = 164;
        do {
            Test.instanceCount <<= i12;
            for (i13 = 1; i13 < 10; ++i13) {
                i15 = 1;
                while (++i15 < 2) {
                    try {
                        i14 = (-111 / iArr2[i13]);
                        i14 = (i1 % i12);
                        i1 = (2114650869 / iArr2[i15 + 1]);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld = i15;
                    i14 = i14;
                    i14 >>= i14;
                    Test.lArrFld[i15] <<= Test.instanceCount;
                    b1 = b1;
                }
                Test.instanceCount += i13;
                Test.iFld -= (int)Test.instanceCount;
            }
        } while (--i12 > 0);
        long meth_res = Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i1 + i12 + i13 + i14 + i15 + (b1 ? 1 : 0)
            + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=50, i16=-7, i17=212, i18=4975, i19=-1, i20=16195;
        float f4=2.874F, fArr[]=new float[N];
        short s1=4031;
        double d2=-116.86054;
        byte by1=-90;

        FuzzerUtils.init(fArr, -53.485F);

        fArr[(i >>> 1) % N] = (((14 + (i + -5402427134247151978L)) - Test.instanceCount) <<
            Math.abs(++Test.instanceCount));
        lMeth(f4, 0.180F, Test.iFld);
        for (i16 = 11; i16 < 344; i16++) {
            i18 = 1;
            do {
                Test.dArrFld[i18] += i16;
                for (i19 = i18; i19 < 1; i19++) {
                    s1 = (short)f4;
                    if (true) break;
                    Test.instanceCount = i18;
                    switch (((i19 >>> 1) % 10) + 5) {
                    case 5:
                        i20 = Test.iFld;
                        i17 += (i19 - Test.instanceCount);
                        break;
                    case 6:
                        d2 = Test.instanceCount;
                        break;
                    case 7:
                        i += i19;
                        if (bFld) break;
                        break;
                    case 8:
                        try {
                            Test.iFld = (i17 % i19);
                            i17 = (i17 % -115);
                            i20 = (Test.iFld / iArrFld[i19]);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount = Test.instanceCount;
                        Test.iFld = Test.iFld1;
                        if (bFld) break;
                        break;
                    case 9:
                        by1 = (byte)Test.iFld;
                        break;
                    case 10:
                        switch (((i19 % 10) * 5) + 49) {
                        case 68:
                            Test.instanceCount = i20;
                            i17 = i;
                            switch ((i16 % 2) + 54) {
                            case 54:
                                iArrFld[i19] = i17;
                            case 55:
                                i = Test.iFld1;
                                d2 += -821868601772187069L;
                                break;
                            }
                        case 89:
                            i17 += (int)f4;
                            f4 += Test.iFld;
                            i *= i17;
                            break;
                        case 97:
                            i20 = -138;
                        case 94:
                            Test.iFld1 = Test.iFld;
                            break;
                        case 78:
                            iArrFld = iArrFld;
                            break;
                        case 67:
                            i17 += Test.iFld1;
                            break;
                        case 88:
                            iArrFld[i18 + 1] = 8;
                        case 90:
                            Test.instanceCount = i16;
                            break;
                        case 71:
                            if (bFld) continue;
                            break;
                        case 98:
                            Test.instanceCount = i;
                            break;
                        }
                        break;
                    case 11:
                        iArrFld[i16] -= (int)Test.instanceCount;
                    case 12:
                        Test.instanceCount = i20;
                        break;
                    case 13:
                        Test.iFld1 += (((i19 * Test.instanceCount) + Test.iFld1) - s1);
                    case 14:
                        bFld = bFld;
                        break;
                    default:
                        Test.iFld = Test.iFld2;
                    }
                }
            } while (++i18 < 76);
        }

        FuzzerUtils.out.println("i f4 i16 = " + i + "," + Float.floatToIntBits(f4) + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 s1 d2 = " + i20 + "," + s1 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("by1 fArr = " + by1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld bFld = " + Test.instanceCount + "," + Test.iFld + "," +
            (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld1 Test.iFld2 Test.lArrFld = " + Test.iFld1 + "," + Test.iFld2 + "," +
            FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.dArrFld iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))
            + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
