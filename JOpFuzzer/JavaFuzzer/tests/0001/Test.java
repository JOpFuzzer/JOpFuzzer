// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=35L;
    public static short sFld=16574;
    public static double dFld=-16.99422;
    public static int iFld=-11;
    public static volatile boolean bFld=false;
    public int iFld1=44888;
    public static boolean bArrFld[]=new boolean[N];
    public volatile long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9, boolean b, int i10) {

        int i12=8, i13=-19418, i14=-6, i15=12, iArr2[]=new int[N];
        float f=17.773F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 73);
        FuzzerUtils.init(lArr1, -2150550308L);

        for (int i11 : iArr2) {
            i10 *= i11;
            i10 += (int)183L;
            for (i12 = 1; i12 < 4; ++i12) {
                Test.instanceCount += (((i12 * i9) + i11) - i11);
                lArr1[i12 + 1] *= (long)-107.26786;
            }
            iArr2[(i9 >>> 1) % N] >>>= i13;
            i9 &= i12;
            i11 = (int)Test.instanceCount;
            for (i14 = 1; i14 < 4; i14++) {
                double d1=93.95428;
                i9 *= (int)f;
                i11 -= (int)Test.instanceCount;
                d1 -= i15;
                b = b;
                i15 <<= (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i9 + (b ? 1 : 0) + i10 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
    }

    public static double dMeth(int i3, int i4, int i5) {

        double d=0.111107;
        int i6=56110, i7=-8, i8=-233, i16=-11, i17=202, i18=-4, iArr1[]=new int[N];
        byte by=38;
        boolean b1=false;

        FuzzerUtils.init(iArr1, -11);

        for (d = 5; 144 > d; ++d) {
            by += (byte)(++iArr1[(int)(d + 1)]);
            for (i7 = 1; i7 < 11; ++i7) {
                vMeth1(-11, b1, i4);
                iArr1[(int)(d)] -= i8;
                switch (((i7 % 3) * 5) + 26) {
                case 32:
                    i4 += (int)(-10739L + (i7 * i7));
                case 29:
                    i16 = (int)d;
                    Test.bArrFld[(i3 >>> 1) % N] = true;
                    break;
                case 31:
                    for (i17 = i7; i17 < 2; i17 += 3) {
                        i18 &= -36;
                        by >>= (byte)i8;
                        i8 = Test.iFld;
                        Test.instanceCount = i7;
                        Test.iFld = 49986;
                    }
                    break;
                default:
                    i16 = -4;
                }
            }
        }
        long meth_res = i3 + i4 + i5 + Double.doubleToLongBits(d) + i6 + by + i7 + i8 + (b1 ? 1 : 0) + i16 + i17 + i18
            + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i) {

        int i1=-4, i2=-6, i19=-1, i20=-15874, iArr[]=new int[N];
        float f1=0.874F;
        boolean b2=false;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 120);
        FuzzerUtils.init(lArr, -213L);
        FuzzerUtils.init(sArr, (short)-18087);

        i *= ((Test.sFld--) + i);
        i = (int)(-((Test.dFld - i) - (-(i += i))));
        iArr[(i >>> 1) % N] = (int)(lArr[(i >>> 1) % N]--);
        try {
            for (i1 = 6; i1 < (162 + 400); i1++) {
                dMeth(i1, Test.iFld, -7911);
                Test.iFld = i2;
            }
            Test.sFld -= (short)f1;
            sArr[(Test.iFld >>> 1) % N] = (short)i;
            Test.instanceCount += Test.instanceCount;
            for (i19 = 1; 152 > i19; ++i19) {
                f1 += ((long)i19 ^ (long)Test.instanceCount);
                if (b2) continue;
                f1 += i1;
                Test.instanceCount = -3673;
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            Test.instanceCount *= i19;
        }
        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f1) + i19 + i20 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=-54621, i22=-132, i23=6, i24=-14, i25=0, iArr3[]=new int[N];
        float f2=-2.537F;

        FuzzerUtils.init(iArr3, 117);

        vMeth(-14);
        lArrFld = lArrFld;
        iArrFld[(Test.iFld >>> 1) % N] *= (int)Test.instanceCount;
        for (i21 = 210; i21 > 11; i21 -= 2) {
            i23 = 253;
            while (--i23 > 0) {
                Test.iFld >>= i22;
                f2 += Test.instanceCount;
                Test.sFld += (short)14;
                lArrFld[i23] /= ((long)(Test.dFld) | 1);
                if (Test.bFld) continue;
                for (i24 = 1; i24 < 1; i24++) {
                    f2 = i22;
                    Test.sFld >>= (short)iFld1;
                    Test.sFld -= (short)-6;
                    Test.iFld += (int)Test.instanceCount;
                    byArrFld = byArrFld;
                    if (Test.bFld) continue;
                    iArrFld[i24] -= (int)Test.instanceCount;
                    Test.instanceCount <<= Test.instanceCount;
                    if (true) continue;
                    f2 += i24;
                }
                Test.instanceCount -= i24;
                if (Test.bFld) {
                    f2 *= i25;
                    i25 += (int)Test.instanceCount;
                    Test.bFld = Test.bFld;
                    Test.sFld = (short)i21;
                }
                i22 -= i24;
            }
            iArr3[i21] += iFld1;
            Test.iFld += -102;
        }

        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("f2 i24 i25 = " + Float.floatToIntBits(f2) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iFld Test.bFld iFld1 = " + Test.iFld + "," + (Test.bFld ? 1 : 0) + "," + iFld1);
        FuzzerUtils.out.println("Test.bArrFld lArrFld iArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld) + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("byArrFld = " + FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
