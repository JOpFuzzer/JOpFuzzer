// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2130230992L;
    public static double dFld=27.89389;
    public static volatile boolean bFld=false;
    public static float fArrFld[]=new float[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.1021F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        float f=2.530F;
        int i4=-17509, i5=-21216, i6=61458, iArr[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr, -37558);

        f *= -6753;
        for (i4 = 13; i4 < 301; i4++) {
            short s=-29027;
            switch (((i4 % 9) * 5) + 42) {
            case 58:
                i5 = i5;
                i5 >>= i5;
                Test.instanceCount += (i4 * i4);
                Test.fArrFld[i4 - 1] = i5;
            case 84:
                b = b;
                i5 -= (int)-426185616L;
                if (b) continue;
            case 44:
                iArr[i4] += s;
                i5 = i5;
                break;
            case 46:
                i6 = 1;
                do {
                    iArr[i6 - 1] += 12;
                    Test.dFld *= s;
                } while (++i6 < 6);
                break;
            case 74:
                f += 3513;
                break;
            case 54:
                i5 *= -54570;
                break;
            case 43:
                i5 += (((i4 * i4) + i4) - i4);
                break;
            case 79:
            case 62:
                iArr[i4 + 1] += (int)Test.dFld;
                break;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i4 + i5 + (b ? 1 : 0) + i6 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(long l1, long l2) {

        int i7=-166, i8=-29938, i9=28724, i10=4769, i11=-3, i12=24844, iArr1[]=new int[N];
        byte by=79;
        short s1=26122;
        float f1=-2.55F;

        FuzzerUtils.init(iArr1, -3065);

        vMeth();
        switch (((i7 >>> 1) % 8) + 35) {
        case 35:
            i8 = 1;
            while (++i8 < 200) {
                by += (byte)(i8 ^ l1);
                for (i9 = 1; i9 < 8; ++i9) {
                    i11 = 1;
                    while ((i11 += 3) < 2) {
                        i10 *= i11;
                    }
                    i7 += i11;
                    i10 -= (int)Test.dFld;
                    l2 += (((i9 * i9) + i11) - i11);
                    Test.dFld *= l2;
                    i10 -= i11;
                    s1 += (short)(((i9 * f1) + s1) - f1);
                }
                Test.instanceCount += i8;
                iArr1[i8] += i12;
            }
            break;
        case 36:
            f1 = i10;
        case 37:
            Test.instanceCount &= i10;
            break;
        case 38:
            s1 *= (short)i12;
            break;
        case 39:
            f1 = 3205048702L;
            break;
        case 40:
            i12 += (int)f1;
            break;
        case 41:
            f1 = f1;
            break;
        case 42:
            Test.dFld += i10;
        }
        long meth_res = l1 + l2 + i7 + i8 + by + i9 + i10 + i11 + s1 + Float.floatToIntBits(f1) + i12 +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, int i, int i1) {

        double d=-1.46242;
        int i2=-5562, i3=242, i13=42060, i14=8, i15=-39919, i16=-124, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 13);

        for (d = 1; d < 373; ++d) {
            i3 = 1;
            while (++i3 < 5) {
                float f2=-2.225F;
                i2 = (int)(((i - i) - (10 >> (9 + (Test.instanceCount - i)))) % (iMeth1(l, l) | 1));
                Test.instanceCount = i1;
                f2 = 1L;
                for (i13 = 1; i13 < 1; i13++) {
                    try {
                        iArr2[i3 + 1] = (-2582 % i1);
                        i2 = (iArr2[i3 + 1] / iArr2[i3 + 1]);
                        i2 = (i2 / i2);
                    } catch (ArithmeticException a_e) {}
                }
                for (i15 = 1; i15 < 1; i15 += 3) {
                    iArr2[(int)(d + 1)] *= i16;
                    i += (int)Test.dFld;
                    l <<= l;
                    i2 = (int)f2;
                    iArr2 = iArr2;
                    iArr2 = iArr2;
                    i16 >>= i13;
                }
            }
        }
        long meth_res = l + i + i1 + Double.doubleToLongBits(d) + i2 + i3 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17=-7, i18=4, i19=-153, i20=34103, i21=-13, i23=-5, i24=-14, i25=-144, i26=33312, i27=-12, i28=-5, i29=2,
            iArr3[]=new int[N];
        float f3=0.266F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 12L);
        FuzzerUtils.init(iArr3, -23383);

        lArr[(-12 >>> 1) % N] -= iMeth(Test.instanceCount, i17, i17);
        if (Test.bFld) {
            i17 >>= i17;
            Test.dFld -= 25357;
            for (i18 = 6; i18 < 144; ++i18) {
                for (i20 = 182; i20 > 3; i20 -= 3) {
                    int i22=1;
                    i22 += (-242 + (i20 * i20));
                    f3 += i17;
                    i21 += (i20 * i20);
                    Test.instanceCount += i20;
                    i22 = i19;
                    i19 -= i19;
                    Test.instanceCount = i17;
                    i21 += i20;
                    for (i23 = 4; i23 > 1; i23 -= 3) {
                        short s2=-15561;
                        i24 = i17;
                        dArrFld[i23] = -29476;
                        f3 += Test.instanceCount;
                        i17 >>= 7;
                        s2 += (short)(-10 + (i23 * i23));
                        Test.bFld = Test.bFld;
                    }
                    i25 = 1;
                    while (++i25 < 4) {
                        if (Test.bFld) continue;
                    }
                }
                lArr = FuzzerUtils.long1array(N, (long)770409062L);
                for (i26 = 5; 182 > i26; i26++) {
                    Test.dFld -= Test.instanceCount;
                    for (i28 = 1; 2 > i28; ++i28) {
                        i29 -= i20;
                        i21 = i26;
                        iArr3[i18 - 1] %= (int)(i27 | 1);
                    }
                }
            }
        } else if (false) {
            Test.dFld += i29;
        }

        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 f3 = " + i20 + "," + i21 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 lArr iArr3 = " + i29 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fArrFld dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))
            + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
