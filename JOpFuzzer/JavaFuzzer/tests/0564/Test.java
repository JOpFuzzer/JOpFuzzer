// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-9L;
    public float fFld=-34.838F;
    public static volatile int iFld=-113;
    public static short sFld=-4417;
    public volatile boolean bFld=true;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.984F);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, int i3, long l1) {

        int i4=-42, i5=65217, i6=-53468, i7=-226;
        byte by=74;
        long l2=64833L, lArr[]=new long[N];
        double d2=-35.94388;
        boolean b=true;
        float f1=-1.746F;

        FuzzerUtils.init(lArr, -5817112998402694083L);

        for (i4 = 5; i4 < 224; ++i4) {
            Test.instanceCount += (i4 * by);
            l2 = 1;
            while (++l2 < 7) {
                d2 *= 0.465F;
                lArr[i4] = i5;
                for (i6 = 1; 1 < i6; i6--) {
                    i7 += Test.iFld;
                }
            }
            l1 *= Test.sFld;
            if (b) continue;
            Test.sFld -= (short)Test.iFld;
            d2 -= i6;
        }
        Test.fArrFld[(12 >>> 1) % N] -= 8762625581217094926L;
        i5 -= by;
        i3 *= (int)f1;
        i3 = Test.iFld;
        vMeth1_check_sum += l + i3 + l1 + i4 + i5 + by + l2 + Double.doubleToLongBits(d2) + i6 + i7 + (b ? 1 : 0) +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        int i8=-244, i9=14, iArr2[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 6);
        FuzzerUtils.init(lArr1, -6L);

        vMeth1(Test.instanceCount, Test.iFld, Test.instanceCount);
        for (i8 = 3; i8 < 273; i8++) {
            iArr2[i8] = (int)-7902L;
            Test.iFld += (((i8 * i8) + Test.iFld) - Test.instanceCount);
            lArr1[i8 - 1] = Test.instanceCount;
            i9 %= (int)(i9 | 1);
        }
        i9 = i9;
        vMeth_check_sum += i8 + i9 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
    }

    public boolean bMeth() {

        int i10=140, i11=-2901, i12=7, i13=37509, i14=-125, i15=-7240, iArr1[]=new int[N];
        byte by1=118;
        boolean b1=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -47601);
        FuzzerUtils.init(dArr, 0.35382);

        Test.iFld -= (-iArr1[(Test.iFld >>> 1) % N]);
        fFld += Test.iFld;
        vMeth();
        i10 = 1;
        do {
            if (b1) {
                for (i11 = i10; i11 < 7; ++i11) {
                    Test.iFld = Test.sFld;
                    dArr = FuzzerUtils.double1array(N, (double)-117.84606);
                    Test.instanceCount += (((i11 * i13) + Test.instanceCount) - i10);
                    iArr1[i11] = (int)Test.instanceCount;
                    i13 += (((i11 * i12) + Test.instanceCount) - i11);
                    for (i14 = 1; i14 < 1; i14++) {
                        iArr1[i11 - 1] = i12;
                        i15 *= by1;
                    }
                    i12 += (i11 * i11);
                }
                return ((int)(i10 + i11 + i12 + i13 + i14 + i15 + by1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)))) % 2 > 0;
            } else if (b1) {
                iArr1[i10 - 1] += i14;
            } else {
                Test.fArrFld = FuzzerUtils.float1array(N, (float)0.982F);
            }
        } while (++i10 < 215);
        long meth_res = i10 + i11 + i12 + i13 + i14 + i15 + by1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        double d=-103.88122, d3=-69.35467, d4=71.73567, d5=1.92602;
        int i=-42, i1=40321, i2=63535, i16=83, i17=-38624, i18=109, i19=65, i20=-223, i21=59731, iArr[]=new int[N];
        float f=-1.558F;
        byte by2=40;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(iArr, -26964);
        FuzzerUtils.init(lArr2, 12L);

        for (d = 14; 281 > d; ++d) {
            try {
                i = (i / 44237);
                i = (iArr[(int)(d + 1)] / 20);
                i = (-638048912 % i);
            } catch (ArithmeticException a_e) {}
            f = 1;
            do {
                double d1=2.84819;
                i = (int)(-(-(Test.instanceCount % (i | 1))));
                i += (int)(f * Test.instanceCount);
                try {
                    i = (-1295413947 / i);
                    i = (i % iArr[(int)(d - 1)]);
                    i = (iArr[(int)(d)] / 14);
                } catch (ArithmeticException a_e) {}
                d1 = (-Math.min(iArr[(int)(d + 1)]++, i));
                i *= (iArr[(int)(f + 1)] >>= (++iArr[(int)(f + 1)]));
            } while (++f < 94);
            for (i1 = 5; i1 < 94; i1++) {
                Test.instanceCount += (((i1 * Test.instanceCount) + i2) - i);
            }
            i = i;
        }
        try {
            if (bMeth()) {
                fFld += (i2 + (Test.instanceCount + i));
            }
            for (d3 = 212; d3 > 12; --d3) {
                for (d4 = 3; d4 < 126; ++d4) {
                    i = (int)fFld;
                    for (i18 = 2; i18 > 1; i18 -= 2) {
                        iArr[i18 + 1] = Test.iFld;
                    }
                    for (i20 = 2; i20 > 1; --i20) {
                        i2 += (i20 | (long)fFld);
                        if (bFld) {
                            Test.instanceCount = by2;
                        } else if (bFld) {
                            try {
                                iArr[i20 + 1] = (Test.iFld / -1760);
                                i19 = (iArr[(int)(d4 - 1)] / -87);
                                i21 = (i1 / i17);
                            } catch (ArithmeticException a_e) {}
                            i17 = i17;
                            iArr[i20 - 1] = i17;
                            Test.instanceCount >>= i20;
                        }
                        lArr2[i20 + 1][i20 - 1] = Test.iFld;
                    }
                    lArr2[(int)(d3 - 1)][(int)(d4)] = 23575;
                }
                d5 = i19;
            }
        }
        catch (NullPointerException exc1) {
            i19 -= i20;
        }

        FuzzerUtils.out.println("d i f = " + Double.doubleToLongBits(d) + "," + i + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i1 i2 d3 = " + i1 + "," + i2 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i16 d4 i17 = " + i16 + "," + Double.doubleToLongBits(d4) + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 by2 d5 = " + i21 + "," + by2 + "," + Double.doubleToLongBits(d5));
        FuzzerUtils.out.println("iArr lArr2 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld bFld Test.fArrFld = " + Test.sFld + "," + (bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
