// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-41649L;
    public static volatile int iFld=6;
    public static volatile float fFld=0.987F;
    public static double dFld=32.131008;
    public static float fFld1=59.400F;
    public static volatile double dFld1=-2.69364;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 172L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=234, i4=5, i5=-29272, i6=-38033, i7=9591, i8=46;
        boolean b=false;
        double d=0.76914;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -1.262F);

        Test.iFld = Test.iFld;
        fArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = Test.instanceCount;
        for (i3 = 10; i3 < 228; ++i3) {
            if (b) continue;
            for (i5 = 1; i5 < 7; i5 += 2) {
                fArr[i3][i3] -= Test.fFld;
                i6 += (((i5 * i5) + Test.iFld) - i3);
                switch (((i5 >>> 1) % 1) + 100) {
                case 100:
                    Test.iFld <<= i4;
                }
                for (i7 = 1; i7 < 3; i7++) {
                    d -= Test.fFld;
                    Test.fFld *= i6;
                    i4 += (i7 * i7);
                    Test.iFld = i7;
                    i6 = (int)Test.instanceCount;
                }
            }
        }
        vMeth2_check_sum += i3 + i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(float f) {

        int i9=-13, i10=-36783, iArr1[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr1, 243);

        if (b1) {
            Test.instanceCount ^= iArr1[(Test.iFld >>> 1) % N];
            vMeth2();
            Test.iFld -= Test.iFld;
            i9 = 1;
            do {
                Test.iFld += Test.iFld;
                if (Test.iFld != 0) {
                    vMeth1_check_sum += Float.floatToIntBits(f) + i9 + i10 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                iArr1[i9] <<= Test.iFld;
                Test.iFld -= (int)Test.dFld;
                i10 *= i9;
                if (b1) {
                    switch ((i9 % 5) * 5) {
                    case 3:
                        i10 <<= i9;
                    case 23:
                    case 12:
                        Test.iFld = i10;
                        b1 = b1;
                        break;
                    case 25:
                        i10 += -13969;
                        break;
                    case 10:
                        iArr1[i9] *= Test.iFld;
                        break;
                    }
                } else if (b1) {
                    Test.lArrFld[i9 - 1] = Test.iFld;
                } else if (b1) {
                    Test.fFld1 = i9;
                } else {
                    Test.instanceCount += i9;
                }
            } while (++i9 < 311);
        } else if (b1) {
            Test.instanceCount = 10;
        } else {
            Test.iFld >>= (int)Test.instanceCount;
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i9 + i10 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i2) {


        vMeth1(Test.fFld);
        vMeth_check_sum += i2;
    }

    public void mainTest(String[] strArr1) {

        int i=-214, i1=-240, i11=94, i12=-249, i13=11, i14=12, i15=45686, i16=-135, i17=-57215, iArr[]=new int[N];
        short s=-20316, sArr[][]=new short[N][N];
        boolean b2=true;

        FuzzerUtils.init(iArr, -168);
        FuzzerUtils.init(sArr, (short)10232);

        for (i = 6; i < 252; ++i) {
            try {
                i1 = (61057 / i);
                iArr[i] = (i / i);
                iArr[i + 1] = (-958900985 / iArr[i - 1]);
            } catch (ArithmeticException a_e) {}
            vMeth(Test.iFld);
            for (i11 = 5; i11 < 102; ++i11) {
                Test.iFld >>= i12;
                try {
                    Test.iFld = (i12 / 99);
                    i12 = (-217 / i11);
                    i1 = (i / i1);
                } catch (ArithmeticException a_e) {}
                i12 += i11;
            }
            for (i13 = 4; 102 > i13; i13++) {
                switch ((i % 1) + 102) {
                case 102:
                }
                i15 = 1;
                while (++i15 < 2) {
                    Test.iFld = i12;
                    Test.iFld = i;
                    i14 >>= i11;
                    Test.fFld += (float)Test.dFld;
                    Test.iFld *= (int)Test.dFld;
                    i12 = (int)Test.fFld;
                    iArr[i13] = i11;
                    i12 += (i15 * i12);
                    i1 = Test.iFld;
                    i1 += (int)Test.dFld1;
                }
            }
            i12 = i14;
            s -= (short)Test.dFld;
            Test.instanceCount /= (Test.instanceCount | 1);
            for (i16 = 5; 102 > i16; ++i16) {
                sArr[i16][i16 - 1] -= (short)i11;
                i1 += (int)Test.instanceCount;
                iArr[i + 1] = (int)31246L;
                Test.fFld1 += i16;
            }
            Test.iFld = (int)Test.dFld;
        }
        b2 = b2;

        FuzzerUtils.out.println("i i1 i11 = " + i + "," + i1 + "," + i11);
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 s i16 = " + i15 + "," + s + "," + i16);
        FuzzerUtils.out.println("i17 b2 iArr = " + i17 + "," + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.fFld1 Test.dFld1 = " + Double.doubleToLongBits(Test.dFld) + "," +
            Float.floatToIntBits(Test.fFld1) + "," + Double.doubleToLongBits(Test.dFld1));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
