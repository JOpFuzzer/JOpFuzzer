// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2032125375L;
    public static byte byFld=-105;
    public static float fFld=-101.275F;
    public double dFld=10.51645;
    public static volatile int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f, int i7) {

        int i8=-14, i9=62375, i10=-861, i11=-12, i12=-3, i13=-19317;
        short s=20407, sArr[]=new short[N];
        boolean b=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.46599);
        FuzzerUtils.init(sArr, (short)2054);

        for (i8 = 4; i8 < 208; i8++) {
            i7 = -102;
            i9 += (((i8 * i9) + i9) - s);
            i9 += (i8 - i8);
            Test.byFld += (byte)i8;
        }
        for (i10 = 8; i10 < 269; ++i10) {
            dArr[i10 - 1] = Test.instanceCount;
            i7 += i10;
            i9 += (int)-2.317F;
            Test.instanceCount >>= Test.instanceCount;
            for (i12 = 1; i12 < 6; i12++) {
                sArr[i10] = (short)i12;
                b = false;
                f *= i9;
                f = i11;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i7 + i8 + i9 + s + i10 + i11 + i12 + i13 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth(int i4, double d) {

        int i5=4, i6=206, i14=224, i15=-203, i16=58, i17=2, i18=64;
        float f1=-87.219F;
        boolean b1=true;
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)4601);

        for (i5 = 8; i5 < 228; i5++) {
            vMeth(f1, -108);
            for (i14 = 7; i14 > 1; --i14) {
                Test.instanceCount *= Test.instanceCount;
                Test.instanceCount = -7;
                Test.iArrFld[i14 - 1] += i14;
                for (i16 = i5; i16 < 2; ++i16) {
                    i18 >>= i14;
                    Test.byFld += (byte)i15;
                    sArr1[i14] += (short)i14;
                    switch ((i5 % 2) + 20) {
                    case 20:
                        i15 += (-13 + (i16 * i16));
                        if (b1) break;
                        i4 |= (int)Test.instanceCount;
                        break;
                    case 21:
                    }
                    i18 = i17;
                }
            }
        }
        long meth_res = i4 + Double.doubleToLongBits(d) + i5 + i6 + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 +
            i18 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(sArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth() {

        int i2=-10, i3=14236, i19=143, i20=-22400, iArr[]=new int[N];
        boolean bArr[]=new boolean[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(iArr, 33315);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr1, 2.115536);

        for (int i1 : iArr) {
            i2 = 1;
            do {
                i3 = 1;
                while ((i3 -= 3) > 0) {
                    i1 += (i3 | Test.instanceCount);
                    bArr = (bArr = (bArr = (bArr = FuzzerUtils.boolean1array(N, (boolean)true))));
                    Test.byFld += (byte)(i3 + i3);
                    i1 = ((iMeth(i3, 0.17077) * i2) - i3);
                    Test.instanceCount += (((i3 * Test.instanceCount) + i2) - Test.instanceCount);
                    Test.fFld = i3;
                }
                i1 += i2;
                dArr1[i2 + 1] -= 7;
                try {
                    i1 = (-1997204894 % i2);
                    iArr[i2 + 1] = (4223 % Test.iArrFld[i2]);
                    Test.iArrFld[i2] = (i2 / -33576);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (((i2 * Test.fFld) + Test.fFld) - i2);
            } while (++i2 < 4);
        }
        i19 -= (int)Test.instanceCount;
        i20 += i19;
        long meth_res = i2 + i3 + i19 + i20 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=30867, i21=12, i22=86, i23=-226, i24=3, i25=51667, i26=2121, i27=184, i28=-15536, i29=11730, i30=-14,
            iArr1[]=new int[N], iArr2[]=new int[N];
        boolean b2=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 23431);
        FuzzerUtils.init(iArr2, -17281);
        FuzzerUtils.init(fArr, 2.833F);

        i = (int)fMeth();
        for (i21 = 7; i21 < 168; i21++) {
            Test.fFld += (i21 * i21);
            i22 += i22;
            Test.fFld = i22;
            i += (((i21 * i21) + i22) - Test.instanceCount);
        }
        Test.instanceCount <<= i;
        Test.iArrFld[(i21 >>> 1) % N] -= (int)dFld;
        Test.fFld += Test.instanceCount;
        i &= (int)Test.instanceCount;
        for (i23 = 7; i23 < 139; ++i23) {
            i22 += i24;
            switch (((i24 >>> 1) % 2) + 87) {
            case 87:
            case 88:
                iArr1[i23 - 1] >>= i;
                break;
            default:
                iArr1[i23 - 1] >>= (int)Test.instanceCount;
                i22 = (int)Test.instanceCount;
                for (i25 = 10; i25 < 190; i25++) {
                    b2 = b2;
                    for (i27 = 2; i27 > 1; i27 -= 2) {
                        i24 += i25;
                        Test.instanceCount += i22;
                        iArr1[i25 - 1] ^= i22;
                    }
                    Test.fFld -= Test.fFld;
                    try {
                        i = (i27 / i27);
                        i26 = (43603 % i21);
                        i26 = (i26 / iArr2[i25]);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += (i25 - i28);
                    fArr[i23] = i27;
                    for (i29 = 1; i29 < 2; i29++) {
                        bArrFld[i25] = b2;
                        i22 += (int)0L;
                        dFld -= dFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i21 i22 = " + i + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 b2 i27 = " + i26 + "," + (b2 ? 1 : 0) + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("iArr1 iArr2 fArr = " + FuzzerUtils.checkSum(iArr1) + "," + FuzzerUtils.checkSum(iArr2)
            + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("dFld Test.iArrFld bArrFld = " + Double.doubleToLongBits(dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
