// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=18856L;
    public static byte byFld=82;
    public static int iFld=-48457;
    public double dFld=-5.70410;
    public int iFld1=-45;
    public long lArrFld[]=new long[N];
    public volatile float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s) {

        int i7=241, i8=254, i9=-7, i10=-141, i11=-163, i12=19059, i13=-45, iArr[]=new int[N];
        byte by=-95;
        long l=-4L, l1=-11L;
        double d1=2.47973;
        float f=2.861F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.472F);
        FuzzerUtils.init(iArr, -50084);

        for (i7 = 2; i7 < 274; ++i7) {
            by = (byte)i8;
        }
        for (l = 16; l < 262; ++l) {
            i8 += (int)l;
            switch (((i8 >>> 1) % 2) + 36) {
            case 36:
                for (i10 = (int)(l); i10 < 7; i10++) {
                    i12 *= -9;
                    s ^= (short)i8;
                    switch (((i10 % 6) * 5) + 41) {
                    case 52:
                        i13 = 1;
                        while (++i13 < 1) {
                            switch (((i10 >>> 1) % 1) + 44) {
                            case 44:
                            default:
                                i8 = (int)l1;
                                i12 += i10;
                                d1 = i10;
                            }
                            i8 -= i7;
                        }
                        break;
                    case 43:
                        i8 = (int)l1;
                        break;
                    case 65:
                        i9 -= i8;
                        break;
                    case 50:
                        fArr[(int)(l + 1)] = i9;
                        break;
                    case 54:
                        i12 += (i10 + i7);
                    case 55:
                        l1 += (((i10 * i9) + f) - i8);
                        break;
                    default:
                        try {
                            i12 = (i9 / i8);
                            i9 = (-722540455 / i7);
                            iArr[(int)(l)] = (i9 % 488485001);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            case 37:
                i9 *= (int)f;
            default:
                i12 -= i7;
            }
        }
        vMeth1_check_sum += s + i7 + i8 + by + l + i9 + i10 + i11 + i12 + i13 + l1 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i3, int i4) {

        int i5=-22805, i6=-13029, i14=-73, i15=191, i16=10302, i17=40, iArr1[]=new int[N];
        short s1=30471;
        double d2=-59.38940;
        float f1=-1.910F;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(iArr1, -9);

        for (i5 = 302; 12 < i5; i5--) {
            vMeth1(s1);
            for (i14 = 6; i14 > 1; --i14) {
                Test.instanceCount = 29;
                i15 -= i4;
                switch ((i14 % 8) + 105) {
                case 105:
                    lArr[i14] = i6;
                    Test.byFld = (byte)Test.instanceCount;
                    d2 *= f1;
                    i6 = (int)f1;
                case 106:
                    for (i16 = 2; i16 > i5; i16--) {
                        i17 = s1;
                        try {
                            i15 = (iArr1[i14 + 1] % i6);
                            i6 = (-1777280957 % i5);
                            i15 = (i17 % i3);
                        } catch (ArithmeticException a_e) {}
                    }
                    f1 += (((i14 * i6) + i4) - i4);
                    try {
                        iArr1[(i16 >>> 1) % N] = (1808003516 % i6);
                        i17 = (iArr1[i5 + 1] / i16);
                        i17 = (46196 % i17);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 107:
                    if (b) continue;
                    break;
                case 108:
                    if (b) continue;
                    break;
                case 109:
                    i6 >>= (int)Test.instanceCount;
                    break;
                case 110:
                    Test.instanceCount += (((i14 * Test.iFld) + f1) - f1);
                    break;
                case 111:
                    lArr[i5 + 1] *= (long)f1;
                case 112:
                    Test.instanceCount *= i4;
                    break;
                default:
                    i6 |= (int)3L;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + s1 + i14 + i15 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f1)
            + i16 + i17 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(int i2) {


        vMeth(i2, i2);
        vSmallMeth_check_sum += i2;
    }

    public void mainTest(String[] strArr1) {

        int i=9, i1=-49, i18=48, i19=-171, i20=-196, iArr2[]=new int[N];
        double d=100.22719;
        boolean b1=false;
        float f2=126.674F;

        FuzzerUtils.init(iArr2, 0);

        lArrFld[(i >>> 1) % N] += (i--);
        i = (int)(((-120 * (62818 * Test.instanceCount)) - -9) - (fArrFld[(i >>> 1) % N]++));
        for (d = 153; d > 2; --d) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(-209);
            for (i18 = (int)(d); i18 < 166; i18 += 2) {
                i20 = 1;
                do {
                    dFld = i19;
                    iArr2[(int)(d)] = -8;
                    try {
                        i = (-2738 / i18);
                        i1 = (-81 % i19);
                        Test.iFld = (i % 6482);
                    } catch (ArithmeticException a_e) {}
                    lArrFld[i20 - 1] = i;
                    b1 = b1;
                    switch ((((i1 >>> 1) % 6) * 5) + 31) {
                    case 33:
                        f2 *= Test.iFld;
                        dFld += Test.iFld;
                        f2 += i20;
                        i /= (int)(iFld1 | 1);
                    case 56:
                        Test.instanceCount = Test.instanceCount;
                        Test.iFld *= i19;
                        if (b1) break;
                        Test.instanceCount += Test.instanceCount;
                        break;
                    case 38:
                        iFld1 += i20;
                        break;
                    case 60:
                        i1 += i20;
                        lArrFld[(int)(d + 1)] = i19;
                        lArrFld[(int)(d - 1)] = iFld1;
                        break;
                    case 35:
                        iArr2 = iArr2;
                        break;
                    case 41:
                        Test.iFld = (int)Test.instanceCount;
                        i -= i1;
                        Test.byFld -= (byte)-104;
                        iArrFld[i20 + 1] *= (int)Test.instanceCount;
                        break;
                    default:
                        f2 *= f2;
                    }
                } while (++i20 < 1);
            }
        }

        FuzzerUtils.out.println("i d i1 = " + i + "," + Double.doubleToLongBits(d) + "," + i1);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("b1 f2 iArr2 = " + (b1 ? 1 : 0) + "," + Float.floatToIntBits(f2) + "," +
            FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.iFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("dFld iFld1 lArrFld = " + Double.doubleToLongBits(dFld) + "," + iFld1 + "," +
            FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("fArrFld iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
