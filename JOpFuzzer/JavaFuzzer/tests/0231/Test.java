// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=4791737434818281137L;
    public static short sFld=14644;
    public double dFld=-1.52645;
    public static boolean bFld=false;
    public static int iFld=-25567;
    public static long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -365220390L);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9) {

        int i10=17965, i11=-9, i12=-94, i13=9, i14=-13;
        byte by=-104;

        i9 = i9;
        i10 = 1;
        while (++i10 < 291) {
            for (i11 = 1; 6 > i11; i11++) {
                by += (byte)-56;
                Test.instanceCount -= Test.instanceCount;
                Test.instanceCount += (long)(0.286F + (i11 * i11));
                Test.sFld += (short)(i11 * i11);
                i9 += (i11 + Test.instanceCount);
                Test.instanceCount += (i11 ^ Test.instanceCount);
            }
            for (i13 = 1; i13 < 6; ++i13) {
                i9 = (int)Test.instanceCount;
                Test.sFld += (short)i13;
                Test.instanceCount >>= -43979;
                i12 *= i12;
                i9 -= (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i9 + i10 + i11 + i12 + by + i13 + i14;
    }

    public static float fMeth(int i7) {

        int i8=53, i15=11, i16=12, iArr1[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr1, -10);

        i8 = 1;
        do {
            float f1=-1.226F;
            if (i7 != 0) {
            }
            vMeth1(i7);
            i7 -= (int)f1;
        } while (++i8 < 327);
        i7 >>= i7;
        for (i15 = 3; 260 > i15; ++i15) {
            i7 = Test.sFld;
            if (b1) break;
        }
        iArr1[(i15 >>> 1) % N] = 23989;
        Test.instanceCount = -8603257884754269478L;
        i16 >>= (int)Test.instanceCount;
        Test.lArrFld[(i16 >>> 1) % N] *= i16;
        long meth_res = i7 + i8 + i15 + i16 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(long l, int i2) {

        int i3=225, i4=17818, i5=-239, i6=-211, iArr[]=new int[N];
        double d=-11.14608;
        short s=-14419;
        float f=-80.401F;
        boolean b=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(byArr, (byte)43);

        for (i3 = 8; i3 < 270; i3++) {
            for (d = 1; d < 6; d++) {
                i5 += (int)d;
                i4 >>>= iArr[(int)(d)];
            }
            Test.lArrFld[i3] *= (-i3);
            Test.instanceCount += ((--i4) % (Test.instanceCount | 1));
            iArr[i3 - 1] -= i3;
            i2 = -8;
            i6 = 1;
            do {
                l = (((Test.instanceCount / (i2 | 1)) - (l + i5)) + s);
                f = (i6 << i2);
                b = b;
                if ((b = (b = (b = b))) && (Integer.reverseBytes(i2) >= byArr[i6])) break;
                i5 += (((i6 * i5) + i4) - i2);
                f = fMeth(i6);
            } while (++i6 < 6);
        }
        vMeth_check_sum += l + i2 + i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 + s + Float.floatToIntBits(f) + (b ?
            1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i1=-21559, i17=-1, i18=-1, i19=-215, i20=49118, i21=-188, iArr2[]=new int[N];
        float f2=-12.837F;
        double d1=48.125954;
        byte by1=24;

        FuzzerUtils.init(iArr2, 7);

        for (i = 8; 182 > i; i++) {
            vMeth(Test.instanceCount, i);
            i1 -= i;
            f2 = 30;
            dFld = i1;
        }
        d1 = 1;
        while (++d1 < 187) {
            if (true) {
                dFld = i1;
                for (i17 = 6; i17 < 134; ++i17) {
                    Test.sFld = (short)-12;
                    dFld -= i;
                    Test.bFld = Test.bFld;
                    dArrFld[i17 - 1] -= f2;
                    i1 -= i17;
                }
                Test.bFld = Test.bFld;
            } else if (Test.bFld) {
                by1 *= (byte)Test.instanceCount;
                if (Test.bFld) break;
                try {
                    i1 = (101 % i18);
                    i1 = (167 / i17);
                    i18 = (-81 / i18);
                } catch (ArithmeticException a_e) {}
                dFld -= i;
            } else if (Test.bFld) {
                for (i19 = 134; i19 > 3; i19 -= 2) {
                    Test.sFld -= (short)11569;
                    f2 -= -4;
                    Test.instanceCount *= i19;
                    iArr2 = FuzzerUtils.int1array(N, (int)-13);
                    switch ((i19 % 10) + 87) {
                    case 87:
                        Test.iFld = (int)Test.instanceCount;
                        i21 = 1;
                        while (++i21 < 3) {
                            iArr2 = iArr2;
                            i18 *= (int)21459L;
                            i20 += i20;
                        }
                        break;
                    case 88:
                        Test.instanceCount = -254;
                        break;
                    case 89:
                        i20 = i17;
                        break;
                    case 90:
                        Test.iFld >>= i17;
                        break;
                    case 91:
                        iArr2[i19] = 36434;
                        break;
                    case 92:
                        if (Test.bFld) break;
                        break;
                    case 93:
                    case 94:
                        i1 += i19;
                        break;
                    case 95:
                        Test.instanceCount = (long)2.327F;
                        break;
                    case 96:
                        f2 += i17;
                    default:
                        Test.sFld += (short)(((i19 * i19) + Test.instanceCount) - i18);
                    }
                }
            } else {
                i20 = (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i i1 f2 = " + i + "," + i1 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("d1 i17 i18 = " + Double.doubleToLongBits(d1) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("by1 i19 i20 = " + by1 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 iArr2 = " + i21 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld dFld = " + Test.instanceCount + "," + Test.sFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.bFld Test.iFld Test.lArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
