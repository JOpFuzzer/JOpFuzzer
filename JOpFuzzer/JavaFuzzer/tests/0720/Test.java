// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-252L;
    public static int iFld=11;
    public double dFld=-2.60426;
    public static volatile boolean bFld=false;
    public static volatile float fFld=53.721F;
    public static float fFld1=-39.250F;
    public volatile int iArrFld[]=new int[N];

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l1, long l2, int i5) {

        double d1=-2.99140, dArr[]=new double[N];
        int i6=-13, i7=2, i8=42486, i9=-7, i10=0, i11=69, iArr[]=new int[N];
        boolean b1=false;
        float f=107.45F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, -1.118543);
        FuzzerUtils.init(iArr, -78);
        FuzzerUtils.init(lArr1, -245L);

        Test.iFld ^= (int)-50233L;
        dArr[(Test.iFld >>> 1) % N] = d1;
        i6 = 1;
        do {
            i5 *= i5;
            for (i7 = i6; 4 > i7; ++i7) {
                for (i9 = 1; 1 > i9; ++i9) {
                    i8 += i9;
                    i10 += (i9 * i9);
                    switch (((i5 >>> 1) % 10) + 118) {
                    case 118:
                        if (b1) break;
                        switch ((i7 % 8) + 113) {
                        case 113:
                            i11 += i9;
                            i10 %= (int)(0 | 1);
                            break;
                        case 114:
                            Test.instanceCount <<= Test.instanceCount;
                            l2 *= 13L;
                        case 115:
                        case 116:
                            i11 -= i6;
                            break;
                        case 117:
                            Test.iFld = i11;
                            break;
                        case 118:
                            i5 *= Test.iFld;
                            break;
                        case 119:
                            i8 += (((i9 * i10) + i11) - i5);
                            break;
                        case 120:
                            iArr[i7] = i6;
                        }
                        break;
                    case 119:
                        i10 += i9;
                        break;
                    case 120:
                        i5 -= (int)d1;
                        break;
                    case 121:
                        i5 += (i9 | i10);
                        break;
                    case 122:
                        i5 += (i9 * i9);
                        break;
                    case 123:
                        lArr1[i6 + 1] -= i9;
                        break;
                    case 124:
                        f += (-102 + (i9 * i9));
                        break;
                    case 125:
                    case 126:
                        iArr[i9] *= i9;
                    case 127:
                        Test.instanceCount += (long)f;
                        break;
                    default:
                        i10 = (int)3085118064L;
                    }
                }
            }
        } while (++i6 < 390);
        long meth_res = l1 + l2 + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + i10 + (b1 ? 1 : 0) + i11 +
            Float.floatToIntBits(f) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr)
            + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        int i1=-6, i2=13, i3=73, i4=-19127, i12=-94, i13=216, i14=-51965, i15=19448, i16=3, iArr1[]=new int[N];
        float f1=0.160F;

        FuzzerUtils.init(iArr1, -13);

        for (i1 = 9; i1 < 269; ++i1) {
            for (i3 = 1; 6 > i3; i3++) {
                i2 = (iMeth(Test.instanceCount, Test.instanceCount, i2) * Test.iFld);
            }
            i4 = i;
            i12 = 1;
            do {
                Test.iFld = i3;
            } while (++i12 < 6);
            i2 -= (int)f1;
            for (i13 = 6; i13 > 1; --i13) {
                try {
                    i = (i2 % iArr1[i1]);
                    iArr1[i13 + 1] = (i1 / 156);
                    Test.iFld = (-4206 % i2);
                } catch (ArithmeticException a_e) {}
                for (i15 = 1; i15 < 2; ++i15) {
                    iArr1[i15 - 1] *= i12;
                    switch (((i13 % 2) * 5) + 43) {
                    case 50:
                        Test.iFld += 197;
                        Test.instanceCount >>= i2;
                        Test.iFld += i;
                    case 52:
                        i14 += (i15 * i13);
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i12 + Float.floatToIntBits(f1) + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static boolean bMeth(long l) {

        double d=0.118367;
        int i18=9, iArr2[]=new int[N];
        short sArr[]=new short[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(sArr, (short)-14002);
        FuzzerUtils.init(iArr2, 1);
        FuzzerUtils.init(lArr2, -4502688815130531058L);

        Test.iFld = (int)d;
        vMeth(Test.iFld);
        l = 3272236796L;
        sArr[(42423 >>> 1) % N] = (short)10;
        Test.bFld = Test.bFld;
        Test.iFld <<= Test.iFld;
        for (int i17 : iArr2) {
            i17 = (int)l;
            d *= l;
            i18 = 1;
            do {
                i17 = i17;
                l = i18;
                Test.instanceCount = 227;
                lArr2[i18 - 1] %= (Test.instanceCount | 1);
            } while (++i18 < 4);
            i17 = Test.iFld;
        }
        long meth_res = l + Double.doubleToLongBits(d) + i18 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr2)
            + FuzzerUtils.checkSum(lArr2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        boolean b=true;
        int i19=-239, i20=-2045, i21=62760, i22=-5, i23=16, i24=7, i25=-210, i26=-44180, i27=57;
        byte by=115;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1645300223L);

        iArrFld[(Test.iFld >>> 1) % N] -= (int)((++lArr[(Test.iFld >>> 1) % N]) - (++dFld));
        b = bMeth(Test.instanceCount);
        for (i19 = 222; i19 > 13; --i19) {
            Test.instanceCount = i20;
        }
        i20 |= -35225;
        Test.iFld += (int)Test.instanceCount;
        try {
            for (i21 = 2; i21 < 190; i21++) {
                for (i23 = 4; i23 < 133; ++i23) {
                    Test.instanceCount = i19;
                    if (Test.bFld) {
                        Test.iFld = (int)Test.instanceCount;
                        if (false) continue;
                    } else if (Test.bFld) {
                        Test.instanceCount += (-9 + (i23 * i23));
                        switch ((i21 % 7) + 57) {
                        case 57:
                            switch (((i21 % 4) * 5) + 120) {
                            case 133:
                                Test.iFld *= i22;
                                i25 = 1;
                                do {
                                    if (false) continue;
                                    i20 = (int)Test.instanceCount;
                                    Test.instanceCount += (i25 * i25);
                                    Test.fFld += (-5 + (i25 * i25));
                                } while (++i25 < 2);
                            case 139:
                                for (i26 = 1; i26 < 2; ++i26) {
                                    by += (byte)Test.instanceCount;
                                    try {
                                        i20 = (i21 / -34191);
                                        i20 = (-1860553168 / i25);
                                        i27 = (iArrFld[i26 - 1] / -207);
                                    } catch (ArithmeticException a_e) {}
                                    i20 -= -171;
                                    switch (((i26 >>> 1) % 5) + 81) {
                                    case 81:
                                        i22 <<= (int)-107L;
                                        if (Test.bFld) break;
                                        Test.iFld *= (int)Test.fFld;
                                    case 82:
                                        i27 = i21;
                                    case 83:
                                        dFld = i26;
                                        break;
                                    case 84:
                                        iArrFld[i21 - 1] -= -51988;
                                        break;
                                    case 85:
                                        lArr[i21] = 24506;
                                        break;
                                    }
                                }
                                break;
                            case 131:
                                Test.instanceCount >>= i24;
                            case 135:
                                i22 -= i27;
                                break;
                            }
                            break;
                        case 58:
                            Test.instanceCount = i22;
                            break;
                        case 59:
                        case 60:
                            i22 *= -8;
                            break;
                        case 61:
                            i24 += (((i23 * i26) + i25) - i25);
                            break;
                        case 62:
                            Test.fFld1 += i19;
                            break;
                        case 63:
                            Test.instanceCount *= (long)Test.fFld;
                            break;
                        default:
                            dFld = Test.fFld1;
                        }
                    } else {
                        Test.iFld &= i25;
                    }
                }
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            Test.iFld = (int)Test.fFld1;
        }
        finally {
            iArrFld[(115 >>> 1) % N] = (int)Test.instanceCount;
        }

        FuzzerUtils.out.println("b i19 i20 = " + (b ? 1 : 0) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 by lArr = " + i27 + "," + by + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld dFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.bFld Test.fFld Test.fFld1 = " + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld) + "," + Float.floatToIntBits(Test.fFld1));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
