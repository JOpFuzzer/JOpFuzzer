// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1233904184766527530L;
    public static int iFld=0;
    public static double dFld=-62.90742;
    public byte byFld=0;
    public float fFld=-99.679F;
    public int iFld1=4;
    public static int iFld2=-186;
    public static int iFld3=-14;
    public int iFld4=-17;
    public static short sFld=-864;
    public static boolean bFld=true;
    public float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];
    public static short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -16884);
        FuzzerUtils.init(Test.sArrFld, (short)30023);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public void vMeth1() {


        Test.dFld = Test.iFld;
        vMeth1_check_sum += 0;
    }

    public void vMeth2(int i1, int i2, double d2) {

        float f=2.807F;
        int i3=-30570, i4=-59, i5=40760, i6=-33, i7=7;
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i1 = (int)(++Test.instanceCount);
        i1 = (++i2);
        for (f = 4; f < 275; ++f) {
            vMeth1();
            for (i4 = (int)(f); i4 < 6; ++i4) {
                i2 -= i4;
                i2 *= Test.iFld;
                i2 -= i2;
                Test.instanceCount = 786834938L;
                Test.iFld |= (int)35872L;
                byFld = (byte)-121;
            }
            for (i6 = 1; i6 < 6; i6++) {
                bArr = bArr;
                fFld += 1.355F;
            }
            bArr[(int)(f)] = b;
        }
        vMeth2_check_sum += i1 + i2 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 +
            (b ? 1 : 0) + FuzzerUtils.checkSum(bArr);
    }

    public void vMeth(long l) {

        double d=-104.118911, d1=1.11885;
        int i=106, iArr[]=new int[N];
        short s=-5207;

        FuzzerUtils.init(iArr, 4);

        Test.iFld -= (int)((--Test.iFld) * (d = Integer.reverseBytes(Test.iFld)));
        for (d1 = 132; d1 > 8; d1 -= 3) {
            i += (int)(iArr[(int)(d1 + 1)] - ((l >>>= i) * (++Test.instanceCount)));
            Test.iFld += (int)((long)d1 | Test.iFld);
            vMeth1();
            try {
                i = (iArr[(int)(d1 + 1)] % -50840);
                iArr[(int)(d1 - 1)] = (394597454 % Test.iFld);
                Test.iFld = (55622 / iArr[(int)(d1)]);
            } catch (ArithmeticException a_e) {}
        }
        vMeth2(Test.iFld, Test.iFld, d);
        iFld1 = iFld1;
        l *= s;
        i = (int)-199L;
        iArr[(Test.iFld >>> 1) % N] += Test.iFld;
        fArrFld[(iFld1 >>> 1) % N] = Test.instanceCount;
        Test.instanceCount -= byFld;
        iFld1 = Test.iFld;
        l *= (long)-2.305F;
        vMeth_check_sum += l + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i + s +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i8=-33, i9=2324, i10=8, i11=31090, i12=105, i13=64432, i14=-3, i15=-125, i16=-91, i17=232;
        float f1=0.408F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.99190);

        vMeth(5L);
        for (i8 = 11; i8 < 276; ++i8) {
            for (i10 = 95; i8 < i10; i10 -= 3) {
                for (f1 = 1; f1 > i10; f1--) {
                    try {
                        Test.iFld = (Test.iFld / 152);
                        i12 = (iFld1 / i8);
                        i11 = (-36696 % Test.iArrFld[i10 - 1]);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount -= (long)Test.dFld;
                    Test.instanceCount += (long)((long)f1 ^ Test.iFld2);
                    i9 += i11;
                    i11 += i8;
                }
                fFld = i8;
                i12 = (int)Test.instanceCount;
                for (i13 = i8; i13 < 1; i13++) {
                    Test.instanceCount += Test.iFld;
                    Test.iFld2 += (((i13 * Test.iFld2) + f1) - i11);
                    iFld1 = (int)Test.instanceCount;
                    dArr[i8] -= Test.iFld3;
                    i9 *= (int)-11L;
                }
            }
            Test.instanceCount = -107;
            if (Test.bFld) {
                Test.iArrFld[i8 + 1] = i9;
                bArrFld[i8] = false;
                i15 = 1;
                do {
                    try {
                        i9 = (i11 % -244);
                        iFld4 = (Test.iFld3 % 1874335304);
                        i12 = (i13 % i13);
                    } catch (ArithmeticException a_e) {}
                    switch ((i15 % 2) + 125) {
                    case 125:
                        for (i16 = 1; i16 < 1; ++i16) {
                            fArrFld[i16 + 1] = fFld;
                            Test.sArrFld[i16 + 1][i15 - 1] += (short)Test.dFld;
                            i14 = byFld;
                            Test.instanceCount += (((i16 * iFld4) + fFld) - i12);
                            Test.dFld = i10;
                        }
                    case 126:
                        Test.sFld = (short)i8;
                        break;
                    default:
                        i11 += (int)fFld;
                    }
                } while (++i15 < 95);
            } else if (Test.bFld) {
                i17 *= (int)f1;
            } else if (Test.bFld) {
                fFld -= f1;
            } else {
                Test.iArrFld[i8] &= Test.iFld3;
            }
        }

        FuzzerUtils.out.println("i8 i9 i10 = " + i8 + "," + i9 + "," + i10);
        FuzzerUtils.out.println("i11 f1 i12 = " + i11 + "," + Float.floatToIntBits(f1) + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 dArr = " + i16 + "," + i17 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("byFld fFld iFld1 = " + byFld + "," + Float.floatToIntBits(fFld) + "," + iFld1);
        FuzzerUtils.out.println("Test.iFld2 Test.iFld3 iFld4 = " + Test.iFld2 + "," + Test.iFld3 + "," + iFld4);
        FuzzerUtils.out.println("Test.sFld Test.bFld fArrFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld bArrFld Test.sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(bArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest vMeth2
//DEBUG  vMeth2 ->  vMeth2 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
