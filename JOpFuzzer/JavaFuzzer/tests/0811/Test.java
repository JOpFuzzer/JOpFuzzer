// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=36217L;
    public static short sFld=27409;
    public static boolean bFld=false;
    public static float fFld=43.460F;
    public byte byFld=120;
    public static long lFld=-1277396L;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
        FuzzerUtils.init(Test.dArrFld, -2.103530);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(double d1, long l2, long l3) {

        int i5=148, i6=10, i7=-132, i8=6113, i9=197, i10=-74, i11=3, i12=0;
        float f1=1.143F;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, 40311L);
        FuzzerUtils.init(byArr, (byte)122);
        FuzzerUtils.init(bArr, false);

        lArr[(i5 >>> 1) % N] += l2;
        i5 *= -130;
        for (i6 = 12; i6 < 276; i6++) {
            Test.iArrFld[i6 + 1] ^= (int)Test.instanceCount;
        }
        switch (((i6 >>> 1) % 10) + 120) {
        case 120:
            for (i8 = 8; i8 < 345; ++i8) {
                i7 += i7;
                Test.sFld >>= (short)i9;
                switch ((i8 % 2) + 89) {
                case 89:
                    f1 -= Test.instanceCount;
                    for (i10 = i8; i10 < 5; i10++) {
                        i7 += i10;
                        l3 -= i10;
                        i9 *= (int)d1;
                        Test.iArrFld[i10] = (int)Test.instanceCount;
                    }
                    break;
                case 90:
                    f1 -= i6;
                    break;
                default:
                    if (false) continue;
                }
            }
            break;
        case 121:
            i9 = i11;
            break;
        case 122:
            Test.iArrFld[(i10 >>> 1) % N] = Test.sFld;
            break;
        case 123:
            bArr[(i5 >>> 1) % N] = Test.bFld;
            break;
        case 124:
            i7 *= i9;
            break;
        case 125:
            i12 += -112;
            break;
        case 126:
            Test.iArrFld[(i11 >>> 1) % N] += (int)-4140996422733872432L;
            break;
        case 127:
            l3 -= i7;
            break;
        case 128:
            i7 &= i8;
            break;
        case 129:
            f1 = -89.906F;
            break;
        default:
            i11 >>= i12;
        }
        long meth_res = Double.doubleToLongBits(d1) + l2 + l3 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10
            + i11 + i12 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, int i4, float f) {

        double d2=99.101286;
        int i13=2, i14=10, i15=-4, i16=-42215, i17=1, i18=12;
        byte by1=-29, byArr1[]=new byte[N];

        FuzzerUtils.init(byArr1, (byte)-4);

        Test.instanceCount <<= (Test.instanceCount >> iMeth1(-2.17261, 3L, 57444L));
        d2 = i4;
        i3 = 6;
        Test.iArrFld = FuzzerUtils.int1array(N, (int)16);
        i3 += (int)12L;
        for (i13 = 8; i13 < 251; i13++) {
            for (i15 = 7; i15 > 1; --i15) {
                Test.instanceCount = Test.instanceCount;
                by1 += (byte)(((i15 * i15) + i14) - Test.instanceCount);
                i14 = i13;
                for (i17 = 1; i17 < 2; ++i17) {
                    Test.instanceCount += (i17 * i17);
                    f -= Test.sFld;
                    i18 -= i17;
                    byArr1[i17 + 1] -= (byte)2165;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16 +
            by1 + i17 + i18 + FuzzerUtils.checkSum(byArr1);
    }

    public static int iMeth(long l, int i2, long l1) {

        int i19=-83, i20=-151, i21=144, i22=3, i23=-246, i24=36201;
        double d3=0.108278;
        byte by2=61;
        float f2=-1.681F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.457F);

        vMeth(i2, i2, 0.414F);
        Test.instanceCount += (long)2.72071;
        for (i19 = 17; i19 < 396; ++i19) {
            for (i21 = 1; i21 < 4; ++i21) {
                Test.iArrFld[i21 + 1] = i22;
                for (i23 = 2; i23 > i19; i23--) {
                    switch ((i21 % 5) + 13) {
                    case 13:
                    case 14:
                        Test.dArrFld[(i20 >>> 1) % N] = d3;
                        i2 += (((i23 * by2) + by2) - i2);
                        i24 ^= -6;
                        Test.iArrFld[i21 - 1] >>= (int)l1;
                        break;
                    case 15:
                        i20 += (i23 * i23);
                        break;
                    case 16:
                        Test.instanceCount = i2;
                        Test.sFld = (short)i24;
                        f2 -= by2;
                        break;
                    case 17:
                        i2 = i24;
                        break;
                    default:
                        fArr[i23 + 1] = i19;
                    }
                }
            }
        }
        long meth_res = l + i2 + l1 + i19 + i20 + i21 + i22 + i23 + i24 + Double.doubleToLongBits(d3) + by2 +
            Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=36924, i1=-17737, i25=-2362, i26=-10, i27=-11, i28=-3, i29=-166, i30=-13, i31=-190;
        double d=119.60855;
        long l4=-10L;

        for (i = 4; i < 142; i++) {
            Test.instanceCount = (long)(d++);
            i1 = (--i1);
            Test.instanceCount += i;
            i1 += (i * i);
            i1 = iMeth(Test.instanceCount, i1, Test.instanceCount);
            i1 += (((i * i1) + i) - i);
            Test.instanceCount += 0L;
            Test.iArrFld[i + 1] %= (int)(Test.instanceCount | 1);
            Test.iArrFld[i - 1] -= i;
            for (l4 = 182; l4 > 2; --l4) {
                for (i26 = 1; i26 < 2; ++i26) {
                    i1 += (((i26 * i1) + i25) - l4);
                    i27 = (int)Test.fFld;
                    i25 -= i25;
                    i27 *= -86;
                    i27 += i;
                    i25 |= (int)-81L;
                    i25 = 9944;
                    Test.iArrFld[(int)(l4 - 1)] -= (int)d;
                    if (true) continue;
                    byFld -= (byte)d;
                }
                Test.iArrFld[(int)(l4)] -= i1;
                i25 += (int)l4;
            }
        }
        i1 = i25;
        d = Test.fFld;
        for (i28 = 16; 367 > i28; ++i28) {
            for (i30 = i28; i30 < 72; i30++) {
                Test.lFld -= i25;
                i29 -= 9;
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("l4 i25 i26 = " + l4 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 = " + i30 + "," + i31);

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld byFld Test.lFld = " + Float.floatToIntBits(Test.fFld) + "," + byFld + "," +
            Test.lFld);
        FuzzerUtils.out.println("Test.iArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
