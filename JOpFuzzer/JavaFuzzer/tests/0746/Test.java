// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=180L;
    public double dFld=-84.30577;
    public short sFld=-13854;
    public static double dFld1=0.116454;
    public static int iFld=-242;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 28);
        FuzzerUtils.init(Test.lArrFld, -3145792144L);
    }

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1) {

        int i4=0, i5=24000, i6=-46, i7=49962, i8=-27719;
        float f2=0.117F, f3=-69.347F;
        long l2=6425076015453601923L;

        i4 = 1;
        do {
            Test.iFld += i4;
            l1 -= l1;
            if (Test.bFld) continue;
            f2 *= Test.iFld;
        } while (++i4 < 396);
        Test.iArrFld[(i4 >>> 1) % N] = (int)Test.instanceCount;
        Test.iFld -= (int)f2;
        Test.dFld1 -= i4;
        for (l2 = 11; 349 > l2; ++l2) {
            for (i6 = 1; i6 < 5; ++i6) {
                for (f3 = 1; f3 < 2; f3++) {
                    i7 >>= i7;
                    Test.iArrFld[(int)(f3 - 1)] = (int)l1;
                    l1 = l2;
                    l1 += i4;
                }
            }
        }
        vMeth1_check_sum += l1 + i4 + Float.floatToIntBits(f2) + l2 + i5 + i6 + i7 + Float.floatToIntBits(f3) + i8;
    }

    public static short sMeth(int i2) {

        int i3=-20733, i9=0, i10=0, i11=37966;
        byte by=56;
        float f4=58.606F, f5=43.265F;
        double d=-111.124316, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 16.117097);

        Test.iArrFld[(i2 >>> 1) % N] = (int)Test.dFld1;
        i3 = 1;
        do {
            vMeth1(Test.instanceCount);
            i2 -= (int)Test.instanceCount;
            Test.iFld += (i3 | i3);
            Test.iFld <<= i2;
            Test.iArrFld[i3] *= Test.iFld;
        } while (++i3 < 305);
        i9 = 1;
        do {
            by += (byte)(i9 | Test.instanceCount);
            Test.iFld *= (int)f4;
            for (d = 1; 6 > d; ++d) {
                for (f5 = 2; f5 > 1; f5--) {
                    Test.instanceCount -= Test.instanceCount;
                    dArr[(int)(d + 1)] += -7L;
                    Test.instanceCount += (long)f4;
                }
            }
        } while (++i9 < 261);
        long meth_res = i2 + i3 + i9 + by + Float.floatToIntBits(f4) + Double.doubleToLongBits(d) + i10 +
            Float.floatToIntBits(f5) + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(long l) {

        int i1=9, i12=-31169, i13=2, i14=-9;
        float f1=0.514F;
        short s=-8131;

        i1 <<= (int)(i1 = (int)(++Test.instanceCount));
        Test.lArrFld[(i1 >>> 1) % N] += (long)f1;
        f1 += ((sMeth(i1) - Test.iFld) - Test.instanceCount);
        l *= 110;
        i1 >>= i1;
        Test.iArrFld[(i1 >>> 1) % N] = (int)f1;
        for (i12 = 378; i12 > 23; i12 -= 2) {
            i13 = s;
            if (true) {
                switch ((i12 % 4) + 97) {
                case 97:
                    Test.iFld += 0;
                    i14 = 1;
                    while (++i14 < 9) {
                        i1 += (i14 * i14);
                        Test.instanceCount >>= i14;
                        i13 *= Test.iFld;
                    }
                    break;
                case 98:
                    i13 += (i12 + i13);
                    break;
                case 99:
                    Test.bFld = Test.bFld;
                    break;
                case 100:
                    i13 = (int)l;
                    break;
                }
            }
        }
        vMeth_check_sum += l + i1 + Float.floatToIntBits(f1) + i12 + i13 + s + i14;
    }

    public void mainTest(String[] strArr1) {

        float f=36.892F, fArr[]=new float[N];
        int i=-15924, i15=53122, i16=-3364, i17=120, i18=195, i19=-1;

        FuzzerUtils.init(fArr, -2.226F);

        f += f;
        Test.iArrFld[(i >>> 1) % N] = (int)(i + Test.lArrFld[(i >>> 1) % N]);
        dFld = sFld;
        vMeth(Test.instanceCount);
        try {
            f += (float)dFld;
            i15 = 1;
            do {
                fArr[i15 + 1] = i15;
                Test.lArrFld[i15 - 1] = Test.iFld;
                Test.iFld = Test.iFld;
                Test.instanceCount *= i15;
                Test.iFld <<= 8;
                i += (i15 + Test.instanceCount);
                switch (((i15 % 1) * 5) + 125) {
                case 129:
                    if (Test.bFld) continue;
                default:
                    i16 = 1;
                    while (++i16 < 112) {
                        i17 = 1;
                        do {
                            Test.lArrFld[i16 - 1] *= 2477482860L;
                            Test.dFld1 = 98.459F;
                            i += (int)dFld;
                            f *= sFld;
                            Test.iArrFld[i17 + 1] += i15;
                            Test.iFld *= (int)f;
                        } while (++i17 < 1);
                    }
                    i -= i16;
                }
                for (i18 = 4; 112 > i18; ++i18) {
                    f *= Test.iFld;
                }
            } while (++i15 < 225);
            Test.iArrFld[(i17 >>> 1) % N] *= (int)-47554L;
            i -= (int)Test.instanceCount;
        }
        catch (UserDefinedExceptionTest exc1) {
            Test.instanceCount = i17;
            i -= (int)Test.instanceCount;
        }
        finally {
            Test.iFld = i16;
        }

        FuzzerUtils.out.println("f i i15 = " + Float.floatToIntBits(f) + "," + i + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 fArr = " + i19 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount dFld sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + sFld);
        FuzzerUtils.out.println("Test.dFld1 Test.iFld Test.bFld = " + Double.doubleToLongBits(Test.dFld1) + "," +
            Test.iFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
