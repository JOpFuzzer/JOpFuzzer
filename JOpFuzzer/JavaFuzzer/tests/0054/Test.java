// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=9158098345330936527L;
    public float fFld=-125.796F;
    public static float fFld1=0.759F;
    public static volatile short sFld=30402;
    public short sArrFld[]=new short[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(int i5, int i6, int i7) {

        int i8=24996, i9=4, i10=10773, i11=13, i12=-14, i13=6, i14=-20, i15=37699, iArr2[]=new int[N];
        float f=-2.178F;
        double d=-67.108214;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr2, 8292);
        FuzzerUtils.init(byArr, (byte)-103);

        for (i8 = 6; i8 < 280; ++i8) {
            iArr2[i8] = i7;
            for (i10 = i8; i10 < 6; i10++) {
                for (f = i8; f < 1; f++) {
                    i7 += (int)(f - i11);
                    i7 &= i9;
                    d -= Test.instanceCount;
                }
                switch ((i10 % 9) + 98) {
                case 98:
                    for (i13 = i8; i13 < 1; i13++) {
                        i5 += i13;
                        i7 += (i13 * i13);
                        if (i8 != 0) {
                        }
                        i15 = (int)8197382350305247526L;
                        byArr[i8 - 1] = (byte)Test.instanceCount;
                        i12 *= (int)Test.instanceCount;
                    }
                    break;
                case 99:
                case 100:
                    Test.sFld += (short)(9645L + (i10 * i10));
                    break;
                case 101:
                    try {
                        i5 = (-35 % i9);
                        i14 = (i6 / i5);
                        i9 = (-50286 % i9);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 102:
                    d += Test.instanceCount;
                    break;
                case 103:
                    Test.instanceCount += i10;
                case 104:
                    i12 = i15;
                    break;
                case 105:
                    Test.instanceCount *= Test.sFld;
                    break;
                case 106:
                    Test.instanceCount += i10;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + i12 + Double.doubleToLongBits(d)
            + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i3, int i4) {

        boolean b=true;
        int i16=-8200, i17=-24, i18=157, i19=15369, i20=1;
        double d1=0.70374;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr1, 42469L);
        FuzzerUtils.init(fArr, -117.899F);

        b = ((lArr1[(i4 >>> 1) % N] * (-8 - (Test.fFld1--))) != iMeth2(i4, i3, i3));
        for (i16 = 188; i16 > 7; i16--) {
            i18 = 1;
            do {
                Test.instanceCount += i18;
                Test.instanceCount = (long)d1;
                fArr = fArr;
                Test.instanceCount = Test.instanceCount;
                i4 += (((i18 * i18) + Test.instanceCount) - i18);
                i3 = i4;
                i3 += (int)-1462151669003400396L;
            } while (++i18 < 9);
        }
        i3 = i3;
        i4 = (int)3158991003L;
        for (i19 = 337; i19 > 8; i19 -= 2) {
            i20 *= 198;
            i17 >>>= i20;
        }
        long meth_res = i3 + i4 + (b ? 1 : 0) + i16 + i17 + i18 + Double.doubleToLongBits(d1) + i19 + i20 +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2) {

        double d2=-13.126191;
        int i21=-40614, i22=8, i23=25297, i24=165, i25=-49316, i26=42939, i27=0, iArr3[]=new int[N];
        boolean b1=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 0L);
        FuzzerUtils.init(iArr3, 170);

        i2 = (int)(iMeth1(i2, -51337) + d2);
        i21 = 1;
        do {
            for (i22 = i21; 12 > i22; ++i22) {
                for (i24 = i21; 1 > i24; i24++) {
                    byte by=93;
                    i25 += i24;
                    Test.instanceCount += (((i24 * i22) + i25) - i2);
                    Test.instanceCount += by;
                    if (b1) break;
                    i23 += i25;
                    lArr2[i24] = Test.instanceCount;
                    Test.instanceCount -= i25;
                }
                if (b1) {
                    for (i26 = 1; i26 < 1; i26++) {
                        Test.fFld1 *= Test.instanceCount;
                        iArr3[i21] = -8;
                    }
                }
            }
        } while (++i21 < 131);
        long meth_res = i2 + Double.doubleToLongBits(d2) + i21 + i22 + i23 + i24 + i25 + (b1 ? 1 : 0) + i26 + i27 +
            FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-4, i28=9, i29=-37, i30=-64, i31=-128, i32=26288, i33=-46927, i34=-11, iArr[]=new int[N], iArr1[]=new
            int[N];
        short s1=-23767;
        double d3=20.72009;
        byte by1=59;
        float f1=2.380F;
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 12L);
        FuzzerUtils.init(iArr, 137);
        FuzzerUtils.init(iArr1, 51180);

        for (long l : lArr) {
            int i=9;
            short s=-22936;
            iArr[(i >>> 1) % N] = (((i * s) - (++i)) * (i--));
            i -= (--sArrFld[(i >>> 1) % N]);
            try {
                i = (i / 1657764831);
                i = (218 / iArr1[(i >>> 1) % N]);
                i = (43438 % i);
            } catch (ArithmeticException a_e) {}
            i = (int)(i + ((s + i) - (i * fFld)));
            fFld = ((--iArr[(1 >>> 1) % N]) - ((i + i) + (i++)));
            i >>= (int)(--l);
        }
        i1 *= ((Short.reverseBytes(s1) * (i1 - i1)) - i1);
        iArr[(23456 >>> 1) % N] = (int)((iMeth(i1) * d3) * Test.fFld1);
        for (i28 = 7; 281 > i28; ++i28) {
            Test.instanceCount += i1;
            by1 = (byte)i28;
            Test.instanceCount -= i28;
            if (false) {
                iArr1[i28 + 1] = i1;
                i29 >>>= (int)Test.instanceCount;
                for (f1 = 2; f1 < 92; ++f1) {
                    i1 = (int)d3;
                    i30 -= 4322;
                    Test.sFld += (short)(((f1 * fFld) + i29) - i30);
                    iArr1[(int)(f1 - 1)] /= -5;
                    s1 += (short)f1;
                    switch ((i28 % 7) + 76) {
                    case 76:
                    case 77:
                        for (i31 = 1; i31 < 2; i31++) {
                            if (b2) continue;
                            i1 -= (int)1.474F;
                            Test.instanceCount *= by1;
                        }
                        for (i33 = 1; i33 < 2; ++i33) {
                            i29 += -7;
                            i29 *= i32;
                        }
                        break;
                    case 78:
                        Test.instanceCount = (long)d3;
                    case 79:
                        iArr1[i28 + 1] %= (int)(Test.instanceCount | 1);
                        break;
                    case 80:
                        lArr[(int)(f1 + 1)] += 12;
                        break;
                    case 81:
                        Test.instanceCount *= i31;
                        break;
                    case 82:
                        i30 = -144;
                        break;
                    }
                }
            } else if (true) {
                Test.fFld1 += (((i28 * s1) + i1) - f1);
            } else if (b2) {
                i32 += i1;
            } else {
                i29 = i34;
            }
        }

        FuzzerUtils.out.println("i1 s1 d3 = " + i1 + "," + s1 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i28 i29 by1 = " + i28 + "," + i29 + "," + by1);
        FuzzerUtils.out.println("f1 i30 i31 = " + Float.floatToIntBits(f1) + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 b2 i33 = " + i32 + "," + (b2 ? 1 : 0) + "," + i33);
        FuzzerUtils.out.println("i34 lArr iArr = " + i34 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.fFld1 = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Float.floatToIntBits(Test.fFld1));
        FuzzerUtils.out.println("Test.sFld sArrFld = " + Test.sFld + "," + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
