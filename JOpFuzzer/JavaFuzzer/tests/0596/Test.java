// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static float fFld=-37.995F;
    public static volatile short sFld=31711;
    public double dFld=-111.76289;
    public int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i9=8344;
        double d=-10.99005;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 2743712873L);

        lArr[(i9 >>> 1) % N][(i9 >>> 1) % N] += (long)d;
        vMeth1_check_sum += i9 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr);
    }

    public static float fMeth(float f1, long l) {

        int i8=-33319, i10=2, i11=1;
        long l1=-2L;
        double d1=2.29157;
        short s=-14885;
        boolean b=false;

        i8 = 1;
        do {
            vMeth1();
            l1 = 1;
            do {
                for (i10 = 1; 1 > i10; i10++) {
                    l += (((i10 * i8) + i11) - l);
                    i11 <<= (int)l1;
                    i11 += (i10 * i10);
                    d1 = Test.fFld;
                    i11 *= i8;
                    if (true) continue;
                    Test.fFld -= i10;
                    l -= (long)d1;
                }
                i11 = (int)f1;
                s = (short)i11;
                if (b) continue;
            } while (++l1 < 8);
        } while (++i8 < 210);
        long meth_res = Float.floatToIntBits(f1) + l + i8 + l1 + i10 + i11 + Double.doubleToLongBits(d1) + s + (b ? 1 :
            0);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(int i1) {

        int i2=0, i3=100, i4=-8, i5=189, i6=-32, i7=6, i12=183, i13=56160;
        double d2=0.95962;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.546F);

        for (i2 = 5; i2 < 125; ++i2) {
            i1 -= (iArrFld[i2 - 1] + (--i1));
        }
        Test.fFld *= Test.instanceCount;
        for (i4 = 9; i4 < 225; i4++) {
            for (i6 = 1; i6 < 7; ++i6) {
                Test.fFld -= (fMeth(Test.fFld, Test.instanceCount) + i6);
                iArrFld[i4] |= (int)Test.instanceCount;
            }
            for (d2 = i4; 7 > d2; ++d2) {
                Test.fFld = Test.instanceCount;
                Test.instanceCount += i3;
                i13 = 1;
                do {
                    fArr[(i4 >>> 1) % N] += i2;
                    iArrFld = FuzzerUtils.int1array(N, (int)-183);
                } while (++i13 < 1);
                i5 -= i5;
                Test.fFld = 11;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d2) + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=23, i14=-95, i15=8, i16=-13, i17=-7, i18=-111, i19=26080, iArr[]=new int[N];
        float f=-67.673F;
        byte by=94;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(lArr1, -7955719368630488800L);

        i = (int)((i += (--iArr[(i >>> 1) % N])) + (f--));
        i = (int)(((Test.instanceCount - i) << i) - (4 * (i + by)));
        vMeth(i);
        iArr[(i >>> 1) % N] += -3;
        i = (int)2877241554L;
        by *= (byte)Test.sFld;
        i = i;
        Test.instanceCount = i;
        i -= (int)dFld;
        for (i14 = 10; i14 < 172; ++i14) {
            i += (((i14 * Test.instanceCount) + Test.instanceCount) - i15);
            i += i14;
        }
        lArr1[(i15 >>> 1) % N] -= Test.sFld;
        for (float f2 : fArrFld) {
            iArrFld[(i15 >>> 1) % N] <<= (int)-146621968L;
            for (i16 = 3; i16 < 63; i16++) {
                for (i18 = 1; i18 < 2; ++i18) {
                    i17 /= (int)(i15 | 1);
                    i19 += i17;
                    i19 -= i18;
                    i -= (int)Test.instanceCount;
                    by *= (byte)Test.instanceCount;
                    i15 = i15;
                    i19 += (((i18 * i) + i14) - i15);
                    try {
                        i19 = (i19 / i15);
                        i17 = (i19 % 11510);
                        i19 = (i18 / 3895);
                    } catch (ArithmeticException a_e) {}
                    fArrFld = fArrFld;
                }
                i19 += i14;
                i17 += (i16 * i16);
                iArrFld[i16 - 1] = (int)Test.instanceCount;
                Test.sFld += (short)7191;
            }
        }

        FuzzerUtils.out.println("i f by = " + i + "," + Float.floatToIntBits(f) + "," + by);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("iArr lArr1 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("dFld iArrFld fArrFld = " + Double.doubleToLongBits(dFld) + "," +
            FuzzerUtils.checkSum(iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
