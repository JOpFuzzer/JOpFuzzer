// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static float fFld=-44.366F;
    public static int iFld=-25849;
    public static double dFld=1.47582;
    public static long lArrFld1[][]=new long[N][N];
    public static volatile int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld1, -14L);
        FuzzerUtils.init(Test.iArrFld, 42978);
        FuzzerUtils.init(Test.dArrFld, 11.5809);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(double d, long l1) {

        int i6=-25, i7=-8913, i8=6, iArr1[][]=new int[N][N];
        double d1=0.127031, dArr[]=new double[N];
        short s1=-6803, sArr[]=new short[N];

        FuzzerUtils.init(iArr1, 254);
        FuzzerUtils.init(sArr, (short)31122);
        FuzzerUtils.init(dArr, -31.87177);

        iArr1[(i6 >>> 1) % N][(i6 >>> 1) % N] *= 144;
        i6 = (int)Test.instanceCount;
        for (d1 = 6; d1 < 178; ++d1) {
            Test.fFld = Test.instanceCount;
            i8 = 1;
            do {
                i7 <<= (int)l1;
                i6 /= (int)(s1 | 1);
                switch ((int)((d1 % 10) + 32)) {
                case 32:
                    i7 = (int)d1;
                    break;
                case 33:
                    i6 <<= i7;
                    i6 += -16;
                    i6 ^= i7;
                    break;
                case 34:
                    sArr[i8 - 1] = (short)i7;
                    try {
                        i7 = (i6 / i7);
                        iArr1[(int)(d1 + 1)][i8] = (i8 % iArr1[i8 + 1][i8 - 1]);
                        i7 = (i6 % i7);
                    } catch (ArithmeticException a_e) {}
                    i7 <<= (int)-978029268L;
                    break;
                case 35:
                case 36:
                    Test.lArrFld1[(int)(d1 + 1)][(int)(d1)] = Test.instanceCount;
                    break;
                case 37:
                case 38:
                    i7 <<= i7;
                case 39:
                    try {
                        i7 = (i8 / 230);
                        i7 = (42856 / i7);
                        i7 = (-129 / i6);
                    } catch (ArithmeticException a_e) {}
                case 40:
                    Test.lArrFld1[(int)(d1)] = FuzzerUtils.long1array(N, (long)7044650019352731059L);
                    break;
                case 41:
                    dArr[(int)(d1 - 1)] -= l1;
                    break;
                default:
                    s1 -= (short)i7;
                }
            } while (++i8 < 9);
        }
        long meth_res = Double.doubleToLongBits(d) + l1 + i6 + Double.doubleToLongBits(d1) + i7 + i8 + s1 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, long l, int i5) {

        double d2=48.6288;
        int i9=-172, i10=-64785, i11=-165, i12=1, i13=-13;

        iMeth1(d2, l);
        for (i9 = 292; i9 > 11; --i9) {
            i4 += i9;
        }
        i11 = 1;
        do {
            i5 = (int)Test.instanceCount;
            for (i12 = 6; i11 < i12; --i12) {
                i4 = i12;
                if (i12 != 0) {
                    vMeth_check_sum += i4 + l + i5 + Double.doubleToLongBits(d2) + i9 + i10 + i11 + i12 + i13;
                    return;
                }
                Test.iFld += i12;
                try {
                    Test.iArrFld[i12 - 1] = (-42525 % i12);
                    i5 = (-65501 % Test.iArrFld[i12 - 1]);
                    i5 = (64159 / i13);
                } catch (ArithmeticException a_e) {}
                i13 += (((i12 * i13) + i12) - i13);
                d2 += -24.103588;
                Test.iFld = 169;
            }
            Test.instanceCount *= i4;
            l += (i11 * i11);
        } while (++i11 < 292);
        vMeth_check_sum += i4 + l + i5 + Double.doubleToLongBits(d2) + i9 + i10 + i11 + i12 + i13;
    }

    public static int iMeth(int i2, int i3) {

        long l2=-77L;
        int i14=8, i15=-191, i16=-7, i17=-63114;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 0.81378);

        vMeth(i3, Test.instanceCount, Test.iFld);
        Test.iFld -= (int)0L;
        l2 = 1;
        do {
            Test.iArrFld = Test.iArrFld;
        } while ((l2 += 2) < 190);
        i14 = 1;
        do {
            for (i15 = 1; i15 < 7; i15++) {
                Test.iFld -= -21158;
                Test.fFld *= Test.iFld;
                Test.iFld = i2;
                i17 = 1;
                while (++i17 < 2) {
                    i16 += (i17 * i17);
                    Test.iFld += (int)14L;
                    dArr1[i14] = i15;
                }
                Test.lArrFld1[i15][i15] = i16;
                Test.instanceCount = i3;
            }
        } while (++i14 < 221);
        long meth_res = i2 + i3 + l2 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i1=-6, i18=-43262, i19=54606, i20=-2, i21=59564, i22=26971, iArr[]=new int[N];
        short s=18082, sArr1[][]=new short[N][N];
        double d3=0.112874;

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(sArr1, (short)6417);

        iArr[(i1 >>> 1) % N] += (i1--);
        s = (short)((++iArr[(28 >>> 1) % N]) + iMeth(Test.iFld, Test.iFld));
        Test.iFld = Test.iFld;
        Test.dArrFld[(Test.iFld >>> 1) % N] += Test.iFld;
        for (i18 = 6; 370 > i18; ++i18) {
            Test.instanceCount += i1;
            Test.iFld ^= i1;
            i19 += (int)Test.instanceCount;
            sArr1[i18 - 1] = sArr1[i18 + 1];
            Test.fFld += Test.instanceCount;
            Test.fFld += i18;
        }
        for (i20 = 19; i20 < 381; ++i20) {
            sArr1[i20][i20 + 1] %= (short)(i19 | 1);
            Test.fFld += i19;
            i19 >>= (int)Test.instanceCount;
            Test.iFld = Test.iFld;
            i21 -= (int)Test.instanceCount;
            Test.instanceCount -= 226;
            i21 = i20;
        }
        i1 *= Test.iFld;
        for (d3 = 1; d3 < 219; ++d3) {
            i19 = 2;
            i19 >>>= i21;
            switch ((int)((d3 % 7) + 31)) {
            case 31:
                i19 <<= (int)Test.instanceCount;
                i21 = i21;
                break;
            case 32:
                i1 = (int)d3;
                i1 <<= i22;
                break;
            case 33:
            case 34:
                Test.dFld = Test.instanceCount;
                Test.instanceCount = i22;
                break;
            case 35:
                Test.fFld %= (Test.instanceCount | 1);
                break;
            case 36:
                Test.iFld = (int)Test.instanceCount;
                break;
            case 37:
                Test.instanceCount += (long)(d3 * i1);
                break;
            default:
                i22 *= i20;
            }
        }

        FuzzerUtils.out.println("i1 s i18 = " + i1 + "," + s + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("d3 i22 iArr = " + Double.doubleToLongBits(d3) + "," + i22 + "," +
            FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("sArr1 = " + FuzzerUtils.checkSum(sArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld Test.lArrFld1 Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld1) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
