// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2244379714L;
    public static int iFld=61097;
    public static double dFld=2.72135;
    public byte byFld=85;
    public static int iArrFld[]=new int[N];
    public static volatile boolean bArrFld[]=new boolean[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -160);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.fArrFld, 0.517F);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i3=-61355, i4=-6, i5=13, i6=108, i7=4, i8=65488, i9=1, i10=105, i11=60087;
        float f=0.653F;
        short s1=-1839;
        byte byArr[]=new byte[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(byArr, (byte)4);
        FuzzerUtils.init(lArr, 13L);

        Test.iFld = Test.iFld;
        for (i3 = 1; 194 > i3; ++i3) {
            for (i5 = 8; i5 > 1; i5--) {
                Test.iFld += (int)Test.instanceCount;
                for (i7 = 1; i7 < 2; ++i7) {
                    f *= -148;
                    byArr[i7] >>>= (byte)i3;
                    Test.instanceCount -= -116;
                    try {
                        i8 = (i6 % -2022412992);
                        i4 = (-69 % i4);
                        i6 = (Test.iFld % i5);
                    } catch (ArithmeticException a_e) {}
                    i6 += i8;
                    Test.iArrFld[i3] = s1;
                    i9 += Test.iFld;
                }
                for (i10 = i5; i10 < 2; ++i10) {
                    lArr[i5][i3 - 1] *= i3;
                    if (i8 != 0) {
                    }
                }
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + s1 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l1, short s) {

        int i1=-18110, i2=-106;
        boolean b=true;
        double d=21.54955;
        float f1=-1.555F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.491F);

        for (i1 = 1; i1 < 293; ++i1) {
            iMeth();
            Test.bArrFld[i1] = b;
            Test.iArrFld[i1 - 1] = 13;
            b = false;
            s = (short)Test.iFld;
            d += -2.32F;
            Test.iFld >>= (int)Test.instanceCount;
            Test.iFld += (i1 + i1);
            try {
                Test.iFld = (Test.iArrFld[i1] % 30);
                Test.iFld = (i2 % -754439141);
                i2 = (-6343 % i2);
            } catch (ArithmeticException a_e) {}
        }
        f1 += Test.iFld;
        if (false) {
            Test.iArrFld[(Test.iFld >>> 1) % N] >>= (int)Test.instanceCount;
        } else if (true) {
            Test.iArrFld[(i1 >>> 1) % N] <<= Test.iFld;
            Test.iArrFld[(i1 >>> 1) % N] += Test.iFld;
            vMeth_check_sum += l1 + s + i1 + i2 + (b ? 1 : 0) + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
            return;
        } else {
            Test.iArrFld[(Test.iFld >>> 1) % N] ^= 8318;
        }
        vMeth_check_sum += l1 + s + i1 + i2 + (b ? 1 : 0) + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static float fMeth(byte by, int i, long l) {

        short s2=-2760;

        vMeth(l, s2);
        long meth_res = by + i + l + s2;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i12=-21385, i13=-59123, i14=-53983, i15=56871, i16=-41951, i17=8, i18=-43;
        float f3=0.924F;
        boolean b1=true;
        short s3=-2799;
        byte by1=104;

        Test.iFld = (int)fMeth((byte)(-48), Test.iFld, Test.instanceCount);
        Test.instanceCount |= Test.iFld;
        Test.iFld = Test.iFld;
        Test.instanceCount = Test.iFld;
        for (i12 = 11; i12 < 181; ++i12) {
            for (i14 = 5; i14 < 148; ++i14) {
                f3 -= i13;
                i13 += (i14 | i14);
                Test.dFld += -13;
            }
            switch (((Test.iFld >>> 1) % 10) + 9) {
            case 9:
                i15 >>= (int)Test.instanceCount;
                break;
            case 10:
                Test.instanceCount -= i15;
                break;
            case 11:
                i16 = 148;
                do {
                    Test.instanceCount += (i16 | i12);
                    for (i17 = 1; i17 > 1; i17 -= 2) {
                        i15 += i12;
                        Test.iArrFld[i12] <<= (int)Test.instanceCount;
                        Test.fArrFld[i12] -= i15;
                        Test.iArrFld[i17 + 1] >>= (int)Test.instanceCount;
                        switch ((i12 % 5) + 119) {
                        case 119:
                            if (b1) continue;
                            if (b1) continue;
                            break;
                        case 120:
                            Test.iArrFld[i12] %= (int)(Test.iFld | 1);
                            s3 = (short)i15;
                            i18 += (8 + (i17 * i17));
                        case 121:
                            if (b1) break;
                            Test.instanceCount >>>= -5;
                            break;
                        case 122:
                            i18 = (int)f3;
                            Test.instanceCount += (((i17 * Test.instanceCount) + Test.iFld) - f3);
                            break;
                        case 123:
                            i18 ^= i12;
                            break;
                        }
                    }
                } while (--i16 > 0);
                break;
            case 12:
                i13 += Test.iFld;
            case 13:
                f3 += (i12 + Test.instanceCount);
                break;
            case 14:
                byFld += (byte)i14;
            case 15:
                i18 = i14;
                break;
            case 16:
                i18 <<= (int)Test.instanceCount;
                break;
            case 17:
                Test.iFld = by1;
                break;
            case 18:
                try {
                    i15 = (202 % i14);
                    Test.iFld = (i18 / -1528092616);
                    i18 = (i18 % i17);
                } catch (ArithmeticException a_e) {}
                break;
            }
        }

        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 f3 i16 = " + i15 + "," + Float.floatToIntBits(f3) + "," + i16);
        FuzzerUtils.out.println("i17 i18 b1 = " + i17 + "," + i18 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("s3 by1 = " + s3 + "," + by1);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("byFld Test.iArrFld Test.bArrFld = " + byFld + "," + FuzzerUtils.checkSum(Test.iArrFld)
            + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
