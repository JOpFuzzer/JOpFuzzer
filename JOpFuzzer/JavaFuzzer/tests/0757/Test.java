// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8L;
    public static boolean bFld=false;
    public static float fFld=1.638F;
    public boolean bFld1=false;
    public static int iFld=-12;
    public volatile long lArrFld[]=new long[N];

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i4=29706, i5=10, i6=41709, i7=60268, i8=7, i9=-17385, i10=-57982, i11=-147, iArr[]=new int[N];
        byte by=83;
        double d=78.130741;
        float f1=0.447F;
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(bArr, true);

        for (i4 = 6; i4 < 152; i4 += 3) {
            i5 += (int)(31.346F + (i4 * i4));
            for (i6 = 1; 32 > i6; i6++) {
                by |= (byte)i5;
                iArr[i4 + 1] = (int)d;
                Test.instanceCount += (-3223907596918622773L + (i6 * i6));
                Test.instanceCount = i7;
                iArr[i6] -= i6;
            }
            f1 -= i6;
            for (i8 = i4; i8 < 32; ++i8) {
                f1 %= -12;
                for (i10 = 1; i10 < 1; i10++) {
                    bArr[i8 - 1][i10 - 1] = Test.bFld;
                    if (Test.bFld) break;
                    i11 = i11;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + by + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i8 + i9 +
            i10 + i11 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth() {

        int i3=-45307, i12=227, i13=-5046, i14=-59123, i15=-160, i16=-21270, i17=112, i18=44561, iArr1[]=new int[N];
        short s=10757;

        FuzzerUtils.init(iArr1, -19);

        switch ((((++i3) >>> 1) % 2) + 24) {
        case 24:
            vMeth1();
            if (false) {
                for (i12 = 3; i12 < 174; ++i12) {
                    for (i14 = 1; 9 > i14; i14++) {
                        float f2=-115.429F;
                        if (false) {
                            iArr1 = iArr1;
                            f2 -= i12;
                            for (i16 = 1; i16 < 2; ++i16) {
                                switch (((i13 >>> 1) % 9) + 27) {
                                case 27:
                                case 28:
                                    s += (short)1.69816;
                                    i13 *= (int)Test.instanceCount;
                                    i17 += (int)Test.instanceCount;
                                    break;
                                case 29:
                                    i13 >>= i16;
                                    iArr1 = iArr1;
                                    break;
                                case 30:
                                    i13 -= i3;
                                    break;
                                case 31:
                                    try {
                                        i13 = (-18309 / i16);
                                        i15 = (-845804910 / i17);
                                        i3 = (i17 % -100267902);
                                    } catch (ArithmeticException a_e) {}
                                    break;
                                case 32:
                                case 33:
                                    i15 += (int)2.28080;
                                    break;
                                case 34:
                                    i18 -= i16;
                                    break;
                                case 35:
                                    f2 -= i12;
                                    break;
                                default:
                                    iArr1[i14 + 1] -= i14;
                                }
                            }
                        }
                    }
                }
            } else {
                i17 -= i17;
            }
            break;
        case 25:
            i17 *= -7;
            break;
        default:
            Test.instanceCount += s;
        }
        vMeth_check_sum += i3 + i12 + i13 + i14 + i15 + i16 + i17 + s + i18 + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(int i2, float f) {


        vMeth();
        long meth_res = i2 + Float.floatToIntBits(f);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=42414, i1=-8863, i19=12450, i20=108, i21=3126, i22=17, i23=-9, i24=-161, i25=-53510, i26=-12, iArr2[]=new
            int[N];
        double d1=116.129844;
        byte by1=-82;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-12033);
        FuzzerUtils.init(iArr2, -47935);

        for (i = 276; 13 < i; i -= 2) {
            Test.instanceCount -= (lMeth(i1, Test.fFld) - i);
            i1 -= i1;
            i1 >>= (int)Test.instanceCount;
            i1 >>= i1;
        }
        Test.instanceCount *= i;
        iArr2[(i1 >>> 1) % N] <<= i1;
        for (i19 = 6; i19 < 239; i19++) {
            i20 = i20;
            for (i21 = 4; i21 < 108; i21++) {
                i22 = 2;
                for (i23 = 1; i23 < 2; i23++) {
                    Test.instanceCount = -128;
                    i22 += (((i23 * Test.fFld) + i22) - i);
                    Test.bFld = Test.bFld;
                    Test.instanceCount += 111;
                    Test.instanceCount += i1;
                    bFld1 = true;
                    Test.fFld += (i23 * i23);
                    try {
                        i20 = (i20 / 61);
                        i22 = (-198 / Test.iFld);
                        Test.iFld = (i22 / i);
                    } catch (ArithmeticException a_e) {}
                }
                switch ((i19 % 1) + 79) {
                case 79:
                    switch (((i19 % 6) * 5) + 8) {
                    case 29:
                        i25 = 1;
                        do {
                            i24 |= (int)Test.instanceCount;
                            if (Test.bFld) break;
                            if (Test.bFld) {
                                Test.iFld += i;
                                i24 &= i25;
                                iArr2[i19] ^= i23;
                                d1 += i;
                            } else if (bFld1) {
                                iArr2[i19] >>= i21;
                            } else {
                                i26 = i23;
                            }
                        } while (++i25 < 2);
                    case 35:
                        iArr2[i21 + 1] = i21;
                        break;
                    case 24:
                        try {
                            i22 = (-235 % i23);
                            Test.iFld = (i19 / iArr2[i21 + 1]);
                            Test.iFld = (29 / iArr2[i19]);
                        } catch (ArithmeticException a_e) {}
                    case 38:
                        bFld1 = Test.bFld;
                        break;
                    case 28:
                        lArrFld[(Test.iFld >>> 1) % N] ^= Test.instanceCount;
                        break;
                    case 22:
                        i1 += (i21 * i21);
                        break;
                    }
                    break;
                default:
                    Test.instanceCount += (((i21 * Test.iFld) + i26) - by1);
                }
            }
        }

        FuzzerUtils.out.println("i i1 i19 = " + i + "," + i1 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 d1 by1 = " + i26 + "," + Double.doubleToLongBits(d1) + "," + by1);
        FuzzerUtils.out.println("sArr iArr2 = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("bFld1 Test.iFld lArrFld = " + (bFld1 ? 1 : 0) + "," + Test.iFld + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
