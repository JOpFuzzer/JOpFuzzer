// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=42526L;
    public double dFld=-25.66279;
    public int iFld=89;
    public int iFld1=11;
    public static float fFld=0.88F;
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-9982);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i3, double d, int i4) {

        int i5=134, i6=17371, i7=-65, i8=-14, i9=-7588, i10=-14453, iArr[]=new int[N];
        short s=-21960;
        byte by=-112;

        FuzzerUtils.init(iArr, 176);

        for (i5 = 7; 142 > i5; ++i5) {
            i6 -= (int)37085L;
            i6 = (int)Test.instanceCount;
            i4 <<= i5;
            i4 = i5;
            Test.instanceCount -= s;
            for (i7 = i5; 12 > i7; ++i7) {
                for (i9 = 1; 1 > i9; ++i9) {
                    i4 -= -6562;
                    switch ((((i7 >>> 1) % 1) * 5) + 109) {
                    case 113:
                        i3 >>= (int)Test.instanceCount;
                        s -= (short)i9;
                        Test.instanceCount = i9;
                        break;
                    default:
                        iArr = iArr;
                        by += (byte)i9;
                    }
                }
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + s + i7 + i8 + i9 + i10 + by +
            FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(long l) {

        int i=150, i1=57660, i2=-75, i11=-51, i12=7, i13=240, i14=-41415, iArr1[]=new int[N];
        double d1=33.20996;
        float f=-18.831F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)76);
        FuzzerUtils.init(iArr1, 143);

        i = (int)(++l);
        for (i1 = 4; 395 > i1; i1++) {
            i2 = (int)(fMeth(34028, d1, i) - -129);
            for (i11 = 1; i11 < 4; i11++) {
                i >>= (int)l;
                if (i11 != 0) {
                    vMeth1_check_sum += l + i + i1 + i2 + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 +
                        Float.floatToIntBits(f) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                i = i2;
                byArr[i11] = (byte)i11;
                i12 <<= (int)l;
                iArr1[i1 - 1] = (int)l;
                for (i13 = 1; i13 < 2; ++i13) {
                    i2 *= i;
                    f += i1;
                    Test.instanceCount += (long)f;
                    i12 = i;
                }
            }
        }
        vMeth1_check_sum += l + i + i1 + i2 + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth() {

        int i15=-26738, i16=8, iArr2[]=new int[N];
        float f1=-1.246F;
        short s1=12209;
        byte by1=86;

        FuzzerUtils.init(iArr2, -166);

        vMeth1(Test.instanceCount);
        i15 ^= i15;
        iArr2[(i15 >>> 1) % N] = i15;
        Test.instanceCount *= i15;
        f1 += i15;
        i16 = 1;
        while (++i16 < 370) {
            dFld = -136;
            iArr2[i16] += i15;
            switch (((i16 % 3) * 5) + 79) {
            case 88:
                i15 -= i16;
                i15 -= s1;
            case 82:
                dFld = i16;
                iArr2[i16] += i16;
                iArr2[i16] &= by1;
                i15 += (((i16 * s1) + i15) - i15);
                break;
            case 92:
                dFld = 23666;
            default:
                i15 = (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += i15 + Float.floatToIntBits(f1) + i16 + s1 + by1 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i17=-147, i18=10, i19=-7, i20=-4, i21=-13, i22=88, i23=-1, i24=155, i25=-218, i26=4, iArr3[]=new int[N];
        byte by2=110;
        boolean b=false;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 55748419902570444L);
        FuzzerUtils.init(iArr3, 3);
        FuzzerUtils.init(dArr, -11.130316);

        vMeth();
        Test.sArrFld[(iFld >>> 1) % N] = (short)iFld;
        i17 = 1;
        do {
            for (i18 = 6; i18 < 134; ++i18) {
                iFld1 = i18;
            }
            for (i20 = 4; i20 < 134; ++i20) {
                dFld += i19;
                iFld1 *= (int)Test.fFld;
                Test.fFld = -2849;
                lArr[i17] -= Test.instanceCount;
                Test.fFld += iFld;
                try {
                    i21 = (i21 % i18);
                    i21 = (i19 / -93);
                    iFld1 = (iFld % -227);
                } catch (ArithmeticException a_e) {}
                i21 = by2;
            }
            iFld >>= (int)Test.instanceCount;
            i22 = 1;
            while (++i22 < 134) {
                lArr = lArr;
                lArr[i17] >>= i21;
                b = true;
                dFld = 45213;
                Test.instanceCount &= i17;
            }
            iArr3 = FuzzerUtils.int1array(N, (int)-16353);
            b = b;
            Test.instanceCount |= i22;
        } while (++i17 < 187);
        for (i23 = 2; i23 < 250; i23++) {
            i19 = (int)Test.instanceCount;
            if (true) break;
            for (i25 = 1; 101 > i25; ++i25) {
                dArr[i23 - 1] *= 23;
                iFld = (int)Test.instanceCount;
                dFld += iFld1;
            }
        }

        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 by2 = " + i20 + "," + i21 + "," + by2);
        FuzzerUtils.out.println("i22 b i23 = " + i22 + "," + (b ? 1 : 0) + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("lArr iArr3 dArr = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(iArr3) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount dFld iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + iFld);
        FuzzerUtils.out.println("iFld1 Test.fFld Test.sArrFld = " + iFld1 + "," + Float.floatToIntBits(Test.fFld) + ","
            + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
