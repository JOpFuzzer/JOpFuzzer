// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=16798L;
    public static long lFld=-1076529151L;
    public int iFld=9379;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 5491145442507122478L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth(long l, double d) {

        int i=0;

        i *= (int)(l += (--i));
        vSmallMeth_check_sum += l + Double.doubleToLongBits(d) + i;
    }

    public static int iMeth1(long l2) {

        boolean b=false;
        int i5=14224, i6=10, i7=-3, i8=-10, i9=27395, i10=-3, iArr1[]=new int[N];
        double d2=-23.105390, dArr[]=new double[N];
        float f1=-47.895F;

        FuzzerUtils.init(dArr, -1.26774);
        FuzzerUtils.init(iArr1, -13882);

        b = b;
        for (i5 = 12; i5 < 393; ++i5) {
            l2 = Test.instanceCount;
        }
        for (d2 = 9; d2 < 297; d2++) {
            i7 = i7;
            i8 = 1;
            while (++i8 < 6) {
                Test.instanceCount += i8;
                switch ((int)(((d2 % 6) * 5) + 117)) {
                case 139:
                    switch ((int)(((d2 % 3) * 5) + 84)) {
                    case 99:
                        for (i9 = 1; i9 < 1; ++i9) {
                            if (b) continue;
                            switch ((i8 % 3) + 14) {
                            case 14:
                                i7 -= i6;
                                i6 += i9;
                                i7 >>>= i10;
                            case 15:
                                i6 -= i6;
                                break;
                            case 16:
                                i6 += (i9 + i9);
                                break;
                            default:
                                b = b;
                            }
                        }
                    case 88:
                        i10 = i5;
                        break;
                    case 97:
                        i7 = (int)3L;
                    default:
                        i6 = (int)l2;
                    }
                    break;
                case 146:
                    Test.lArrFld[i8] = -29958;
                    break;
                case 134:
                    f1 = i7;
                    break;
                case 124:
                    i10 = i8;
                    break;
                case 120:
                    dArr[(int)(d2)] = l2;
                    break;
                case 131:
                    i6 += i8;
                    break;
                default:
                    iArr1[(int)(d2)] *= i7;
                }
            }
        }
        long meth_res = l2 + (b ? 1 : 0) + i5 + i6 + Double.doubleToLongBits(d2) + i7 + i8 + i9 + i10 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i4) {

        int i11=-10573, i12=-159, i13=0, i14=14, i15=11, i16=-12, iArr2[]=new int[N];
        double d3=-2.98829, d4=73.33001;
        float f2=49.201F;
        byte by=-21;

        FuzzerUtils.init(iArr2, 28);

        i4 &= iMeth1(Test.instanceCount);
        for (i11 = 11; 285 > i11; ++i11) {
            i12 += (i11 - i12);
        }
        Test.instanceCount += i12;
        for (d3 = 16; d3 < 282; d3++) {
            for (d4 = 6; d4 > 1; d4 -= 3) {
                i13 -= (int)f2;
                Test.lArrFld[(int)(d3)] *= (long)-2.77F;
            }
            for (i15 = 1; 6 > i15; ++i15) {
                i13 = i11;
                i13 += (int)Test.instanceCount;
                by = (byte)Test.instanceCount;
                i12 += i15;
                try {
                    i12 = (iArr2[i15 + 1] / i15);
                    i16 = (-81 / i16);
                    i14 = (i11 / iArr2[(int)(d3)]);
                } catch (ArithmeticException a_e) {}
                i12 *= i4;
            }
        }
        long meth_res = i4 + i11 + i12 + Double.doubleToLongBits(d3) + i13 + Double.doubleToLongBits(d4) + i14 +
            Float.floatToIntBits(f2) + i15 + i16 + by + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(int i1, long l1, int i2) {

        short s=-32235;
        int i17=-2, i18=185, i19=-176, i20=-17033, i21=-134, iArr[]=new int[N];
        float f3=36.369F;

        FuzzerUtils.init(iArr, 0);

        s = (short)i1;
        for (int i3 : iArr) {
            vSmallMeth(--l1, ((l1 + i2) - iMeth(i1)) * Test.instanceCount);
            i2 = s;
            Test.lArrFld[(i2 >>> 1) % N] -= i2;
        }
        l1 = i1;
        for (i17 = 8; i17 < 132; ++i17) {
            for (i19 = 1; i19 < 13; i19++) {
                i20 -= (int)l1;
                i2 += i17;
                iArr[i19 - 1] = (int)f3;
            }
            s += (short)(i17 - i1);
            i21 = 1;
            while (++i21 < 13) {
                Test.instanceCount *= i19;
                i20 += i21;
            }
        }
        long meth_res = i1 + l1 + i2 + s + i17 + i18 + i19 + i20 + Float.floatToIntBits(f3) + i21 +
            FuzzerUtils.checkSum(iArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d1=-2.118991;
        float f=89.894F;

        for (int smallinvoc=0; smallinvoc<105; smallinvoc++) vSmallMeth(Test.instanceCount, d1);
        f += sMeth(-26883, Test.lFld, iFld);

        FuzzerUtils.out.println("d1 f = " + Double.doubleToLongBits(d1) + "," + Float.floatToIntBits(f));

        FuzzerUtils.out.println("Test.instanceCount Test.lFld iFld = " + Test.instanceCount + "," + Test.lFld + "," +
            iFld);
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test sMeth
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
