// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5008L;
    public static volatile double dFld=-113.1189;
    public static int iFld=-20875;
    public static byte byFld=113;
    public static float fFld=2.1002F;
    public long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];
    public double dArrFld[]=new double[N];

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4, int i5) {

        int i6=-5, i7=-218, i8=-38211, i9=53, i10=-48, i11=-23773, i12=-26510, i13=-12199, i14=-25584;
        boolean b1=false;
        byte by=-103;
        float f1=56.937F;
        short s1=426;

        for (i6 = 215; i6 > 12; --i6) {
            for (i8 = 1; i8 < 8; ++i8) {
                i10 = 2;
                while ((i10 -= 3) > 0) {
                    if (i7 != 0) {
                        vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + (b1 ? 1 : 0) + by + i11 +
                            Float.floatToIntBits(f1) + i12 + i13 + i14 + s1;
                        return;
                    }
                    if (b1) break;
                    i5 = -150;
                    by += (byte)(i10 * i10);
                    i11 += (((i10 * f1) + f1) - i10);
                }
                for (i12 = 1; i12 < 2; ++i12) {
                    if (b1) {
                        i9 += (int)Test.instanceCount;
                        i7 -= (int)Test.instanceCount;
                        i14 = i9;
                        Test.instanceCount = i13;
                    } else if (b1) {
                        s1 *= s1;
                    } else if (b1) {
                        Test.instanceCount -= (long)Test.dFld;
                    } else {
                        i9 += (i12 | i11);
                        vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + (b1 ? 1 : 0) + by + i11 +
                            Float.floatToIntBits(f1) + i12 + i13 + i14 + s1;
                        return;
                    }
                }
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + (b1 ? 1 : 0) + by + i11 + Float.floatToIntBits(f1) + i12
            + i13 + i14 + s1;
    }

    public static boolean bMeth(int i2, int i3) {


        vMeth(i3, i3);
        long meth_res = i2 + i3;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(boolean b) {


        bMeth(Test.iFld, Test.iFld);
        Test.iFld <<= Test.iFld;
        long meth_res = (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-23023, i1=-4, i16=-137, i17=-12, i18=191, i19=-2, i20=227, iArr[]=new int[N];
        float f=-2.720F;
        short s=8647;
        double d=-37.45015;

        FuzzerUtils.init(iArr, -11552);

        for (i = 6; i < 297; i++) {
            i1 *= (int)((Test.instanceCount * Test.instanceCount) * (f--));
            s <<= (short)iMeth(false);
            for (i16 = 5; i16 < 86; i16++) {
                for (i18 = 1; i18 < 2; ++i18) {
                    i17 /= (int)(i17 | 1);
                    switch (((i16 % 1) * 5) + 59) {
                    case 64:
                        Test.iFld += i1;
                        i19 += (((i18 * i16) + f) - i16);
                        i1 = -1261;
                        break;
                    default:
                        Test.instanceCount = 113;
                        lArrFld[i + 1] += -8L;
                    }
                    i17 <<= i17;
                    Test.iFld <<= (int)Test.instanceCount;
                    fArrFld[i16 + 1] *= i16;
                    fArrFld[i16 - 1] = i19;
                    Test.instanceCount += (((i18 * i19) + i18) - i19);
                }
                for (d = i; 2 > d; d++) {
                    iArr[(int)(d)] >>= Test.iFld;
                    dArrFld[i16 + 1] -= f;
                    Test.iFld = -3;
                    i19 -= i1;
                    s = Test.byFld;
                    i1 += (int)d;
                }
                f = Test.instanceCount;
                f = i16;
                i19 /= (int)1.560F;
                i1 += (((i16 * Test.fFld) + i16) - i18);
                lArrFld[i] = -1137;
                Test.instanceCount += (long)Test.fFld;
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("s i16 i17 = " + s + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 d = " + i18 + "," + i19 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i20 iArr = " + i20 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld Test.fFld lArrFld = " + Test.byFld + "," + Float.floatToIntBits(Test.fFld)
            + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("fArrFld dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
