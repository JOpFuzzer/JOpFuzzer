// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2540676837L;
    public int iFld=-6;
    public static float fFld=0.808F;
    public short sFld=-1017;
    public boolean bFld=true;
    public static boolean bFld1=true;
    public static byte byFld=-19;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[][]=new int[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 74);
        FuzzerUtils.init(Test.iArrFld1, 7);
        FuzzerUtils.init(Test.lArrFld, -30722L);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vMeth(byte by1, int i7) {


        i7 += i7;
        i7 = (i7++);
        vMeth_check_sum += by1 + i7;
    }

    public double dMeth(boolean b, long l) {

        int i3=46956, i4=-54758, i5=-51015, i6=23273;
        double d=-124.48971;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, -62L);
        FuzzerUtils.init(byArr, (byte)-125);

        i3 = 1;
        do {
            byte by=15;
            Test.iArrFld[i3 - 1] <<= (int)((by -= (byte)(iFld - Test.fFld)) + (++Test.instanceCount));
            iFld = (int)((-(l * iFld)) - ((Test.instanceCount + i3) * -47433));
            if (b) {
                iFld *= (int)(((iFld * l) - (-(i3 + l))) * (--iFld));
                i4 = 1;
                do {
                    i5 = 1;
                    while (++i5 < 1) {
                        iFld = (int)(((iFld--) * (--iFld)) + Test.fFld);
                    }
                    switch (((i4 % 1) * 5) + 67) {
                    case 69:
                        iFld += i4;
                        break;
                    default:
                        lArr[i3] = (((l * i4) - (--iFld)) * (iFld++));
                        i6 = 1;
                        do {
                            vMeth((byte)(--byArr[i4 + 1]), (int)((--l) * ((--l) - (i6 - i6))));
                            Test.iArrFld[i4 + 1] -= (iFld++);
                            Test.iArrFld[i3 - 1] -= (int)(-66.45934 - ((-(++iFld)) * (d + l)));
                        } while (++i6 < 1);
                    }
                } while (++i4 < 5);
            } else if (lArr[i3] == (--sFld)) {
                iFld -= (iFld -= (++iFld));
            } else {
                iFld += (((i3 * l) + i5) - i4);
            }
        } while (++i3 < 350);
        long meth_res = (b ? 1 : 0) + l + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(byArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth1() {

        int i18=44358, i19=-85, i20=-240, i21=-207, i22=-32, i23=-9056, i24=12;
        short s2=-9046;
        byte by2=-110;

        for (i18 = 1; 151 > i18; i18++) {
            for (i20 = i18; i20 < 11; ++i20) {
                Test.iArrFld[i20 - 1] = i19;
                Test.iArrFld[i20 + 1] += i18;
                i22 <<= (int)Test.instanceCount;
                for (i23 = 1; i23 < 1; ++i23) {
                    i22 += i19;
                    Test.instanceCount -= i23;
                    i24 -= s2;
                    s2 = (short)i20;
                    Test.instanceCount -= by2;
                    s2 += (short)(((i23 * Test.fFld) + i18) - i21);
                    Test.iArrFld1 = Test.iArrFld1;
                    Test.iArrFld1[i23 - 1][i18 + 1] &= (int)Test.instanceCount;
                    i21 = i21;
                }
            }
        }
        long meth_res = i18 + i19 + i20 + i21 + i22 + i23 + i24 + s2 + by2;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i9, int i10, int i11) {

        int i12=22198, i13=35264, i14=-17213, i15=-12, i16=22, i17=-9, i25=-179;
        boolean b1=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 7080625653908138766L);

        for (i12 = 7; i12 < 166; i12++) {
            i13 = (int)Test.instanceCount;
            for (i14 = i12; i14 < 10; i14++) {
                for (i16 = 1; 1 < i16; --i16) {
                    i13 = iMeth1();
                }
                Test.instanceCount = (long)-39.853;
                i9 <<= i9;
                if (b1) {
                    Test.instanceCount = i14;
                    i25 = 1;
                    while (++i25 < 1) {
                        Test.iArrFld[i25 + 1] <<= i13;
                        Test.instanceCount += 109;
                        if (b1) continue;
                        i11 = i13;
                        lArr1[i14 + 1] -= Test.instanceCount;
                    }
                } else if (b1) {
                    Test.iArrFld = Test.iArrFld1[i12 + 1];
                } else {
                    Test.instanceCount += (((i14 * i14) + i9) - i11);
                }
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i25 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(short s1, long l1) {

        int i8=-19730, i26=-39106, i27=-34214, i28=128, i29=8686, i30=12837, i31=-25312;
        short sArr[]=new short[N];
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(sArr, (short)-10479);
        FuzzerUtils.init(lArr2, 0L);

        i8 = iMeth(i8, i8, i8);
        i8 -= i8;
        sArr[(i8 >>> 1) % N] -= (short)i8;
        l1 >>>= i8;
        for (i26 = 12; i26 < 286; i26 += 2) {
            for (i28 = 1; i28 < 11; ++i28) {
                for (i30 = 1; i30 < 2; ++i30) {
                    double d1=-121.98353;
                    if (Test.bFld1) {
                        Test.instanceCount *= s1;
                    }
                    d1 = i28;
                    i31 += (i30 - i29);
                    Test.fFld += l1;
                    i27 -= i28;
                    i27 = -11;
                }
            }
            lArr2[i26][i26] += l1;
        }
        long meth_res = s1 + l1 + i8 + i26 + i27 + i28 + i29 + i30 + i31 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-34, i1=-254, i2=-19, i32=-14, i33=-1, i34=29095, i35=-3, i36=-55, i37=16929, i38=-4, i39=253;
        short s=3176;
        double d2=1.81705;

        for (i = 3; 288 > i; i++) {
            float f=0.193F;
            iFld = (int)((Math.max(i, -11) + (-12 * (234 - (i1 - f)))) - (i1 += (i1--)));
            f = s;
            i2 = 1;
            do {
                Test.instanceCount -= (long)((dMeth(bFld, Test.instanceCount) * (i1--)) * fMeth(sFld,
                    Test.instanceCount));
                Test.instanceCount = Test.instanceCount;
                for (i32 = 1; 1 < i32; i32 -= 3) {
                    sFld += (short)(-14 + (i32 * i32));
                    iFld >>= (int)Test.instanceCount;
                    iFld = i33;
                }
                iFld += i2;
                iFld ^= i1;
            } while (++i2 < 88);
            i34 >>= (int)Test.instanceCount;
            f = i1;
            f = Test.instanceCount;
        }
        i33 += (int)Test.instanceCount;
        for (i35 = 10; i35 < 163; i35++) {
            Test.instanceCount = 10;
            for (d2 = i35; d2 < 164; ++d2) {
                double d3=1.64706;
                switch ((int)((d2 % 2) + 44)) {
                case 44:
                    i33 += Test.byFld;
                    break;
                case 45:
                    Test.instanceCount += sFld;
                    break;
                default:
                    d3 = s;
                    Test.instanceCount += Test.instanceCount;
                    for (i38 = 1; i38 < 1; i38++) {
                        Test.fFld *= i1;
                        switch (((i2 >>> 1) % 2) + 122) {
                        case 122:
                            iFld += (i38 * i38);
                            i36 += (162 + (i38 * i38));
                            break;
                        case 123:
                            Test.fFld -= Test.byFld;
                            break;
                        default:
                            Test.lArrFld[i38] = i39;
                        }
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 s = " + i + "," + i1 + "," + s);
        FuzzerUtils.out.println("i2 i32 i33 = " + i2 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("d2 i37 i38 = " + Double.doubleToLongBits(d2) + "," + i37 + "," + i38);
        FuzzerUtils.out.println("i39 = " + i39);

        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("sFld bFld Test.bFld1 = " + sFld + "," + (bFld ? 1 : 0) + "," + (Test.bFld1 ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld Test.iArrFld Test.iArrFld1 = " + Test.byFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld1));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
