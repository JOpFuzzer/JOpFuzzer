// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=228L;
    public double dFld=-21.38280;
    public static float fFld=-2.728F;
    public static short sFld=-27860;
    public static volatile int iFld=26722;
    public static boolean bFld=false;
    public static long lFld=8L;
    public static byte byFld=108;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i4, int i5) {

        int i6=160, i7=33509, i8=1, i9=0, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -5);

        Test.fFld -= 1136;
        i6 = 1;
        while ((i6 += 3) < 178) {
            i5 += i6;
            for (i7 = 26; i7 > 1; i7--) {
                switch (((i6 % 2) * 5) + 57) {
                case 64:
                    Test.instanceCount += i7;
                    Test.instanceCount >>>= Test.sFld;
                    Test.instanceCount <<= i7;
                case 66:
                    i8 += i8;
                default:
                    i4 += (((i7 * Test.instanceCount) + i7) - Test.iFld);
                }
                Test.iFld = i8;
                Test.iFld = (int)Test.instanceCount;
                i8 += (934 + (i7 * i7));
            }
            try {
                i5 = (-43858 / i4);
                i4 = (-49562 % iArr2[i6]);
                i9 = (iArr2[i6 + 1] / iArr2[i6 + 1]);
            } catch (ArithmeticException a_e) {}
            iArr2[i6] = (int)Test.instanceCount;
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i2, float f1) {

        double d=0.111418, d1=127.103126;
        int i3=41310, i10=-42664, iArr1[]=new int[N];
        float f2=-106.777F;
        boolean b=false;

        FuzzerUtils.init(iArr1, -3);

        for (d = 338; d > 16; d -= 3) {
            iArr1[(int)(d)] += (int)(fMeth(-50718, 9) + Test.instanceCount);
            i2 += (int)(d + i3);
            i10 = 1;
            while (++i10 < 15) {
                f2 = 1;
                do {
                    Test.iFld += (int)Test.instanceCount;
                    Test.iFld = Test.iFld;
                    i2 += i10;
                    i3 += (40577 + (f2 * f2));
                    Test.iFld += (int)f2;
                    if (b) continue;
                    Test.iFld *= (int)Test.instanceCount;
                    Test.iFld -= i3;
                    try {
                        iArr1[(int)(d)] = (i10 % -1680934442);
                        i3 = (i3 % -2087603723);
                        i3 = (-59955 % iArr1[(int)(f2 - 1)]);
                    } catch (ArithmeticException a_e) {}
                } while (++f2 < 1);
            }
            d1 = i3;
        }
        long meth_res = i2 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i3 + i10 +
            Float.floatToIntBits(f2) + (b ? 1 : 0) + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, float f, long l) {

        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -10L);

        lArr[(i1 >>> 1) % N][(i1 >>> 1) % N] = ((iMeth(Test.iFld, Test.fFld) - l) + 62);
        i1 -= 148;
        vMeth_check_sum += i1 + Float.floatToIntBits(f) + l + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=22790, i11=-13, i12=1, i13=-6, i14=7, i15=222, i16=229, i17=131, i18=0, i19=5237, iArr[]=new int[N];
        long l1=-1848972448L;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr, -62908);
        FuzzerUtils.init(fArr, -1.912F);

        i += (int)(((Test.instanceCount += i) + (iArr[(i >>> 1) % N] = i)) + ((i + i) + dFld));
        vMeth(i, Test.fFld, Test.instanceCount);
        for (i11 = 1; 133 > i11; i11++) {
            for (i13 = 3; 190 > i13; ++i13) {
                Test.instanceCount += Test.instanceCount;
                i12 -= i;
                Test.fFld = Test.instanceCount;
                dFld *= 13;
                i = (int)4055737267313838660L;
                Test.sFld = (short)i;
                Test.bFld = Test.bFld;
                Test.lFld *= Test.sFld;
                switch (((i13 >>> 1) % 7) + 123) {
                case 123:
                    i12 += (int)Test.fFld;
                case 124:
                    i14 += (((i13 * i) + i12) - i11);
                    Test.lFld += (i13 - Test.byFld);
                    Test.sFld += (short)0L;
                    break;
                case 125:
                    Test.iFld -= (int)1L;
                case 126:
                    for (i15 = i13; i15 < 2; i15++) {
                        iArr[i13] += i12;
                        Test.bFld = Test.bFld;
                        i += (5 + (i15 * i15));
                    }
                    for (i17 = 2; i17 > 1; i17--) {
                        i |= (int)Test.lFld;
                    }
                    Test.fFld -= i18;
                    break;
                case 127:
                case 128:
                case 129:
                    for (l1 = i13; 2 > l1; ++l1) {
                        iArr[i11] += Test.iFld;
                        i19 += Test.iFld;
                        Test.lFld += Test.instanceCount;
                        Test.instanceCount += i14;
                    }
                    break;
                default:
                    fArr[i13] = fArr[i11 - 1];
                }
            }
        }

        FuzzerUtils.out.println("i i11 i12 = " + i + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("l1 i19 iArr = " + l1 + "," + i19 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.iFld Test.bFld = " + Test.sFld + "," + Test.iFld + "," + (Test.bFld ? 1
            : 0));
        FuzzerUtils.out.println("Test.lFld Test.byFld = " + Test.lFld + "," + Test.byFld);

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
