// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public static short sFld=-25021;
    public static float fFld=-124.895F;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -12570);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=5827, i4=-192, i5=3618, iArr[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-13974);
        FuzzerUtils.init(iArr, 0);

        sArr[(i3 >>> 1) % N] %= (short)(i3 | 1);
        for (i4 = 2; 189 > i4; ++i4) {
            i5 = (int)-2.24257;
            Test.instanceCount -= i5;
            i3 -= i4;
            sArr[i4 + 1] -= (short)i4;
        }
        vMeth2_check_sum += i3 + i4 + i5 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        int i2=45, i7=95, i8=-69, i9=-21576, i10=24172, i11=-53928, i12=-50876, i13=-65363, i14=23976, i15=45073,
            iArr1[]=new int[N];
        double d1=-110.30889;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.569F);
        FuzzerUtils.init(iArr1, -8);

        Test.fFld %= (i2 | 1);
        vMeth2();
        i2 -= (int)Test.instanceCount;
        for (i7 = 305; i7 > 1; i7--) {
            switch ((i7 % 2) + 60) {
            case 60:
                for (i9 = 1; i9 < 5; ++i9) {
                    i8 -= i10;
                    i2 = 13939;
                }
                for (i11 = 5; i11 > 1; i11--) {
                    i13 = 1;
                    while (++i13 < 2) {
                        i2 &= -5;
                        i12 += (int)d1;
                    }
                    for (i14 = i7; i14 < 2; ++i14) {
                        i10 -= (int)Test.instanceCount;
                        fArr[i14 + 1] = (float)d1;
                    }
                }
                break;
            case 61:
                iArr1[i7] <<= i7;
                break;
            default:
                Test.instanceCount -= Test.instanceCount;
            }
        }
        vMeth1_check_sum += i2 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) + i14 + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i1) {

        long l=4499407330227615384L;
        int i16=209, i17=50146, i18=246, i19=-7115, i20=1, i21=154, i22=-2, i23=52998;
        double d2=0.80628, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 64.128514);

        vMeth1();
        i1 = (int)232L;
        for (l = 218; l > 12; l -= 2) {
            for (i17 = 1; i17 < 15; ++i17) {
                i19 = 1;
                do {
                    i20 += (((i19 * Test.fFld) + i19) - Test.instanceCount);
                    Test.iArrFld1[(int)(l - 1)] -= i16;
                    if (i1 != 0) {
                        vMeth_check_sum += i1 + l + i16 + i17 + i18 + i19 + i20 + i21 + i22 +
                            Double.doubleToLongBits(d2) + i23 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                    i20 -= i17;
                    i18 += i1;
                } while (++i19 < 2);
                for (i21 = i17; 2 > i21; i21 += 2) {
                    Test.fFld += (float)d2;
                }
            }
            i23 = 15;
            do {
                i18 = (int)l;
                dArr[(int)(l)] *= Test.fFld;
            } while (--i23 > 0);
        }
        vMeth_check_sum += i1 + l + i16 + i17 + i18 + i19 + i20 + i21 + i22 + Double.doubleToLongBits(d2) + i23 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        float f=41.750F, fArr1[]=new float[N];
        int i=0, i24=32, i25=-149, i26=-37657, i27=-69, i28=8, i29=38532;
        double d=-9.46164;
        boolean b=true, bArr[]=new boolean[N];
        byte by=74, byArr[][]=new byte[N][N];

        FuzzerUtils.init(fArr1, -7.313F);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr, (byte)101);

        f += (float)(((Test.instanceCount - Test.sFld) ^ Math.min(i, 191)) - (iArrFld[(i >>> 1) % N] - d));
        vMeth(14);
        for (i24 = 9; i24 < 340; i24++) {
            for (i26 = 3; i26 < 76; ++i26) {
                for (i28 = 2; i28 > i24; --i28) {
                    Test.instanceCount += i25;
                    i25 = 53751;
                    i27 >>= i27;
                    iArrFld[i26 + 1] = i;
                    if (false) {
                        fArr1[i24 - 1] *= f;
                    } else if (b) {
                        Test.instanceCount -= i26;
                        i += i;
                        Test.fFld -= i29;
                        bArr[i26] = b;
                    } else if (true) {
                        i25 += (i28 | (long)f);
                        switch (((i24 % 9) * 5) + 62) {
                        case 77:
                            i27 += (i28 * i28);
                            i25 &= i24;
                            if (b) continue;
                            d = i25;
                        case 105:
                            i27 = i29;
                        case 67:
                            switch (((-101 >>> 1) % 7) + 6) {
                            case 6:
                                Test.instanceCount += (((i28 * Test.sFld) + i25) - i25);
                                d /= (i26 | 1);
                                Test.instanceCount += (((i28 * i25) + Test.instanceCount) - i27);
                                by *= (byte)i25;
                            case 7:
                                Test.instanceCount >>= Test.instanceCount;
                                iArrFld = iArrFld;
                                break;
                            case 8:
                                by = (byte)Test.fFld;
                                break;
                            case 9:
                                i25 *= 9;
                                break;
                            case 10:
                                Test.iArrFld1[i28] *= (int)22.445F;
                                break;
                            case 11:
                                Test.iArrFld1 = iArrFld;
                                break;
                            case 12:
                                Test.sFld -= (short)Test.instanceCount;
                            default:
                                i29 = i25;
                            }
                            break;
                        case 75:
                            i25 *= i;
                            break;
                        case 76:
                        case 81:
                            Test.sFld = (short)i27;
                            break;
                        case 91:
                            byArr[i26 - 1] = byArr[i26];
                            break;
                        case 74:
                            i27 <<= (int)Test.instanceCount;
                            break;
                        case 96:
                            i += i28;
                            break;
                        }
                    } else {
                        i += i28;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f i d = " + Float.floatToIntBits(f) + "," + i + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("b by fArr1 = " + (b ? 1 : 0) + "," + by + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("bArr byArr = " + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("iArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
