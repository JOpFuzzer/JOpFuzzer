// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=5544465655021138713L;
    public static double dFld=-26.109699;
    public static float fFld=-2.172F;
    public boolean bFld=true;
    public static short sFld=-24800;
    public byte byFld=41;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -12L);
    }

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, int i6) {

        int i7=7, i8=-5, i9=5, i10=49532, i11=37739, i12=10, i14=-4283, iArr1[]=new int[N];
        boolean b=true;
        float f2=-82.595F;
        short s1=-4990;

        FuzzerUtils.init(iArr1, -3);

        i5 = (int)-5.91815;
        for (i7 = 5; i7 < 208; i7 += 2) {
            Test.instanceCount += i7;
            switch ((i7 % 8) + 49) {
            case 49:
                i6 += (int)(113L + (i7 * i7));
                i8 /= -7;
            case 50:
                i9 = 15;
                while (--i9 > 0) {
                    i6 += i7;
                }
                for (i10 = 1; i10 < 15; i10++) {
                    i6 = (int)Test.instanceCount;
                    i12 = 1;
                    while ((i12 += 2) < 2) {
                        if (b) continue;
                        Test.dFld = f2;
                        if (b) continue;
                        iArr1[i7 - 1] = i6;
                    }
                }
            case 51:
                iArr1[(i6 >>> 1) % N] *= s1;
                break;
            case 52:
                i8 = i6;
            case 53:
                f2 = i14;
            case 54:
                i11 -= (int)-9924L;
                break;
            case 55:
                Test.instanceCount |= -23495;
                break;
            case 56:
                Test.dFld = i12;
            default:
                i14 = 10;
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + Float.floatToIntBits(f2) + s1 + i14 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(long l) {

        int i3=-4, i4=-60820;
        float f1=-81.226F;
        short s=21243;
        boolean b1=true;

        i3 = 1;
        do {
            for (f1 = 1; f1 < 8; ++f1) {
                s += (short)f1;
            }
            Test.dFld *= iMeth(i4, i3);
            Test.fFld = i3;
            s = (short)i4;
            i4 = i4;
            i4 += (i3 * i3);
            if (b1) break;
            i4 = i4;
            Test.fFld -= i4;
            switch ((i3 % 6) + 87) {
            case 87:
                l = l;
                break;
            case 88:
                Test.fFld += i3;
                i4 &= -10;
                break;
            case 89:
                i4 = i4;
            case 90:
            case 91:
                Test.dFld *= i4;
                break;
            case 92:
                if (b1) continue;
                break;
            default:
                Test.dFld -= i3;
            }
        } while (++i3 < 212);
        long meth_res = l + i3 + Float.floatToIntBits(f1) + i4 + s + (b1 ? 1 : 0);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth() {

        int i=-9, i1=74, i2=-3, i15=7, i16=213, i17=0, iArr[]=new int[N];
        float f=81.950F;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 11);
        FuzzerUtils.init(dArr, 77.14002);

        iArr[(i >>> 1) % N] -= (int)(f--);
        i = (int)-27.59815;
        for (i1 = 21; i1 < 347; i1++) {
            byte by=-51;
            by = (byte)sMeth(Test.instanceCount);
            for (i15 = 1; 5 > i15; i15++) {
                Test.lArrFld[i15 - 1] -= i15;
                i16 *= (int)f;
                i2 += i16;
                iArr[i15] *= (int)f;
                i16 <<= i16;
                i17 *= i17;
                i += (int)Test.fFld;
                if (i != 0) {
                    vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i2 + i15 + i16 + i17 +
                        FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
            }
            i16 = i;
            dArr[i1 - 1] += Test.instanceCount;
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i2 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i18=143, i19=-8, i20=26943, i21=207, i22=41360, i23=-29128, i24=-1073, i25=148, i26=-13, iArr2[]=new int[N];
        long l2=-95L;

        FuzzerUtils.init(iArr2, 187);

        vMeth();
        for (i18 = 3; i18 < 136; i18++) {
            for (i20 = 188; i20 > 3; i20 -= 2) {
                Test.instanceCount -= 10;
                i19 = 13;
                if (bFld) continue;
                Test.dFld -= Test.instanceCount;
            }
            i19 -= (int)Test.dFld;
            i19 <<= i21;
            i21 += i18;
        }
        Test.sFld = (short)i19;
        for (l2 = 1; l2 < 254; l2++) {
            for (i23 = 1; i23 < 99; ++i23) {
                Test.fFld -= byFld;
            }
            Test.lArrFld[(int)(l2)] = i19;
            i19 >>= (int)13L;
        }
        i21 -= (int)Test.fFld;
        for (i25 = 4; i25 < 353; i25 += 3) {
            if (false) continue;
            Test.fFld -= Test.fFld;
            i22 = (int)1.816F;
            i19 = i26;
            i24 = i22;
        }
        i24 = (int)Test.dFld;
        iArr2 = iArr2;
        Test.instanceCount = byFld;
        i26 -= (int)l2;
        if (bFld) {
            Test.instanceCount = Test.sFld;
        } else if (bFld) {
            iArr2[(i24 >>> 1) % N] -= (int)Test.fFld;
        } else {
            i24 &= i23;
        }

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 l2 i22 = " + i21 + "," + l2 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 iArr2 = " + i26 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("bFld Test.sFld byFld = " + (bFld ? 1 : 0) + "," + Test.sFld + "," + byFld);
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
