// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-236L;
    public static float fFld=0.799F;
    public static int iFld=-85;
    public static double dFld=43.83614;
    public static boolean bFld=true;
    public long lFld=-84L;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -116.160F);
        FuzzerUtils.init(Test.iArrFld, 7);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i3=13, i4=-238;
        boolean b=true;
        short s=-2471;

        Test.iFld = (int)Test.instanceCount;
        for (float f : Test.fArrFld) {
            i3 = 1;
            do {
                Test.iFld /= (int)(Test.instanceCount | 1);
                Test.dFld -= 0.949F;
                Test.dFld -= Test.iFld;
                Test.iArrFld[i3 + 1][i3 + 1] = i3;
                Test.dFld -= i3;
                b = b;
                Test.instanceCount = (long)122.66F;
                Test.instanceCount |= i3;
                i4 = 1;
                while (++i4 < 2) {
                    Test.iFld += i4;
                    Test.iFld += (i4 ^ s);
                }
            } while ((i3 += 2) < 4);
            Test.instanceCount = i4;
        }
        long meth_res = i3 + (b ? 1 : 0) + i4 + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(byte by, long l, int i) {

        int i1=44011, i2=0, i5=-3, iArr[]=new int[N];
        short s1=-7268;
        double dArr[]=new double[N], dArr1[][]=new double[N][N];

        FuzzerUtils.init(dArr, 2.61639);
        FuzzerUtils.init(iArr, 62);
        FuzzerUtils.init(dArr1, 90.11601);

        for (i1 = 15; i1 < 386; ++i1) {
            Test.fFld -= (float)(dArr[i1 - 1] - iMeth());
        }
        switch (((74 >>> 1) % 10) + 118) {
        case 118:
            i = (int)l;
            Test.instanceCount += Test.iFld;
        case 119:
            Test.dFld = Test.iFld;
            Test.dFld += i2;
            i2 = by;
            break;
        case 120:
        case 121:
            if (Test.bFld) {
                i5 = 127;
                while (--i5 > 0) {
                    Test.iArrFld[i5 - 1] = FuzzerUtils.int1array(N, (int)-10);
                    i -= 6;
                }
                s1 ^= (short)i5;
            } else if (Test.bFld) {
                i ^= Test.iFld;
                i2 = i1;
            } else if (Test.bFld) {
                dArr1 = dArr1;
            } else {
                Test.fArrFld = FuzzerUtils.float1array(N, (float)2.884F);
            }
        case 122:
            Test.iArrFld[(i1 >>> 1) % N][(i >>> 1) % N] <<= i5;
            break;
        case 123:
            i2 = i2;
            break;
        case 124:
            Test.iArrFld[(-12 >>> 1) % N][(Test.iFld >>> 1) % N] >>= i5;
            break;
        case 125:
            Test.fFld *= i1;
        case 126:
            Test.instanceCount *= -13L;
        case 127:
            s1 *= (short)i5;
            break;
        default:
            iArr[(i1 >>> 1) % N] = Test.iFld;
        }
        vMeth1_check_sum += by + l + i + i1 + i2 + i5 + s1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static void vMeth() {

        byte by1=-54;

        vMeth1(by1, -63962L, Test.iFld);
        Test.iFld += by1;
        vMeth_check_sum += by1;
    }

    public void mainTest(String[] strArr1) {

        short s2=-32653;
        int i8=-11, i9=9, i10=10, i11=6, i12=3066, i13=-45498, i14=-229;
        byte by2=-7;
        double d=34.110487;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 51L);

        vMeth();
        Test.iFld = s2;
        for (i8 = 20; i8 < 367; i8++) {
            if (Test.bFld) break;
            i9 *= (int)Test.dFld;
            s2 += (short)(i8 ^ Test.iFld);
            Test.iFld &= i8;
            i9 /= (int)(Test.iFld | 1);
            if (false) {
                for (i10 = 73; i10 > i8; i10 -= 2) {
                    i9 = i10;
                    Test.iFld -= i10;
                    Test.iFld = i8;
                    if (Test.bFld) {
                        i9 = i8;
                        by2 <<= (byte)i10;
                    } else if (Test.bFld) {
                        i9 <<= i10;
                        for (d = 1; d < 1; ++d) {
                            Test.fFld += (float)((long)d | (long)Test.instanceCount);
                            if (true) continue;
                            i11 += (int)d;
                            i9 -= (int)Test.instanceCount;
                            lFld = (long)Test.fFld;
                        }
                        for (i13 = i8; i13 < 1; i13++) {
                            switch ((i10 % 2) + 34) {
                            case 34:
                                Test.fFld = 9.720F;
                                s2 >>= (short)i13;
                                break;
                            case 35:
                                i12 += (int)lFld;
                                i11 -= (int)-2.646F;
                            default:
                                try {
                                    i11 = (23472 % Test.iFld);
                                    i9 = (i14 / i13);
                                    Test.iFld = (i13 / Test.iArrFld[i13 - 1][i13 + 1]);
                                } catch (ArithmeticException a_e) {}
                            }
                        }
                    } else {
                        s2 &= (short)i13;
                    }
                }
            } else if (Test.bFld) {
                lArr[i8 + 1] -= i13;
            }
        }

        FuzzerUtils.out.println("s2 i8 i9 = " + s2 + "," + i8 + "," + i9);
        FuzzerUtils.out.println("i10 i11 by2 = " + i10 + "," + i11 + "," + by2);
        FuzzerUtils.out.println("d i12 i13 = " + Double.doubleToLongBits(d) + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 lArr = " + i14 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld Test.bFld lFld = " + Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ?
            1 : 0) + "," + lFld);
        FuzzerUtils.out.println("Test.fArrFld Test.iArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
