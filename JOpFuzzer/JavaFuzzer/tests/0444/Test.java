// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=14L;
    public static boolean bFld=true;
    public static byte byFld=-20;
    public int iFld=140;
    public long lArrFld[]=new long[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l, int i3) {

        int i4=-16007, i5=-133, i6=5, i7=7194, iArr1[]=new int[N];
        double d=0.106228;
        float f1=2.545F, f2=-27.120F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, 197);
        FuzzerUtils.init(bArr, true);

        i3 -= i3;
        for (i4 = 5; i4 < 195; i4++) {
            d -= i3;
            iArr1[i4 + 1] <<= (int)l;
            switch ((i4 % 3) + 42) {
            case 42:
                for (i6 = 1; i6 < 8; i6++) {
                    Test.instanceCount |= -144;
                    l >>>= i3;
                    f1 = 2;
                    do {
                        bArr[(int)(f1)] = false;
                        i3 = i4;
                        bArr[i4] = Test.bFld;
                        i3 *= -8322;
                        f2 -= Test.instanceCount;
                        iArr1[i4 - 1] += i5;
                    } while (--f1 > 0);
                }
                break;
            case 43:
                d *= -87;
            case 44:
                l = i3;
                break;
            }
        }
        vMeth_check_sum += l + i3 + i4 + i5 + Double.doubleToLongBits(d) + i6 + i7 + Float.floatToIntBits(f1) +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth1(int i2) {


        vMeth(Test.instanceCount, i2);
        long meth_res = i2;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i=7, i1=9, i8=-20115, i9=12, i10=11, i11=-55, iArr[]=new int[N];
        float f=50.365F;
        short s=-16093;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, -99);
        FuzzerUtils.init(lArr, 37820L);

        i *= (((i += i) * (-Math.max(-17158, i))) + (++iArr[(i >>> 1) % N]));
        for (f = 7; f < 139; ++f) {
            Test.instanceCount = iMeth1(4);
            iArr[(int)(f - 1)] = (int)Test.instanceCount;
            lArr[(int)(f - 1)][(int)(f)] = Test.instanceCount;
            i1 += (int)(((f * Test.instanceCount) + s) - Test.instanceCount);
            for (i8 = 1; i8 < 12; ++i8) {
                for (i10 = 1; i10 < 2; i10++) {
                    i1 -= -12450;
                    i = i8;
                    i1 = (int)2L;
                    Test.instanceCount -= i11;
                    Test.instanceCount *= i10;
                    i *= 44426;
                    i11 = i;
                }
            }
        }
        long meth_res = i + Float.floatToIntBits(f) + i1 + s + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i12=-49122, i13=14, i14=-61087, i15=-150, i16=-7149, i17=-153, i18=-56311, i19=-227, iArr2[]=new int[N];
        short s1=7625, sArr[]=new short[N];
        float f3=-5.909F, fArr[]=new float[N];
        long l2=8610L;
        double d1=2.127744, dArr[][]=new double[N][N];
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(iArr2, 20153);
        FuzzerUtils.init(dArr, -18.117423);
        FuzzerUtils.init(byArr, (byte)-109);
        FuzzerUtils.init(sArr, (short)-12630);
        FuzzerUtils.init(fArr, 0.408F);

        switch ((((iMeth() >>> 1) % 2) * 5) + 25) {
        case 27:
            for (long l1 : lArrFld) {
                for (i12 = 2; 63 > i12; i12++) {
                    for (i14 = 1; 2 > i14; ++i14) {
                        i15 >>= (int)Test.instanceCount;
                        l1 = i13;
                    }
                    i15 += s1;
                    try {
                        i13 = (iArr2[i12] % i13);
                        iArr2[i12 - 1] = (iArr2[i12 - 1] / iArr2[i12 - 1]);
                        i13 = (iArr2[i12 + 1] % 20);
                    } catch (ArithmeticException a_e) {}
                    i13 = 7;
                    i15 = (int)f3;
                    dArr = dArr;
                    Test.instanceCount += -50;
                }
                switch (((i14 >>> 1) % 8) + 27) {
                case 27:
                    switch (((4 >>> 1) % 1) + 13) {
                    case 13:
                        i16 = 1;
                        while (++i16 < 63) {
                            lArrFld[i16] = i14;
                        }
                        for (l2 = 2; l2 < 63; ++l2) {
                            f3 = Test.byFld;
                            dArr[(int)(l2)][(int)(l2)] = i17;
                            byArr = byArr;
                            iArr2[(int)(l2 - 1)] >>= i17;
                            i13 = -29192;
                            Test.bFld = Test.bFld;
                            l1 *= iFld;
                            iFld = s1;
                            Test.instanceCount += (long)f3;
                        }
                        sArr[(i14 >>> 1) % N] >>>= (short)i14;
                        break;
                    }
                    for (i18 = 3; i18 < 63; ++i18) {
                        if (Test.bFld) continue;
                        iArr2[i18 + 1] += i12;
                    }
                case 28:
                    fArr = FuzzerUtils.float1array(N, (float)-1.895F);
                    break;
                case 29:
                    try {
                        iFld = (150 % i17);
                        i13 = (i19 % i15);
                        iArr2[(i15 >>> 1) % N] = (iArr2[(i12 >>> 1) % N] / i16);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 30:
                case 31:
                    if (false) continue;
                    break;
                case 32:
                    l1 = i14;
                    break;
                case 33:
                    Test.instanceCount *= iFld;
                    break;
                case 34:
                    dArr[(i18 >>> 1) % N][(-10 >>> 1) % N] -= i14;
                default:
                    if (Test.bFld) continue;
                }
            }
            break;
        case 34:
            fArr[(i12 >>> 1) % N] = (float)d1;
        default:
            byArr[(61842 >>> 1) % N][(i14 >>> 1) % N] += (byte)iFld;
        }

        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 s1 f3 = " + i15 + "," + s1 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i16 l2 i17 = " + i16 + "," + l2 + "," + i17);
        FuzzerUtils.out.println("i18 i19 d1 = " + i18 + "," + i19 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("iArr2 dArr byArr = " + FuzzerUtils.checkSum(iArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("sArr fArr = " + FuzzerUtils.checkSum(sArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.byFld = " + Test.instanceCount + "," + (Test.bFld ?
            1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("iFld lArrFld = " + iFld + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
