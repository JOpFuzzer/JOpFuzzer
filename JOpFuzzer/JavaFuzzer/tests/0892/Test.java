// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3372245380L;
    public static byte byFld=17;
    public static short sFld=7299;
    public static boolean bFld=true;
    public static int iFld=-9;
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.110F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, double d) {

        int i5=174, i6=-33, iArr[]=new int[N];
        float f1=-14.991F;

        FuzzerUtils.init(iArr, 9);

        i5 = 1;
        do {
            Test.instanceCount = i4;
            d -= f1;
            if (i4 != 0) {
                vMeth1_check_sum += i4 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f1) + i6 +
                    FuzzerUtils.checkSum(iArr);
                return;
            }
            Test.instanceCount *= (long)f1;
            i6 = 1;
            do {
                d = f1;
                f1 -= i4;
                i4 = Test.byFld;
                Test.instanceCount <<= i6;
                Test.instanceCount = 6;
                f1 /= (i5 | 1);
                i4 <<= i5;
                iArr[i6 + 1] -= Test.sFld;
                if (i5 != 0) {
                    vMeth1_check_sum += i4 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f1) + i6 +
                        FuzzerUtils.checkSum(iArr);
                    return;
                }
            } while (++i6 < 5);
        } while (++i5 < 345);
        vMeth1_check_sum += i4 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f1) + i6 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, int i1, boolean b) {

        float f=0.363F;
        int i2=45863, i3=47189, i7=-47408, i8=31905;
        double d1=120.41283, d2=-2.18300, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.114601);

        i1 >>= (int)(Integer.reverseBytes(i1) + ((-9942 * Math.min(i1, i1)) * (i1 * f)));
        for (i2 = 3; i2 < 366; i2++) {
            vMeth1(i3, d1);
            for (d2 = i2; d2 < 5; d2++) {
                dArr[i2 - 1] *= d2;
                i8 = 1;
                do {
                    if (i1 != 0) {
                        vMeth_check_sum += l + i1 + (b ? 1 : 0) + Float.floatToIntBits(f) + i2 + i3 +
                            Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i7 + i8 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                    i1 = i8;
                    i3 = i8;
                    i7 = -24023;
                    i1 += Test.sFld;
                    l = l;
                    i7 <<= i3;
                    i7 = (int)Test.instanceCount;
                    b = true;
                } while (++i8 < 1);
            }
        }
        vMeth_check_sum += l + i1 + (b ? 1 : 0) + Float.floatToIntBits(f) + i2 + i3 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(d2) + i7 + i8 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth(int i) {


        vMeth(Test.instanceCount, i, Test.bFld);
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        boolean b1=false;
        float f2=-103.389F, f3=-1.651F;
        double d3=1.39559;
        int i9=-14802, i10=12, i11=144, i12=-192, i13=10, i14=41980, i15=4924, i16=-228, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 4);

        for (int smallinvoc=0; smallinvoc<954; smallinvoc++) vSmallMeth(Test.iFld);
        Test.bFld = b1;
        Test.instanceCount = (long)f2;
        d3 = Test.iFld;
        i9 = 1;
        do {
            f2 += (i9 * i9);
            Test.iFld += (i9 | Test.iFld);
        } while (++i9 < 308);
        Test.iFld += Test.iFld;
        Test.bFld = Test.bFld;
        for (i10 = 6; i10 < 126; i10++) {
            if (Test.bFld) break;
            for (f3 = i10; f3 < 209; ++f3) {
                Test.fArrFld[(int)(f3 + 1)][i10] -= Test.instanceCount;
                i11 += (int)(f3 * f3);
            }
            i12 -= i10;
            i12 = i12;
            Test.instanceCount -= -14;
        }
        for (i13 = 12; i13 < 209; i13++) {
            i14 *= i10;
            if (Test.bFld) {
                if (true) break;
                if (Test.bFld) break;
                f2 += (float)d3;
            } else {
                Test.iFld <<= (int)Test.instanceCount;
                i11 += (i13 ^ i9);
                try {
                    iArr1[i13] = (i14 / i11);
                    i12 = (iArr1[(Test.iFld >>> 1) % N] / i13);
                    Test.iFld = (Test.iFld % i14);
                } catch (ArithmeticException a_e) {}
                for (i15 = 7; i15 < 127; i15++) {
                    iArr1[i15] >>= i15;
                    i16 -= (int)2445989340668531033L;
                    Test.instanceCount = i13;
                }
            }
        }

        FuzzerUtils.out.println("b1 f2 d3 = " + (b1 ? 1 : 0) + "," + Float.floatToIntBits(f2) + "," +
            Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i9 i10 i11 = " + i9 + "," + i10 + "," + i11);
        FuzzerUtils.out.println("f3 i12 i13 = " + Float.floatToIntBits(f3) + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.sFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld Test.iFld Test.fArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
