// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=45939L;
    public static int iFld=-9;
    public volatile float fFld=0.1010F;
    public static byte byFld=52;
    public static float fArrFld[][]=new float[N][N];
    public static byte byArrFld[]=new byte[N];
    public static boolean bArrFld[]=new boolean[N];
    public static volatile short sArrFld[]=new short[N];
    public static double dArrFld[]=new double[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.8F);
        FuzzerUtils.init(Test.byArrFld, (byte)104);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.sArrFld, (short)-17561);
        FuzzerUtils.init(Test.dArrFld, 1.66272);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, boolean b, int i4) {

        int i5=-234, i6=242, i7=1449, i8=-68, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 0);

        for (i5 = 8; i5 < 279; i5++) {
            Test.iFld = i3;
            Test.instanceCount |= Test.instanceCount;
        }
        Test.byArrFld[(i3 >>> 1) % N] *= (byte)i5;
        Test.instanceCount += Test.instanceCount;
        Test.instanceCount = 156;
        for (i7 = 6; 157 > i7; i7++) {
            i4 -= (int)Test.instanceCount;
            iArr1[i7 - 1] *= i7;
            iArr1[i7] *= (int)Test.instanceCount;
            i4 = i3;
            i8 >>= (int)Test.instanceCount;
            if (b) break;
            iArr1[i7 - 1] += 101;
            i3 += (-2 + (i7 * i7));
        }
        vMeth1_check_sum += i3 + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        boolean b1=false;
        int i9=-27, i10=-115;
        float f=63.595F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)72);

        vMeth1(-51085, b1, -83);
        Test.bArrFld[(7 >>> 1) % N] = b1;
        for (i9 = 17; i9 < 362; i9++) {
            Test.fArrFld[i9 - 1][i9 + 1] -= i9;
            i10 %= (int)(Test.iFld | 1);
            Test.instanceCount = (long)f;
            Test.iFld *= i9;
            Test.bArrFld[i9] = true;
            switch ((i9 % 5) + 125) {
            case 125:
                Test.instanceCount = Test.iFld;
                i10 >>= (int)-34938L;
                switch ((i9 % 10) + 31) {
                case 31:
                    i10 += i9;
                    byArr[i9] += (byte)i9;
                    Test.iFld -= i9;
                    break;
                case 32:
                    if (b1) break;
                    break;
                case 33:
                    f += Test.iFld;
                    break;
                case 34:
                case 35:
                    Test.iFld += i9;
                    break;
                case 36:
                    Test.instanceCount %= (Test.instanceCount | 1);
                    break;
                case 37:
                    i10 = i10;
                case 38:
                case 39:
                    i10 -= (int)Test.instanceCount;
                    break;
                case 40:
                    i10 >>>= Test.byFld;
                }
                break;
            case 126:
                f *= Test.instanceCount;
                break;
            case 127:
                b1 = b1;
                break;
            case 128:
                i10 = i9;
                break;
            case 129:
                b1 = b1;
                break;
            default:
                Test.instanceCount += Test.instanceCount;
            }
        }
        vMeth_check_sum += (b1 ? 1 : 0) + i9 + i10 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(byArr);
    }

    public long lMeth() {

        int i1=-225, i2=-53943, i11=-7, i12=159, i13=-7, i14=-4950, iArr[]=new int[N];
        boolean b2=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 47496);
        FuzzerUtils.init(lArr, 123L);

        Test.iFld += (int)Test.fArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N];
        for (int i : iArr) {
            for (i1 = 1; i1 < 4; ++i1) {
                iArr[i1 + 1] &= (int)(-(Test.iFld >>>= (int)(fFld * Test.iFld)));
            }
            vMeth();
            for (i11 = 1; i11 < 4; ++i11) {
                for (i13 = 1; i13 < 2; ++i13) {
                    i2 *= (int)fFld;
                    if (b2) break;
                    i12 >>= i12;
                    Test.iFld >>= i12;
                    Test.instanceCount = i1;
                    i2 += i;
                    Test.sArrFld[i11 - 1] >>>= (short)Test.instanceCount;
                    lArr[i13 - 1] -= (long)fFld;
                }
            }
        }
        long meth_res = i1 + i2 + i11 + i12 + i13 + i14 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i15=-54144, i16=130, i17=14, i18=-8, i19=-62, i20=-30, i21=-248, i22=-107;
        boolean b3=true;
        short s=-31574;
        double d=0.21634;

        Test.iFld *= (int)(lMeth() + -2);
        Test.dArrFld = Test.dArrFld;
        iArrFld[(Test.iFld >>> 1) % N] += Test.iFld;
        for (i15 = 7; i15 < 365; ++i15) {
            i16 += (181 + (i15 * i15));
            fFld -= Test.instanceCount;
            i16 = (int)fFld;
            Test.iFld += i15;
            fFld += i15;
            i16 = i16;
        }
        Test.instanceCount = 54437;
        for (i17 = 7; i17 < 228; ++i17) {
            for (i19 = 2; i19 < 114; ++i19) {
                for (i21 = 1; 2 > i21; ++i21) {
                    if (true) {
                        b3 = b3;
                        fFld = i18;
                        i16 += (((i21 * Test.instanceCount) + i18) - fFld);
                    } else if (b3) {
                    } else {
                        fFld += ((long)i21 ^ (long)i19);
                        i18 += (i21 * i21);
                        i16 >>= i15;
                        s |= (short)i18;
                    }
                    switch (((i19 >>> 1) % 9) + 107) {
                    case 107:
                    case 108:
                        Test.instanceCount >>= 58189;
                        i16 += (((i21 * i15) + s) - i17);
                        break;
                    case 109:
                        i20 = (int)Test.instanceCount;
                        if (b3) {
                            Test.instanceCount *= i20;
                            i18 <<= i19;
                        } else if (b3) {
                            Test.instanceCount -= Test.instanceCount;
                        } else {
                            i22 += (int)d;
                        }
                        break;
                    case 110:
                        i16 <<= 9;
                        break;
                    case 111:
                        fFld -= i15;
                    case 112:
                        i16 += i21;
                    case 113:
                        Test.instanceCount <<= i19;
                        break;
                    case 114:
                        i18 = i18;
                        break;
                    case 115:
                        i22 += -49417;
                        break;
                    default:
                        fFld *= i15;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 b3 = " + i21 + "," + i22 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("s d = " + s + "," + Double.doubleToLongBits(d));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld fFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.byFld Test.fArrFld Test.byArrFld = " + Test.byFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("Test.bArrFld Test.sArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + ","
            + FuzzerUtils.checkSum(Test.sArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
