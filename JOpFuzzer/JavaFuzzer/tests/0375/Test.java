// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public int iFld=1;
    public boolean bFld=false;
    public float fFld=60.486F;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];
    public boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 88L);
        FuzzerUtils.init(Test.iArrFld, -13);
        FuzzerUtils.init(Test.sArrFld, (short)-28998);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i4, float f2, int i5) {

        long l=3867428578516964070L;
        int i6=175, i7=195, i8=59213, i9=-215, i10=-11, i11=-25869, iArr[]=new int[N];
        byte by=0;
        short s1=-2193;

        FuzzerUtils.init(iArr, -10);

        i4 = (int)Test.instanceCount;
        for (l = 9; l < 218; l++) {
            i5 += (int)(l * l);
            if (true) {
                for (i7 = 1; i7 < 8; ++i7) {
                    for (i9 = 1; i9 < 2; i9++) {
                        f2 += (i9 * Test.instanceCount);
                        i5 += (int)2691915770L;
                        i6 = i10;
                        i8 >>= 14547;
                        i5 *= (int)f2;
                        Test.instanceCount >>= l;
                        i4 = i8;
                        by = (byte)s1;
                        i10 *= (int)f2;
                    }
                }
            } else {
                try {
                    iArr[(int)(l - 1)] = (125 / i7);
                    i6 = (i9 % i8);
                    i10 = (i11 % i8);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = i4 + Float.floatToIntBits(f2) + i5 + l + i6 + i7 + i8 + i9 + i10 + by + s1 + i11 +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1, short s) {

        int i2=62686, i3=175, i12=-11, i13=-10, i14=28783, i15=23928;
        boolean b=false, bArr[][]=new boolean[N][N];
        double d=2.114319;
        float f3=0.79F, fArr[][]=new float[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 16.399F);
        FuzzerUtils.init(lArr, 8772719262980698036L);
        FuzzerUtils.init(bArr, true);

        for (i2 = 9; i2 < 177; i2++) {
            fArr[i2][i2 - 1] = (i1++);
            lArr[i2 - 1] *= lMeth(i1, -1.8F, i3);
            bArr[i2 - 1][i2 - 1] = b;
            for (i12 = 9; 1 < i12; i12--) {
                if (b) break;
                i13 += (int)d;
                Test.lArrFld[i12 - 1] += -231L;
                i14 = 2;
                do {
                    d += i14;
                    b = b;
                    s = (short)f3;
                } while (--i14 > 0);
                if (b) break;
                i15 += (i12 * i1);
            }
            i15 += (i2 ^ Test.instanceCount);
        }
        long meth_res = i1 + s + i2 + i3 + (b ? 1 : 0) + i12 + i13 + Double.doubleToLongBits(d) + i14 +
            Float.floatToIntBits(f3) + i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(float f1, int i) {

        short s2=-20793;

        i &= (int)(i *= (int)((f1 + f1) * (i++)));
        iMeth(162, s2);
        vSmallMeth_check_sum += Float.floatToIntBits(f1) + i + s2;
    }

    public void mainTest(String[] strArr1) {

        float f=0.552F, f4=-27.742F, fArr1[]=new float[N];
        int i17=14, i18=-248, i19=246, i20=11111, i21=-33157, i22=70;
        double d1=0.2273;

        FuzzerUtils.init(fArr1, -2.821F);

        iFld = (iFld--);
        f = 398;
        while (--f > 0) {
            switch ((int)(((f % 2) * 5) + 24)) {
            case 25:
                for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(f, iFld);
                break;
            case 34:
                for (i17 = 2; i17 < 63; i17++) {
                    d1 -= Test.instanceCount;
                    i18 = i17;
                    fArr1[(int)(f)] += i18;
                    for (f4 = 1; f4 < 2; ++f4) {
                        byte by1=64;
                        Test.instanceCount <<= iFld;
                        Test.sArrFld[(i18 >>> 1) % N] *= (short)i18;
                        by1 = (byte)-120;
                        i18 <<= i18;
                        iFld = i19;
                    }
                    for (i20 = 1; i20 < 2; i20++) {
                        i19 -= (int)Test.instanceCount;
                        Test.instanceCount += (-61 + (i20 * i20));
                        i19 -= i19;
                        bArrFld[(int)(f - 1)][i20] = bFld;
                        Test.iArrFld[(i22 >>> 1) % N] <<= (int)Test.instanceCount;
                        iFld = (int)f;
                        iFld = (int)13L;
                    }
                    fArr1[i17] -= i22;
                    Test.instanceCount = (long)-1.975F;
                    i21 = i21;
                    iFld *= i18;
                }
                iFld = i22;
                Test.iArrFld[(i21 >>> 1) % N] &= (int)-4070225857L;
                Test.instanceCount += i21;
                break;
            default:
                fFld = 7963;
            }
        }

        FuzzerUtils.out.println("f i17 i18 = " + Float.floatToIntBits(f) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("d1 f4 i19 = " + Double.doubleToLongBits(d1) + "," + Float.floatToIntBits(f4) + "," +
            i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount iFld bFld = " + Test.instanceCount + "," + iFld + "," + (bFld ? 1 :
            0));
        FuzzerUtils.out.println("fFld Test.lArrFld Test.iArrFld = " + Float.floatToIntBits(fFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.sArrFld bArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + "," +
            FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
