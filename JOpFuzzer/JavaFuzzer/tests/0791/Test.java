// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-3990714662L;
    public static volatile float fFld=-1.898F;
    public static int iFld=49661;
    public static short sFld=2308;
    public static boolean bFld=false;
    public double dFld=-2.54774;
    public byte byFld=-102;
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -72.745F);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth() {

        byte by1=-89;
        int i5=-69, i6=-201, i7=42117, i8=161, iArr1[]=new int[N];
        short s=-13105;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 72);
        FuzzerUtils.init(dArr, 0.102544);

        iArr1[(-98 >>> 1) % N] >>>= Test.iFld;
        for (double d : dArr) {
            by1 -= (byte)Test.fFld;
            for (i5 = 4; i5 > 1; i5--) {
                Test.iFld -= (int)Test.instanceCount;
                i6 += (((i5 * Test.iFld) + i6) - Test.instanceCount);
                Test.iFld += (int)7L;
                Test.iFld <<= s;
                s += (short)i5;
                Test.iFld -= 0;
                Test.instanceCount >>>= i6;
                by1 = (byte)Test.iFld;
            }
            for (i7 = 1; i7 < 4; ++i7) {
                by1 *= (byte)i6;
                i8 *= i7;
            }
        }
        long meth_res = by1 + i5 + i6 + s + i7 + i8 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static byte byMeth() {

        int i3=32695, i4=-163, i9=-8, i10=-10, iArr[]=new int[N];
        byte by=-95;
        boolean b=true;
        short s1=5169;

        FuzzerUtils.init(iArr, -5);

        for (i3 = 220; i3 > 3; i3--) {
            switch (((i3 >>> 1) % 4) + 80) {
            case 80:
                i4 = i4;
                Test.instanceCount /= (((long)(--Test.fFld)) | 1);
                if ((b = (b = (Test.iFld <= i3))) && (b = ((i3 > i4) && bMeth()))) {
                    i4 -= 7;
                    iArr[i3] -= ((iArr[i3] - (i3 + -44984)) * (by * iArr[i3 + 1]));
                } else {
                    Test.iFld <<= 101;
                    for (i9 = i3; 7 > i9; i9 += 2) {
                        double d1=-77.16085;
                        d1 -= 10;
                        Test.fFld += i10;
                        switch (((i3 % 2) * 5) + 4) {
                        case 5:
                            d1 = s1;
                            Test.iFld += (i9 + i10);
                            Test.iFld += (i9 - i3);
                        case 14:
                            Test.instanceCount <<= i10;
                        }
                    }
                }
                break;
            case 81:
                i10 += i3;
                break;
            case 82:
            case 83:
            }
        }
        long meth_res = i3 + i4 + by + (b ? 1 : 0) + i9 + i10 + s1 + FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(int i2, long l) {

        int i11=9, i12=8, i13=-1, iArr2[]=new int[N];
        double d2=0.97551, d3=22.27895;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)41);
        FuzzerUtils.init(iArr2, -156);

        Test.fFld = (float)-52.5038;
        byArr[(118 >>> 1) % N] >>= (byte)Test.instanceCount;
        byMeth();
        i11 = 336;
        while ((i11 -= 2) > 0) {
            if (false) break;
            iArr2[i11] = Test.iFld;
            Test.iFld = (int)l;
            Test.iFld -= -9;
            l = -14;
            for (i12 = 1; 9 > i12; ++i12) {
                Test.instanceCount &= i12;
            }
        }
        for (float f1 : Test.fArrFld) {
            d2 = 1;
            do {
                d3 = l;
                i2 = i13;
            } while (++d2 < 4);
        }
        vMeth_check_sum += i2 + l + i11 + i12 + i13 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=6, i1=-202, i14=-34760, i15=14, i16=-79, i17=-12, i18=215;
        float f=-1.214F;
        long lArr[][]=new long[N][N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(lArr, -35L);
        FuzzerUtils.init(dArr1, 2.71091);

        for (i = 13; i < 345; i++) {
            f += (((i * i1) + Test.instanceCount) - i);
            if (Test.bFld) {
                vMeth(i, Test.instanceCount);
                Test.fFld += -38374;
                for (i14 = i; i14 < 76; ++i14) {
                    Test.instanceCount <<= i;
                    switch (((i >>> 1) % 2) + 25) {
                    case 25:
                        if (Test.bFld) {
                            iArrFld[i + 1] = -2;
                            Test.instanceCount += (i14 | i1);
                            Test.instanceCount = 7;
                            for (i16 = 1; i16 < 1; ++i16) {
                                double d4=40.122863;
                                i15 = i14;
                                switch (((i14 % 3) * 5) + 108) {
                                case 114:
                                    i15 ^= -14;
                                    lArr[i - 1][i] *= i17;
                                    i17 ^= -42667;
                                case 116:
                                    f = 34014;
                                    break;
                                case 120:
                                    i15 >>= i17;
                                    dArr1 = dArr1;
                                    d4 -= Test.sFld;
                                }
                                if (Test.bFld) continue;
                                if (Test.bFld) continue;
                                dFld -= Test.iFld;
                                i1 = (int)d4;
                                Test.iFld -= byFld;
                                sArrFld[i16 - 1] >>= (short)i1;
                            }
                        } else if (Test.bFld) {
                            i17 = -11;
                            Test.instanceCount -= i14;
                        } else {
                            i18 += i1;
                        }
                    case 26:
                        iArrFld[i14 + 1] = i1;
                    default:
                        byFld <<= (byte)Test.instanceCount;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 lArr = " + i17 + "," + i18 + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("dArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld Test.bFld dFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("byFld Test.fArrFld iArrFld = " + byFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("sArrFld = " + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  bMeth ->  bMeth byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
