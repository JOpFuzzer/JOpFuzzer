// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-180L;
    public static volatile int iFld=-55565;
    public byte byFld=-76;
    public short sFld=-8660;
    public boolean bArrFld[]=new boolean[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i5, int i6, long l) {

        int i7=-16018, i8=-107, i9=-56439;
        float f1=-1.762F;
        double d3=13.114588, d4=-18.118635;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 51281L);

        i5 += Test.iFld;
        Test.iArrFld[(i6 >>> 1) % N] = Test.iArrFld[(Test.iFld >>> 1) % N];
        for (i7 = 9; i7 < 279; ++i7) {
            i8 *= i7;
        }
        i8 += Test.iFld;
        f1 -= 27519;
        i5 += (int)Test.instanceCount;
        d3 -= f1;
        for (long l1 : lArr1) {
            Test.instanceCount += l;
            for (d4 = 1; d4 < 4; d4++) {
                i8 *= i5;
            }
            i9 = (int)l1;
            i5 <<= -13;
            Test.iFld = (int)l1;
        }
        vMeth_check_sum += i5 + i6 + l + i7 + i8 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d3) +
            Double.doubleToLongBits(d4) + i9 + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth() {

        int i3=188, i4=-11, i10=-13;
        double d1=0.53205, d2=2.84095;
        float f2=-31.963F;
        byte by=-35;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -242L);

        i3 = 1;
        do {
            d1 += (Test.iFld = (Test.iFld++));
            for (d2 = 1; d2 < 7; d2++) {
                vMeth(i4, i3, -50154L);
                i10 = 1;
                while (++i10 < 2) {
                    short s=-669;
                    switch ((int)((d2 % 10) + 9)) {
                    case 9:
                        d1 -= f2;
                        i4 *= i3;
                        break;
                    case 10:
                        f2 -= Test.instanceCount;
                        Test.instanceCount += (i10 * i10);
                        s += (short)(-57 + (i10 * i10));
                        break;
                    case 11:
                        i4 = i10;
                        Test.instanceCount += (i10 * i3);
                        lArr2[i3 + 1] >>>= i10;
                        by = (byte)i3;
                        break;
                    case 12:
                        f2 += (((i10 * f2) + i10) - i4);
                        break;
                    case 13:
                        d1 += d2;
                        break;
                    case 14:
                        i4 = (int)-243L;
                        break;
                    case 15:
                        lArr2[i10 + 1] <<= i4;
                        break;
                    case 16:
                        by = (byte)Test.iFld;
                    case 17:
                        i4 += i10;
                        break;
                    case 18:
                    }
                }
            }
        } while (++i3 < 245);
        long meth_res = i3 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i4 + i10 +
            Float.floatToIntBits(f2) + by + FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(float f) {

        int i2=-37511, i11=-33654;

        i2 += iMeth();
        Test.iArrFld[(-9 >>> 1) % N][(10 >>> 1) % N] *= Test.iFld;
        i11 = 1;
        while (++i11 < 143) {
            Test.iFld += (i11 ^ Test.iFld);
        }
        long meth_res = Float.floatToIntBits(f) + i2 + i11;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-32, i1=141, i12=142, i13=11, i14=-103, i15=51875, i16=-1;
        double d=-107.302;
        float f3=-19.205F, f4=1.805F;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -612763456059656874L);

        for (i = 10; i < 340; i++) {
            bArrFld[i] = (10680 == ((--Test.instanceCount) + lArr[i - 1]));
            Test.iArrFld[i][i] ^= (int)(((2408513958L * (i * d)) + (-95 - (159 - (--i1)))) - (lMeth(-58.228F) + d));
            Test.instanceCount -= byFld;
            Test.instanceCount += (i * i);
        }
        Test.iArrFld[(i >>> 1) % N][(Test.iFld >>> 1) % N] <<= 143;
        for (i12 = 1; i12 < 169; i12++) {
            Test.iArrFld[i12][i12] -= (int)Test.instanceCount;
            if (false) break;
            i1 *= i13;
            for (i14 = 5; i14 < 149; i14++) {
                f3 = Test.instanceCount;
                f3 += (((i14 * Test.instanceCount) + i13) - Test.instanceCount);
                for (f4 = 1; f4 < 2; f4++) {
                    switch ((int)(((f4 % 10) * 5) + 59)) {
                    case 61:
                        byFld += (byte)i14;
                        i13 -= i13;
                        i13 = i;
                    case 95:
                        Test.iArrFld[i14][i12 + 1] = (int)f3;
                        d -= i15;
                        break;
                    case 104:
                        i16 = i1;
                        Test.iArrFld[(int)(f4 - 1)][(int)(f4 + 1)] %= (int)((long)(d) | 1);
                        if (b) continue;
                    case 91:
                        i16 += i13;
                        break;
                    case 82:
                        d = i13;
                        lArr[(int)(f4 - 1)] = (long)d;
                        break;
                    case 75:
                        i13 += (-8 + (f4 * f4));
                        break;
                    case 65:
                        d *= i16;
                        break;
                    case 87:
                        f3 = sFld;
                        break;
                    case 93:
                        lArr[(int)(f4 + 1)] = i13;
                        break;
                    case 86:
                        if (b) continue;
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 f3 f4 = " + i15 + "," + Float.floatToIntBits(f3) + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i16 b lArr = " + i16 + "," + (b ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld byFld = " + Test.instanceCount + "," + Test.iFld + "," +
            byFld);
        FuzzerUtils.out.println("sFld bArrFld Test.iArrFld = " + sFld + "," + FuzzerUtils.checkSum(bArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
