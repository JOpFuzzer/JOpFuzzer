// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-52734L;
    public boolean bFld=true;
    public static float fFld=126.749F;
    public static int iFld=-16950;
    public static volatile byte byFld=-31;
    public volatile short sFld=15160;
    public static boolean bArrFld[]=new boolean[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.iArrFld, 9);
    }

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i5=-247;

        Test.iArrFld[(61785 >>> 1) % N] &= i5;
        vMeth_check_sum += i5;
    }

    public static boolean bMeth() {

        int i6=-6, i7=10, i8=-2, i9=8, i10=-8, i11=-1;
        double d1=-2.75928, dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 0L);
        FuzzerUtils.init(dArr, -2.51532);

        vMeth();
        for (i6 = 374; 12 < i6; --i6) {
            i7 -= (int)d1;
            for (i8 = 5; i8 > i6; --i8) {
                Test.instanceCount += i7;
                switch ((i8 % 10) + 30) {
                case 30:
                    Test.iArrFld[i8 + 1] *= (int)Test.instanceCount;
                    break;
                case 31:
                    i9 = i7;
                    lArr[i8] &= i6;
                    for (i10 = 1; i10 < 1; ++i10) {
                        i11 -= -68;
                        Test.fFld = i11;
                        i7 >>= (int)Test.instanceCount;
                        i9 += i10;
                        i9 <<= i11;
                    }
                    break;
                case 32:
                    Test.instanceCount += i6;
                case 33:
                    Test.instanceCount = i6;
                    break;
                case 34:
                    i11 += (((i8 * i6) + i9) - i8);
                    break;
                case 35:
                    i7 = i10;
                    break;
                case 36:
                    Test.instanceCount = Test.instanceCount;
                case 37:
                    try {
                        i9 = (-730499032 % i10);
                        i7 = (144 % i9);
                        i7 = (10997 % i8);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 38:
                    dArr = FuzzerUtils.double1array(N, (double)1.96187);
                    break;
                case 39:
                    d1 = i11;
                    break;
                }
            }
        }
        long meth_res = i6 + i7 + Double.doubleToLongBits(d1) + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(long l) {

        float f1=-125.126F;
        int i12=60148, i13=21583, i14=-14, i15=-145, i16=-19337, i17=48581;
        boolean b=true;
        double d2=1.58270;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)9967);

        f1 = 1;
        do {
            if (Test.bArrFld[(int)(f1 - 1)] = bMeth()) continue;
            l += (long)(((f1 * Test.iFld) + Test.instanceCount) - Test.iFld);
            l += Test.iFld;
        } while (++f1 < 337);
        for (i12 = 11; i12 < 314; i12++) {
            for (i14 = 1; 5 > i14; i14++) {
                l += (((i14 * i14) + Test.instanceCount) - Test.fFld);
                for (i16 = 1; i16 < 2; ++i16) {
                    sArr = sArr;
                    switch ((((212 >>> 1) % 4) * 5) + 54) {
                    case 67:
                        if (b) {
                            i17 <<= (int)Test.instanceCount;
                            try {
                                i13 = (Test.iArrFld[i12] % i12);
                                Test.iFld = (i13 / i14);
                                i17 = (i16 / i14);
                            } catch (ArithmeticException a_e) {}
                            if (b) break;
                            if (b) break;
                        } else if (b) {
                            i13 += (int)(70.243F + (i16 * i16));
                        } else {
                            i17 = i14;
                        }
                    case 68:
                        Test.byFld -= (byte)i14;
                        break;
                    case 70:
                        Test.iFld = i17;
                        break;
                    case 74:
                        Test.iArrFld[i16 + 1] += (int)d2;
                        break;
                    default:
                        i17 += (((i16 * i14) + l) - i14);
                    }
                }
            }
        }
        long meth_res = l + Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + i16 + i17 + (b ? 1 : 0) +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-222, i1=11, i2=-1, i3=6, i4=5, i18=10536, i19=-46419, i20=0, i21=-20, iArr[]=new int[N];
        double d=56.17660, dArr1[]=new double[N];
        float f=115.974F;
        long l1=-8591803266488361641L, lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -147);
        FuzzerUtils.init(dArr1, 17.109121);
        FuzzerUtils.init(lArr1, 6L);

        i %= (int)(Math.abs((int)(iArr[(6 >>> 1) % N] - Test.instanceCount)) | 1);
        i1 = 1;
        while (++i1 < 181) {
            if (bFld = (Test.instanceCount != (d++))) break;
            for (i2 = 8; 139 > i2; ++i2) {
                if (true) {
                    i = (i3++);
                    i4 = 1;
                    do {
                        short s=10381;
                        iArr[i2 - 1] *= (int)(Test.instanceCount *= (long)(119 + (-(f * i))));
                        switch (((i4 % 2) * 5) + 65) {
                        case 74:
                            Test.instanceCount += i4;
                            Test.instanceCount *= (Math.max(Math.min(-25352, i2), i++) + iArr[i1 - 1]);
                            Test.instanceCount -= ((iMeth(Test.instanceCount) + i18) * i2);
                            break;
                        case 68:
                            s += (short)9;
                            i18 -= (int)l1;
                            break;
                        default:
                            Test.fFld = f;
                            try {
                                i = (-32328 / i);
                                Test.iArrFld[(Test.iFld >>> 1) % N] = (i4 / Test.iArrFld[i1]);
                                i18 = (i2 / 180);
                            } catch (ArithmeticException a_e) {}
                        }
                        Test.iFld -= (int)240417222147097648L;
                        Test.iFld = -205;
                        d = d;
                        i18 += (i4 * i3);
                        i = i4;
                        dArr1[i2 - 1] = i1;
                        lArr1[i4 - 1] = i;
                        Test.fFld = Test.fFld;
                    } while ((i4 += 2) < 2);
                } else if (bFld) {
                    Test.iFld = i4;
                    for (i19 = 1; i19 < 2; ++i19) {
                        d -= -56;
                        i21 = 10;
                        Test.iArrFld[i19 + 1] = sFld;
                        i20 += i19;
                    }
                } else {
                    i3 += -7087;
                }
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
        FuzzerUtils.out.println("f i18 l1 = " + Float.floatToIntBits(f) + "," + i18 + "," + l1);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("iArr dArr1 lArr1 = " + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount bFld Test.fFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld Test.byFld sFld = " + Test.iFld + "," + Test.byFld + "," + sFld);
        FuzzerUtils.out.println("Test.bArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
