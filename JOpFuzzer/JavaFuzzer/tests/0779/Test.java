// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=63L;
    public static boolean bFld=false;
    public static long lFld=-22941L;
    public static double dFld=63.52849;
    public static float fFld=1.650F;
    public int iFld=9;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -343);
        FuzzerUtils.init(Test.lArrFld, -2L);
        FuzzerUtils.init(Test.fArrFld, 45.913F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i9, int i10, int i11) {

        float f1=112.897F;
        int i12=12, i13=58048, i14=-4;

        switch ((((52975 >>> 1) % 1) * 5) + 63) {
        case 67:
            Test.instanceCount = -4;
            i11 >>= i9;
            f1 -= i10;
            break;
        }
        i11 *= i9;
        for (i12 = 299; 15 < i12; --i12) {
            i11 = i11;
            switch (((i12 % 2) * 5) + 65) {
            case 67:
                f1 -= Test.instanceCount;
                i13 += i10;
                Test.instanceCount -= (long)f1;
                break;
            case 70:
                i14 = 1;
                do {
                    Test.iArrFld = Test.iArrFld;
                    Test.instanceCount -= i12;
                    f1 = Test.instanceCount;
                } while (++i14 < 6);
            }
        }
        long meth_res = i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + i14;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i7=145, i8=-43590, i15=4562, i16=-137, i17=-6;
        byte by=-116;

        for (i7 = 1; i7 < 218; ++i7) {
            short s=4442;
            i8 += (int)dMeth(i8, i7, i8);
            i8 += i7;
            Test.iArrFld[i7] += i7;
            Test.bFld = Test.bFld;
            Test.iArrFld[i7 + 1] >>= (int)Test.instanceCount;
            s >>>= (short)27778;
            Test.iArrFld[i7 + 1] >>= (int)17L;
            i15 = 1;
            while (++i15 < 7) {
                switch ((i15 % 10) + 118) {
                case 118:
                    for (i16 = 1; 1 > i16; i16++) {
                        Test.lFld += i16;
                        i17 <<= -19870;
                        Test.instanceCount = i15;
                        Test.iArrFld[i7 - 1] %= (int)(i16 | 1);
                    }
                    break;
                case 119:
                case 120:
                    by += (byte)i16;
                    break;
                case 121:
                    Test.lArrFld = Test.lArrFld;
                    break;
                case 122:
                    Test.dFld -= Test.fFld;
                    break;
                case 123:
                    i17 += (((i15 * s) + i8) - i15);
                case 124:
                    i8 = i7;
                    break;
                case 125:
                    Test.instanceCount += (((i15 * i15) + Test.fFld) - Test.lFld);
                    break;
                case 126:
                    i17 = (int)Test.instanceCount;
                    break;
                case 127:
                    i17 >>= i17;
                    break;
                }
            }
        }
        vMeth_check_sum += i7 + i8 + i15 + i16 + i17 + by;
    }

    public static int iMeth(int i2, int i3, int i4) {

        int i5=-1466, i6=163, i18=-22;
        byte by1=-48;
        short sArr[]=new short[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)-939);
        FuzzerUtils.init(fArr, 1.283F);

        for (i5 = 15; i5 < 254; ++i5) {
            vMeth();
            if (Test.bFld) {
                i6 -= 129;
                sArr[i5 + 1] ^= (short)-137;
                i18 = 1;
                while (++i18 < 7) {
                    i2 *= i3;
                    i3 = i3;
                    i4 = i18;
                    by1 += (byte)i18;
                    fArr[i18 - 1] += 7;
                }
            } else if (Test.bFld) {
                by1 -= (byte)Test.instanceCount;
                Test.lArrFld[i5] = i4;
                Test.fFld = Test.instanceCount;
                i4 += i5;
            } else if (Test.bFld) {
                Test.lArrFld[i5] = (long)Test.fFld;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i18 + by1 + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-247, i1=2, i19=2, i20=9, i21=13, i22=10, i23=-10, i24=15;
        float f=2.340F;
        long l=-325709014L, l1=-28952L;
        byte by2=-12;
        short s1=-10319;

        for (i = 2; i < 327; i++) {
            f += i;
            i1 = Test.iArrFld[i - 1];
            i1 += (i * i1);
            i1 += ((iMeth(i, i1, i) + i1) >> i1);
            Test.instanceCount *= i;
            for (i19 = 77; i < i19; --i19) {
                Test.fArrFld[i19 + 1][i] *= i19;
                Test.iArrFld[i - 1] -= i20;
                Test.dFld = i;
                iFld += (int)-2088020420011721001L;
                i1 = (int)-9348L;
                for (i21 = 1; i21 < 1; i21++) {
                    iFld >>= i;
                    Test.lFld += (65103 + (i21 * i21));
                    i1 >>= (int)-3L;
                }
            }
            for (l = 1; l < 77; l++) {
                i22 = (int)Test.lFld;
                for (l1 = 1; 2 > l1; ++l1) {
                    by2 += (byte)(l1 * iFld);
                    Test.lFld = Test.lFld;
                    i22 += (int)(((l1 * i20) + i) - Test.fFld);
                    if (false) {
                        i20 += (int)(((l1 * f) + i24) - Test.lFld);
                        Test.iArrFld[(int)(l1)] *= i23;
                        i20 += (int)(((l1 * i24) + s1) - f);
                        i24 += (int)(l1 - i21);
                    } else {
                        i24 = i20;
                    }
                    Test.lArrFld[(int)(l - 1)] *= i23;
                }
                i23 += (int)(((l * i24) + i1) - i19);
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 l i23 = " + i22 + "," + l + "," + i23);
        FuzzerUtils.out.println("l1 i24 by2 = " + l1 + "," + i24 + "," + by2);
        FuzzerUtils.out.println("s1 = " + s1);

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.lFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.lFld);
        FuzzerUtils.out.println("Test.dFld Test.fFld iFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Float.floatToIntBits(Test.fFld) + "," + iFld);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
