// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3859854854L;
    public double dFld=109.15768;
    public float fFld=-104.114F;
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        int i8=129, i9=0, i10=37567, i11=-1, i12=-14969, i13=54806;
        short s=-23396;
        float f1=-1.447F;
        double d1=0.98358, d2=99.66345;
        boolean b=true;

        for (i8 = 14; i8 < 226; ++i8) {
            s = (short)Test.instanceCount;
            f1 = Test.instanceCount;
            Test.iArrFld[i8] = i9;
        }
        d1 *= i8;
        for (d2 = 12; d2 < 243; d2++) {
            i11 = 1;
            while (++i11 < 7) {
                d1 += i9;
                for (i12 = 1; i12 < 1; i12++) {
                    f1 = Test.instanceCount;
                    switch ((((i12 >>> 1) % 6) * 5) + 117) {
                    case 132:
                        i10 <<= (int)Test.instanceCount;
                        i9 *= (int)f1;
                    case 142:
                        if (b) continue;
                        i9 += i12;
                        break;
                    case 137:
                        Test.iArrFld[(int)(d2 + 1)] += -56546;
                        break;
                    case 119:
                        Test.iArrFld[i11] >>>= i12;
                        break;
                    case 128:
                        i10 += (i12 * i10);
                        break;
                    case 122:
                        Test.instanceCount = i8;
                        break;
                    default:
                        i10 += (((i12 * s) + i13) - Test.instanceCount);
                    }
                }
            }
        }
        long meth_res = i8 + i9 + s + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(d2) + i10 + i11 + i12 + i13 + (b ? 1 : 0);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(int i6) {

        int i7=-10, i14=46083, i15=6, i16=-17970;
        long l=10L, lArr1[]=new long[N];
        float f2=23.413F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr1, 165L);

        i7 = 1;
        while (++i7 < 192) {
            fMeth();
            Test.instanceCount *= (long)-2.78872;
            i6 -= -233;
            l = 1;
            while ((l += 2) < 8) {
                i6 = i7;
                i14 += (int)(l + Test.instanceCount);
                for (i15 = 1; i15 < 2; i15++) {
                    try {
                        i6 = (1722694451 / i16);
                        i14 = (Test.iArrFld[(int)(l + 1)] / 1409503620);
                        i6 = (i14 / i7);
                    } catch (ArithmeticException a_e) {}
                }
                f2 += i15;
                i14 = i14;
                Test.instanceCount = Test.instanceCount;
                bArr = bArr;
            }
            Test.instanceCount = i15;
            lArr1[i7] <<= Test.instanceCount;
        }
        vMeth1_check_sum += i6 + i7 + l + i14 + i15 + i16 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth() {

        int i2=9, i3=166, i4=0, i5=11;
        float f=-2.747F;
        double d=95.113085, dArr[]=new double[N];
        byte by=-119;
        boolean b1=true;
        long lArr[]=new long[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(lArr, -1963770741065379410L);
        FuzzerUtils.init(sArr, (short)9990);
        FuzzerUtils.init(dArr, 1.50173);

        i2 = 1;
        do {
            i3 += (((i2 * i3) + i3) - Test.instanceCount);
            for (i4 = i2; i4 < 5; ++i4) {
                if (true) continue;
                f = (((lArr[i2]++) * Integer.reverseBytes(i5)) - ((i4 + 6) - (i3 - -6L)));
                i5 = (int)1.805F;
                i3 = (int)(((-56L - (Test.instanceCount--)) + (sArr[i4 - 1][i4]++)) + ((d++) + (-3864 + i3)));
                dArr = (dArr = (dArr = (dArr = dArr)));
                try {
                    Test.iArrFld[i4] = (i3 / 938356902);
                    i3 = (100 / i4);
                    i3 = (i4 / 892700433);
                } catch (ArithmeticException a_e) {}
            }
            i5 -= (--by);
            vMeth1(i4);
            try {
                i3 = (i3 / Test.iArrFld[i2]);
                Test.iArrFld[i2] = (i2 / 1229586127);
                i5 = (-56 / i3);
            } catch (ArithmeticException a_e) {}
            if (b1) break;
            Test.iArrFld = Test.iArrFld;
        } while (++i2 < 305);
        Test.iArrFld = Test.iArrFld;
        vMeth_check_sum += i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + by + (b1 ? 1 : 0)
            + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=197, i1=-6, i17=9446, i18=-27935, i19=-14, i20=-89, i21=-13;
        short s1=-25602;
        long l1=-32420L;
        double d3=0.45119;
        byte by1=39;

        for (i = 11; i < 286; ++i) {
            vMeth();
            Test.instanceCount = i;
            i1 *= (int)Test.instanceCount;
            Test.iArrFld[i] -= s1;
            i1 = (int)l1;
            Test.instanceCount += (-14 + (i * i));
            i1 = i;
            Test.instanceCount |= i;
            dFld *= l1;
        }
        l1 *= i;
        for (d3 = 18; 396 > d3; d3++) {
            Test.instanceCount = -9;
            for (i18 = 1; i18 < 67; ++i18) {
                fFld -= i17;
                Test.iArrFld[(int)(d3 + 1)] += (int)-94L;
                for (i20 = 2; i20 > 1; i20--) {
                    Test.instanceCount += (long)d3;
                    dArrFld[i18 + 1] = i18;
                    i17 += i20;
                    Test.instanceCount += i18;
                    Test.iArrFld[i20] = s1;
                    i1 += i18;
                    i17 *= (int)5075917498772644839L;
                    i19 += (int)Test.instanceCount;
                    l1 = Test.instanceCount;
                    i17 |= 1;
                }
                fFld *= i17;
                i21 += (i18 - i19);
                i21 <<= by1;
            }
        }

        FuzzerUtils.out.println("i i1 s1 = " + i + "," + i1 + "," + s1);
        FuzzerUtils.out.println("l1 d3 i17 = " + l1 + "," + Double.doubleToLongBits(d3) + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 by1 = " + i21 + "," + by1);

        FuzzerUtils.out.println("Test.instanceCount dFld fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.iArrFld dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
