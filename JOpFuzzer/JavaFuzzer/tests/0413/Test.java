// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=9L;
    public static volatile int iFld=153;
    public static volatile byte byFld=-46;
    public static float fFld=-79.422F;
    public short sFld=-17678;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i4=40140, i5=33129, i6=84, i7=-46673;
        float f=1.748F, fArr[]=new float[N];
        boolean b=false;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 7361032543690013726L);
        FuzzerUtils.init(dArr, -80.84303);
        FuzzerUtils.init(fArr, -1.483F);

        if (b) {
            i4 += (int)Test.instanceCount;
            i4 >>= i4;
            i5 = 162;
            do {
                for (i6 = 1; i6 < 10; i6++) {
                    lArr[i6 - 1] = i6;
                    i7 += (i6 * i6);
                    dArr[i5 + 1] = Test.instanceCount;
                    i7 -= i7;
                    fArr[i5] *= i7;
                    lArr[i6 - 1] = -48360;
                    f += (i6 + i4);
                    i7 = i7;
                }
            } while (--i5 > 0);
        } else if (b) {
            Test.instanceCount >>>= i6;
            Test.instanceCount *= i4;
        } else if (b) {
            lArr = FuzzerUtils.long1array(N, (long)-146L);
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(int i, int i1) {

        int i2=203, i3=-41257, i8=3, iArr1[]=new int[N];
        double d=-2.125764;
        float f2=27.973F;
        boolean b1=true;

        FuzzerUtils.init(iArr1, 253);

        for (i2 = 6; i2 < 210; i2++) {
            vMeth1();
            i3 -= (int)d;
            try {
                i = (i1 / 50265);
                i = (i3 / 65);
                i = (iArr1[i2 - 1] / i3);
            } catch (ArithmeticException a_e) {}
            if (b1) {
                i <<= i;
            } else if (b1) {
                i8 = 1;
                while (++i8 < 8) {
                    float f1=-2.288F;
                    i1 += (int)(1079967033091755159L + (i8 * i8));
                    i1 -= (int)Test.instanceCount;
                    i1 ^= i8;
                    i3 = i3;
                    f1 -= Test.instanceCount;
                    f1 += i;
                }
                f2 *= i2;
                f2 += (i2 * i2);
            } else {
                f2 += (i2 + Test.instanceCount);
            }
        }
        long meth_res = i + i1 + i2 + i3 + Double.doubleToLongBits(d) + i8 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        long l=-3L;
        int i9=-139, i10=14, i11=-216, i12=-226, i13=-55701, iArr[]=new int[N];
        float f3=0.306F;
        double d1=98.17782;

        FuzzerUtils.init(iArr, 31);

        iArr[(-4 >>> 1) % N] = (int)lMeth(Test.iFld, Test.iFld);
        l = Test.instanceCount;
        for (i9 = 11; i9 < 361; i9++) {
            i10 -= (int)l;
            i11 = 1;
            while (++i11 < 5) {
                Test.iFld += (((i11 * i11) + f3) - i9);
                iArr = iArr;
                Test.iFld += (((i11 * l) + i10) - Test.byFld);
                i10 -= i9;
                iArr[i9 - 1] = (int)43645L;
                for (i12 = i9; 1 > i12; ++i12) {
                    iArr[i12 + 1] <<= i9;
                    i13 |= (int)l;
                }
                iArr[i11] -= 2;
                d1 = Test.iFld;
            }
        }
        vMeth_check_sum += l + i9 + i10 + i11 + Float.floatToIntBits(f3) + i12 + i13 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d2=2.77358, d3=-8.110499;
        int i14=235, i15=10, i16=8746, i17=-152, i18=-94, i19=-3499, i20=-5;
        long l1=-102L;
        boolean b2=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-5186);

        vMeth();
        for (d2 = 9; d2 < 150; d2++) {
            i14 = i14;
            for (i15 = 9; i15 < 178; i15 += 2) {
                Test.iFld += (i15 - Test.instanceCount);
                Test.fFld += 0L;
                Test.iFld += (int)d2;
                try {
                    Test.iArrFld[(int)(d2 - 1)] = (224 % Test.iArrFld[(int)(d2)]);
                    Test.iFld = (i14 / 1954314191);
                    i14 = (i15 % -14336);
                } catch (ArithmeticException a_e) {}
                Test.fFld = Test.instanceCount;
                Test.iFld += i15;
            }
            switch ((int)((d2 % 5) + 47)) {
            case 47:
                try {
                    Test.iFld = (i14 % i15);
                    Test.iArrFld[(int)(d2 + 1)] = (131 % Test.iFld);
                    Test.iFld = (i15 / i14);
                } catch (ArithmeticException a_e) {}
                break;
            case 48:
                Test.instanceCount = Test.instanceCount;
                i16 -= i14;
                sArr[(int)(d2 - 1)] >>>= (short)i14;
                if (false) continue;
                break;
            case 49:
                for (d3 = 178; d3 > 5; d3 -= 2) {
                    Test.iArrFld[(int)(d3)] >>= i17;
                    try {
                        i17 = (i15 / -13661);
                        Test.iFld = (i16 % -1553181848);
                        Test.iFld = (-6 % i18);
                    } catch (ArithmeticException a_e) {}
                    l1 += (long)(((d3 * Test.iFld) + Test.instanceCount) - Test.iFld);
                    Test.byFld >>= (byte)i17;
                }
                if (true) {
                    for (i19 = 178; 10 < i19; i19 -= 3) {
                        i18 -= i16;
                        Test.iArrFld[i19] -= i19;
                    }
                    sFld = (short)Test.fFld;
                    l1 -= (long)Test.fFld;
                } else if (b2) {
                    b2 = false;
                } else {
                    i18 += (int)Test.fFld;
                }
                Test.fFld -= i16;
                break;
            case 50:
                i18 -= (int)Test.instanceCount;
                break;
            case 51:
                Test.instanceCount += (long)(((d2 * i17) + i14) - i17);
            default:
                Test.iArrFld[(int)(d2)] -= i15;
            }
        }

        FuzzerUtils.out.println("d2 i14 i15 = " + Double.doubleToLongBits(d2) + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 d3 i17 = " + i16 + "," + Double.doubleToLongBits(d3) + "," + i17);
        FuzzerUtils.out.println("i18 l1 i19 = " + i18 + "," + l1 + "," + i19);
        FuzzerUtils.out.println("i20 b2 sArr = " + i20 + "," + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.fFld sFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," + sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
