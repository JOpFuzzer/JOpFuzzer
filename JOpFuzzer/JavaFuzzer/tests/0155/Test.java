// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5477903181085710018L;
    public static volatile int iFld=46;
    public static short sFld=28425;
    public static int iFld1=-17;
    public int iFld2=-45;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static short sArrFld[]=new short[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -144);
        FuzzerUtils.init(Test.fArrFld, -90.911F);
        FuzzerUtils.init(Test.sArrFld, (short)18742);
        FuzzerUtils.init(Test.lArrFld, 14L);
    }

    public static long sMeth_check_sum = 0;
    public static long sMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, float f1, byte by) {

        int i6=169, i7=39337, i8=3, i9=239;
        boolean b=false;

        i6 = 1;
        do {
            Test.iArrFld[i6 + 1] = (int)Test.instanceCount;
            for (i7 = 1; 8 > i7; i7++) {
                i8 >>= (int)Test.instanceCount;
                Test.fArrFld[i7 - 1] *= i5;
                i5 = i5;
                if (false) continue;
                Test.instanceCount += i7;
                f1 *= Test.sFld;
                i8 += (-48473 + (i7 * i7));
                if (b) continue;
                Test.sArrFld[i7] += (short)i8;
                i9 = 1;
                do {
                    Test.sArrFld[i7 + 1] >>>= (short)-52;
                    i5 = i9;
                } while (++i9 < 2);
            }
        } while (++i6 < 195);
        long meth_res = i5 + Float.floatToIntBits(f1) + by + i6 + i7 + i8 + (b ? 1 : 0) + i9;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth1() {

        int i3=-1, i4=13;
        float f=-118.59F;
        byte by1=2;
        long lArr[]=new long[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(lArr, -163L);
        FuzzerUtils.init(dArr, 92.9419);

        i3 = 1;
        while (++i3 < 392) {
            try {
                Test.iFld = (167 % Test.iArrFld[i3 + 1]);
                Test.iFld = (i3 % -52549);
                Test.iFld = (25860 / Test.iArrFld[i3]);
            } catch (ArithmeticException a_e) {}
            i4 = 1;
            do {
                Test.iFld <<= Test.iFld;
                Test.iArrFld[i4 - 1] <<= (int)(lArr[i3 + 1] + (Test.iFld - i3));
                if (((--Test.iFld) * ((lArr[i4 + 1]++) & (long)(f + Test.iFld))) > iMeth(i3, -118.589F, by1)) continue;
            } while (++i4 < 4);
            Test.iFld = i4;
            Test.iFld = Test.iFld;
            dArr[i3][i3] = Test.sFld;
        }
        Test.instanceCount = Test.instanceCount;
        Test.iArrFld[(Test.iFld >>> 1) % N] >>= i3;
        long meth_res = i3 + i4 + Float.floatToIntBits(f) + by1 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth1_check_sum += meth_res;
        return (short)meth_res;
    }

    public static short sMeth(int i, int i1, int i2) {

        int i10=46678, i11=44530, i12=13, i13=-44773, i14=-9;
        float f2=0.643F;

        i2 = sMeth1();
        i2 ^= Test.iFld;
        Test.iArrFld[(i2 >>> 1) % N] = i1;
        for (i10 = 15; 272 > i10; ++i10) {
            i = (int)Test.instanceCount;
        }
        Test.instanceCount *= -38196;
        i11 = i1;
        Test.instanceCount = i10;
        for (i12 = 5; i12 < 122; i12 += 3) {
            Test.instanceCount *= i1;
            Test.iFld += Test.iFld1;
            for (f2 = i12; f2 < 39; ++f2) {
                i1 -= Test.iFld;
                i14 += (int)(f2 * f2);
                Test.iFld1 = (int)1196278719L;
            }
        }
        long meth_res = i + i1 + i2 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + i14;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by2=31;
        int i15=10, i16=0, i17=6, i18=38606, i19=191, i20=-11, i21=-7;
        double d=113.61766;
        float f4=2.628F;

        Test.iFld -= sMeth(Test.iFld1, Test.iFld, Test.iFld);
        Test.iFld1 = by2;
        for (i15 = 384; i15 > 24; i15--) {
            float f3=-1.943F;
            Test.iFld += (int)f3;
            Test.iArrFld[i15 - 1] <<= Test.iFld1;
            switch (((Test.iFld1 >>> 1) % 2) + 66) {
            case 66:
                Test.iFld1 >>= (int)Test.instanceCount;
                Test.iArrFld[i15] += Test.iFld;
                i17 = 1;
                do {
                    Test.instanceCount >>= i15;
                    Test.instanceCount += (long)(-118.878F + (i17 * i17));
                    f3 = 6649;
                    Test.lArrFld[i15][i17 - 1] *= (long)64.437F;
                    Test.iFld = i15;
                    Test.iFld = i16;
                    by2 += (byte)d;
                    Test.iArrFld = Test.iArrFld;
                    for (f4 = 1; f4 < 1; ++f4) {
                        Test.instanceCount += (long)(f4 * Test.instanceCount);
                        Test.iFld += i16;
                        f3 -= f3;
                        Test.iArrFld[i15 + 1] += (int)d;
                        try {
                            iFld2 = (Test.iArrFld[i17] / iFld2);
                            iFld2 = (50274 % Test.iFld1);
                            i18 = (31 % Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        i19 += (int)Test.instanceCount;
                    }
                } while (++i17 < 70);
                break;
            case 67:
                for (i20 = 2; i20 < 70; i20++) {
                    iFld2 = i15;
                    Test.instanceCount += (-6L + (i20 * i20));
                    Test.iArrFld[i15 + 1] = -103;
                    Test.sFld = (short)Test.instanceCount;
                }
                break;
            default:
                i21 = (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("by2 i15 i16 = " + by2 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 d f4 = " + i17 + "," + Double.doubleToLongBits(d) + "," +
            Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 = " + i21);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld1 iFld2 Test.iArrFld = " + Test.iFld1 + "," + iFld2 + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld Test.sArrFld Test.lArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.sArrFld) +
            "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("sMeth1_check_sum: " + sMeth1_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  sMeth1 ->  sMeth1 sMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth1 sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
