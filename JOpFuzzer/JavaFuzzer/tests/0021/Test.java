// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=197L;
    public static short sFld=32579;
    public boolean bFld=false;
    public int iFld=63422;
    public static int iArrFld[]=new int[N];
    public static volatile double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 192);
        FuzzerUtils.init(Test.dArrFld, 96.93163);
        FuzzerUtils.init(Test.lArrFld, 86L);
        FuzzerUtils.init(Test.fArrFld, -114.966F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(double d, int i7) {

        int i8=-14, i9=53403, i10=-152;
        float f=61.314F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 83.114114);

        for (i8 = 226; 1 < i8; --i8) {
            i9 = i7;
            i10 = 1;
            do {
                dArr[(i7 >>> 1) % N] = i9;
                i7 += (i10 - i10);
                i7 += (((i10 * i10) + Test.instanceCount) - i10);
                Test.iArrFld[i10 - 1] = i10;
                Test.lArrFld[i8 - 1] >>= 73;
                Test.fArrFld[i8] -= i10;
                Test.iArrFld[i8] = 11;
                i7 = (int)26L;
                Test.iArrFld[i8] = i9;
            } while (++i10 < 7);
            Test.instanceCount = i10;
            i7 += i8;
            f += i9;
        }
        long meth_res = Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i3) {

        byte by=-79;
        int i4=3, i5=-59, i6=2;
        long l=-31L, l1=14L;
        double d1=-43.110683;
        float f1=-2.599F;
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        i3 <<= (int)(((i3 += by) + (--i3)) - (Test.iArrFld[(i3 >>> 1) % N] + (i3 - 6572124262632529544L)));
        if (true) {
            for (i4 = 385; i4 > 17; i4 -= 2) {
                for (l = i4; l < 9; ++l) {
                    try {
                        Test.iArrFld[i4 + 1] = (i3 % i6);
                        i6 = (i3 / i4);
                        i5 = (Test.iArrFld[i4] % -63);
                    } catch (ArithmeticException a_e) {}
                    i5 = (Math.abs(Test.iArrFld[(int)(l)]) - (i6--));
                    i6 += (int)(l ^ i4);
                    Test.dArrFld[i4 - 1] = iMeth2(d1, i6);
                    Test.iArrFld[i4] += i4;
                    Test.sFld += (short)(((l * by) + i6) - Test.sFld);
                    i3 -= (int)f1;
                    switch ((i4 % 1) + 45) {
                    case 45:
                        Test.instanceCount += (l + i5);
                        Test.instanceCount >>= -6367213264384437734L;
                        l1 += (l - f1);
                        break;
                    }
                }
            }
        } else if (b) {
            bArr[(i4 >>> 1) % N] = b;
        } else if (b) {
            i6 = (int)-1.724F;
        } else {
            l1 >>= l1;
        }
        long meth_res = i3 + by + i4 + i5 + l + i6 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + l1 + (b ?
            1 : 0) + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2) {

        float f2=0.259F;

        Test.instanceCount -= i2;
        i2 *= iMeth1(i2);
        i2 -= (int)f2;
        long meth_res = i2 + Float.floatToIntBits(f2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-13, i1=42839, i11=-19787, i12=-23743, i13=-10, i14=-14, i15=145;
        long l2=-5499208838489058916L, l3=7L;
        float f3=-108.9F, fArr[]=new float[N];
        byte by1=-62;

        FuzzerUtils.init(fArr, -103.649F);

        for (i = 5; i < 222; ++i) {
            double d2=-77.4394;
            Test.instanceCount += i;
            Test.instanceCount >>= (long)((fArr[i]--) % ((iMeth(75) - i1) | 1));
            switch ((((i1 >>> 1) % 7) * 5) + 70) {
            case 96:
                for (l2 = 1; l2 < 116; ++l2) {
                    i1 += (int)(((l2 * i) + Test.instanceCount) - i);
                    i11 <<= i11;
                    Test.instanceCount <<= -51325;
                    Test.instanceCount += i1;
                }
                f3 *= i;
                i11 -= i;
                i11 -= Test.sFld;
                break;
            case 81:
                i1 += (((i * i) + i11) - i1);
                f3 -= f3;
                break;
            case 86:
                i1 = (int)1.90F;
                i1 -= (int)d2;
                i1 = (int)l2;
                for (i12 = 7; i12 < 116; ++i12) {
                    i11 *= (int)Test.instanceCount;
                    l3 = 1;
                    do {
                        if (bFld) continue;
                    } while (++l3 < 2);
                    for (i14 = 1; 2 > i14; ++i14) {
                        i11 = i1;
                        switch (((i14 >>> 1) % 4) + 89) {
                        case 89:
                            bFld = bFld;
                            d2 *= -87;
                            d2 += i1;
                            i1 <<= i15;
                        case 90:
                            by1 &= (byte)l2;
                            if (bFld) break;
                            break;
                        case 91:
                            i1 *= (int)f3;
                            break;
                        case 92:
                            bFld = bFld;
                            break;
                        }
                    }
                }
                break;
            case 103:
                Test.iArrFld[i + 1] |= i12;
                break;
            case 80:
                Test.lArrFld[i - 1] *= (long)f3;
                break;
            case 75:
                i13 /= (int)(i15 | 1);
                break;
            case 71:
                i11 = iFld;
                break;
            default:
                i13 &= 187;
            }
        }

        FuzzerUtils.out.println("i i1 l2 = " + i + "," + i1 + "," + l2);
        FuzzerUtils.out.println("i11 f3 i12 = " + i11 + "," + Float.floatToIntBits(f3) + "," + i12);
        FuzzerUtils.out.println("i13 l3 i14 = " + i13 + "," + l3 + "," + i14);
        FuzzerUtils.out.println("i15 by1 fArr = " + i15 + "," + by1 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld bFld = " + Test.instanceCount + "," + Test.sFld + "," +
            (bFld ? 1 : 0));
        FuzzerUtils.out.println("iFld Test.iArrFld Test.dArrFld = " + iFld + "," + FuzzerUtils.checkSum(Test.iArrFld) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
