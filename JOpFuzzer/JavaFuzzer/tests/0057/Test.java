// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static float fFld=-37.832F;
    public double dFld=0.39144;
    public int iFld=-23660;
    public static volatile boolean bArrFld[]=new boolean[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.byArrFld, (byte)-14);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4) {

        double d1=1.16638;
        int i5=0, i6=14785, i7=-7, i8=-1, i9=234, i10=-7, i11=-247;
        float f=26.628F, fArr[]=new float[N];
        boolean b1=true;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 52842L);
        FuzzerUtils.init(fArr, 0.769F);

        if (b1) {
            for (d1 = 2; d1 < 182; ++d1) {
                boolean b=false;
                for (i6 = 1; i6 < 9; ++i6) {
                    i7 += (((i6 * Test.instanceCount) + Test.instanceCount) - i7);
                }
                lArr[(int)(d1)][(int)(d1 + 1)] -= (long)Test.fFld;
                i8 = 1;
                while (++i8 < 9) {
                    i4 /= (int)(i6 | 1);
                    i7 += (int)f;
                    Test.fFld = Test.instanceCount;
                    i4 += i8;
                }
                Test.instanceCount += i9;
                switch ((int)(((d1 % 8) * 5) + 9)) {
                case 30:
                    for (i10 = (int)(d1); i10 < 9; ++i10) {
                        i11 += (((i10 * Test.instanceCount) + i5) - Test.instanceCount);
                        i9 *= i10;
                    }
                case 26:
                    Test.instanceCount += (13L + (d1 * d1));
                    break;
                case 11:
                    i7 = i11;
                    break;
                case 23:
                    b = b;
                case 41:
                    fArr = fArr;
                    break;
                case 35:
                    lArr[(i8 >>> 1) % N][(int)(d1)] &= 12;
                    break;
                case 33:
                    Test.instanceCount += (long)(d1 - i11);
                case 14:
                }
            }
        } else if (b1) {
            i9 -= (int)Test.instanceCount;
        } else if (false) {
            Test.instanceCount = i8;
        } else {
            i7 = i9;
        }
        long meth_res = i4 + Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + i11
            + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(double d) {

        int i12=-63519, i13=25155, i14=16567, i15=33182, i16=95, iArr1[][]=new int[N][N];
        float f1=-2.990F;
        boolean b2=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 6420296762831327754L);
        FuzzerUtils.init(iArr1, 124);

        Test.instanceCount *= ((iMeth(i12) - i12) * Test.instanceCount);
        for (i13 = 9; i13 < 233; i13++) {
            if (i14 != 0) {
                vMeth1_check_sum += Double.doubleToLongBits(d) + i12 + i13 + i14 + Float.floatToIntBits(f1) + i15 + i16
                    + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
                return;
            }
            f1 = 1;
            while (++f1 < 7) {
                i12 >>= i12;
                for (i15 = 1; i15 < 1; i15 += 3) {
                    i12 = i14;
                    Test.instanceCount = i14;
                }
                i12 += -125;
                lArr1[(int)(f1 - 1)] += (long)-16.2463;
                Test.bArrFld[i13 + 1] = b2;
                Test.fFld += (1 + (f1 * f1));
                try {
                    i12 = (i16 % i13);
                    i12 = (iArr1[i13 + 1][i13] / -67832450);
                    iArr1[(int)(f1 + 1)][(int)(f1 - 1)] = (-25480 % i15);
                } catch (ArithmeticException a_e) {}
                i14 -= i15;
            }
            i14 += (i13 * i13);
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i12 + i13 + i14 + Float.floatToIntBits(f1) + i15 + i16 + (b2 ?
            1 : 0) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        double d2=-111.87787;
        int i17=-189, i18=-19889, i19=-57, i20=12, i21=1344, i22=-5, i23=112;
        short s1=20807;
        boolean b3=false;

        vMeth1(d2);
        i17 += -244;
        if (b3) {
            Test.instanceCount = (long)Test.fFld;
            i17 += (int)-3072502954473183119L;
            for (i18 = 7; i18 < 168; i18++) {
                for (i20 = 1; i20 < 10; ++i20) {
                    for (i22 = 1; 2 > i22; ++i22) {
                        byte by=-94;
                        i21 += (((i22 * Test.fFld) + Test.instanceCount) - i21);
                        Test.instanceCount = by;
                        i21 *= i18;
                        switch ((((i21 >>> 1) % 6) * 5) + 26) {
                        case 50:
                        case 29:
                            i17 += (int)Test.instanceCount;
                            i17 *= i22;
                            break;
                        case 37:
                        case 40:
                            Test.byArrFld[i20] = (byte)-5735016295197399493L;
                            break;
                        case 47:
                            Test.fFld -= i21;
                            break;
                        case 41:
                            i23 += -14;
                        default:
                            i21 = s1;
                        }
                    }
                }
            }
        } else if (b3) {
            Test.fFld = -31;
        } else {
            d2 -= 3319;
        }
        vMeth_check_sum += Double.doubleToLongBits(d2) + i17 + i18 + i19 + i20 + i21 + i22 + i23 + s1 + (b3 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=-231, i2=-24098, i3=7, i24=-68, i25=200, i26=2, i27=51903, i28=-52854, i29=14, i30=-10, iArr[]=new
            int[N];
        short s=-32531;
        boolean b4=false;
        double d3=1.68661, dArr[][]=new double[N][N];
        long l=34236L;
        byte by1=119;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr, -65146);
        FuzzerUtils.init(dArr, -71.40384);
        FuzzerUtils.init(fArr1, -2.802F);

        for (i = 3; i < 141; ++i) {
            Test.instanceCount += (i | i1);
        }
        i1 >>>= (int)((Math.max(i1, 13) - i) - ((Test.instanceCount * Test.instanceCount) + (Test.instanceCount * i1)));
        for (i2 = 6; i2 < 143; i2++) {
            i1 += ((++s) * -39330);
            Test.instanceCount = ((iArr[i2 + 1]++) * i2);
            vMeth();
            dFld += i;
            Test.fFld = Test.instanceCount;
            switch (((i2 % 7) * 5) + 54) {
            case 56:
                if (b4) {
                    if (b4) break;
                    Test.instanceCount += i2;
                    for (d3 = 9; d3 < 183; d3++) {
                        b4 = true;
                    }
                    for (i25 = i2; i25 < 183; i25++) {
                        Test.fFld -= i;
                        for (l = 1; l < 1; ++l) {
                            Test.fFld *= (float)dFld;
                            i26 += (int)(((l * l) + i2) - iFld);
                            dArr = dArr;
                            i1 = 64;
                            fArr1[(int)(l + 1)] += i;
                        }
                        if (b4) {
                            i27 *= (int)l;
                        } else if (false) {
                            Test.fFld -= -158;
                        } else if (b4) {
                            Test.fFld += i25;
                        }
                        for (i28 = 1; i28 < 1; i28++) {
                            i3 = i3;
                            iFld >>= i30;
                        }
                    }
                } else {
                    i24 += (((i2 * l) + i3) - i29);
                }
            case 85:
            case 79:
                fArr1[i2 - 1] *= i;
                break;
            case 62:
                i30 -= i27;
                break;
            case 58:
                fArr1[i2] = i24;
                break;
            case 89:
                by1 = (byte)i27;
                break;
            case 84:
                Test.byArrFld[i2] <<= (byte)i25;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 s b4 = " + i3 + "," + s + "," + (b4 ? 1 : 0));
        FuzzerUtils.out.println("d3 i24 i25 = " + Double.doubleToLongBits(d3) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 l i27 = " + i26 + "," + l + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("by1 iArr dArr = " + by1 + "," + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("iFld Test.bArrFld Test.byArrFld = " + iFld + "," + FuzzerUtils.checkSum(Test.bArrFld)
            + "," + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
