// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=4011304022827042065L;
    public static boolean bFld=false;
    public static volatile float fFld=1.607F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -100);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static int iMeth(float f1, int i5) {

        double d=0.8423;

        f1 = (float)((i5 + (i5--)) - ((f1++) + d));
        long meth_res = Float.floatToIntBits(f1) + i5 + Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth(long l, int i11) {

        int i12=5, i13=8, i14=-2, i15=-56514, i16=190;
        float f3=-1.311F, fArr[]=new float[N];
        byte by1=-105;

        FuzzerUtils.init(fArr, -116.118F);

        i12 = 1;
        while (++i12 < 217) {
            fArr[i12 - 1] = f3;
            i11 += (int)Test.instanceCount;
            if (Test.bFld) {
                l = -39L;
                for (i13 = 1; 7 > i13; ++i13) {
                    Test.iArrFld = Test.iArrFld;
                    for (i15 = 1; 2 > i15; ++i15) {
                        Test.instanceCount += by1;
                        i11 = i11;
                        i11 *= (int)Test.instanceCount;
                        l = i13;
                        Test.bFld = Test.bFld;
                        fArr[i12 - 1] = i14;
                        i14 = (int)l;
                    }
                }
            } else if (true) {
                try {
                    i11 = (-12 / i12);
                    i16 = (i11 / Test.iArrFld[i12]);
                    i14 = (i11 / i16);
                } catch (ArithmeticException a_e) {}
            } else {
                by1 += (byte)Test.instanceCount;
            }
        }
        long meth_res = l + i11 + i12 + Float.floatToIntBits(f3) + i13 + i14 + i15 + i16 + by1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(int i6, byte by) {

        int i7=-3220, i8=-1, i9=-4, i10=-1, i17=-13, i18=5314, i19=-37067, i20=-88;
        float f2=85.408F;
        double d1=-2.82554;

        for (i7 = 10; i7 < 238; i7++) {
            f2 = 1;
            while (++f2 < 7) {
                i9 = 1;
                do {
                    try {
                        i10 = (i6 % 38037);
                        Test.iArrFld[i7 - 1] = (Test.iArrFld[i7 + 1] / -30694);
                        i8 = (Test.iArrFld[(int)(f2 + 1)] / i6);
                    } catch (ArithmeticException a_e) {}
                } while (++i9 < 1);
                by += (byte)(((f2 * f2) + i10) - i8);
            }
            byMeth(32L, i9);
            d1 = i7;
            for (i17 = 1; i17 < 7; ++i17) {
                i10 |= i7;
                for (i19 = 1; i19 < 2; ++i19) {
                    Test.iArrFld[i17 - 1] <<= i6;
                    if (Test.bFld) continue;
                    if (Test.bFld) break;
                    Test.iArrFld[i19] <<= (int)Test.instanceCount;
                    try {
                        i10 = (Test.iArrFld[i7 + 1] / i8);
                        i20 = (i9 / 246406151);
                        i18 = (2050480447 % i20);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth_check_sum += i6 + by + i7 + i8 + Float.floatToIntBits(f2) + i9 + i10 + Double.doubleToLongBits(d1) + i17
            + i18 + i19 + i20;
    }

    public static float fMeth() {

        int i21=27360, i22=5, i23=0, i24=21, i25=237, i26=-63266, i27=10, i28=-7, i29=-4, i30=-45005;
        byte by2=25;
        short s=-28178;

        vMeth(i21, (byte)(-58));
        Test.iArrFld[(i21 >>> 1) % N] -= i21;
        i21 = (int)Test.instanceCount;
        for (i22 = 14; i22 < 283; i22++) {
            i24 = 1;
            while (++i24 < 6) {
                i21 += by2;
                for (i25 = 1; i25 > i24; i25 -= 3) {
                    i21 += (i25 * i25);
                }
                for (i27 = 1; i27 > 1; i27 -= 3) {
                    Test.instanceCount -= i21;
                }
                i23 += (((i24 * s) + i27) - i28);
                i21 += (((i24 * i25) + Test.fFld) - Test.fFld);
            }
            for (i29 = 1; i29 < 6; i29++) {
                i30 >>= i29;
                Test.iArrFld[i29 + 1] += i30;
            }
        }
        long meth_res = i21 + i22 + i23 + i24 + by2 + i25 + i26 + i27 + i28 + s + i29 + i30;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=15929, i1=-250, i2=4, i3=121, i4=19638, i31=48144, i32=-50971, i33=-11, i34=-5676, i35=20, i36=228;
        float f=84.330F;
        double d2=30.88149;
        short s1=-27408;

        i = 1;
        do {
            for (i1 = 1; 86 > i1; i1++) {
                for (i3 = 2; i3 > 1; i3 -= 3) {
                    i2 *= Test.iArrFld[i3 - 1];
                    i2 += (i3 - i4);
                    Test.iArrFld[i - 1] = Test.iArrFld[i3];
                    Test.instanceCount <<= (long)(((f--) + i1) * i);
                    i2 *= (iMeth(fMeth(), i2) + i);
                    Test.instanceCount += i4;
                    Test.iArrFld[i - 1] = (int)Test.instanceCount;
                    i2 = (int)Test.fFld;
                }
            }
            i4 *= i3;
            Test.iArrFld[i] = i1;
            switch (((i % 4) * 5) + 43) {
            case 46:
                switch ((i % 4) + 117) {
                case 117:
                    for (i31 = 4; i31 < 86; i31++) {
                        d2 += i1;
                        Test.instanceCount += Test.instanceCount;
                    }
                case 118:
                    i4 += (((i * Test.instanceCount) + i31) - i33);
                    break;
                case 119:
                    i32 = i1;
                    i2 += (((i * i4) + f) - i);
                case 120:
                    i33 = 11;
                    i2 += i33;
                    i33 = (int)f;
                    break;
                default:
                    Test.iArrFld = Test.iArrFld;
                }
                for (i34 = 5; i34 < 86; i34++) {
                    i35 = (int)Test.instanceCount;
                    i2 += (4 + (i34 * i34));
                    i33 += (int)(-173L + (i34 * i34));
                    i35 *= i36;
                }
                break;
            case 50:
                s1 += (short)(((i * i) + i31) - i36);
                break;
            case 44:
                Test.instanceCount = -24782;
                break;
            case 51:
                d2 = 251;
                break;
            default:
                Test.instanceCount = -30083;
            }
        } while (++i < 293);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 f = " + i3 + "," + i4 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i31 i32 d2 = " + i31 + "," + i32 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 s1 = " + i36 + "," + s1);

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
