// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3190830149L;
    public static double dFld=44.115640;
    public static float fFld=-9.447F;
    public static volatile byte byFld=-2;
    public volatile int iFld=11;
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static volatile long lArrFld[]=new long[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 99.579F);
        FuzzerUtils.init(Test.lArrFld, 1137823875L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(long l3, long l4, int i7) {

        float f1=-105.548F;
        int i8=60787, i9=2, i10=0, i11=-175, i12=165;
        boolean b=false;
        double d1=0.50228;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -1821734068L);

        for (f1 = 11; 271 > f1; ++f1) {
            l4 += (long)(f1 * f1);
            if (b) break;
            Test.dFld /= (l3 | 1);
            Test.dFld *= l4;
            for (d1 = 6; 1 < d1; d1--) {
                i9 += i9;
            }
        }
        lArr1[(i8 >>> 1) % N] += i7;
        for (i10 = 5; i10 < 139; ++i10) {
            i12 = 1;
            while (++i12 < 12) {
                l4 |= -2;
                l3 += (i12 - i7);
                lArr1[i12] = Test.instanceCount;
                i11 = i12;
                Test.fFld += f1;
            }
        }
        long meth_res = l3 + l4 + i7 + Float.floatToIntBits(f1) + i8 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i9 +
            i10 + i11 + i12 + FuzzerUtils.checkSum(lArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(long l, long l1, long l2) {

        double d=-114.58543, d2=-1.64866;
        int i5=-22431, i6=20590, i13=-121, i14=-33213, i15=9, i16=-128, i17=241, iArr[]=new int[N];
        float f=123.453F;
        byte by=62, byArr[]=new byte[N];
        boolean b1=true, bArr[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)107);
        FuzzerUtils.init(lArr, 45L);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, 80);

        d = 1;
        while (++d < 291) {
            i5 <<= (int)(((f++) + (-55257 - (92 + byArr[(int)(d)]))) - (-(i5 - i5)));
            i6 = 1;
            while (++i6 < 6) {
                i5 -= (int)((-f) * Math.abs(lArr[(int)(d + 1)]));
                bArr[i6 + 1] = bMeth(l, -455897948L, -32015);
            }
            i5 -= (int)Test.fFld;
            for (i13 = 6; i13 > 1; --i13) {
                for (d2 = i13; 2 > d2; d2++) {
                    short s=14623;
                    switch ((int)(d + 49)) {
                    case 49:
                        l1 = l2;
                        by *= (byte)i14;
                        l |= i13;
                        break;
                    case 50:
                        i5 -= (int)l2;
                        l -= 41362;
                        iArr = FuzzerUtils.int1array(N, (int)26933);
                        break;
                    case 51:
                        l2 += (long)(((d2 * i15) + i6) - i5);
                        break;
                    case 52:
                        lArr[i13 + 1] += l;
                        break;
                    case 53:
                        i14 = 6;
                        break;
                    case 54:
                        l2 -= by;
                    case 55:
                        Test.dFld *= 106.122672;
                        break;
                    case 56:
                        Test.dFld = i15;
                        break;
                    case 57:
                        by = (byte)i15;
                    case 58:
                        i5 = by;
                        break;
                    case 59:
                        l1 |= i5;
                    case 60:
                        i15 += (int)d2;
                        break;
                    case 61:
                        i14 += (int)d2;
                        break;
                    case 62:
                        Test.dFld -= i6;
                        break;
                    case 63:
                        s *= (short)i15;
                        break;
                    case 64:
                        by *= (byte)d;
                    case 65:
                    case 66:
                        l *= 8;
                        break;
                    case 67:
                        i16 += (int)((long)d2 | i6);
                    case 68:
                        i17 %= (int)3546680117L;
                        break;
                    case 69:
                        by += (byte)l;
                        break;
                    case 70:
                    case 71:
                        s = (short)238;
                    case 72:
                        i14 -= (int)1.584F;
                        break;
                    case 73:
                        f -= i15;
                    case 74:
                        Test.dFld *= Test.instanceCount;
                        break;
                    case 75:
                        i5 += (int)(d2 * d2);
                        break;
                    case 76:
                    case 77:
                        i17 -= i13;
                        break;
                    case 78:
                        i17 -= 51;
                        break;
                    case 79:
                        if (i14 != 0) {
                            vMeth_check_sum += l + l1 + l2 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f)
                                + i6 + i13 + i14 + Double.doubleToLongBits(d2) + i15 + by + i16 + i17 + (b1 ? 1 : 0) +
                                FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr) +
                                FuzzerUtils.checkSum(iArr);
                            return;
                        }
                    case 80:
                        i17 += (int)Test.instanceCount;
                        break;
                    case 81:
                        iArr[(int)(d)] += i14;
                        break;
                    case 82:
                        try {
                            i16 = (i5 / i13);
                            iArr[(int)(d)] = (8294 % i16);
                            i16 = (i15 % i6);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 83:
                        Test.fFld -= l2;
                        break;
                    case 84:
                        i5 = s;
                        break;
                    case 85:
                        i17 += i6;
                        break;
                    case 86:
                        i14 <<= i14;
                    case 87:
                        i5 *= 22706;
                        break;
                    case 88:
                        Test.fFld = 90;
                        break;
                    case 89:
                        by <<= by;
                    case 90:
                        i5 -= i14;
                    case 91:
                        f = i14;
                    case 92:
                        Test.fFld += Test.fFld;
                        break;
                    case 93:
                        if (b1) break;
                        break;
                    case 94:
                        by = (byte)i17;
                        break;
                    case 95:
                        i16 = i13;
                        break;
                    case 96:
                        Test.fArrFld[(int)(d + 1)] -= -2;
                    case 97:
                        Test.instanceCount <<= i6;
                        break;
                    case 98:
                        i16 = i14;
                        break;
                    case 99:
                        f += l1;
                        break;
                    case 100:
                        l2 -= 58;
                        break;
                    case 101:
                        iArr = iArr;
                        break;
                    case 102:
                        Test.fFld -= Test.fFld;
                        break;
                    case 103:
                    case 104:
                        iArr[i13 + 1] = i5;
                        break;
                    case 105:
                        i15 |= i14;
                        break;
                    case 106:
                        i14 = i15;
                        break;
                    case 107:
                        i17 = i17;
                    case 108:
                        i5 = i17;
                        break;
                    case 109:
                        Test.fFld -= i14;
                    case 110:
                        i14 -= (int)l;
                        break;
                    case 111:
                        i5 = i17;
                        break;
                    case 112:
                        l >>= l;
                    case 113:
                        s = (short)i15;
                    case 114:
                        f += (float)-10.99034;
                    case 115:
                        i15 >>>= i6;
                        break;
                    case 116:
                        i5 <<= i14;
                        break;
                    case 117:
                    case 118:
                        i15 = i15;
                    default:
                        l1 = i13;
                    }
                }
            }
        }
        vMeth_check_sum += l + l1 + l2 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f) + i6 + i13 + i14 +
            Double.doubleToLongBits(d2) + i15 + by + i16 + i17 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i1, int i2) {

        int i3=88, i4=0, i18=-7, i19=6, iArr1[]=new int[N];
        short s1=12110;

        FuzzerUtils.init(iArr1, -2);

        i3 = 1;
        do {
            i2 -= (int)Test.fArrFld[i3];
            i4 = 5;
            do {
                i2 += (-6 + (i4 * i4));
                vMeth(Test.instanceCount, Test.instanceCount, Test.instanceCount);
                switch ((i4 % 2) + 79) {
                case 79:
                    if (false) {
                        for (i18 = i4; i18 < 1; i18 += 2) {
                            iArr1 = iArr1;
                            i19 += i4;
                            i2 += i18;
                            Test.byFld = (byte)i2;
                            Test.lArrFld[i18] -= i18;
                            Test.fArrFld[i4] = s1;
                            Test.instanceCount += (i18 - i18);
                        }
                    }
                    break;
                case 80:
                    iArr1[i4 + 1] = i18;
                    break;
                }
            } while (--i4 > 0);
        } while (++i3 < 320);
        long meth_res = i1 + i2 + i3 + i4 + i18 + i19 + s1 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=22794, i20=2, i21=31571, i22=126, i23=183, i24=3, i25=13655, i26=-12, i27=-33887;
        boolean b2=false;

        iArrFld[(i >>> 1) % N] /= (int)(((i * (i + i)) + (lMeth(-42544, i) + i)) | 1);
        i -= i;
        for (i20 = 7; i20 < 137; i20++) {
            i21 += (i20 - Test.instanceCount);
            switch (((i20 % 1) * 5) + 8) {
            case 11:
                Test.fFld *= i;
                for (i22 = i20; i22 < 193; ++i22) {
                    short s2=31786;
                    for (i24 = 1; i24 < 1; ++i24) {
                        Test.byFld = (byte)Test.instanceCount;
                        Test.fFld = iFld;
                        i = (int)Test.fFld;
                        if (b2) {
                            Test.instanceCount &= i21;
                        } else if (b2) {
                            i21 = i24;
                            b2 = b2;
                            Test.instanceCount = Test.instanceCount;
                        }
                        Test.lArrFld[i24 - 1] *= 1223;
                        if (b2) break;
                        iFld += (i24 * Test.instanceCount);
                        sArrFld[i24 + 1] *= (short)Test.instanceCount;
                        i23 = i24;
                        i25 += (((i24 * Test.fFld) + Test.fFld) - Test.instanceCount);
                    }
                    i = i22;
                    for (i26 = 1; i26 < 1; i26++) {
                        i25 = i27;
                    }
                    Test.dFld = s2;
                    i25 += i22;
                    Test.lArrFld[i20] >>>= i21;
                    iArrFld[i22 - 1] >>= (int)Test.instanceCount;
                }
                i += 65535;
                break;
            }
        }

        FuzzerUtils.out.println("i i20 i21 = " + i + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 b2 i26 = " + i25 + "," + (b2 ? 1 : 0) + "," + i26);
        FuzzerUtils.out.println("i27 = " + i27);

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld iFld iArrFld = " + Test.byFld + "," + iFld + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.fArrFld Test.lArrFld sArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld) +
            "," + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
