// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1759675767L;
    public static float fFld=-49.785F;
    public static int iFld=-26146;
    public static byte byFld=114;
    public int iFld1=66;
    public volatile boolean bFld=true;
    public static int iFld2=118;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 5);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i4=225, i5=-45387, i6=-47977, i7=-9, i8=1144, iArr[]=new int[N];
        double d1=-1.63603;
        byte by=76;

        FuzzerUtils.init(iArr, 3);

        i4 += i4;
        for (i5 = 12; 305 > i5; i5++) {
            for (i7 = 6; i7 > 1; --i7) {
                i4 = i8;
                Test.fFld += (-1.39F + (i7 * i7));
                i4 <<= (int)Test.instanceCount;
                iArr[i5 - 1] *= i5;
                i4 = -13405;
                i6 = i6;
                Test.instanceCount -= i4;
                i8 = i7;
            }
            i4 += (int)d1;
            i4 *= 58060;
            by = (byte)d1;
            i4 <<= i7;
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + by + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l1) {

        int i3=3, i9=62316, i10=241, i11=-13, i12=53283, i13=69;
        short s=-10941;

        i3 = iMeth();
        for (i9 = 9; i9 < 285; i9++) {
            for (i11 = 1; i11 < 6; ++i11) {
                l1 += (((i11 * Test.instanceCount) + Test.instanceCount) - i12);
                Test.instanceCount >>= i10;
                i12 >>= (int)l1;
                i12 += 11;
            }
            i3 = i3;
            i3 = (int)l1;
            l1 = -12912;
            s = (short)i12;
        }
        i13 = 1;
        while (++i13 < 319) {
            i12 *= (int)-1.155F;
            s += (short)(-2698 + (i13 * i13));
            i3 = Test.iFld;
        }
        vMeth1_check_sum += l1 + i3 + i9 + i10 + i11 + i12 + s + i13;
    }

    public static void vMeth(int i, int i1) {

        double d=2.62052;
        long l=7L;
        int i2=-118, i14=6749, i15=13, i16=-184, i17=-2, i18=9713;
        boolean b=false;
        short s1=-30963;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.978F);

        switch (((((int)(d + -98L)) >>> 1) % 4) + 86) {
        case 86:
            for (l = 7; l < 150; ++l) {
                vMeth1(-111L);
                try {
                    i = (i / i2);
                    i1 = (107 % i1);
                    Test.iArrFld[(int)(l)] = (i2 % Test.iFld);
                } catch (ArithmeticException a_e) {}
                for (i14 = (int)(l); i14 < 11; ++i14) {
                    for (i16 = 1; i16 < 1; i16++) {
                        fArr[(int)(l + 1)] = Test.fFld;
                        Test.instanceCount += i1;
                    }
                    i18 = 1;
                    while (++i18 < 1) {
                        try {
                            Test.iArrFld[i18 + 1] = (i2 / 133);
                            i2 = (i16 / 62537);
                            i15 = (-2263 / i18);
                        } catch (ArithmeticException a_e) {}
                        i = -7;
                        d -= 8870071693866868054L;
                        Test.instanceCount = Test.byFld;
                        if (b) break;
                        i17 %= (int)1.27550;
                    }
                }
            }
            break;
        case 87:
            s1 = (short)l;
        case 88:
            Test.iArrFld[(i >>> 1) % N] >>>= i1;
            break;
        case 89:
            i15 = i;
            break;
        default:
            Test.iArrFld[(-8 >>> 1) % N] = (int)-13L;
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + l + i2 + i14 + i15 + i16 + i17 + i18 + (b ? 1 : 0) +
            s1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        double d2=53.44814;
        int i19=-229, i20=237, i21=14, i22=5, i23=-62093, i24=-2942, i25=-62057;
        short s2=4003;

        vMeth(Test.iFld, Test.iFld);
        Test.instanceCount = Test.instanceCount;
        d2 = 306;
        while (--d2 > 0) {
            Test.iFld = Test.iFld;
            Test.byFld = (byte)-8;
            Test.iFld += (int)d2;
            Test.instanceCount += (long)(((d2 * Test.iFld) + Test.instanceCount) - iFld1);
            bFld = bFld;
            iFld1 -= iFld1;
        }
        Test.instanceCount += -15733;
        Test.instanceCount <<= 43L;
        bFld = bFld;
        for (i19 = 16; i19 < 379; ++i19) {
            lArrFld[i19] <<= i20;
            Test.instanceCount += (i19 | Test.instanceCount);
            if (bFld) break;
        }
        iFld1 = i19;
        sArrFld[(i20 >>> 1) % N] = (short)Test.fFld;
        i20 &= iFld1;
        for (i21 = 2; 144 > i21; ++i21) {
            i23 = 1;
            do {
                iFld1 += (-144 + (i23 * i23));
                Test.iArrFld[i21] += (int)Test.fFld;
            } while (++i23 < 177);
            s2 = (short)i19;
            iFld1 -= i21;
            for (i24 = 177; i24 > i21; i24 -= 3) {
                Test.instanceCount -= (long)Test.fFld;
                Test.iArrFld[i24] += i20;
                Test.iFld2 = (int)Test.instanceCount;
                i22 = i20;
            }
        }

        FuzzerUtils.out.println("d2 i19 i20 = " + Double.doubleToLongBits(d2) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("s2 i24 i25 = " + s2 + "," + i24 + "," + i25);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld iFld1 bFld = " + Test.byFld + "," + iFld1 + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld2 Test.iArrFld lArrFld = " + Test.iFld2 + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("sArrFld = " + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
