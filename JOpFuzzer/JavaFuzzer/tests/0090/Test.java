// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=62033L;
    public static float fFld=-3.335F;
    public static short sFld=-4872;
    public static boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 136L);
        FuzzerUtils.init(Test.iArrFld, 88);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i12, boolean b, int i13) {

        int i14=8959, i15=-14, i16=-129, i17=-195, i18=14, i19=-128, i20=54244, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 48974);

        iArr2[(i13 >>> 1) % N] -= i13;
        i14 = 1;
        do {
            iArr2[i14] = (int)Test.instanceCount;
            for (i15 = i14; i15 < 8; ++i15) {
                i12 >>= (int)1256159782L;
                i13 -= i13;
                i13 = i13;
                i16 += i15;
                iArr2[i14] -= (int)Test.instanceCount;
            }
            iArr2[(10 >>> 1) % N] = i12;
            for (i17 = 1; i17 < 8; i17++) {
                i12 = i14;
                for (i19 = 1; i19 < 2; ++i19) {
                    i12 -= i14;
                    Test.instanceCount += (long)(2.232F + (i19 * i19));
                }
            }
        } while (++i14 < 212);
        long meth_res = i12 + (b ? 1 : 0) + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i5, double d, double d1) {

        int i6=-60, i7=6, i8=-2, i9=14, i10=3365, i11=17647, iArr1[][]=new int[N][N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(iArr1, 27353);
        FuzzerUtils.init(sArr, (short)-8816);

        i5 = (--i5);
        for (i6 = 3; i6 < 387; i6++) {
            for (i8 = 1; i8 < 4; ++i8) {
                i7 -= i5;
            }
            switch ((((i7--) >>> 1) % 2) + 2) {
            case 2:
                Test.lArrFld[i6 - 1] += (3644 - (i7 * (Test.sFld % (i6 | 1))));
                iArr1[i6][i6] >>= ((--iArr1[i6 + 1][i6 + 1]) - i6);
                for (i10 = 1; i10 < 4; ++i10) {
                    switch ((i10 % 1) + 22) {
                    case 22:
                        sArr = FuzzerUtils.short2array(N, (short)30536);
                        break;
                    default:
                        iArr1[i10][i6] -= (int)Math.min(++Test.lArrFld[i10 - 1], Test.instanceCount);
                        if (i9 != 0) {
                            vMeth1_check_sum += i5 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i6 + i7
                                + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
                            return;
                        }
                    }
                    i7 += (-217 + (i10 * i10));
                    iArr1[i6][i10] = (int)((i5--) * ((i10 - Test.instanceCount) - i6));
                    d = ((-(Test.instanceCount + i5)) / (i6 | 1));
                }
                break;
            case 3:
                Test.fFld = iMeth(90, Test.bFld, i6);
                break;
            }
        }
        vMeth1_check_sum += i5 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + i10 +
            i11 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i2) {

        int i3=14327, i4=90, i21=-10, i22=4311, i23=-2, i24=-6538, i25=-6, iArr[]=new int[N];
        double d2=-1.80654;

        FuzzerUtils.init(iArr, 220);

        i2 &= (int)(((i2 % (i2 | 1)) + (Test.instanceCount * i2)) + ((i2 - -26303) + (Test.fFld * Test.instanceCount)));
        i2 <<= i2;
        for (i3 = 18; i3 < 316; i3++) {
            Test.instanceCount += (-118 + (i3 * i3));
        }
        iArr[(-6 >>> 1) % N] = i3;
        Test.fFld += (((Test.sFld * Test.instanceCount) + (Test.fFld--)) * (i2 + Math.abs(Test.fFld)));
        vMeth1(i4, d2, d2);
        i21 = 1;
        while (++i21 < 349) {
            Test.sFld = (short)d2;
            for (i22 = 1; 5 > i22; ++i22) {
                iArr[i22] = (int)-117L;
                for (i24 = 1; i24 < 2; i24++) {
                    byte by1=-25;
                    by1 *= (byte)Test.sFld;
                }
                d2 -= Test.fFld;
                Test.sFld -= (short)i3;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + Double.doubleToLongBits(d2) + i21 + i22 + i23 + i24 + i25 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-60988, i1=27345, i26=49224, i27=-9, i28=24146, i29=5, i30=55247, i31=-104;
        byte by=59;
        double d3=-70.118560, d4=0.26673;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -108.178F);

        for (i = 21; i < 379; i += 2) {
            Test.instanceCount = by;
            vMeth(11595);
            Test.iArrFld[i] = -148;
            by -= (byte)d3;
            i1 -= (int)44062L;
            Test.iArrFld[i] = by;
            Test.instanceCount >>>= Test.instanceCount;
        }
        for (i26 = 2; i26 < 178; i26++) {
            i27 = -138;
            i28 = 143;
            do {
                for (i29 = 1; i29 < 1; i29++) {
                    Test.instanceCount -= i30;
                    i1 -= (int)Test.instanceCount;
                    d3 -= i1;
                    switch ((i29 % 1) + 61) {
                    case 61:
                        i1 -= i30;
                        i30 = i27;
                        Test.fFld = i26;
                        break;
                    default:
                        Test.fFld += i29;
                        fArr[i28 + 1][i29 - 1] -= i30;
                        i27 &= i;
                    }
                    i27 *= (int)Test.instanceCount;
                }
                Test.instanceCount += Test.instanceCount;
                Test.bFld = Test.bFld;
                i1 *= (int)Test.fFld;
                Test.iArrFld[i26 + 1] = i30;
                for (d4 = 1; d4 < 1; d4++) {
                    i30 >>= (int)Test.instanceCount;
                }
                fArr[i28 + 1][i28] += i27;
            } while (--i28 > 0);
        }

        FuzzerUtils.out.println("i i1 by = " + i + "," + i1 + "," + by);
        FuzzerUtils.out.println("d3 i26 i27 = " + Double.doubleToLongBits(d3) + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("d4 i31 fArr = " + Double.doubleToLongBits(d4) + "," + i31 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld Test.lArrFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
