// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2805566070L;
    public static short sFld=-10112;
    public int iFld=-46;
    public boolean bFld=true;
    public static byte byFld=-14;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(short s) {

        int i5=23665, i6=12, i7=-5184, i8=47379, i9=-9, iArr1[]=new int[N];
        float f1=0.891F, f2=106.600F;
        long l=12L;
        boolean b=false;

        FuzzerUtils.init(iArr1, 7);

        iArr1[(i5 >>> 1) % N] >>>= i5;
        for (f1 = 396; f1 > 16; f1--) {
            i5 = 43414;
            Test.instanceCount += (-8L + (f1 * f1));
            switch ((int)(((f1 % 2) * 5) + 42)) {
            case 52:
                i6 -= i5;
                if (b) {
                    f2 += (((f1 * f2) + i6) - i6);
                    for (l = 4; l > 1; l -= 2) {
                        for (i8 = 1; i8 < 4; i8++) {
                            i6 -= (int)l;
                            iArr1[i8] <<= (int)l;
                            if (b) break;
                            Test.instanceCount = i7;
                        }
                        if (false) continue;
                    }
                } else if (b) {
                    b = b;
                }
                break;
            case 49:
                iArr1[(int)(f1)] -= i7;
                break;
            }
        }
        long meth_res = s + i5 + Float.floatToIntBits(f1) + i6 + Float.floatToIntBits(f2) + l + i7 + i8 + i9 + (b ? 1 :
            0) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i4=61438;

        i4 = (int)((lMeth(Test.sFld) + 248) + -20558);
        vMeth_check_sum += i4;
    }

    public float fMeth(int i, int i1, int i2) {

        int i3=-43893, i10=-9, i11=60432, iArr[]=new int[N];
        float f=-2.511F;
        double d1=-34.112505;
        boolean b1=true;
        long l1=246L;

        FuzzerUtils.init(iArr, 22948);

        i3 = 1;
        do {
            try {
                i = (i3 / -64097);
                i = (iArr[i3 - 1] / 14939);
                i = (iArr[i3 + 1] / iArr[i3 - 1]);
            } catch (ArithmeticException a_e) {}
            i1 = (int)(((-7312589265276887848L | Test.instanceCount) * f) + Math.abs(i - -235));
            vMeth();
            i1 = (int)Test.instanceCount;
        } while (++i3 < 367);
        Test.sFld += Test.sFld;
        i >>= i;
        for (i10 = 5; i10 < 364; ++i10) {
            Test.instanceCount = (long)d1;
            b1 = true;
            i2 += (i10 * i10);
            switch ((i10 % 10) + 105) {
            case 105:
                i11 += i10;
                i2 = (int)Test.instanceCount;
                i |= i11;
            case 106:
                try {
                    i2 = (i3 / i11);
                    i = (-37114 / i);
                    iArr[(i11 >>> 1) % N] = (-1133341357 / iArr[i10 + 1]);
                } catch (ArithmeticException a_e) {}
                break;
            case 107:
                i1 += i10;
                break;
            case 108:
                i += i10;
                break;
            case 109:
                Test.iArrFld[i10] = Test.sFld;
                break;
            case 110:
                l1 <<= Test.instanceCount;
                break;
            case 111:
                i1 = (int)f;
            case 112:
                Test.instanceCount += (((i10 * i11) + i11) - i2);
                break;
            case 113:
                i %= (int)(Test.sFld | 1);
                break;
            case 114:
                i11 = (int)l1;
                break;
            }
        }
        long meth_res = i + i1 + i2 + i3 + Float.floatToIntBits(f) + i10 + i11 + Double.doubleToLongBits(d1) + (b1 ? 1
            : 0) + l1 + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-119.30015;
        int i12=-57767, i13=-47293, i14=-5426, i15=-14, i16=30549, i17=62952, i18=252;
        float f3=0.829F;

        d /= ((long)(fMeth(93, iFld, iFld)) | 1);
        for (i12 = 6; i12 < 392; ++i12) {
            f3 += Test.instanceCount;
            for (i14 = i12; i14 < 65; i14++) {
                for (i16 = 1; i16 < 1; i16++) {
                    i17 >>>= (int)Test.instanceCount;
                    if (bFld) continue;
                    iFld >>= i12;
                    i15 >>>= i17;
                    i13 >>>= i15;
                    i15 <<= (int)Test.instanceCount;
                }
                i15 += (((i14 * i17) + Test.instanceCount) - Test.sFld);
                Test.iArrFld[i14] -= (int)Test.instanceCount;
                d = i13;
                Test.iArrFld[i12] -= i15;
            }
            Test.byFld &= (byte)i14;
            if (false) {
                Test.instanceCount -= -43;
                d *= i16;
                i18 = 65;
                while (--i18 > 0) {
                    i17 -= i14;
                    if (bFld) break;
                    i13 = iFld;
                    Test.instanceCount = i18;
                    switch ((i12 % 9) + 33) {
                    case 33:
                        i17 += -145;
                        iFld = i14;
                    case 34:
                        Test.iArrFld[i12 + 1] = (int)f3;
                        f3 = i17;
                        iFld = iFld;
                    case 35:
                    case 36:
                        iFld <<= i17;
                    case 37:
                        iFld = (int)Test.instanceCount;
                    case 38:
                        bFld = bFld;
                    case 39:
                        f3 = Test.instanceCount;
                        break;
                    case 40:
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)18548);
                    case 41:
                        Test.instanceCount /= (i16 | 1);
                    }
                }
            } else {
                Test.iArrFld[i12] -= (int)d;
            }
        }

        FuzzerUtils.out.println("d i12 i13 = " + Double.doubleToLongBits(d) + "," + i12 + "," + i13);
        FuzzerUtils.out.println("f3 i14 i15 = " + Float.floatToIntBits(f3) + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);

        FuzzerUtils.out.println("Test.instanceCount Test.sFld iFld = " + Test.instanceCount + "," + Test.sFld + "," +
            iFld);
        FuzzerUtils.out.println("bFld Test.byFld Test.iArrFld = " + (bFld ? 1 : 0) + "," + Test.byFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
