// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=413151965L;
    public int iFld=52217;
    public static volatile boolean bFld=false;
    public double dFld=-106.107523;
    public long lFld=-1221309750L;
    public int iFld1=5737;
    public int iFld2=46314;
    public double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1, int i4, short s1) {

        int i5=-5, i6=47, i7=0, i8=-7, i9=-7, iArr[]=new int[N];
        double d2=14.16330;
        float f2=0.550F;
        byte by=105;

        FuzzerUtils.init(iArr, 11);

        s1 = (short)l1;
        if (Test.bFld) {
            for (i5 = 4; 389 > i5; ++i5) {
                l1 += (i5 * i5);
                d2 = f2;
                i6 = i6;
                f2 += (i5 - i6);
                i7 = 1;
                do {
                    Test.instanceCount >>>= -43078;
                    l1 = l1;
                    Test.instanceCount &= by;
                    i6 += (i7 * i7);
                    for (i8 = 1; 1 > i8; ++i8) {
                        iArr[i7 + 1] = i4;
                        i6 = i6;
                    }
                } while (++i7 < 4);
            }
        } else {
            l1 &= s1;
            vMeth2_check_sum += l1 + i4 + s1 + i5 + i6 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f2) + i7 +
                by + i8 + i9 + FuzzerUtils.checkSum(iArr);
            return;
        }
        vMeth2_check_sum += l1 + i4 + s1 + i5 + i6 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f2) + i7 + by +
            i8 + i9 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i, double d1, int i1) {

        int i2=-174, i3=12, i11=-99, i12=-250, i13=7, i14=1, iArr1[]=new int[N];
        float f1=1.944F;
        short s2=6522;
        byte by1=45;

        FuzzerUtils.init(iArr1, -3);

        for (i2 = 6; i2 < 217; ++i2) {
            i += (i2 ^ (long)f1);
            vMeth2(Test.instanceCount, i1, s2);
            s2 >>>= by1;
            i1 += (((i2 * i) + i2) - s2);
            i3 &= (int)Test.instanceCount;
            Test.instanceCount ^= i3;
            switch ((((i >>> 1) % 3) * 5) + 91) {
            case 94:
                i11 = 1;
                while ((i11 += 2) < 8) {
                    i1 += i3;
                    i1 += (int)(53L + (i11 * i11));
                    for (i12 = 2; i12 > 1; --i12) {
                        Test.instanceCount -= i13;
                        i3 += (int)d1;
                        iArr1[i11 - 1] <<= i2;
                    }
                }
                break;
            case 102:
                i14 = (int)f1;
                break;
            case 101:
                Test.instanceCount += (long)17.94F;
                break;
            }
        }
        vMeth1_check_sum += i + Double.doubleToLongBits(d1) + i1 + i2 + i3 + Float.floatToIntBits(f1) + s2 + by1 + i11
            + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(double d, long l, float f) {

        int i15=-33702, i16=33846, i17=-22316, i18=-10417, i19=-2863, i20=-195, i21=243, iArr2[]=new int[N];
        short s3=-2411;
        byte by2=118;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, 227);
        FuzzerUtils.init(lArr, 41367L);

        vMeth1(i15, 43.31758, 36);
        l -= 12L;
        i15 <<= i15;
        Test.bFld = Test.bFld;
        iArr2[(i16 >>> 1) % N] *= 217;
        s3 -= by2;
        i15 = i16;
        i17 = 368;
        while (--i17 > 0) {
            for (i18 = 1; i18 < 5; ++i18) {
                if (Test.bFld) {
                } else {
                    for (i20 = 1; i20 < 2; ++i20) {
                        i21 = 1284;
                    }
                }
            }
            Test.instanceCount += l;
            lArr = lArr;
            i15 += i17;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l + Float.floatToIntBits(f) + i15 + i16 + s3 + by2 + i17 + i18
            + i19 + i20 + i21 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        short s=2006;
        float f3=13.986F;
        int i22=-40741, i23=5, i24=38997, i25=-101, i26=-10783, i27=30300, i28=207, i29=-10, iArr3[][]=new int[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 1274157686795452665L);
        FuzzerUtils.init(iArr3, -3);

        dArrFld[(iFld >>> 1) % N] += (s <<= (short)iFld);
        vMeth(dFld, -79L, f3);
        iFld *= (int)1.441F;
        for (i22 = 1; i22 < 184; ++i22) {
            Test.instanceCount *= Test.instanceCount;
            iFld += iFld;
            for (i24 = 137; 3 < i24; --i24) {
                for (i26 = 1; i26 < 2; ++i26) {
                    byte by3=-57;
                    if (Test.bFld) break;
                    Test.instanceCount -= -196;
                    dFld -= by3;
                    switch ((i26 % 4) + 93) {
                    case 93:
                        i25 = i22;
                        i27 += (((i26 * i22) + Test.instanceCount) - Test.instanceCount);
                        i25 = s;
                        lArr1 = lArr1;
                        break;
                    case 94:
                        i27 -= by3;
                        iArr3[i22][i22] <<= i27;
                        lFld = lFld;
                        break;
                    case 95:
                        i27 += (((i26 * iFld1) + iFld) - iFld1);
                        i23 += (i26 * i26);
                        i25 = i23;
                        Test.instanceCount += i26;
                        break;
                    case 96:
                        i23 = i23;
                        break;
                    }
                }
                for (i28 = 1; i28 < 2; ++i28) {
                    switch ((((i25 >>> 1) % 6) * 5) + 108) {
                    case 114:
                        lArr1[i24 - 1] -= (long)3.40829;
                        i25 += i29;
                    case 122:
                        i25 <<= i26;
                    case 129:
                        iFld1 += (i28 * i28);
                        break;
                    case 111:
                        iFld1 *= iFld2;
                        break;
                    case 115:
                        if (Test.bFld) break;
                    case 133:
                        f3 *= i22;
                        break;
                    default:
                        dFld *= -61290L;
                    }
                }
            }
        }

        FuzzerUtils.out.println("s f3 i22 = " + s + "," + Float.floatToIntBits(f3) + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 lArr1 iArr3 = " + i29 + "," + FuzzerUtils.checkSum(lArr1) + "," +
            FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.bFld = " + Test.instanceCount + "," + iFld + "," +
            (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("dFld lFld iFld1 = " + Double.doubleToLongBits(dFld) + "," + lFld + "," + iFld1);
        FuzzerUtils.out.println("iFld2 dArrFld = " + iFld2 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
