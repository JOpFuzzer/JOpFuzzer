// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3440424752205384264L;
    public static int iFld=-199;
    public volatile float fFld=-35.302F;
    public static boolean bArrFld[]=new boolean[N];
    public static short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.sArrFld, (short)6537);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8, long l) {

        int i9=-91, i10=7, i11=-117, i12=-23413, i13=-29;
        float f2=55.541F;
        long l1=30004L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1514446361L);

        i9 = 1;
        do {
            f2 -= -16796;
        } while (++i9 < 312);
        l1 = 1;
        while (++l1 < 293) {
            for (i10 = 6; i10 > 1; --i10) {
                short s=1044;
                Test.instanceCount |= 59534;
                if (i8 != 0) {
                    vMeth2_check_sum += i8 + l + i9 + Float.floatToIntBits(f2) + l1 + i10 + i11 + i12 + i13 +
                        FuzzerUtils.checkSum(lArr);
                    return;
                }
                Test.iFld += (i10 + i9);
                s ^= (short)i11;
                for (i12 = i10; i12 < 2; ++i12) {
                    l *= i13;
                    l >>= i12;
                    i11 -= i11;
                    if (i11 != 0) {
                        vMeth2_check_sum += i8 + l + i9 + Float.floatToIntBits(f2) + l1 + i10 + i11 + i12 + i13 +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    lArr[i10] |= i11;
                    i13 = i10;
                }
            }
        }
        vMeth2_check_sum += i8 + l + i9 + Float.floatToIntBits(f2) + l1 + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(double d, boolean b1) {

        float f1=2.785F;
        int i5=-21326, i6=21, i7=53285, i14=-26599, iArr[]=new int[N];
        byte by=-52;

        FuzzerUtils.init(iArr, 1);

        Test.instanceCount += (long)(-f1);
        i5 = 1;
        while (++i5 < 223) {
            Test.instanceCount -= (++iArr[i5]);
        }
        Test.iFld += (int)(Test.instanceCount--);
        for (i6 = 258; i6 > 13; --i6) {
            i7 += (int)(-2 - ((~(long)(i7 *= (int)f1)) - (d / (i6 | 1))));
            vMeth2(i5, Test.instanceCount);
            iArr[i6 - 1] = (int)Test.instanceCount;
            b1 = b1;
            i14 = 1;
            do {
                i7 *= Test.iFld;
                Test.instanceCount = -14;
                if (i14 != 0) {
                    vMeth1_check_sum += Double.doubleToLongBits(d) + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + i5 + i6
                        + i7 + i14 + by + FuzzerUtils.checkSum(iArr);
                    return;
                }
                d = i14;
                Test.iFld = by;
            } while (++i14 < 7);
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + i5 + i6 + i7 + i14 +
            by + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, int i1) {

        boolean b=true;
        int i2=-223, i3=-12, i4=-41503, i15=-186, i16=13, i17=0, i18=4, iArr1[]=new int[N];
        float f=-1.789F, fArr[]=new float[N];
        double d1=0.128773;

        FuzzerUtils.init(fArr, 1.406F);
        FuzzerUtils.init(iArr1, -63722);

        fArr = (fArr = (fArr = (fArr = fArr)));
        b = Test.bArrFld[(i1 >>> 1) % N];
        for (i2 = 10; i2 < 313; i2++) {
            i4 = 1;
            while (++i4 < 5) {
                if (b = ((f - (i4 * i3)) != ((i2 - 154) + (Test.instanceCount + i4)))) break;
            }
            vMeth1(0.124390, b);
            i3 = Test.iFld;
            i3 += (i2 * i3);
            for (i15 = 1; 5 > i15; ++i15) {
                i16 = i;
                i3 += i15;
                for (i17 = 2; i17 > 1; i17 -= 2) {
                    Test.instanceCount = -8513508929158270191L;
                }
                iArr1[i2] -= (int)d1;
                d1 -= i16;
            }
        }
        vMeth_check_sum += i + i1 + (b ? 1 : 0) + i2 + i3 + i4 + Float.floatToIntBits(f) + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        double d2=1.25445, d3=46.60245, d4=-5.87608;
        float f3=0.752F;
        int i19=-32012, i20=0, i21=-4020, i22=3659, i23=-175, i24=0, i25=10, iArr2[][]=new int[N][N];
        byte by1=-62;
        long l2=8437319177136575120L;

        FuzzerUtils.init(iArr2, 7);

        vMeth(Test.iFld, Test.iFld);
        Test.iFld ^= (int)Test.instanceCount;
        d2 += 195;
        for (f3 = 292; f3 > 10; --f3) {
            switch ((int)(((f3 % 8) * 5) + 111)) {
            case 122:
                by1 *= (byte)d2;
                i19 = (int)d2;
                Test.iFld -= Test.iFld;
            case 127:
                switch (((Test.iFld >>> 1) % 1) + 26) {
                case 26:
                    Test.instanceCount = i19;
                    Test.sArrFld[(int)(f3)] = (short)113;
                    for (i20 = 3; i20 < 89; ++i20) {
                        i22 = 1;
                        while (++i22 < 2) {
                            try {
                                Test.iFld = (iArr2[(int)(f3 + 1)][i22 - 1] % -156);
                                iArr2[i22][(int)(f3 + 1)] = (-45 % i20);
                                i19 = (Test.iFld / -52235);
                            } catch (ArithmeticException a_e) {}
                            i19 *= i20;
                            Test.iFld = i20;
                            l2 += (219 + (i22 * i22));
                            d2 *= by1;
                        }
                        iArr2[(int)(f3 - 1)][i20 - 1] = Test.iFld;
                        for (i23 = 1; i23 < 2; i23++) {
                            i24 = (int)l2;
                            iArr2[(int)(f3 + 1)][i23 - 1] -= (int)f3;
                            d3 -= Test.iFld;
                        }
                        for (d4 = 1; d4 < 2; d4++) {
                            switch ((((-52 >>> 1) % 5) * 5) + 76) {
                            case 80:
                                i25 += (int)((long)d4 ^ Test.iFld);
                                i21 += (int)((long)d4 ^ (long)f3);
                                iArr2[i20][(int)(d4 - 1)] *= i22;
                                i25 &= Test.iFld;
                                break;
                            case 98:
                                i24 += (int)((long)d4 | l2);
                                break;
                            case 78:
                                i24 *= Test.iFld;
                            case 99:
                                l2 += 5685743722707356361L;
                            case 87:
                                Test.iFld &= (int)Test.instanceCount;
                                break;
                            }
                        }
                    }
                    break;
                }
            case 115:
                iArr2[(int)(f3 - 1)][(int)(f3 - 1)] = (int)Test.instanceCount;
                break;
            case 121:
                i19 |= (int)l2;
                break;
            case 114:
                fFld -= i24;
                break;
            case 131:
                i21 %= (int)(i23 | 1);
            case 142:
                Test.sArrFld[(int)(f3)] *= (short)f3;
                break;
            case 118:
                lArrFld = lArrFld;
                break;
            }
        }

        FuzzerUtils.out.println("d2 f3 i19 = " + Double.doubleToLongBits(d2) + "," + Float.floatToIntBits(f3) + "," +
            i19);
        FuzzerUtils.out.println("by1 i20 i21 = " + by1 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 l2 i23 = " + i22 + "," + l2 + "," + i23);
        FuzzerUtils.out.println("i24 d3 d4 = " + i24 + "," + Double.doubleToLongBits(d3) + "," +
            Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("i25 iArr2 = " + i25 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld fFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.bArrFld Test.sArrFld lArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
