// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public static float fFld=-1.350F;
    public static int iFld=2;
    public int iFld1=48895;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -7420274502609405897L);
        FuzzerUtils.init(Test.iArrFld, 53949);
        FuzzerUtils.init(Test.fArrFld, -1.791F);
        FuzzerUtils.init(Test.sArrFld, (short)14871);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public void vMeth(float f, int i) {


        i += (int)Test.lArrFld[(i >>> 1) % N];
        vMeth_check_sum += Float.floatToIntBits(f) + i;
    }

    public static void vMeth1(long l, float f2, long l1) {

        int i4=-7092, i5=-16492, i6=-6, i7=-10, i8=6;
        short s=29278;
        byte by=-8;
        double d=23.29025;

        for (i4 = 4; i4 < 358; i4++) {
            i5 *= -51;
            i5 += i4;
            Test.lArrFld[i4 + 1] = i5;
            i5 += (12 + (i4 * i4));
            Test.iArrFld[i4] <<= i5;
            for (i6 = 1; i6 < 5; i6++) {
                s <<= (short)l1;
                i5 = by;
                i7 = i7;
                i7 += (i6 + by);
                i5 = i5;
                i7 = i4;
                i5 = i6;
                d = i8;
            }
        }
        vMeth1_check_sum += l + Float.floatToIntBits(f2) + l1 + i4 + i5 + i6 + i7 + s + by + Double.doubleToLongBits(d)
            + i8;
    }

    public static long lMeth(int i2, float f1, int i3) {

        int i9=33649, i10=202, i11=-9, i12=45158;
        long l2=-58063L;

        vMeth1(Test.instanceCount, f1, Test.instanceCount);
        for (i9 = 260; i9 > 5; --i9) {
            for (l2 = 6; l2 > 1; l2 -= 3) {
                Test.instanceCount = i2;
                f1 += (((l2 * i11) + i3) - i3);
                i2 += (int)(l2 - i3);
            }
            i2 = (int)116.6F;
            try {
                i2 = (-53 % i3);
                Test.iArrFld[i9] = (68 % Test.iArrFld[i9]);
                i3 = (-46225 % i3);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount -= (long)f1;
            i3 = -195;
            i10 = (int)Test.instanceCount;
            i12 = 1;
            while (++i12 < 6) {
                i11 = i10;
                f1 += (i12 - i10);
                try {
                    i11 = (i10 / i2);
                    i10 = (i9 % 1550627967);
                    i10 = (i3 / -33416);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f1) + i3 + i9 + i10 + l2 + i11 + i12;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1) {

        int i13=33, i14=4, i15=34, i16=168, i17=15, i18=-26733;
        float f3=-32.403F;

        lMeth(i1, Test.fFld, i1);
        i1 <<= i1;
        for (i13 = 133; i13 > 1; --i13) {
            Test.instanceCount -= i14;
            Test.fFld += -11;
            i14 += (int)-49425L;
            f3 = 1;
            do {
                Test.fArrFld[(int)(f3)] *= 170L;
                for (i15 = 1; i15 < 1; ++i15) {
                    i14 = -130;
                }
                Test.instanceCount = i15;
                i14 = (int)Test.fFld;
                for (i17 = 1; i17 < 1; ++i17) {
                    Test.fFld += i15;
                    i16 *= i16;
                }
            } while (++f3 < 12);
        }
        long meth_res = i1 + i13 + i14 + Float.floatToIntBits(f3) + i15 + i16 + i17 + i18;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i19=-5, i20=60822, i21=-9, i22=229, i23=-65040, i24=-122, i25=60991;
        short s1=-5751;
        boolean b=true;
        double d1=51.60526, d2=0.72910;
        byte by1=-63;

        vMeth((iMeth(Test.iFld) * Test.instanceCount) * Test.instanceCount, Test.iFld);
        switch (((Test.iFld >>> 1) % 10) + 116) {
        case 116:
            i19 = 1;
            do {
                Test.instanceCount = -30335;
                s1 = (short)i19;
                if (b) continue;
                Test.fArrFld[i19 + 1] -= -3683160021L;
            } while (++i19 < 143);
            i20 = 1;
            while ((i20 += 3) < 201) {
                Test.iFld >>= (int)Test.instanceCount;
                d1 = i19;
                switch ((i20 % 2) + 6) {
                case 6:
                    for (d2 = i20; 374 > d2; d2++) {
                        Test.iFld += i19;
                        Test.iFld += 92;
                    }
                    break;
                case 7:
                    for (i22 = 12; i22 < 374; i22++) {
                        Test.iFld *= i23;
                        for (i24 = 2; i24 > i22; i24--) {
                            s1 -= (short)i23;
                            Test.iFld -= (int)Test.instanceCount;
                            Test.iFld |= Test.iFld;
                            Test.fFld += (i24 * Test.fFld);
                            s1 += (short)Test.fFld;
                            Test.fFld = i22;
                            i25 += (int)d2;
                            Test.fArrFld[i20] *= Test.instanceCount;
                            Test.instanceCount += (((i24 * Test.fFld) + s1) - by1);
                            if (b) {
                                Test.fFld += Test.iFld;
                                iFld1 += (int)Test.instanceCount;
                            }
                        }
                        i21 >>= -20;
                    }
                    break;
                }
            }
            break;
        case 117:
            Test.instanceCount *= Test.instanceCount;
            break;
        case 118:
            Test.fFld *= 0;
            break;
        case 119:
            iFld1 -= iFld1;
        case 120:
            i23 <<= i19;
            break;
        case 121:
            Test.sArrFld[(i22 >>> 1) % N] = (short)i21;
        case 122:
            Test.iArrFld[(Test.iFld >>> 1) % N] <<= i19;
            break;
        case 123:
            Test.fArrFld[(i23 >>> 1) % N] -= i23;
        case 124:
            by1 += (byte)i21;
            break;
        case 125:
            i23 = iFld1;
        }

        FuzzerUtils.out.println("i19 s1 b = " + i19 + "," + s1 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i20 d1 d2 = " + i20 + "," + Double.doubleToLongBits(d1) + "," +
            Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 by1 = " + i24 + "," + i25 + "," + by1);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("iFld1 Test.lArrFld Test.iArrFld = " + iFld1 + "," + FuzzerUtils.checkSum(Test.lArrFld)
            + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld Test.sArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
