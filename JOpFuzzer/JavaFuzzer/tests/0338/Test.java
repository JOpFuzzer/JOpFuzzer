// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=9081224884979568677L;
    public static boolean bFld=false;
    public static byte byFld=-84;
    public static float fFld=2.99F;
    public static int iFld=9787;
    public double dFld=-1.103078;
    public short sFld=-906;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 7L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i5=239, i6=-10, iArr2[]=new int[N];
        long l=20370L;
        double d=-51.1883;

        FuzzerUtils.init(iArr2, -14);

        Test.fFld -= 1529;
        iArr2[(48017 >>> 1) % N] -= Test.iFld;
        for (i5 = 6; 171 > i5; ++i5) {
            l = 1;
            do {
                Test.instanceCount += (l * l);
                Test.instanceCount *= i6;
                Test.fFld += (l * l);
                Test.iFld = i5;
                Test.iFld += (int)-1927171361186320069L;
                if (Test.bFld) continue;
                i6 >>= Test.iFld;
                i6 += (int)(((l * Test.iFld) + l) - i5);
                d = 20218;
                if (false) continue;
            } while (++l < 10);
        }
        Test.iFld -= (int)l;
        long meth_res = i5 + i6 + l + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i7=-10, i8=-27390, i9=-13, i10=0, i11=0, i12=-10, iArr1[]=new int[N], iArr3[]=new int[N];

        FuzzerUtils.init(iArr1, -6);
        FuzzerUtils.init(iArr3, -7);

        iArr1[(68 >>> 1) % N] = iMeth();
        Test.iFld ^= Test.iFld;
        Test.instanceCount >>= Test.instanceCount;
        Test.iFld = Test.iFld;
        iArr1[(Test.iFld >>> 1) % N] += (int)-2.956F;
        for (i7 = 381; 9 < i7; --i7) {
            switch ((i7 % 7) + 68) {
            case 68:
                iArr1[i7] -= i8;
                Test.iFld = 54970;
                break;
            case 69:
                for (i9 = 1; i9 < 5; i9++) {
                    switch ((((i10 >>> 1) % 10) * 5) + 27) {
                    case 58:
                        iArr1[i7] = i8;
                        for (i11 = i7; i11 < 2; i11++) {
                            i12 -= (int)Test.fFld;
                            i8 += i11;
                        }
                        break;
                    case 40:
                        Test.byFld += (byte)(i9 + Test.fFld);
                        break;
                    case 49:
                        i10 ^= i10;
                        break;
                    case 28:
                        iArr1[i7 + 1] = (int)Test.instanceCount;
                    case 63:
                        iArr3[i9] &= i8;
                        break;
                    case 77:
                        Test.fFld -= -53L;
                        break;
                    case 31:
                        i12 += i11;
                    case 60:
                        Test.instanceCount += (((i9 * i11) + i7) - i8);
                    case 54:
                        i8 -= i8;
                        break;
                    case 32:
                        i8 += (((i9 * i11) + i8) - i9);
                    default:
                        Test.instanceCount += (24470 + (i9 * i9));
                    }
                }
                break;
            case 70:
                iArr1[i7 + 1] += (int)Test.fFld;
                break;
            case 71:
                Test.fFld *= -144;
                break;
            case 72:
            case 73:
                Test.fFld += i12;
            case 74:
                i8 += (i7 * i7);
                break;
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr3);
    }

    public static void vMeth() {

        int i3=158, i4=-3, i13=8, i14=83, iArr[]=new int[N];
        float f=2.89F;

        FuzzerUtils.init(iArr, -144);

        for (int i2 : iArr) {
            for (i3 = 1; i3 < 4; i3++) {
                Test.bFld = (Math.abs((int)(i2 * 0.892F)) != ((i2++) - (i3 * 12)));
                Test.instanceCount -= (((++i4) % ((Test.byFld--) | 1)) * (i2 = (i3 - i2)));
                f += ((iArr[i3 - 1]--) * Integer.reverseBytes(i4));
                i4 += i3;
            }
            i2 |= i2;
            vMeth1();
            i4 = (int)21854L;
            switch ((((i4 >>> 1) % 2) * 5) + 102) {
            case 107:
                i2 = (int)Test.instanceCount;
                break;
            case 104:
                for (i13 = 4; 1 < i13; i13 -= 2) {
                    Test.instanceCount += (long)Test.fFld;
                    i2 += (int)1.127267;
                    i2 *= i4;
                }
                break;
            default:
                Test.instanceCount <<= i3;
            }
        }
        vMeth_check_sum += i3 + i4 + Float.floatToIntBits(f) + i13 + i14 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-9, i1=-8, i15=-90, i17=19957, i18=-50, iArr4[][]=new int[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-8722);
        FuzzerUtils.init(iArr4, -45408);

        for (i = 8; i < 353; i++) {
            vMeth();
            i15 = 1;
            do {
                int i16=-30;
                sArr[i + 1] ^= (short)Test.iFld;
                try {
                    i1 = (133 % i15);
                    Test.iFld = (i1 % 62);
                    i1 = (i15 / 24457);
                } catch (ArithmeticException a_e) {}
                dFld *= Test.fFld;
                try {
                    i16 = (i16 % iArr4[i - 1][i15 - 1]);
                    i1 = (Test.iFld % i15);
                    i16 = (i15 / i);
                } catch (ArithmeticException a_e) {}
                i17 = 1;
                do {
                    Test.lArrFld[i17] <<= i17;
                    Test.iFld -= i1;
                    if (true) break;
                    Test.byFld = (byte)Test.iFld;
                } while (++i17 < 1);
                i18 = 1;
                while (++i18 < 1) {
                    iArr4[i15 - 1][i15] = i15;
                    Test.instanceCount += (i18 * Test.iFld);
                    if (Test.bFld) break;
                    i16 += (int)-6L;
                    Test.lArrFld[i15] = i;
                }
                iArr4[i][i + 1] ^= i17;
            } while (++i15 < 73);
            iArr4[i][i] += (int)Test.instanceCount;
            i1 += (((i * sFld) + Test.instanceCount) - Test.instanceCount);
            Test.iFld += i;
            Test.lArrFld = Test.lArrFld;
        }
        sFld = (short)Test.instanceCount;

        FuzzerUtils.out.println("i i1 i15 = " + i + "," + i1 + "," + i15);
        FuzzerUtils.out.println("i17 i18 sArr = " + i17 + "," + i18 + "," + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("iArr4 = " + FuzzerUtils.checkSum(iArr4));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.byFld = " + Test.instanceCount + "," + (Test.bFld ?
            1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.fFld Test.iFld dFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.iFld + ","
            + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("sFld Test.lArrFld = " + sFld + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
