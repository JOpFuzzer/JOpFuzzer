// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3459425119L;
    public static double dFld=19.110767;
    public static boolean bFld=false;
    public static int iFld=4;
    public static volatile boolean bFld1=true;
    public int iFld1=140;
    public static long lArrFld[]=new long[N];
    public static boolean bArrFld[]=new boolean[N];
    public static short sArrFld[][]=new short[N][N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -188L);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.sArrFld, (short)27385);
        FuzzerUtils.init(Test.byArrFld, (byte)-68);
    }

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public int iMeth(int i4, double d1) {


        Test.lArrFld = (Test.lArrFld = (Test.lArrFld = Test.lArrFld));
        long meth_res = i4 + Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth2() {

        int i12=3028, i13=27539, i14=-4, i15=-7, i16=-50693, i17=5404, i18=-92;
        boolean b=true;
        short s=30394;

        i12 = 223;
        do {
            i13 += 233;
            for (i14 = 21; i14 > 1; i14--) {
                i15 *= 14128;
                i16 = 1;
                do {
                    Test.lArrFld[i16] += i16;
                    b = false;
                    i13 = i13;
                    Test.instanceCount -= Test.instanceCount;
                    i15 = s;
                } while (++i16 < 2);
            }
            i13 = i15;
            for (i17 = 1; 21 > i17; i17++) {
                Test.dFld = i15;
                i18 += (int)Test.dFld;
                i15 -= i17;
            }
        } while ((i12 -= 3) > 0);
        long meth_res = i12 + i13 + i14 + i15 + i16 + (b ? 1 : 0) + s + i17 + i18;
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i10, int i11, long l) {

        int i19=34, i20=38518, i21=-8, i22=-189, i23=11, iArr2[][]=new int[N][N];
        float f4=-1.638F;
        long l1=-3789081033309908681L;

        FuzzerUtils.init(iArr2, -4);

        Test.instanceCount = iMeth2();
        i19 = 1;
        while (++i19 < 207) {
            Test.instanceCount = i10;
            i10 *= i10;
            f4 = f4;
            Test.sArrFld[i19 - 1][i19 + 1] = (short)f4;
            Test.bFld = Test.bFld;
            for (i20 = 1; 8 > i20; ++i20) {
                switch (((i19 % 3) * 5) + 44) {
                case 57:
                    i21 -= i10;
                    for (i22 = 1; 2 > i22; i22++) {
                        try {
                            i11 = (i10 % i11);
                            i11 = (i23 % i23);
                            i21 = (51655 % iArr2[i20][i22 + 1]);
                        } catch (ArithmeticException a_e) {}
                        iArr2[i22 + 1][i22 + 1] += (int)l;
                        i11 += (int)l;
                        if (i22 != 0) {
                        }
                    }
                    break;
                case 46:
                    Test.instanceCount += i23;
                    break;
                case 49:
                    Test.lArrFld[i19] <<= l1;
                default:
                    i10 -= i11;
                }
            }
        }
        long meth_res = i10 + i11 + l + i19 + Float.floatToIntBits(f4) + i20 + i21 + i22 + i23 + l1 +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth() {

        int i7=241, i8=-10524, i9=-79, iArr1[]=new int[N];
        double d2=1.38138;
        float f1=-1.1005F, f2=-34.367F, f3=-1.981F;
        short s1=2140;

        FuzzerUtils.init(iArr1, 15);

        i7 -= iArr1[(i7 >>> 1) % N];
        i8 = 131;
        do {
            switch ((i8 % 2) + 26) {
            case 26:
                Test.instanceCount = (long)(++d2);
                for (f1 = 1; f1 < 12; f1++) {
                    f2 = 1;
                    do {
                        switch ((int)((f1 % 2) + 74)) {
                        case 74:
                            f3 *= (i8 * iMeth1(i8, Test.iFld, 2254334373L));
                            i7 = i7;
                            break;
                        case 75:
                            f3 += (((f2 * i7) + i8) - Test.instanceCount);
                            f3 += i8;
                            f3 = s1;
                            i9 += (int)(f2 * i9);
                            break;
                        default:
                            Test.iFld -= i9;
                            if (Test.bFld) continue;
                        }
                    } while (++f2 < 2);
                }
            case 27:
                Test.bFld = Test.bFld1;
                break;
            default:
                Test.iFld <<= i7;
            }
        } while (--i8 > 0);
        long meth_res = i7 + i8 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f1) + i9 +
            Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + s1 + FuzzerUtils.checkSum(iArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i1=3287, i2=-135, i3=-7, i5=31505, i6=-220, i24=0, i25=-4, iArr[]=new int[N];
        float f=-2.967F;
        byte by=107;
        short s2=28579;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 26.104050);
        FuzzerUtils.init(iArr, 12);

        for (double d : dArr) {
            iArr[(i >>> 1) % N] = (int)Test.lArrFld[(i1 >>> 1) % N];
            if (Test.bFld) {
                i1 = (int)((++f) / -12);
                Test.instanceCount = (++Test.instanceCount);
                for (i2 = 1; i2 < 63; i2++) {
                    iArr[i2 + 1] += Integer.reverseBytes(iMeth(iArr[i2 + 1] &= i3, d));
                    for (i5 = 1; i5 < 2; i5 += 3) {
                        if (Test.bArrFld[i5] = bMeth()) break;
                        i += i3;
                        Test.lArrFld[i2] <<= Test.instanceCount;
                        i1 += (i5 * i5);
                        by += (byte)i6;
                        i1 += (int)Test.instanceCount;
                    }
                    s2 -= (short)Test.iFld;
                    Test.instanceCount = i3;
                    for (i24 = 1; i24 < 2; ++i24) {
                        iFld1 <<= 5;
                        iFld1 &= 4805;
                        Test.instanceCount = i2;
                        switch (((i24 % 2) * 5) + 34) {
                        case 35:
                            i1 -= i25;
                            break;
                        case 42:
                            Test.byArrFld[i24] = (byte)Test.iFld;
                            f += i24;
                            i25 += (((i24 * Test.iFld) + s2) - i2);
                            break;
                        }
                        iFld1 /= 3;
                    }
                    iArr[i2] = (int)f;
                    iArr[i2 + 1] += 228;
                }
            } else {
                f += f;
                iArr[(7 >>> 1) % N] >>>= i;
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i2 i3 i5 = " + i2 + "," + i3 + "," + i5);
        FuzzerUtils.out.println("i6 by s2 = " + i6 + "," + by + "," + s2);
        FuzzerUtils.out.println("i24 i25 dArr = " + i24 + "," + i25 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld Test.bFld1 iFld1 = " + Test.iFld + "," + (Test.bFld1 ? 1 : 0) + "," + iFld1);
        FuzzerUtils.out.println("Test.lArrFld Test.bArrFld Test.sArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + FuzzerUtils.checkSum(Test.bArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("Test.byArrFld = " + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 bMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
