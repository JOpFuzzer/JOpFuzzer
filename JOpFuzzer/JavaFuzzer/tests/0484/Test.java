// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-246L;
    public static double dFld=74.12783;
    public static float fFld=0.573F;
    public float fFld1=1.60F;
    public static short sFld=-19662;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i6, int i7) {

        int i8=29996, i9=172, i10=245, i11=-3, iArr[]=new int[N];
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.223F);
        FuzzerUtils.init(iArr, 10);

        fArr[(i6 >>> 1) % N] += (float)Test.dFld;
        for (i8 = 14; 267 > i8; ++i8) {
            b = b;
            iArr[i8] = i9;
            Test.instanceCount = Test.instanceCount;
            iArr[i8 + 1] *= i6;
        }
        Test.instanceCount %= (Test.instanceCount | 1);
        Test.fFld *= 101.772F;
        for (i10 = 2; i10 < 251; ++i10) {
            if (b) {
                i11 -= i11;
            } else if (b) {
                i7 >>= i8;
                Test.instanceCount = Test.instanceCount;
                i11 += (i10 + i9);
            } else {
                iArr[i10 - 1] >>= i8;
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + (b ? 1 : 0) + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public int iMeth(int i2, byte by, int i3) {

        double d=-2.47195;
        int i4=0, i5=-62032, i12=12, i13=-49336, i14=3, iArr1[]=new int[N];
        short s=30291, sArr[]=new short[N];
        long l=-2L;

        FuzzerUtils.init(iArr1, 11);
        FuzzerUtils.init(sArr, (short)2455);

        for (d = 206; d > 12; --d) {
            i5 = 1;
            do {
                i3 >>= (int)(((-(39285 % (Math.max(Test.instanceCount, Test.instanceCount) | 1))) + (-(1.40523 -
                    Math.max(i3, i5)))) + dMeth(i3, -3283));
            } while (++i5 < 8);
            i4 += (int)(((d * Test.instanceCount) + s) - i2);
            i3 *= s;
        }
        for (l = 21; l < 398; l++) {
            iArr1[(int)(l + 1)] = (int)-7370779410627652645L;
            Test.instanceCount += -93L;
        }
        sArr[(i2 >>> 1) % N] *= (short)Test.instanceCount;
        i3 += i2;
        for (i13 = 3; i13 < 162; ++i13) {
            i4 >>= (int)l;
            i3 += (((i13 * i4) + i5) - i13);
            Test.instanceCount += -10;
            Test.instanceCount *= i2;
        }
        long meth_res = i2 + by + i3 + Double.doubleToLongBits(d) + i4 + i5 + s + l + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, int i1) {

        byte by1=123;
        int i15=-180, i16=208, i17=187, i18=-9, i19=228, i20=-3;
        long l1=-44119L;
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -54.8084);

        i *= (int)(Test.instanceCount * iMeth(99, by1, i1));
        by1 += (byte)fFld1;
        for (i15 = 18; i15 < 397; ++i15) {
            i1 = i15;
            for (l1 = i15; l1 < 4; ++l1) {
                i *= (int)Test.instanceCount;
                i18 = 1;
                do {
                    dArr[i18 - 1] -= Test.instanceCount;
                    b1 = b1;
                    Test.fFld -= -10;
                } while (++i18 < 1);
                Test.instanceCount += by1;
                if (b1) {
                    for (i19 = 1; 1 > i19; ++i19) {
                        i += i19;
                        fFld1 -= Test.instanceCount;
                    }
                } else if (b1) {
                    i16 = (int)l1;
                }
            }
        }
        vMeth_check_sum += i + i1 + by1 + i15 + i16 + l1 + i17 + i18 + (b1 ? 1 : 0) + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=-105, i22=151, i23=10, i24=-59687, i25=-1, i26=28175, i27=-157, i28=13;
        long l2=54L;
        boolean b2=false;
        double d1=74.121574;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 1.746F);

        vMeth(-5, i21);
        for (l2 = 2; l2 < 204; l2++) {
            i21 = -2614;
        }
        i21 = Test.sFld;
        for (i23 = 2; i23 < 256; i23++) {
            if (b2) break;
            i24 -= i23;
            d1 = 1;
            do {
                iArrFld[(int)(d1)] = i23;
                iArrFld = iArrFld;
                i22 -= (int)Test.dFld;
                b2 = b2;
            } while (++d1 < 99);
            i25 = 1;
            while (++i25 < 99) {
                Test.sFld = (short)i21;
                fFld1 += (float)-2.119842;
                fArr1[i25] *= Test.instanceCount;
                i21 = i25;
                i21 = (int)l2;
                i21 += (49597 + (i25 * i25));
                Test.sFld += (short)(i25 * i25);
                for (i26 = 1; i26 < 1; ++i26) {
                    if (b2) break;
                    i22 *= i21;
                    Test.instanceCount += -8;
                    i24 += (int)(14L + (i26 * i26));
                    i24 += (int)Test.fFld;
                }
                i28 = 1;
                do {
                    i21 -= 7859;
                    i27 += (i28 * fFld1);
                } while (++i28 < 1);
            }
            try {
                i21 = (-386597037 % iArrFld[i23]);
                i24 = (i21 % -52);
                iArrFld[i23 - 1] = (i24 / i26);
            } catch (ArithmeticException a_e) {}
        }

        FuzzerUtils.out.println("i21 l2 i22 = " + i21 + "," + l2 + "," + i22);
        FuzzerUtils.out.println("i23 i24 b2 = " + i23 + "," + i24 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("d1 i25 i26 = " + Double.doubleToLongBits(d1) + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 fArr1 = " + i27 + "," + i28 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("fFld1 Test.sFld iArrFld = " + Float.floatToIntBits(fFld1) + "," + Test.sFld + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
