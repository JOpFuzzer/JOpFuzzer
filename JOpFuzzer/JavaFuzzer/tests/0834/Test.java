// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3374695250L;
    public static double dFld=1.106789;
    public static float fFld=13.798F;
    public static int iFld=17208;
    public static long lFld=29L;
    public static int iFld1=-47172;
    public static boolean bFld=true;
    public volatile int iFld2=-219;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i6=-150, i7=-15, i8=-50, i9=-11, i10=254, iArr1[]=new int[N];
        short s=-9818;
        float f=2.447F;
        byte by=49;
        boolean b=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 26.112921);
        FuzzerUtils.init(iArr1, 46085);

        i6 = (int)Test.instanceCount;
        s %= (short)(Test.instanceCount | 1);
        for (i7 = 1; 314 > i7; ++i7) {
            Test.instanceCount += Test.instanceCount;
            dArr[i7 + 1] *= i6;
            f *= f;
            dArr = dArr;
            i6 = i7;
            switch ((((i8 >>> 1) % 5) * 5) + 19) {
            case 42:
                i6 ^= (int)Test.instanceCount;
                by &= (byte)-219;
                for (i9 = 1; i9 < 5; ++i9) {
                    Test.instanceCount += (i9 | i10);
                    i10 *= (int)-58L;
                    iArr1[i9 - 1] = i8;
                }
            case 29:
                i10 += (((i7 * Test.instanceCount) + i10) - i8);
            case 34:
                b = true;
                break;
            case 35:
                i8 += 6;
                break;
            case 36:
                i10 = 204;
            }
        }
        vMeth2_check_sum += i6 + s + i7 + i8 + Float.floatToIntBits(f) + by + i9 + i10 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i2, int i3) {

        int i4=47940, i5=0, i11=12, i12=0, i13=63478, i14=11890, iArr2[]=new int[N];
        long l=819480741317540394L, lArr[][]=new long[N][N];
        byte by1=-71;
        double d2=-77.13541;
        boolean b1=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -8978L);
        FuzzerUtils.init(iArr2, -10);
        FuzzerUtils.init(fArr, -1.814F);

        Test.instanceCount -= 180;
        Test.instanceCount = (long)(Math.abs(--i3) + ((i3 / (i2 | 1)) - (Test.dFld + -25)));
        lArr[(i2 >>> 1) % N][(i2 >>> 1) % N] = Integer.reverseBytes(i3);
        for (i4 = 4; i4 < 138; i4++) {
            vMeth2();
        }
        i2 >>= i5;
        i5 <<= -206;
        for (l = 8; l < 188; ++l) {
            for (i12 = 1; i12 < 9; ++i12) {
                iArr2[i12] ^= (int)-14119L;
                fArr[(int)(l + 1)] = by1;
                iArr2[(int)(l - 1)] = (int)Test.fFld;
                for (d2 = 1; d2 < 2; d2++) {
                    i14 += (int)l;
                    b1 = b1;
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + l + i11 + i12 + i13 + by1 + Double.doubleToLongBits(d2) + i14 + (b1 ? 1
            : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(double d1) {

        int i15=231, i16=-5, i17=175, i18=-31969, i19=76, i20=-4010, i21=44, iArr3[][]=new int[N][N];
        short s1=14702;

        FuzzerUtils.init(iArr3, 27);

        vMeth1(Test.iFld, -122);
        for (i15 = 167; i15 > 7; i15--) {
            for (i17 = 1; 10 > i17; ++i17) {
                i19 = 1;
                while (++i19 < 2) {
                    i18 += i19;
                    s1 = (short)Test.instanceCount;
                }
                Test.lFld = i16;
                i18 = (int)39.905F;
                i18 -= i17;
                for (i20 = 1; i20 < 2; i20++) {
                    i21 = (int)Test.fFld;
                    Test.iFld1 += i20;
                    try {
                        Test.iFld1 = (i17 % 241863807);
                        Test.iFld = (i17 % iArr3[i17 + 1][i17]);
                        iArr3[i15][i15] = (i21 % -19683);
                    } catch (ArithmeticException a_e) {}
                    Test.lFld &= Test.instanceCount;
                    i18 = (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i15 + i16 + i17 + i18 + i19 + s1 + i20 + i21 +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=27344, i1=-155, i22=14, i23=-202, i24=-197, i25=246, i26=28425, i27=162, i28=0, iArr[]=new int[N];
        double d=1.12864;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(lArr1, 9L);

        for (i = 128; 2 < i; i -= 3) {
            iArr[i + 1] = (int)(-d);
            vMeth(Test.dFld);
            for (i22 = 1; i22 < 139; ++i22) {
                Test.fFld += (((i22 * i23) + i22) - i1);
                for (i24 = 1; i24 < 5; ++i24) {
                    Test.fFld += i22;
                    i23 = i22;
                    i25 = Test.iFld;
                    lArr1[i] -= 14;
                    iArr[i22] -= i;
                    i25 += (i24 * i24);
                    iArr[i22] -= (int)Test.fFld;
                }
                d /= (i | 1);
                if (Test.bFld) continue;
                try {
                    i23 = (iFld2 % i);
                    i25 = (i1 / 13407);
                    iFld2 = (-211 % Test.iFld);
                } catch (ArithmeticException a_e) {}
                i1 += (i22 | Test.iFld1);
            }
            iArr[i + 1] += i1;
            Test.lFld = Test.iFld;
            if (Test.bFld) continue;
            i1 |= Test.iFld;
            Test.instanceCount = (long)d;
            i1 += (i + i22);
        }
        Test.lFld -= i;
        i26 = 1;
        do {
            Test.iFld += i23;
            Test.instanceCount <<= i1;
            for (i27 = 68; i26 < i27; i27 -= 2) {
                try {
                    i1 = (i28 % i23);
                    iArr[i26 + 1] = (-155 / i26);
                    Test.iFld1 = (i % i25);
                } catch (ArithmeticException a_e) {}
                i23 %= (int)1.64668;
            }
        } while (++i26 < 373);

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 iArr lArr1 = " + i28 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld Test.lFld Test.iFld1 = " + Test.iFld + "," + Test.lFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.bFld iFld2 = " + (Test.bFld ? 1 : 0) + "," + iFld2);

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
