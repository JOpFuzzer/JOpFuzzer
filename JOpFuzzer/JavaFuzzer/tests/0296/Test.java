// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=50L;
    public static byte byFld=24;
    public static volatile int iFld=-3;
    public float fFld=0.936F;
    public static volatile int iArrFld[]=new int[N];
    public static boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 14);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(boolean b) {

        double d=-2.16773, d1=0.64549;
        int i7=61, i8=16518, i9=33342, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -41745);

        d -= i7;
        i7 = i7;
        for (d1 = 3; 352 > d1; d1 += 3) {
            i8 += (int)d1;
            iArr[(int)(d1 - 1)] >>>= (int)Test.instanceCount;
            i9 = 1;
            do {
                Test.instanceCount += (i9 ^ Test.instanceCount);
                Test.iArrFld[i9] *= i8;
            } while (++i9 < 13);
            Test.instanceCount %= (i8 | 1);
            Test.bArrFld[(int)(d1 + 1)] = Test.bArrFld[(int)(d1 - 1)];
            Test.instanceCount = i8;
        }
        i7 = (int)Test.instanceCount;
        i7 = i9;
        i7 = (int)Test.instanceCount;
        i8 >>>= -49622;
        long meth_res = (b ? 1 : 0) + Double.doubleToLongBits(d) + i7 + Double.doubleToLongBits(d1) + i8 + i9 +
            FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(int i1, long l) {

        int i2=-2, i3=28066, i4=-12582, i5=13, i6=9;
        boolean b1=true;
        float f=-2.733F;
        double d3=1.83739;
        short s=-29951;

        for (i2 = 290; i2 > 8; --i2) {
            i4 = 1;
            do {
                for (i5 = i2; i5 < 1; ++i5) {
                    double d2=-79.23080;
                    fMeth(b1);
                    d2 = i6;
                    i3 = i3;
                }
                i3 += i5;
                Test.iArrFld[i2 + 1] = (int)-8L;
                Test.instanceCount += (((i4 * i4) + f) - i4);
                Test.byFld *= (byte)l;
                l = (long)d3;
                i1 -= (int)-136L;
            } while (++i4 < 6);
            if (i1 != 0) {
                vMeth1_check_sum += i1 + l + i2 + i3 + i4 + i5 + i6 + (b1 ? 1 : 0) + Float.floatToIntBits(f) +
                    Double.doubleToLongBits(d3) + s;
                return;
            }
            s = (short)i2;
            i1 <<= i5;
        }
        vMeth1_check_sum += i1 + l + i2 + i3 + i4 + i5 + i6 + (b1 ? 1 : 0) + Float.floatToIntBits(f) +
            Double.doubleToLongBits(d3) + s;
    }

    public static void vMeth() {


        vMeth1(Test.iFld, Test.instanceCount);
        Test.iArrFld[(Test.iFld >>> 1) % N] <<= Test.iFld;
        vMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-175, i10=3, i11=10, i12=-2, i13=105, i14=38473, i15=-54655;
        boolean b2=true;
        float f1=2.733F;
        short s1=29936;
        byte by=-71;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 0.30868);
        FuzzerUtils.init(lArr, -42006L);

        i = (int)Test.instanceCount;
        vMeth();
        Test.byFld *= (byte)Test.instanceCount;
        Test.iFld *= Test.iFld;
        dArr = dArr;
        i10 = 1;
        do {
            b2 = false;
            Test.instanceCount -= i;
            lArr[i10 + 1] += i10;
            switch ((i10 % 9) + 46) {
            case 46:
                if (b2) {
                    switch ((i10 % 2) + 30) {
                    case 30:
                        Test.iFld -= Test.iFld;
                        break;
                    case 31:
                        Test.iFld = (int)f1;
                        i11 = 1;
                        do {
                            f1 %= ((long)(f1) | 1);
                            i = i10;
                            Test.iFld += i10;
                            f1 = 50878;
                            f1 *= Test.instanceCount;
                            i += i11;
                            Test.iArrFld[i11] = (int)Test.instanceCount;
                        } while (++i11 < 148);
                        break;
                    }
                    Test.iFld += (40 + (i10 * i10));
                    for (i12 = 6; i12 < 148; ++i12) {
                        for (i14 = i12; i14 < 2; ++i14) {
                            Test.iFld += (((i14 * Test.byFld) + fFld) - i11);
                            switch ((i12 % 6) + 92) {
                            case 92:
                                Test.iArrFld[i10 + 1] *= i10;
                                i15 += (int)Test.instanceCount;
                                s1 -= (short)Test.instanceCount;
                                break;
                            case 93:
                                i13 *= i12;
                                break;
                            case 94:
                                i15 -= i15;
                            case 95:
                                Test.iArrFld[i14 + 1] = i11;
                                break;
                            case 96:
                                i13 <<= i11;
                            case 97:
                                Test.instanceCount = i13;
                                break;
                            }
                        }
                    }
                } else {
                    i13 += (((i10 * Test.instanceCount) + i14) - f1);
                }
                break;
            case 47:
            case 48:
                f1 = s1;
                break;
            case 49:
                if (b2) break;
                break;
            case 50:
                i15 += (((i10 * i11) + i15) - i14);
                break;
            case 51:
                f1 -= -2;
                break;
            case 52:
                try {
                    i = (Test.iArrFld[i10 - 1] % 1503838510);
                    i = (-48652 % Test.iArrFld[i10]);
                    i13 = (i14 / i13);
                } catch (ArithmeticException a_e) {}
                break;
            case 53:
                Test.iArrFld[i10] += Test.byFld;
            case 54:
                Test.iFld ^= i13;
                break;
            default:
                i15 <<= by;
            }
        } while (++i10 < 170);

        FuzzerUtils.out.println("i i10 b2 = " + i + "," + i10 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("f1 i11 i12 = " + Float.floatToIntBits(f1) + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("s1 by dArr = " + s1 + "," + by + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.iFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("fFld Test.iArrFld Test.bArrFld = " + Float.floatToIntBits(fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
