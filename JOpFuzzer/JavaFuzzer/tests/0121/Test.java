// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1560434536L;
    public static boolean bFld=true;
    public static float fFld=-2.934F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 47364);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i5, int i6, long l1) {

        int i8=-10921, i9=154, i10=-7;
        float f1=-101.768F;

        for (int i7 : Test.iArrFld) {
            i5 = (int)Test.instanceCount;
        }
        for (i8 = 214; 4 < i8; --i8) {
            i5 ^= (int)-30428L;
            f1 += (((i8 * i9) + i6) - i5);
            f1 = i9;
            Test.instanceCount += i9;
            i9 += i8;
            Test.instanceCount += i8;
            i10 = 1;
            do {
                if (Test.bFld) continue;
                l1 -= l1;
                Test.instanceCount += i10;
            } while (++i10 < 8);
        }
        long meth_res = i5 + i6 + l1 + i8 + i9 + Float.floatToIntBits(f1) + i10;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth1() {

        int i4=-229, i11=17, i12=-13, i13=-9, i14=57136;
        double d=-94.65631;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 971521117L);

        i4 += (int)(Test.instanceCount - ((-(i4 + i4)) + dMeth(i4, i4, Test.instanceCount)));
        i4 >>= (int)Test.instanceCount;
        i4 <<= i4;
        i4 <<= i4;
        i4 = (int)d;
        for (i11 = 348; i11 > 6; i11 -= 2) {
            i4 += i12;
            for (i13 = 1; i13 < 9; ++i13) {
                Test.iArrFld[i11] += i11;
                Test.iArrFld = Test.iArrFld;
                i12 = i12;
                i4 += (i13 | i4);
            }
            i4 = i12;
            lArr1[i11] = Test.instanceCount;
            Test.iArrFld[i11 - 1] = i13;
        }
        long meth_res = i4 + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1) {

        int i2=13, i3=-10, i15=-8, i16=57979, i17=-64111, i18=11, i19=4099;
        double d1=0.21515;
        byte by=61;

        for (i2 = 7; i2 < 208; i2++) {
            iMeth1();
            Test.instanceCount -= (long)Test.fFld;
            i1 += i2;
            i15 = 1;
            do {
                for (i16 = i15; 1 > i16; ++i16) {
                    i1 += i16;
                    Test.iArrFld[i15 + 1] += i17;
                }
                Test.iArrFld = Test.iArrFld;
            } while (++i15 < 8);
            d1 = 8;
            while ((d1 -= 3) > 0) {
                Test.fFld = i18;
                by = (byte)Test.instanceCount;
                i19 = 1;
                do {
                    i17 *= 152;
                    if (i16 != 0) {
                    }
                } while (++i19 < 3);
            }
        }
        long meth_res = i1 + i2 + i3 + i15 + i16 + i17 + Double.doubleToLongBits(d1) + i18 + by + i19;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=-34356L, lArr[]=new long[N];
        int i=7, i21=137, i22=-4, i23=24586, i24=-151, i25=-13, i26=-11, i27=236, i28=6, i29=18288;
        float f=0.840F, f2=-99.211F, fArr[]=new float[N];
        double d2=0.60446;
        short s=21470;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -6L);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr, -76.664F);

        for (l = 1; l < 156; ++l) {
            f += (lArr[(int)(l + 1)] ^= (long)((l % (0 | 1)) - (-60926 - (1.35F - (--i)))));
            i = (int)(((-6735999767075946456L + iMeth(i)) + i) - 12);
            i &= i;
            i += (int)l;
            d2 *= Test.instanceCount;
            i += (int)l;
            Test.instanceCount >>= -164;
            for (i21 = (int)(l); i21 < 162; ++i21) {
                s += (short)(i21 * i21);
                i22 += -213;
                i22 = i22;
                Test.instanceCount += (i21 ^ i22);
                i += (i21 - i21);
            }
        }
        for (i23 = 11; i23 < 231; i23++) {
            bArr[i23 + 1] = true;
            for (i25 = 114; i25 > 3; i25 -= 3) {
                for (f2 = 1; f2 < 4; f2++) {
                    fArr[i23 - 1] = -13;
                    f = 16948;
                    i26 += (int)((long)f2 ^ i25);
                }
                s += (short)f;
                i24 *= (int)d2;
                Test.instanceCount = l;
            }
            i24 -= i22;
            i26 *= i25;
            i27 = (int)-59.71349;
            for (i28 = 7; i28 < 114; i28++) {
                i = i22;
                i24 = i24;
            }
        }

        FuzzerUtils.out.println("l i f = " + l + "," + i + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("d2 i21 i22 = " + Double.doubleToLongBits(d2) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("s i23 i24 = " + s + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 f2 = " + i25 + "," + i26 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("lArr bArr fArr = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(bArr) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
