// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8550874701735800819L;
    public static int iFld=1;
    public static float fFld=-114.471F;
    public static volatile short sFld=6642;
    public static int iArrFld[]=new int[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11357);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(float f1, double d1, double d2) {


        Test.iFld >>= -7;
        long meth_res = Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(double d) {

        int i3=-27067, i4=-53, i5=156, i6=5, iArr[]=new int[N];
        double d3=2.127909;
        byte by=117;

        FuzzerUtils.init(iArr, -27640);

        Test.iFld = (int)dMeth(Test.fFld, d, d);
        for (i3 = 4; i3 < 257; i3++) {
            i4 += i4;
            iArr[i3] -= -8624;
            for (d3 = 6; d3 > 1; d3--) {
                i5 += (int)(d3 * i5);
                i4 += (int)(((d3 * i5) + Test.iFld) - i3);
                i4 -= i4;
                if (Test.iFld != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d) + i3 + i4 + Double.doubleToLongBits(d3) + i5 + by +
                        i6 + FuzzerUtils.checkSum(iArr);
                    return;
                }
                i4 += (int)(((d3 * i3) + by) - i4);
                i5 += -8;
                if (Test.iFld != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d) + i3 + i4 + Double.doubleToLongBits(d3) + i5 + by +
                        i6 + FuzzerUtils.checkSum(iArr);
                    return;
                }
                i6 = 1;
                while (++i6 < 2) {
                    i4 = i6;
                    Test.sFld -= (short)i5;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i3 + i4 + Double.doubleToLongBits(d3) + i5 + by + i6 +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i2, float f, boolean b) {

        double d4=-14.67471;
        int i7=9, i8=92, i9=24975, i10=-39551, i11=-7, i12=-19852, i13=20;
        byte by1=-107;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -61350L);

        vMeth(d4);
        for (i7 = 7; i7 < 156; ++i7) {
            for (i9 = 11; i9 > 1; i9--) {
                Test.instanceCount = Test.instanceCount;
                Test.iArrFld[i7] -= Test.iFld;
                Test.instanceCount -= i8;
                Test.iFld <<= (int)Test.instanceCount;
            }
            for (i11 = 1; 11 > i11; i11++) {
                Test.iArrFld[i11] >>= (int)Test.instanceCount;
                i13 = 1;
                do {
                    if (true) {
                        by1 &= (byte)i7;
                        Test.sFld = (short)232L;
                        i8 = Test.sFld;
                        Test.iFld += (i13 * i13);
                    } else if (b) {
                        i2 += (i13 ^ (long)Test.fFld);
                    } else if (b) {
                        lArr[i13 + 1] = i8;
                    } else {
                        Test.sFld <<= (short)184;
                    }
                } while (++i13 < 2);
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + (b ? 1 : 0) + Double.doubleToLongBits(d4) + i7 + i8 + i9 + i10 +
            i11 + i12 + i13 + by1 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=20618, i1=97, i14=154, i15=-225, i16=-108, i17=7, i18=161;
        boolean b1=true, bArr[][]=new boolean[N][N];
        byte by2=74, byArr[]=new byte[N];
        double d5=-2.101108;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 10L);
        FuzzerUtils.init(byArr, (byte)126);
        FuzzerUtils.init(bArr, false);

        for (i = 1; i < 187; ++i) {
            i1 *= iMeth(Test.iFld, Test.fFld, b1);
            i14 = 135;
            while (--i14 > 0) {
                i1 &= 112;
                Test.iArrFld[i14] = (int)Test.instanceCount;
            }
            Test.instanceCount += by2;
            for (i15 = 4; i15 < 135; ++i15) {
                i16 += (i15 * i15);
                i16 = i1;
                switch (((i16 >>> 1) % 7) + 12) {
                case 12:
                    Test.fFld += (-152 + (i15 * i15));
                    Test.fFld += (-39506 + (i15 * i15));
                    d5 = Test.instanceCount;
                    i1 = i16;
                    break;
                case 13:
                    for (i17 = 1; 2 > i17; i17++) {
                        lArr1[i - 1] = i18;
                        switch (((i17 % 2) * 5) + 27) {
                        case 31:
                            byArr[i15 + 1] = (byte)i;
                            break;
                        case 34:
                            lArr1 = lArr1;
                            i18 -= i1;
                            i18 -= by2;
                            Test.instanceCount = Test.instanceCount;
                            break;
                        default:
                            lArr1[i17] = i1;
                        }
                        switch ((((i18 >>> 1) % 2) * 5) + 82) {
                        case 92:
                        case 90:
                            i1 /= (int)(by2 | 1);
                            Test.iFld += (((i17 * Test.instanceCount) + Test.fFld) - i);
                            i16 >>= i1;
                            i1 = (int)Test.instanceCount;
                        }
                        sArrFld[i15] = (short)i;
                        by2 -= (byte)Test.iFld;
                    }
                    break;
                case 14:
                    Test.fFld += i15;
                    break;
                case 15:
                    Test.iArrFld[i15 + 1] >>= (int)Test.instanceCount;
                    break;
                case 16:
                    Test.sFld -= (short)i14;
                    break;
                case 17:
                    i16 += (i15 + Test.instanceCount);
                    break;
                case 18:
                    bArr[i][(i18 >>> 1) % N] = b1;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 b1 = " + i + "," + i1 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i14 by2 i15 = " + i14 + "," + by2 + "," + i15);
        FuzzerUtils.out.println("i16 d5 i17 = " + i16 + "," + Double.doubleToLongBits(d5) + "," + i17);
        FuzzerUtils.out.println("i18 lArr1 byArr = " + i18 + "," + FuzzerUtils.checkSum(lArr1) + "," +
            FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.iArrFld sArrFld = " + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
