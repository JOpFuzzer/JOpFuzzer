// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-41L;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 63436);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i8, double d2) {

        int i9=-64, i10=12, i11=-3, i12=12, i13=-211, i14=26322, i15=11, i16=-61126, i17=6;
        double d3=5.82882;

        for (i9 = 256; i9 > 6; i9--) {
            d2 = i9;
        }
        i10 = i9;
        i10 = (int)Test.instanceCount;
        Test.iArrFld1[(i9 >>> 1) % N] = i9;
        for (d3 = 9; d3 < 176; d3++) {
            i10 -= i9;
            for (i12 = 1; i12 < 9; i12++) {
                i10 |= i8;
                switch (((i12 % 1) * 5) + 71) {
                case 75:
                }
            }
            switch ((int)(((d3 % 4) * 5) + 44)) {
            case 55:
                for (i14 = (int)(d3); 9 > i14; i14++) {
                    for (i16 = 1; i16 < 1; i16++) {
                        i10 += (int)Test.instanceCount;
                        d2 += i13;
                    }
                }
            case 56:
            case 51:
                Test.iArrFld1[(int)(d3)] = (int)Test.instanceCount;
                break;
            case 63:
                Test.instanceCount += -151;
                break;
            }
        }
        long meth_res = i8 + Double.doubleToLongBits(d2) + i9 + i10 + Double.doubleToLongBits(d3) + i11 + i12 + i13 +
            i14 + i15 + i16 + i17;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i6, int i7) {

        short s=23225;
        float f=-2.336F, f1=-19.205F;
        double d4=-71.46127;
        int i18=0, i19=-44078, i20=-193, i21=-27905, i22=-9;
        byte by1=84, byArr[]=new byte[N];
        boolean b=false;

        FuzzerUtils.init(byArr, (byte)-81);

        s = (short)(~(long)((f + i7) * (i7 + i6)));
        i6 -= (int)lMeth(i7, d4);
        i7 >>= i7;
        if (b) {
            byArr[(i7 >>> 1) % N] = (byte)i6;
            for (i18 = 1; i18 < 316; i18++) {
                i7 = (int)f;
                for (f1 = 5; 1 < f1; --f1) {
                    for (i21 = 1; 2 > i21; i21++) {
                        Test.iArrFld1 = Test.iArrFld1;
                        i22 &= -1363;
                        Test.instanceCount += i21;
                        f = 18640;
                        by1 += (byte)i19;
                        i20 -= i18;
                    }
                }
            }
        } else if (b) {
            Test.iArrFld1[(i21 >>> 1) % N] -= (int)92.124050;
        } else if (b) {
            i6 = i19;
        } else {
            b = b;
        }
        vMeth_check_sum += i6 + i7 + s + Float.floatToIntBits(f) + Double.doubleToLongBits(d4) + i18 + i19 +
            Float.floatToIntBits(f1) + i20 + i21 + i22 + by1 + (b ? 1 : 0) + FuzzerUtils.checkSum(byArr);
    }

    public static void vSmallMeth(int i3, double d1, int i4) {

        byte by=-68;

        Test.iArrFld1[(i3 >>> 1) % N] = (int)((i3 * (-(d1 * 64826L))) - by);
        vMeth(i3, i3);
        vSmallMeth_check_sum += i3 + Double.doubleToLongBits(d1) + i4 + by;
    }

    public void mainTest(String[] strArr1) {

        int i=68, i1=14, i2=137, i23=-58000, i24=-206, i25=38336, i26=-11, i27=65, i28=-32555, i29=-13, i30=-15198;
        double d=0.8997, d5=91.34999;
        float f2=2.296F;
        short s1=14692;
        byte by2=-63, byArr1[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr1, (byte)-108);
        FuzzerUtils.init(lArr, 223L);

        for (i = 138; 5 < i; --i) {
            iArrFld[i] &= (i1--);
            for (d = 9; d < 188; ++d) {
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(i2, d, i1);
                for (i23 = 1; i23 < 2; i23++) {
                    f2 += (i23 * i23);
                    i24 += (((i23 * Test.instanceCount) + Test.instanceCount) - f2);
                }
                fArrFld[(int)(d - 1)] = (float)d;
                for (i25 = 2; i25 > 1; --i25) {
                    f2 -= Test.instanceCount;
                    Test.instanceCount = i25;
                    i26 = (int)Test.instanceCount;
                    Test.instanceCount += Test.instanceCount;
                    i1 += (168 + (i25 * i25));
                    s1 += (short)i25;
                }
                i1 = 2;
                d5 = -9185;
                i26 = i1;
                byArr1[i + 1] += (byte)i1;
                i1 >>>= i26;
                Test.iArrFld1[i] += (int)-35846L;
            }
            for (i27 = 2; 188 > i27; i27++) {
                lArr[i27 + 1] *= s1;
                for (i29 = 1; 2 > i29; ++i29) {
                    Test.instanceCount *= i27;
                    i28 = (int)Test.instanceCount;
                    fArrFld[i] += (float)d;
                    if (true) continue;
                    s1 += (short)(((i29 * by2) + i) - f2);
                }
                Test.iArrFld1[i - 1] = (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i2 i23 i24 = " + i2 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("f2 i25 i26 = " + Float.floatToIntBits(f2) + "," + i25 + "," + i26);
        FuzzerUtils.out.println("s1 d5 i27 = " + s1 + "," + Double.doubleToLongBits(d5) + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("by2 byArr1 lArr = " + by2 + "," + FuzzerUtils.checkSum(byArr1) + "," +
            FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount iArrFld Test.iArrFld1 = " + Test.instanceCount + "," +
            FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld1));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
