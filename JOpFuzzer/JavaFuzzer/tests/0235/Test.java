// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=181L;
    public static boolean bFld=false;
    public long lFld=187052876L;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -20478L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(long l1, int i7) {

        int i8=3, i9=7, i10=-44, i11=13, i12=132, i13=-117, i14=148, iArr2[][]=new int[N][N];
        byte by=-107;
        float f1=-2.955F;
        double d=40.112625;

        FuzzerUtils.init(iArr2, 1);

        for (i8 = 217; 3 < i8; --i8) {
            by *= (byte)i8;
            for (i10 = 1; i10 < 8; ++i10) {
                i9 = (int)f1;
            }
            for (d = i8; d < 8; ++d) {
                try {
                    iArr2[(int)(d + 1)][i8] = (iArr2[(int)(d + 1)][i8] % -1226839868);
                    i9 = (63937 / i8);
                    i11 = (-150067938 % i12);
                } catch (ArithmeticException a_e) {}
            }
            l1 -= i10;
            if (Test.bFld) break;
            for (i13 = 1; i13 < 8; i13++) {
                i11 += i13;
                i9 -= (int)l1;
                by ^= (byte)i8;
                i14 = (int)f1;
            }
            Test.instanceCount = i8;
            iArr2[i8][i8] -= -234;
        }
        long meth_res = l1 + i7 + i8 + i9 + by + i10 + i11 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) +
            i12 + i13 + i14 + FuzzerUtils.checkSum(iArr2);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1(int i4, long l) {

        int i5=-11, i6=-210, i15=-16261, i16=-144, i17=0, iArr1[]=new int[N];
        float f=1.292F, f2=99.183F;

        FuzzerUtils.init(iArr1, 4078);

        for (i5 = 323; i5 > 4; --i5) {
            i4 ^= iArr1[i5];
            f += (3190713752L + (i5 * i5));
            i6 = (int)l;
            i4 *= byMeth(Test.instanceCount, -12);
            i15 = 1;
            while (++i15 < 5) {
                for (i16 = i15; i16 < 1; i16++) {
                    iArr1[i16] |= i4;
                    f *= i6;
                    Test.lArrFld[i5] = 192;
                    if (false) break;
                    if (Test.bFld) {
                        Test.bFld = Test.bFld;
                        vMeth1_check_sum += i4 + l + i5 + i6 + Float.floatToIntBits(f) + i15 + i16 + i17 +
                            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1);
                        return;
                    } else if (Test.bFld) {
                        i4 *= (int)l;
                        f2 += -4970L;
                    }
                }
            }
        }
        vMeth1_check_sum += i4 + l + i5 + i6 + Float.floatToIntBits(f) + i15 + i16 + i17 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i2, int i3, boolean b) {

        float f3=0.554F;

        vMeth1(-120, Test.instanceCount);
        i2 = i3;
        f3 = Test.instanceCount;
        vMeth_check_sum += i2 + i3 + (b ? 1 : 0) + Float.floatToIntBits(f3);
    }

    public void mainTest(String[] strArr1) {

        int i=-58060, i1=-19468, i18=247, i19=2, i20=-7, i21=-32, i22=-24929, i23=6430, iArr[][]=new int[N][N];
        double d1=2.7594;
        short s=21639;
        float f4=79.368F;

        FuzzerUtils.init(iArr, -39434);

        i = 313;
        do {
            iArr = (iArr = FuzzerUtils.int2array(N, (int)224));
            i1 += (((i * i) + i1) - i1);
            vMeth(13, i1, Test.bFld);
            i1 *= i;
        } while ((i -= 3) > 0);
        d1 = i;
        for (i18 = 1; i18 < 209; ++i18) {
            Test.lArrFld[i18] += i;
            i20 = 121;
            while (--i20 > 0) {
                iArr[i18 - 1][i20] += i;
                s = (short)-14L;
            }
            for (i21 = i18; i21 < 121; ++i21) {
                if (Test.bFld) {
                    try {
                        i19 = (i19 / 93);
                        i19 = (-1016568028 % i1);
                        i22 = (i18 % i1);
                    } catch (ArithmeticException a_e) {}
                }
                i22 += i21;
                i23 = 1;
                do {
                    Test.instanceCount ^= -2;
                    f4 = i22;
                    i22 = i20;
                    i1 += (i23 ^ Test.instanceCount);
                    try {
                        i19 = (i1 / i20);
                        i22 = (i20 / -49401);
                        i22 = (iArr[i21 + 1][i21 - 1] % 247);
                    } catch (ArithmeticException a_e) {}
                    lFld %= -12;
                    try {
                        iArr[i23 - 1][i18] = (iArr[i21 + 1][i18] % -131);
                        i22 = (iArr[i21 - 1][i23 + 1] / iArr[i23][i23 + 1]);
                        i1 = (i1 % i);
                    } catch (ArithmeticException a_e) {}
                    lFld = i19;
                } while (++i23 < 1);
                i22 += i23;
                lFld += (-6394 + (i21 * i21));
                f4 -= i19;
            }
            i1 += i18;
            f4 = lFld;
        }
        s = (short)d1;

        FuzzerUtils.out.println("i i1 d1 = " + i + "," + i1 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("s i21 i22 = " + s + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 f4 iArr = " + i23 + "," + Float.floatToIntBits(f4) + "," +
            FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld lFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0)
            + "," + lFld);
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
