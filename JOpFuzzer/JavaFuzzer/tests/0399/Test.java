// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public static float fFld=0.416F;
    public static int iFld=51040;
    public static int iFld1=79;
    public static double dFld=0.90689;
    public static boolean bFld=true;
    public volatile short sFld=19751;
    public int iArrFld[]=new int[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6) {

        int i7=-33, i8=66, i9=-221, i10=127, i11=8, i12=-1;
        boolean b1=false;
        double d=0.14395;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -84.789F);

        fArr[(Test.iFld >>> 1) % N] -= Test.fFld;
        for (i7 = 14; i7 < 360; ++i7) {
            i6 = 4;
            if (true) break;
        }
        Test.instanceCount = i8;
        for (i9 = 138; i9 > 7; i9 -= 3) {
            if (b1) {
                Test.iFld = 17;
                i6 += (i9 + i7);
            } else {
                Test.instanceCount -= i9;
            }
            Test.iFld <<= i8;
            for (i11 = 2; i11 < 35; i11 += 3) {
                d = 4;
                while (--d > 0) {
                    Test.fFld += (float)(d + i7);
                }
                i8 += (28846 + (i11 * i11));
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + (b1 ? 1 : 0) + i11 + i12 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i4, int i5, boolean b) {

        int i13=28453, i14=12, i15=-47329, i16=-140, i17=-2, i18=172, i19=29459, i20=2152, iArr1[]=new int[N];
        short s=29444;
        double d1=2.28980, dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(dArr, 47.122143);

        i5 = i5;
        vMeth1(Test.iFld1);
        for (i13 = 211; i13 > 10; --i13) {
            for (i15 = i13; 8 > i15; i15++) {
                i14 += (((i15 * Test.instanceCount) + i16) - Test.instanceCount);
                for (i17 = 1; 1 > i17; i17++) {
                    i14 *= (int)Test.instanceCount;
                    iArr1 = iArr1;
                    iArr1[i17 - 1] -= i17;
                    Test.iFld1 /= (int)1.3306;
                    Test.iFld1 *= (int)Test.instanceCount;
                }
            }
            for (i19 = 1; 8 > i19; i19++) {
                i18 >>= s;
                dArr[i19 + 1] -= Test.fFld;
            }
            d1 -= Test.instanceCount;
        }
        vMeth_check_sum += i4 + i5 + (b ? 1 : 0) + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + s +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth() {

        boolean b2=true;
        int i21=23, i22=-14, i23=-13, i24=-10, iArr2[]=new int[N];
        float f=-80.137F;

        FuzzerUtils.init(iArr2, -7);

        Test.iFld -= (Test.iFld + (Test.iFld++));
        Test.iFld = (Test.iFld & ((Test.iFld--) - Test.iFld));
        vMeth(Test.iFld, 10, b2);
        i21 = 1;
        while (++i21 < 178) {
            Test.dFld = Test.dFld;
            for (i22 = 1; i22 < 9; i22++) {
                Test.iFld1 += (i22 - i23);
                Test.dFld += i22;
                for (f = 1; 2 > f; f++) {
                    Test.iFld1 += (int)(((f * i24) + i22) - f);
                    Test.instanceCount = Test.iFld1;
                    if (Test.iFld1 != 0) {
                    }
                    iArr2[i22] <<= Test.iFld1;
                    b2 = false;
                }
                Test.instanceCount >>= Test.instanceCount;
            }
        }
        long meth_res = (b2 ? 1 : 0) + i21 + i22 + i23 + Float.floatToIntBits(f) + i24 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-9, i2=-14, i3=30080, i25=-12, i26=-110, i27=-12, i28=-38015, i29=-4, i30=5, i31=57379, iArr[][]=new
            int[N][N];
        double d2=65.115015;
        byte by=-17;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 9);
        FuzzerUtils.init(lArr, 1538083012146858140L);

        for (int i : iArrFld) {
            i = Math.min(iArrFld[(i1 >>> 1) % N], (int)((i1 ^ i1) * (Test.instanceCount + Test.instanceCount)));
            for (i2 = 1; i2 < 63; ++i2) {
                iArr = (iArr = (iArr = (iArr = FuzzerUtils.int2array(N, (int)-58989))));
                i3 = (int)(i2 * Test.instanceCount);
                iArrFld[i2 - 1] >>>= (int)Test.instanceCount;
                Test.fFld = (i3 - iMeth());
                for (d2 = i2; d2 < 2; d2 += 2) {
                    by = (byte)0;
                    lArr[i2 - 1] = i3;
                }
                Test.iFld1 += i25;
                iArrFld[i2 + 1] |= 161;
            }
            for (i26 = 1; i26 < 63; i26++) {
                for (i28 = 1; i28 < 2; i28++) {
                    i &= -12;
                    i25 = (int)d2;
                    iArr[i26][i28 + 1] = i1;
                    Test.instanceCount -= i25;
                    Test.iFld1 = (int)Test.instanceCount;
                    if (Test.bFld) continue;
                    i29 = (int)233L;
                    Test.dFld -= i;
                }
                for (i30 = i26; i30 < 2; ++i30) {
                    Test.iFld += (i30 - sFld);
                    Test.instanceCount += (i30 * i30);
                    Test.instanceCount += (2776980348802269030L + (i30 * i30));
                    Test.dFld += -2;
                    lArr[i26] = 230;
                    Test.instanceCount += by;
                    by *= (byte)-9;
                }
            }
        }

        FuzzerUtils.out.println("i1 i2 i3 = " + i1 + "," + i2 + "," + i3);
        FuzzerUtils.out.println("d2 i25 by = " + Double.doubleToLongBits(d2) + "," + i25 + "," + by);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("iArr lArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.iFld1 Test.dFld Test.bFld = " + Test.iFld1 + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("sFld iArrFld = " + sFld + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
