// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=225L;
    public int iFld=7;
    public static volatile short sFld=-21991;
    public byte byFld=34;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i6, double d1, double d2) {

        float f2=-112.863F;

        f2 -= i6;
        long meth_res = i6 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + Float.floatToIntBits(f2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i4) {

        double d=0.71314;
        int i5=-3, i7=1, i8=-1964;
        boolean b=true;
        float f3=104.179F, f4=-29.361F;

        for (d = 1; d < 124; ++d) {
            i4 -= (int)(i4 += (int)lMeth(i4, d, d));
            b = b;
            Test.instanceCount >>>= Test.instanceCount;
            if (b) break;
            Test.instanceCount >>= Test.instanceCount;
            for (f3 = 1; 13 > f3; ++f3) {
                i4 -= i4;
                i7 += (int)(f3 * i5);
                for (f4 = (float)(d); f4 < 2; f4++) {
                    Test.instanceCount = i5;
                    i4 -= i5;
                    i5 *= i8;
                }
                i8 = (int)Test.instanceCount;
                if (b) continue;
            }
        }
        vMeth_check_sum += i4 + Double.doubleToLongBits(d) + i5 + (b ? 1 : 0) + Float.floatToIntBits(f3) + i7 +
            Float.floatToIntBits(f4) + i8;
    }

    public static int iMeth(float f1, long l) {

        int i2=26413, i3=-12, i9=-130, i10=-4311, iArr1[]=new int[N];
        byte by=90;
        double d3=0.10606, dArr[]=new double[N];
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 239);
        FuzzerUtils.init(lArr, -8092590244150987670L);
        FuzzerUtils.init(dArr, -41.15850);

        for (i2 = 17; 333 > i2; ++i2) {
            vMeth(i2);
            iArr1[i2 - 1] = (int)f1;
            for (i9 = 1; i9 < 5; i9++) {
                i10 = i2;
                i10 *= by;
                i10 = i3;
                i3 -= 10;
                lArr[i2 - 1] >>= i9;
                i3 = i9;
                if (i2 != 0) {
                }
                l = Test.sFld;
            }
            if (b1) {
                l >>>= by;
                i3 += (((i2 * f1) + i2) - i2);
            } else if (b1) {
                i3 -= (int)d3;
            } else {
                dArr[i2] = i3;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + l + i2 + i3 + i9 + i10 + by + Double.doubleToLongBits(d3) + (b1 ? 1
            : 0) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=78, i1=48111, i11=-7, i12=-5, i13=-14, i14=175, i15=-7271, iArr[]=new int[N];
        float f=-74.509F;
        double d4=-1.32075;
        boolean b2=false;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 26231);
        FuzzerUtils.init(byArr, (byte)-12);

        iFld *= (int)(((-(Test.sFld = (short)Test.instanceCount)) - (iFld - 113)) + (Math.min(iFld, iFld) + iFld));
        for (i = 5; i < 143; ++i) {
            if (!((i1++) <= (-4 * i))) {
                f = (iArr[i - 1] * ((Test.instanceCount + -3) / (((long)(56354L - (iFld * -114.886F))) | 1)));
                Test.sFld = (short)(Test.instanceCount = (-55744 - Test.sFld));
                i1 += (((i * iFld) + Test.instanceCount) - i1);
                i1 -= Integer.reverseBytes(iFld++);
            } else {
                switch ((((iArr[i - 1]++) >>> 1) % 2) + 121) {
                case 121:
                    iArr[i] = (int)(((113.98900 - (8L * iMeth(f, -35L))) - 0) + byFld);
                    i1 >>>= i;
                    d4 -= iFld;
                    break;
                case 122:
                    Test.instanceCount = -10;
                }
                Test.sFld -= (short)iFld;
                byArr = FuzzerUtils.byte1array(N, (byte)64);
            }
        }
        for (i11 = 5; i11 < 138; i11++) {
            if (true) {
                if (b2) {
                    if (false) {
                        Test.instanceCount += i;
                        switch (((i12 >>> 1) % 5) + 125) {
                        case 125:
                            iFld -= iFld;
                            Test.instanceCount <<= Test.instanceCount;
                            i1 += (((i11 * i) + f) - i12);
                            break;
                        case 126:
                            iFld >>>= (int)Test.instanceCount;
                            Test.instanceCount += -41396;
                            break;
                        case 127:
                            for (i13 = 188; i13 > i11; i13 -= 3) {
                                Test.instanceCount >>= i12;
                                i15 = 1;
                                do {
                                    iFld += (int)-13L;
                                    i14 <<= i12;
                                } while (++i15 < 1);
                            }
                            break;
                        case 128:
                        case 129:
                            b2 = b2;
                            break;
                        }
                    }
                } else {
                    i12 -= 8;
                }
            } else if (b2) {
                i14 -= (int)f;
            } else {
                byFld = (byte)i15;
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("d4 i11 i12 = " + Double.doubleToLongBits(d4) + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("b2 iArr byArr = " + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.sFld = " + Test.instanceCount + "," + iFld + "," +
            Test.sFld);
        FuzzerUtils.out.println("byFld = " + byFld);

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
