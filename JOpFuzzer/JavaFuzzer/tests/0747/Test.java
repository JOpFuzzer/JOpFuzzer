// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=6023980888917667657L;
    public static short sFld=-24583;
    public static float fFld=-2.342F;
    public double dFld=1.21841;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
        FuzzerUtils.init(Test.dArrFld, -2.54709);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d, float f, long l) {

        int i1=-253, i2=-6, i3=62419, i4=-36314, i5=162, i6=-169, i7=34341, i8=8255, i9=0, iArr[]=new int[N];
        boolean b=true;
        long lArr[]=new long[N], lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(lArr, 55L);
        FuzzerUtils.init(lArr1, -11L);

        for (i1 = 11; i1 < 354; i1++) {
            iArr[i1 - 1] = (int)l;
            Test.sFld /= (short)80.20628;
            for (i3 = 5; i3 > 1; i3 -= 3) {
                i4 -= i2;
                for (i5 = 1; 5 > i5; ++i5) {
                    iArr[i1] += (int)-1.49843;
                    Test.instanceCount -= (long)f;
                    i4 <<= i6;
                    d *= i2;
                    lArr = lArr1;
                }
                if (b) break;
                for (i7 = i1; i7 < 5; i7++) {
                    iArr[i1 + 1] >>= i9;
                    i2 += (i7 | i8);
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f) + l + i1 + i2 + i3 + i4 + i5 + i6 + (b
            ? 1 : 0) + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i) {

        double d1=-101.88058;
        int i10=51574, i11=-10, i12=-6, i13=2216;
        float f1=-2.538F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -31138L);

        vMeth1(d1, 2.1011F, Test.instanceCount);
        Test.fFld += Test.sFld;
        i = i;
        for (i10 = 12; i10 < 274; i10++) {
            for (f1 = 1; f1 < 6; f1++) {
                Test.iArrFld[(int)(f1)] <<= i11;
                i = i10;
                Test.iArrFld[(int)(f1)] -= -25945;
                switch ((int)(((f1 % 4) * 5) + 67)) {
                case 69:
                    lArr2[(int)(f1 - 1)] = i;
                    break;
                case 68:
                    i12 = i11;
                    Test.iArrFld[(int)(f1 - 1)] = i11;
                    i += 59454;
                    break;
                case 77:
                    Test.dArrFld[i10 + 1] += f1;
                    i11 = i13;
                    break;
                case 82:
                    Test.dArrFld[(int)(f1 - 1)] = 0.903F;
                    break;
                default:
                    i = i;
                }
            }
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d1) + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 +
            FuzzerUtils.checkSum(lArr2);
    }

    public int iMeth() {

        int i14=-65055, i15=115, i16=-144, i17=-45646, i18=40528;
        boolean b1=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.876F);

        vMeth(-225);
        i14 = 1;
        while (++i14 < 327) {
            Test.iArrFld[i14 - 1] = i14;
            for (i15 = 1; i15 < 5; i15++) {
                i16 = i15;
                i16 = i14;
                switch (((i16 >>> 1) % 3) + 25) {
                case 25:
                    if (b1) break;
                    for (i17 = 1; i17 < 2; ++i17) {
                        dFld -= Test.fFld;
                        i18 = i15;
                        fArr[i14 + 1] = Test.instanceCount;
                        i16 >>= 84;
                    }
                    break;
                case 26:
                    i16 -= 24;
                    break;
                case 27:
                    i16 = i18;
                    break;
                }
            }
        }
        long meth_res = i14 + i15 + i16 + (b1 ? 1 : 0) + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i19=145, i20=30191, i21=-46998, i22=59159, i23=-92, i24=55, i25=-5, i26=175, i27=-134, i28=-5;
        byte by=81;
        boolean b3=false;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 0.886F);

        switch (((iMeth() >>> 1) % 2) + 61) {
        case 61:
            i19 *= 45182;
            for (i20 = 10; 299 > i20; i20++) {
                boolean b2=true;
                if (b2) continue;
                i21 += (-115 + (i20 * i20));
                i19 += (i20 | i19);
                try {
                    i21 = (i20 % 101);
                    i21 = (35207 / i21);
                    i19 = (-2939 % i21);
                } catch (ArithmeticException a_e) {}
                by += (byte)(i20 * Test.instanceCount);
                Test.instanceCount ^= i21;
            }
            i19 = i21;
            break;
        case 62:
            for (i22 = 12; i22 < 202; i22++) {
                i23 += 14;
                fArr1[i22] += Test.sFld;
            }
            i21 %= (int)(i24 | 1);
            dFld /= (i24 | 1);
            switch ((((-3009 >>> 1) % 2) * 5) + 116) {
            case 120:
            case 122:
                i25 = 1;
                do {
                    for (i26 = 1; i26 < 68; i26++) {
                        dFld += dFld;
                        i28 = 1;
                        while (++i28 < 2) {
                            try {
                                i27 = (-176213624 % i21);
                                i27 = (i20 % Test.iArrFld[i26 - 1]);
                                i27 = (i21 / i25);
                            } catch (ArithmeticException a_e) {}
                            dFld += i28;
                            Test.instanceCount += (((i28 * i25) + Test.instanceCount) - i27);
                        }
                        i21 /= (int)7279349898427774095L;
                        i24 <<= by;
                    }
                    Test.fFld -= i25;
                    i19 += (int)3696865909803617799L;
                    Test.instanceCount = i22;
                    i21 -= (int)Test.instanceCount;
                    i27 += (int)1.66934;
                } while (++i25 < 371);
            default:
                b3 = b3;
            }
            break;
        default:
            Test.instanceCount += i20;
        }

        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("by i22 i23 = " + by + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 b3 = " + i27 + "," + i28 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("dFld Test.iArrFld Test.dArrFld = " + Double.doubleToLongBits(dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
