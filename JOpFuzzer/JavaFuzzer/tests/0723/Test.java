// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3370294779L;
    public short sFld=-13855;
    public static int iFld=37145;
    public static float fFld=1.707F;
    public static byte byFld=16;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -20887);
        FuzzerUtils.init(Test.lArrFld, 8L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public void vMeth(long l) {

        byte by=82;
        float f=47.1002F;
        int i2=-243;

        for (int i1 : Test.iArrFld) {
            sFld >>= (short)(--Test.instanceCount);
            i1 -= Math.min((int)((-7 - Test.lArrFld[(-2 >>> 1) % N]) + (++i1)), (int)((-i1) + (--Test.instanceCount)));
            sFld -= (short)((-9183 - (i1 + by)) + ((i1--) - (Test.instanceCount + f)));
            Test.instanceCount -= (((i1 - Test.instanceCount) + by) + ((1 + i1) - (i1 - l)));
        }
        i2 >>>= (int)(((f + i2) * (++Test.iArrFld[(i2 >>> 1) % N])) - ((i2 += i2) << (long)(i2 - f)));
        vMeth_check_sum += l + by + Float.floatToIntBits(f) + i2;
    }

    public static int iMeth2(int i6) {

        int i7=156, i8=206, i9=-54584, i10=-5, i11=-90;
        short s=-2308;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -102.30753);

        Test.iArrFld[(Test.iFld >>> 1) % N] = i6;
        i6 = (int)Test.instanceCount;
        Test.iFld = (int)Test.fFld;
        for (i7 = 13; i7 < 381; i7++) {
            Test.fFld += i7;
            Test.iArrFld[i7] = i6;
            Test.fFld += (((i7 * i8) + Test.fFld) - s);
            i6 += (i7 * i7);
        }
        i9 = 174;
        while (--i9 > 0) {
            for (i10 = 1; 9 > i10; i10++) {
                Test.iFld = -12768;
                i8 = i11;
                Test.lArrFld = FuzzerUtils.long1array(N, (long)-7012L);
                dArr[i9 + 1] *= i6;
                i6 >>= Test.iFld;
            }
        }
        long meth_res = i6 + i7 + i8 + s + i9 + i10 + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1() {

        int i3=48, i4=-174, i5=-81, i12=50504, i13=61586;
        boolean b=false;
        short s1=31624;

        Test.iFld -= (int)(Test.iArrFld[(Test.iFld >>> 1) % N] * ((Test.iFld - Test.instanceCount) + (--Test.iFld)));
        for (i3 = 16; i3 < 259; i3++) {
            Test.iFld -= (-i4);
            switch ((i3 % 2) + 59) {
            case 59:
                i5 += (((i3 * Test.iFld) + Test.instanceCount) - i4);
                i4 -= (int)((i3 - iMeth2(i5)) - Test.fFld);
                Test.iFld -= 222;
                if (b) break;
            case 60:
                i4 += i3;
                break;
            }
            if (i4 != 0) {
            }
            i5 += (62759 + (i3 * i3));
            try {
                i4 = (Test.iFld % i3);
                i4 = (i3 % -69);
                Test.iFld = (i4 % -79);
            } catch (ArithmeticException a_e) {}
            for (i12 = i3; i12 < 7; i12++) {
                s1 += (short)(i12 - Test.instanceCount);
                i4 = 14;
            }
        }
        long meth_res = i3 + i4 + i5 + (b ? 1 : 0) + i12 + i13 + s1;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i) {

        float f1=2.534F, fArr[][]=new float[N][N];
        int i14=-23024, i15=-177, i16=-31706, i17=-71;
        boolean b1=true;
        double d1=0.77531;

        FuzzerUtils.init(fArr, 1.268F);

        vMeth((long)(((f1 + -8560) - (-(i - i))) - Integer.reverseBytes(iMeth1())));
        Test.instanceCount += Test.iFld;
        i14 = 349;
        do {
            if (b1) {
                Test.instanceCount = i14;
                Test.iFld = i14;
            } else {
                Test.instanceCount += i14;
                Test.iFld += -52511;
            }
            i = (int)Test.instanceCount;
            Test.iFld += (i14 * i14);
            fArr[i14 - 1][i14 - 1] += (float)d1;
            if (b1) continue;
            for (i15 = 1; i15 < 9; ++i15) {
                i16 >>>= i17;
            }
            Test.iFld *= (int)Test.instanceCount;
        } while ((i14 -= 2) > 0);
        long meth_res = i + Float.floatToIntBits(f1) + i14 + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) + i15 + i16 +
            i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=123.77980, d2=-99.53630;
        int i18=-45314, i19=160, i20=14, i21=-7, i22=-9;
        boolean b2=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        d -= iMeth(Test.iFld);
        for (i18 = 13; i18 < 270; i18++) {
            i19 -= i19;
            Test.instanceCount = Test.byFld;
        }
        Test.lArrFld[(Test.iFld >>> 1) % N] >>>= i19;
        for (i20 = 20; i20 < 341; i20++) {
            i22 = 1;
            do {
                Test.byFld /= (byte)43;
                sFld += (short)(i22 + i22);
                Test.iFld += (int)d;
                Test.iArrFld[i22 - 1] |= Test.iFld;
                d2 = 1;
                do {
                    switch (((i18 >>> 1) % 7) + 77) {
                    case 77:
                        i21 += (int)((long)d2 | i22);
                        i19 >>= i20;
                        break;
                    case 78:
                        if (b2) break;
                        Test.iFld *= i19;
                    case 79:
                        bArr[(int)(d2 + 1)] = b2;
                        break;
                    case 80:
                    case 81:
                        sFld += (short)d2;
                        break;
                    case 82:
                        i19 *= (int)Test.instanceCount;
                        sFld += (short)(d2 - i19);
                        Test.instanceCount += (long)(d2 * i18);
                        i19 >>>= i20;
                        break;
                    case 83:
                        Test.instanceCount += i20;
                        Test.instanceCount |= 13;
                        switch ((i22 % 1) + 125) {
                        case 125:
                            Test.instanceCount += 29400;
                            Test.instanceCount += (long)(d2 - i21);
                        default:
                            i21 -= (int)Test.fFld;
                        }
                        break;
                    }
                } while (++d2 < 1);
                i19 *= 5;
            } while (++i22 < 78);
        }

        FuzzerUtils.out.println("d i18 i19 = " + Double.doubleToLongBits(d) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("d2 b2 bArr = " + Double.doubleToLongBits(d2) + "," + (b2 ? 1 : 0) + "," +
            FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount sFld Test.iFld = " + Test.instanceCount + "," + sFld + "," +
            Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.byFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.byFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
