// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8311229950395028892L;
    public volatile byte byFld=80;
    public volatile int iFld=-5;
    public static boolean bFld=true;
    public static double dFld=119.19900;
    public static short sFld=18932;
    public int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4819748431165560145L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth() {

        int i=-38450;
        byte by=-36;

        i >>= (int)(~(++Test.instanceCount));
        i = by;
        vSmallMeth_check_sum += i + by;
    }

    public static long lMeth(int i10) {

        int i11=36283, i12=169, i13=-221, i14=-58, i15=-13292, i16=-81, i17=-39263;
        long l=-8L;
        float f=-65.117F;
        double d=13.71954, dArr[]=new double[N];
        short s1=-2074;

        FuzzerUtils.init(dArr, 0.121251);

        for (i11 = 9; i11 < 389; i11++) {
            for (i13 = 1; i13 < 4; ++i13) {
                i12 = 0;
                dArr[i13 + 1] = Test.instanceCount;
                for (l = 1; l < 2; ++l) {
                    i15 = i13;
                    i14 |= i12;
                    f += (float)d;
                    if (Test.bFld) break;
                }
                for (i16 = 1; i16 < 2; i16++) {
                    s1 = (short)i17;
                    f += i10;
                    i10 += (2 + (i16 * i16));
                }
                if (i10 != 0) {
                }
                Test.instanceCount += i13;
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + l + i15 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) +
            i16 + i17 + s1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(short s, int i8, int i9) {

        int i18=-229, i19=59175, i20=10, i21=56896, i22=-20884, i23=-72, i24=-13, iArr1[]=new int[N];
        double d1=-1.16024;
        byte by1=-114;

        FuzzerUtils.init(iArr1, 4);

        lMeth(36);
        Test.instanceCount += i8;
        Test.instanceCount = i18;
        for (i19 = 4; i19 < 168; i19++) {
            for (i21 = i19; i21 < 10; ++i21) {
                Test.instanceCount += (i21 ^ i9);
            }
            d1 *= by1;
            by1 += (byte)(i19 | s);
            i8 += (int)(779018021L + (i19 * i19));
            i8 /= -3283;
            iArr1[i19 + 1] &= i18;
        }
        for (i23 = 1; 313 > i23; i23++) {
            i9 = (int)Test.instanceCount;
        }
        iArr1[(i9 >>> 1) % N] -= (int)Test.instanceCount;
        long meth_res = s + i8 + i9 + i18 + i19 + i20 + i21 + i22 + Double.doubleToLongBits(d1) + by1 + i23 + i24 +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i5=-231, i6=6, i25=-14, i26=-247, iArr[]=new int[N];
        short s2=-27953;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 108);
        FuzzerUtils.init(byArr, (byte)-121);

        for (int i4 : iArr) {
            for (i5 = 1; i5 < 4; i5++) {
                int i7=-131;
                float f1=2.91F;
                try {
                    iArr[i5 + 1] = (121 / i7);
                    i4 = (-200 % i5);
                    i6 = (-183 / i7);
                } catch (ArithmeticException a_e) {}
                i6 += (int)(-25.246F + iMeth1(s2, -13403, i4));
                byArr = byArr;
                if (i6 != 0) {
                }
                i7 = (int)f1;
                for (i25 = 1; i25 < 2; ++i25) {
                    if (Test.bFld) continue;
                    Test.instanceCount = (long)f1;
                    i4 += (-155 + (i25 * i25));
                    i26 >>= (int)Test.instanceCount;
                }
                i26 >>= -4853;
            }
            try {
                i4 = (i5 / i26);
                i6 = (i5 / -158);
                iArr[(i25 >>> 1) % N] = (i4 % -67);
            } catch (ArithmeticException a_e) {}
            iArr = iArr;
        }
        long meth_res = i5 + i6 + s2 + i25 + i26 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=2, i2=238, i3=118, i27=35683;
        float f2=1.614F;

        Test.instanceCount = (-(byFld--));
        for (int smallinvoc=0; smallinvoc<885; smallinvoc++) vSmallMeth();
        iArrFld[(iFld >>> 1) % N] -= 33966;
        switch (((Math.max(22, iFld) >>> 1) % 8) + 82) {
        case 82:
            for (i1 = 220; i1 > 2; i1--) {
                i3 = 1;
                do {
                    iArrFld[i3] = (-iMeth());
                    i27 = 1;
                    while (++i27 < 1) {
                        switch ((i27 % 7) + 96) {
                        case 96:
                            iFld += (int)116.917F;
                            Test.dFld -= i27;
                            iFld *= iFld;
                            break;
                        case 97:
                        case 98:
                        case 99:
                            iArrFld = FuzzerUtils.int1array(N, (int)-28);
                            f2 -= (float)Test.dFld;
                            iArrFld = iArrFld;
                            break;
                        case 100:
                            iArrFld[i3] = i2;
                            iFld += (((i27 * iFld) + Test.instanceCount) - i27);
                            Test.sFld >>= (short)Test.instanceCount;
                            break;
                        case 101:
                            Test.instanceCount >>= i1;
                        case 102:
                            i2 += (i27 * i27);
                            Test.instanceCount += i27;
                            break;
                        }
                        if (Test.bFld) break;
                        f2 += Test.instanceCount;
                        Test.lArrFld[i27 + 1][i27] = Test.sFld;
                        Test.dFld = Test.instanceCount;
                        i2 += i1;
                        i2 *= (int)Test.instanceCount;
                    }
                    byFld -= (byte)55.78328;
                    Test.instanceCount -= iFld;
                } while (++i3 < 115);
                iFld *= (int)Test.instanceCount;
            }
        case 83:
            iFld = i3;
            break;
        case 84:
            i2 <<= i27;
            break;
        case 85:
            i2 ^= (int)Test.instanceCount;
            break;
        case 86:
            i2 -= byFld;
        case 87:
            i2 = (int)-62L;
            break;
        case 88:
            Test.lArrFld[(i3 >>> 1) % N][(i27 >>> 1) % N] += i2;
            break;
        case 89:
            iFld = (int)Test.instanceCount;
        }

        FuzzerUtils.out.println("i1 i2 i3 = " + i1 + "," + i2 + "," + i3);
        FuzzerUtils.out.println("i27 f2 = " + i27 + "," + Float.floatToIntBits(f2));

        FuzzerUtils.out.println("Test.instanceCount byFld iFld = " + Test.instanceCount + "," + byFld + "," + iFld);
        FuzzerUtils.out.println("Test.bFld Test.dFld Test.sFld = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
