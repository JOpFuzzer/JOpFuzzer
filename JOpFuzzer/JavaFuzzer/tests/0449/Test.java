// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=6527092387423539505L;
    public static float fFld=-63.340F;
    public static boolean bFld=true;
    public static byte byFld=9;
    public static int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -218);
        FuzzerUtils.init(Test.fArrFld, -41.375F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5, float f1) {

        int i6=-193, i7=-57728, i8=-24, i9=8926, i10=11, i11=49777, i12=-1, i13=-150;
        byte by=-101;
        long l1=-1441009633L;
        float f2=-2.840F;

        i6 = 1;
        do {
            for (i7 = 1; i7 < 5; ++i7) {
                Test.iArrFld = Test.iArrFld;
                by += (byte)(i7 ^ Test.instanceCount);
                Test.instanceCount <<= 65400;
            }
        } while (++i6 < 312);
        i9 = 1;
        do {
            i8 += (int)Test.instanceCount;
        } while (++i9 < 290);
        Test.iArrFld[(i5 >>> 1) % N][(i9 >>> 1) % N] = i10;
        Test.fArrFld[(i7 >>> 1) % N] *= l1;
        for (i11 = 210; i11 > 2; i11 -= 2) {
            l1 = i8;
            for (f2 = i11; f2 < 15; f2++) {
                i10 = i10;
                Test.instanceCount += (long)(((f2 * i13) + l1) - l1);
                Test.fFld *= i11;
            }
        }
        vMeth2_check_sum += i5 + Float.floatToIntBits(f1) + i6 + i7 + i8 + by + i9 + i10 + l1 + i11 + i12 +
            Float.floatToIntBits(f2) + i13;
    }

    public static void vMeth1(int i3, long l, int i4) {

        int i14=-3, i15=-64131, i16=-7, i17=107, i18=12, i19=-12;
        double d=46.44206;

        i4 -= (int)((Double.longBitsToDouble(Test.instanceCount) * (i4 - Test.fFld)) * ((Test.fFld * i4) - i3));
        vMeth2(i4, Test.fFld);
        Test.fFld += -9242L;
        for (i14 = 3; i14 < 302; i14++) {
            i3 -= (int)d;
            i3 |= 17631;
            switch (((i14 % 2) * 5) + 105) {
            case 114:
                if (Test.bFld) {
                    for (i16 = 1; i16 < 6; i16 += 2) {
                        i17 -= i17;
                        for (i18 = 1; i18 < 3; i18++) {
                            try {
                                i3 = (i19 % 757);
                                i4 = (77 % i15);
                                i15 = (1472460723 % i16);
                            } catch (ArithmeticException a_e) {}
                            l <<= i19;
                            Test.instanceCount = i4;
                            i15 += i15;
                        }
                    }
                } else if (Test.bFld) {
                    i3 >>>= i17;
                } else {
                    i3 *= i18;
                }
                break;
            case 109:
                i15 += i4;
                break;
            default:
                Test.iArrFld[i14][i14 - 1] = i3;
            }
        }
        vMeth1_check_sum += i3 + l + i4 + i14 + i15 + Double.doubleToLongBits(d) + i16 + i17 + i18 + i19;
    }

    public static void vMeth() {

        int i1=133, i2=-50095, i20=-10, i21=-129, i22=-3, i23=10, i24=-248;
        float f=0.541F;
        double d1=28.128161;
        short s=-6541;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i1 = 12; i1 < 353; ++i1) {
            f += (((i1 * Test.instanceCount) + i1) - i1);
            switch (((i1 % 8) * 5) + 66) {
            case 99:
                vMeth1(i1, Test.instanceCount, i20);
                d1 -= d1;
                bArr = FuzzerUtils.boolean1array(N, (boolean)true);
                break;
            case 81:
                for (i21 = 1; 5 > i21; i21++) {
                    Test.instanceCount *= s;
                    for (i23 = 1; i23 < 2; ++i23) {
                        Test.iArrFld[i21 - 1][i1 + 1] = -99;
                    }
                    i24 = i21;
                    i24 /= -8336;
                    i22 &= (int)Test.instanceCount;
                    i24 >>= i1;
                }
                break;
            case 82:
                i20 -= i23;
            case 69:
                if (Test.bFld) continue;
                break;
            case 86:
                Test.instanceCount *= i24;
                break;
            case 98:
                Test.instanceCount = Test.byFld;
            case 104:
                i22 -= s;
                break;
            case 95:
                Test.instanceCount += i1;
                break;
            default:
                i20 += (i1 * i1);
            }
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f) + i20 + Double.doubleToLongBits(d1) + i21 + i22 + s + i23
            + i24 + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=6, i25=248, i26=12, i27=-10, i28=2, i29=-20, i30=-6;
        long l2=0L;
        byte byArr[]=new byte[N];
        double dArr[]=new double[N];
        boolean bArr1[][]=new boolean[N][N];

        FuzzerUtils.init(byArr, (byte)-53);
        FuzzerUtils.init(dArr, -106.31994);
        FuzzerUtils.init(bArr1, false);

        i = (i--);
        vMeth();
        i >>= i;
        switch (((i >>> 1) % 2) + 74) {
        case 74:
            byArr[(i >>> 1) % N] = (byte)Test.fFld;
            break;
        case 75:
            Test.instanceCount = Test.instanceCount;
            i25 = 1;
            while (++i25 < 232) {
                dArr = dArr;
                i = i25;
            }
            break;
        default:
            Test.iArrFld[(i >>> 1) % N][(8 >>> 1) % N] -= (int)Test.fFld;
            Test.instanceCount -= -60L;
            for (i26 = 13; i26 < 214; ++i26) {
                i = Test.byFld;
                i27 += i26;
                for (i28 = i26; i28 < 125; ++i28) {
                    Test.bFld = true;
                    for (l2 = 1; l2 > 1; --l2) {
                        i += (int)(((l2 * i30) + l2) - Test.fFld);
                        i = -20913;
                        Test.iArrFld[i26 + 1][i26] = (int)l2;
                        if (Test.bFld) {
                            bArr1[i28 - 1][i28 - 1] = Test.bFld;
                            Test.iArrFld[(int)(l2 + 1)] = FuzzerUtils.int1array(N, (int)35261);
                            if (Test.bFld) break;
                        } else if (Test.bFld) {
                            i += (int)(l2 - i27);
                            i27 = i26;
                            Test.fArrFld = Test.fArrFld;
                            Test.iArrFld[i28][i28 - 1] -= (int)l2;
                        } else if (Test.bFld) {
                            i30 += (int)Test.fFld;
                            Test.fFld = i28;
                        } else {
                            Test.iArrFld[(36 >>> 1) % N][(int)(l2)] *= i25;
                        }
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i25 i26 = " + i + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("l2 i30 byArr = " + l2 + "," + i30 + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("dArr bArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(bArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld Test.iArrFld Test.fArrFld = " + Test.byFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
