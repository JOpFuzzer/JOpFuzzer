// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-214L;
    public static int iFld=-5;
    public static boolean bFld=false;
    public static volatile double dFld=61.49780;
    public static byte byFld=69;
    public static int iFld1=9519;
    public static short sFld=4503;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(long l3, int i7, long l4) {

        int i8=4, i9=-5, i10=225, i11=10, i12=-21465, i13=-238, iArr[]=new int[N];
        byte by=-2;
        float f=-59.137F;
        short s=-25239;
        double d=0.96729;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(lArr, 0L);

        for (i8 = 8; i8 < 130; i8++) {
            switch (((i8 % 8) * 5) + 61) {
            case 92:
                by += (byte)i8;
                break;
            case 93:
                Test.instanceCount = Test.iFld;
                Test.iFld = 181;
                break;
            case 69:
                Test.iFld = -88;
                Test.iFld += (int)(39L + (i8 * i8));
                Test.iFld -= i9;
                break;
            case 97:
                iArr[i8 + 1] = i8;
                for (i10 = 1; i10 < 13; i10++) {
                    if (Test.bFld) continue;
                    for (i12 = 1; i12 < 2; i12 += 2) {
                        i13 += (((i12 * i13) + l3) - f);
                        s = (short)l3;
                        d += s;
                    }
                }
                break;
            case 89:
                lArr[i8] = s;
                break;
            case 98:
            case 86:
                s += (short)i9;
                break;
            case 80:
                i11 = (int)-15033L;
                break;
            default:
                iArr[i8 - 1] <<= (int)Test.instanceCount;
            }
        }
        long meth_res = l3 + i7 + l4 + i8 + i9 + by + i10 + i11 + i12 + i13 + Float.floatToIntBits(f) + s +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(long l2) {

        int i5=-78, i6=-235, i14=-1, i15=10320, iArr1[]=new int[N];
        boolean b=true;
        short s1=20814;
        float f1=2.324F;

        FuzzerUtils.init(iArr1, -2);

        for (i5 = 3; i5 < 320; i5++) {
            b = (bMeth(l2, -53330, Test.instanceCount) || b);
            s1 = (short)l2;
            iArr1[i5 - 1] -= i6;
            Test.dFld += -35198;
            for (i14 = 1; i14 < 5; ++i14) {
                Test.instanceCount += (long)Test.dFld;
                f1 += (i14 * i14);
                switch (((i5 % 2) * 5) + 48) {
                case 51:
                    i6 = (int)f1;
                    break;
                case 55:
                    iArr1 = iArr1;
                    i15 += (i14 * f1);
                    i15 = i15;
                    break;
                }
                Test.iFld += (i14 * i14);
                s1 -= (short)f1;
            }
        }
        vMeth_check_sum += l2 + i5 + i6 + (b ? 1 : 0) + s1 + i14 + i15 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth(int i1, int i2) {

        long l1=1675917197965259488L;
        int i3=19311, i4=-23760, i16=57183, i17=8, i18=12, i19=32699;
        float f2=1.722F;
        short s2=-11741;

        for (l1 = 8; l1 < 155; l1 += 2) {
            i4 = 1;
            while (++i4 < 21) {
                vMeth(l1);
                Test.iFld = i1;
                for (i16 = (int)(l1); i16 < 1; i16++) {
                    f2 += (((i16 * l1) + s2) - Test.instanceCount);
                    Test.iArrFld[i16 - 1] += (int)Test.instanceCount;
                    Test.iArrFld[(int)(l1)] += i1;
                    i1 = i1;
                    if (Test.bFld) break;
                    f2 = i4;
                }
                for (i18 = 1; i18 < 1; i18++) {
                    f2 *= i16;
                }
                i3 *= i19;
            }
            i19 -= (int)l1;
        }
        long meth_res = i1 + i2 + l1 + i3 + i4 + i16 + i17 + Float.floatToIntBits(f2) + s2 + i18 + i19;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=-12L, lArr1[]=new long[N];
        int i=9461, i20=0, i21=-38760, i22=-19076;
        float f3=9.37F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -41.934F);
        FuzzerUtils.init(lArr1, 3939699838518220278L);

        l = 1;
        while (++l < 292) {
            i -= (int)Test.instanceCount;
            i = (int)fMeth(34, i);
            Test.iFld += Test.iFld;
            Test.byFld += (byte)Test.iFld;
            Test.iArrFld[(int)(l)] -= Test.iFld;
            switch (((-1 >>> 1) % 6) + 17) {
            case 17:
                if (Test.bFld) break;
                Test.instanceCount += Test.iFld;
                break;
            case 18:
                f3 += (((l * Test.iFld1) + Test.iFld1) - f3);
                fArr[(int)(l)] *= 0.216F;
                i *= (int)f3;
            case 19:
                if (false) break;
                Test.dFld /= (Test.iFld | 1);
                Test.instanceCount += i;
                i20 = 1;
                do {
                    for (i21 = (int)(l); i21 < 1; i21++) {
                        Test.instanceCount = Test.iFld;
                        i = -121;
                        Test.instanceCount += (((i21 * Test.iFld1) + Test.iFld) - f3);
                        f3 -= Test.instanceCount;
                        switch (((i22 >>> 1) % 1) + 29) {
                        case 29:
                            Test.dFld = l;
                            Test.dFld *= -154;
                            i22 = Test.sFld;
                        default:
                            i22 += i20;
                            Test.iArrFld[i20 + 1] = (int)Test.instanceCount;
                            lArr1[i20] += (long)Test.dFld;
                        }
                        i22 *= (int)l;
                        Test.iArrFld[i21] >>= i;
                    }
                } while (++i20 < 86);
                break;
            case 20:
                Test.iFld += (int)(-14L + (l * l));
                break;
            case 21:
                Test.instanceCount -= Test.iFld;
            case 22:
                Test.instanceCount -= i;
                break;
            default:
                f3 += (l - f3);
            }
        }

        FuzzerUtils.out.println("l i f3 = " + l + "," + i + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("fArr lArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld Test.byFld Test.iFld1 = " + Double.doubleToLongBits(Test.dFld) + "," +
            Test.byFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.sFld Test.iArrFld = " + Test.sFld + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
