// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-220L;
    public static float fFld=24.666F;
    public static double dFld=106.35630;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 9L);
        FuzzerUtils.init(Test.iArrFld, -55992);
        FuzzerUtils.init(Test.dArrFld, -18.99582);
    }

    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i10, int i11, long l) {

        int i12=-12, i13=6469, iArr[]=new int[N];
        byte by1=-60;
        short s1=14281;

        FuzzerUtils.init(iArr, 10);

        for (i12 = 4; i12 < 276; ++i12) {
            i11 = (int)-43723L;
            i13 += (-8 + (i12 * i12));
            by1 += (byte)i11;
            by1 = (byte)i11;
        }
        iArr[(i11 >>> 1) % N] = i10;
        s1 = (short)i12;
        vMeth_check_sum += i10 + i11 + l + i12 + i13 + by1 + s1 + FuzzerUtils.checkSum(iArr);
    }

    public static short sMeth(int i4) {

        int i5=-2, i6=-14259, i7=-214, i8=37488, i9=28648;
        boolean b=false;
        byte by=96;
        short s=1560;
        double d=57.36836;

        for (i5 = 9; i5 < 295; i5 += 3) {
            Test.fFld -= Math.abs((int)((Test.fFld - Test.fFld) - (i5 - i4)));
            if (i5 != 0) {
            }
            if (b) continue;
            by = (byte)i6;
            i7 += (((i5 * i7) + i7) - i7);
            for (i8 = 1; i8 < 16; i8++) {
                i4 = (int)1.696F;
                Test.lArrFld[i5 - 1] ^= (long)((++i4) + ((i8 - i8) + (s - d)));
                vMeth(-200, i7, Test.instanceCount);
                Test.instanceCount += (((i8 * Test.fFld) + i6) - i4);
                i9 >>= i7;
                b = b;
                i9 -= (int)Test.fFld;
                d = Test.instanceCount;
            }
        }
        long meth_res = i4 + i5 + i6 + (b ? 1 : 0) + by + i7 + i8 + i9 + s + Double.doubleToLongBits(d);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(int i2, int i3) {

        int i14=162, i15=-226, i16=-36669, i17=48394, i18=-57033;
        short s2=11103;
        byte by2=19;

        i2 *= (int)Float.intBitsToFloat(sMeth(i2) & i3);
        for (i14 = 278; 10 < i14; --i14) {
            i2 += (((i14 * i14) + s2) - i15);
            for (i16 = i14; 6 > i16; i16++) {
                i18 = 1;
                while (++i18 < 1) {
                    Test.fFld += Test.fFld;
                    Test.instanceCount = i14;
                    i17 = by2;
                    Test.iArrFld[i18 + 1] = i2;
                    i2 += (int)Test.fFld;
                    switch ((i18 % 1) + 26) {
                    case 26:
                        Test.dFld -= i18;
                        i15 += (127 + (i18 * i18));
                        break;
                    }
                    Test.dArrFld[i18] = i2;
                    Test.dFld %= (i15 | 1);
                }
            }
        }
        long meth_res = i2 + i3 + i14 + i15 + s2 + i16 + i17 + i18 + by2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-29, i1=-36394, i19=28876, i20=-39377, i21=41742, i22=-239, i23=6, i24=11, i25=-40252;
        byte by3=28, byArr[][]=new byte[N][N];
        short s3=-14696;
        float f=45.444F, fArr[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(byArr, (byte)73);
        FuzzerUtils.init(lArr, -6392556943696389216L);
        FuzzerUtils.init(fArr, 52.378F);

        for (i = 10; i < 192; i++) {
            Test.instanceCount = (-iMeth(i, i));
            for (i19 = i; i19 < 138; ++i19) {
                for (i21 = 1; i21 < 1; i21 += 2) {
                    Test.instanceCount += (i21 ^ Test.instanceCount);
                }
                i20 += by3;
                i22 += (int)Test.fFld;
                Test.instanceCount &= i19;
                Test.fFld += Test.instanceCount;
                i1 += (int)18.203F;
                byArr[i19][(6 >>> 1) % N] &= (byte)161;
                i1 = i19;
                Test.dFld -= i20;
            }
            Test.instanceCount = Test.instanceCount;
            i20 += (7 + (i * i));
            Test.iArrFld[i] &= -30041;
            for (i23 = 138; i23 > i; i23--) {
                Test.iArrFld[i + 1] -= -61025;
                i24 += (((i23 * i19) + i22) - by3);
            }
        }
        Test.dFld -= i1;
        lArr = lArr;
        s3 -= s3;
        for (f = 16; f < 287; ++f) {
            i20 += (int)Test.dFld;
            Test.dArrFld[(int)(f + 1)] += -40137;
            Test.dFld -= i22;
            Test.fFld += i;
            fArr[(int)(f)] *= (float)Test.dFld;
            i25 -= (int)Test.instanceCount;
        }
        i24 += i;

        FuzzerUtils.out.println("i i1 i19 = " + i + "," + i1 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("by3 i23 i24 = " + by3 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("s3 f i25 = " + s3 + "," + Float.floatToIntBits(f) + "," + i25);
        FuzzerUtils.out.println("byArr lArr fArr = " + FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(lArr) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
