// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-881403224L;
    public float fFld=-76.442F;
    public static double dFld=2.113612;
    public int iFld=-24;
    public static int iFld1=53659;
    public static float fFld1=-79.577F;
    public static int iFld2=10;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 113.822F);
        FuzzerUtils.init(Test.iArrFld, 7377);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static long lMeth1(short s, int i3, long l1) {


        l1 = (--i3);
        long meth_res = s + i3 + l1;
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i4=70, i5=5, i6=8176, i7=10;
        float f1=108.847F;
        boolean b=true;

        Test.iFld1 = Test.iFld1;
        for (i4 = 11; i4 < 208; ++i4) {
            byte by=10;
            by += (byte)(((i4 * f1) + Test.iFld1) - Test.iFld1);
            Test.fArrFld[i4 + 1] = Test.fFld1;
            for (i6 = 1; i6 < 8; i6++) {
                i7 *= -25;
                Test.iArrFld[i4] >>= i4;
                if (b) break;
            }
            if (i6 != 0) {
                vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f1) + i6 + i7 + (b ? 1 : 0);
                return;
            }
            Test.iFld1 += (i4 * i7);
            if (b) continue;
            i5 *= (int)Test.fFld1;
            Test.instanceCount += (long)Test.fFld1;
        }
        i5 -= i5;
        Test.iArrFld[(5 >>> 1) % N] ^= 180;
        vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f1) + i6 + i7 + (b ? 1 : 0);
    }

    public static int iMeth() {

        int i8=139, i9=-65486, i10=-179;
        byte by1=1;
        boolean b1=true;

        vMeth();
        i8 <<= Test.iFld1;
        for (i9 = 308; i9 > 9; i9--) {
            i10 = (int)Test.instanceCount;
            Test.iArrFld[i9 + 1] = -7097;
            i10 >>>= i8;
            if (b1) {
                Test.iArrFld[i9 + 1] ^= (int)1L;
                by1 -= (byte)i8;
                if (b1) break;
                Test.instanceCount = i10;
            } else {
                i8 *= i10;
                by1 += (byte)(((i9 * i8) + i9) - i10);
                i10 -= (int)-4.769F;
            }
            Test.iFld1 += i9;
        }
        long meth_res = i8 + i9 + i10 + by1 + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(long l) {

        int i11=-11, i12=-8501;
        short s1=-974;
        boolean b2=false;

        lMeth1((short)((--l) % ((Test.iFld1++) | 1)), iMeth(), Test.instanceCount);
        for (i11 = 1; i11 < 202; i11++) {
            l += (long)(-7.915F + (i11 * i11));
            switch (((i11 % 3) * 5) + 49) {
            case 55:
                Test.dFld = Test.iFld1;
                Test.iArrFld[i11 - 1] -= (int)l;
                Test.iFld1 &= i12;
                s1 = (short)-3L;
                break;
            case 50:
                l <<= Test.instanceCount;
                Test.iArrFld[i11] = (int)Test.instanceCount;
                break;
            case 56:
                if (b2) continue;
                i12 >>>= (int)l;
                break;
            default:
                b2 = true;
            }
            Test.instanceCount -= -153;
            Test.iFld1 = Test.iFld1;
        }
        long meth_res = l + i11 + i12 + s1 + (b2 ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=147, i1=-168, i2=-49157, i13=50935, i14=192, i15=23924, i16=4313, i17=-3, i18=190;
        boolean b3=true;
        short s2=-28300;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6L);

        fFld *= (float)(Test.dFld--);
        i = 313;
        do {
            fFld += ((Test.fArrFld[i] - (i - Test.instanceCount)) - i);
            iFld += (((i * i) + iFld) - iFld);
            for (i1 = 11; 239 > i1; i1++) {
                Test.instanceCount = lMeth(Test.instanceCount);
                Test.iFld1 += i1;
                for (i13 = 1; i13 < 2; ++i13) {
                    Test.fArrFld[i] = Test.iFld1;
                    if (b3) break;
                    iFld += (int)Test.fFld1;
                    s2 -= (short)iFld;
                    Test.iArrFld[i - 1] *= i2;
                    Test.iFld1 += (((i13 * i13) + Test.fFld1) - i2);
                    iFld += i13;
                    i14 = iFld;
                    Test.iFld1 += i13;
                }
                for (i15 = 1; i15 < 2; i15++) {
                    Test.instanceCount += i15;
                    i16 *= s2;
                    dArrFld[(12 >>> 1) % N] -= i1;
                    Test.iFld1 += i15;
                    i14 >>= i13;
                    Test.iFld1 += (i15 - Test.iFld1);
                }
                lArr[i - 1] = i;
            }
            Test.fFld1 -= i13;
        } while ((i -= 3) > 0);
        for (i17 = 12; i17 < 209; i17++) {
            Test.instanceCount >>= Test.iFld2;
            Test.instanceCount = Test.instanceCount;
        }
        iFld = s2;

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i13 i14 b3 = " + i13 + "," + i14 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("s2 i15 i16 = " + s2 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 lArr = " + i17 + "," + i18 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iFld Test.iFld1 Test.fFld1 = " + iFld + "," + Test.iFld1 + "," +
            Float.floatToIntBits(Test.fFld1));
        FuzzerUtils.out.println("Test.iFld2 Test.fArrFld Test.iArrFld = " + Test.iFld2 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
