// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=210346707L;
    public int iFld=64;
    public static double dFld=-44.69431;
    public volatile long lFld=-111L;
    public static short sFld=-7753;
    public boolean bFld=false;
    public static int iFld1=-14;
    public static int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 10);
        FuzzerUtils.init(Test.fArrFld, -122.276F);
        FuzzerUtils.init(Test.lArrFld, -6743055254987064171L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7, long l2) {

        int i8=-4, i9=-8, i10=-85, i11=12, i12=-45996, i13=-80, i14=-47111;
        long l3=-478787854L;
        short s=19919;

        i6 = (int)Test.dFld;
        for (i8 = 324; i8 > 17; --i8) {
            for (i10 = 1; i10 < 5; i10++) {
                for (l3 = 1; l3 < 2; l3 += 3) {
                    l2 *= i11;
                    try {
                        i11 = (i6 % 1791734178);
                        i9 = (20233 % i8);
                        i12 = (i11 % i9);
                    } catch (ArithmeticException a_e) {}
                    i7 = (int)l3;
                    i12 = s;
                }
                for (i13 = 2; i13 > 1; i13--) {
                    l2 %= (i10 | 1);
                    Test.instanceCount += (i13 * i13);
                    Test.iArrFld[i13][i10] /= -12835;
                    l2 = i8;
                    l2 = i13;
                    i11 = i13;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + l2 + i8 + i9 + i10 + i11 + l3 + i12 + s + i13 + i14;
    }

    public int iMeth(long l, long l1) {

        int i1=172, i2=4, i3=238, i4=-5, i5=3217;
        float f1=1.855F, fArr[]=new float[N];
        short s1=12997;

        FuzzerUtils.init(fArr, -101.301F);

        Test.iArrFld[(iFld >>> 1) % N] = (Test.iArrFld[(-1 >>> 1) % N] = (Test.iArrFld[(-9 >>> 1) % N] =
            (Test.iArrFld[(iFld >>> 1) % N] = Test.iArrFld[(iFld >>> 1) % N])));
        for (i1 = 301; 10 < i1; --i1) {
            for (i3 = 1; i3 < 6; i3++) {
                i5 = 1;
                while (++i5 < 2) {
                    i2 += (((i5 * i5) + iFld) - i1);
                    try {
                        i2 = (125 % i1);
                        i2 = (41830 % Test.iArrFld[i1 - 1][i5 + 1]);
                        i4 = (Test.iArrFld[i3 - 1][i5 + 1] / i2);
                    } catch (ArithmeticException a_e) {}
                    f1 = i4;
                    f1 += (((i5 * f1) + i1) - l);
                    vMeth1(i5, i5, l);
                    switch ((i3 % 5) + 51) {
                    case 51:
                    case 52:
                        Test.iArrFld[i5][i5 + 1] >>= i2;
                        i2 = (int)f1;
                        i2 = (int)l1;
                    case 53:
                        iFld += (int)l;
                        break;
                    case 54:
                        fArr[i5 + 1] = l1;
                        break;
                    case 55:
                        i4 += (((i5 * s1) + i1) - i2);
                        break;
                    }
                }
            }
        }
        long meth_res = l + l1 + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f1) + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(float f) {

        double d=2.104947, d1=50.68379, d2=-45.72106;
        int i=58080, i15=-14, i16=-11, i17=-3, i18=1, i19=-13786;
        byte by=-45;

        Test.instanceCount += (long)((iFld++) - (d--));
        for (d1 = 1; d1 < 277; d1++) {
            i >>= (-iFld);
            f = (float)((d--) - (iMeth(Test.instanceCount, lFld) - -239));
            for (d2 = 1; 6 > d2; d2++) {
                by += (byte)i;
                Test.iArrFld[(int)(d1 - 1)][(int)(d1 - 1)] -= iFld;
                Test.sFld *= (short)i;
                bFld = bFld;
            }
            Test.iArrFld[(int)(d1 + 1)][(int)(d1 + 1)] *= -129;
            i = Test.iFld1;
        }
        for (i16 = 15; i16 < 376; i16++) {
            for (i18 = 1; i18 < 5; ++i18) {
                Test.iFld1 *= Test.sFld;
                Test.fArrFld[i18] = i17;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i +
            Double.doubleToLongBits(d2) + i15 + by + i16 + i17 + i18 + i19;
    }

    public void mainTest(String[] strArr1) {

        float f2=-1.946F;
        int i20=-135, i21=47155, i22=-21540, i23=56524, i24=17148, i25=1, i26=87, i27=-241, i28=205, i29=-14510,
            iArr[]=new int[N];

        FuzzerUtils.init(iArr, 22454);

        iArr[(iFld >>> 1) % N] += 89;
        vMeth(f2);
        iArr[(Test.iFld1 >>> 1) % N] = 4;
        for (i20 = 12; i20 < 227; ++i20) {
            Test.iFld1 |= i21;
            Test.iArrFld[i20 + 1][i20 - 1] += (int)lFld;
            for (i22 = 2; 117 > i22; i22++) {
                for (i24 = i20; i24 < 2; i24++) {
                    f2 *= i23;
                    Test.dFld = i21;
                    Test.iFld1 = i22;
                    Test.iArrFld[i22 - 1][i22 + 1] = i21;
                }
                lFld = 64927;
                iFld >>>= (int)lFld;
                iFld = (int)lFld;
                Test.dFld *= i20;
                Test.instanceCount += (long)10.666F;
                Test.lArrFld[i22 - 1] -= i21;
                lFld -= i23;
                try {
                    Test.iFld1 = (-34368 / i25);
                    iFld = (iArr[i20] / -1024731875);
                    Test.iFld1 = (i23 % 19141);
                } catch (ArithmeticException a_e) {}
            }
            for (i26 = 5; i26 < 117; i26++) {
                Test.iFld1 += (i26 + i27);
                switch ((i20 % 3) + 75) {
                case 75:
                    for (i28 = i26; 2 > i28; i28++) {
                        Test.instanceCount *= (long)f2;
                        try {
                            iFld = (i24 % i21);
                            iFld = (i28 / i24);
                            i27 = (i25 % iArr[i20 + 1]);
                        } catch (ArithmeticException a_e) {}
                        Test.iArrFld = Test.iArrFld;
                        f2 += (-54 + (i28 * i28));
                        Test.dFld += Test.instanceCount;
                        i23 = 9;
                    }
                    break;
                case 76:
                    i25 &= i23;
                    break;
                case 77:
                    iArr[i20] >>= Test.iFld1;
                    break;
                default:
                    Test.dFld += lFld;
                }
            }
        }

        FuzzerUtils.out.println("f2 i20 i21 = " + Float.floatToIntBits(f2) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 iArr = " + i28 + "," + i29 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("lFld Test.sFld bFld = " + lFld + "," + Test.sFld + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld1 Test.iArrFld Test.fArrFld = " + Test.iFld1 + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
