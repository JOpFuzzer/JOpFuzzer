// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static int iFld=3;
    public static float fFld=-49.644F;
    public static boolean bFld=true;
    public boolean bFld1=false;
    public static volatile int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 18108);
        FuzzerUtils.init(Test.fArrFld, -48.528F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i6, int i7, int i8) {

        int i9=-27, i10=58306, i11=6590, i12=12739, i13=120;
        short s=-19598;

        Test.fFld = i6;
        for (i9 = 5; i9 < 264; ++i9) {
            for (i11 = 1; 6 > i11; ++i11) {
                i10 += (i11 | (long)Test.fFld);
                i13 = 1;
                do {
                    Test.instanceCount = i9;
                    Test.instanceCount += i12;
                    i8 = (int)Test.instanceCount;
                    i7 += (int)Test.fFld;
                    i6 += i7;
                    Test.fArrFld = Test.fArrFld;
                    Test.iArrFld[i9] >>= s;
                    Test.instanceCount >>>= Test.iFld;
                    i6 = (int)Test.instanceCount;
                    Test.instanceCount = -44598L;
                } while (++i13 < 2);
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + s;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, float f1) {

        int i5=-5, i14=-3, i15=-21142, i16=11, i17=-14, i18=-171, i19=-13891, iArr[]=new int[N];
        long l1=-391530264L;
        double d1=55.67308;

        FuzzerUtils.init(iArr, -155);

        Test.iFld *= (int)(l++);
        i5 = 1;
        do {
            iArr[i5 + 1] = (int)(Float.intBitsToFloat(iMeth1(Test.iFld, i5, i14)) + l1);
            Test.instanceCount -= i5;
        } while (++i5 < 254);
        Test.iFld = (int)Test.instanceCount;
        d1 = -50;
        i15 = 1;
        do {
            for (i16 = 1; i16 < 12; i16++) {
                Test.iFld += (int)l1;
                Test.fArrFld[i15] = -5;
                try {
                    i14 = (549822823 / i5);
                    iArr[i15] = (i16 / i15);
                    i14 = (i5 % -1765695336);
                } catch (ArithmeticException a_e) {}
                i17 -= i14;
                for (i18 = 1; i18 < 2; i18++) {
                    i17 += (-232 + (i18 * i18));
                    i14 += (int)(-13L + (i18 * i18));
                }
            }
        } while (++i15 < 136);
        vMeth_check_sum += l + Float.floatToIntBits(f1) + i5 + i14 + l1 + Double.doubleToLongBits(d1) + i15 + i16 + i17
            + i18 + i19 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i3) {

        int i4=-25053, i20=-11647, i21=1295, i22=-5199;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3115381105L);

        i4 = 1;
        do {
            vMeth(Test.instanceCount, Test.fFld);
            Test.fFld = i3;
            for (i20 = i4; i20 < 5; i20++) {
                byte by=27;
                i21 = (int)Test.instanceCount;
                if (Test.bFld) continue;
                lArr = lArr;
                if (true) continue;
                i21 <<= (int)Test.instanceCount;
                Test.iFld += 15040;
                i3 = i3;
                by = (byte)Test.instanceCount;
                i22 = 1;
                while (++i22 < 1) {
                    i3 += i22;
                    Test.instanceCount -= -3725450594L;
                }
            }
        } while (++i4 < 346);
        long meth_res = i3 + i4 + i20 + i21 + i22 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=5, i1=0, i2=-201, i23=-11, i24=-13452, i25=14;
        float f=-47.905F;
        double d2=-61.129643;
        long l2=27848L, lArr1[]=new long[N];
        short s1=-25917;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)81);
        FuzzerUtils.init(lArr1, -12L);

        Test.iArrFld[(-62541 >>> 1) % N] <<= i;
        i += (byArr[(i >>> 1) % N]--);
        for (double d : dArrFld) {
            for (i1 = 3; i1 < 63; i1++) {
                f = (float)((d++) * ((--d) - iMeth(i)));
                Test.instanceCount += Test.instanceCount;
            }
            for (d2 = 3; d2 < 63; d2 += 3) {
                Test.iFld += (int)d2;
                switch ((int)((d2 % 8) + 46)) {
                case 46:
                    for (l2 = 4; l2 > 1; --l2) {
                        i24 = Test.iFld;
                        f = f;
                        switch (((i >>> 1) % 5) + 81) {
                        case 81:
                            f -= i23;
                            Test.fFld += (243 + (l2 * l2));
                            break;
                        case 82:
                            i25 += (int)l2;
                            i2 = s1;
                            i24 <<= i2;
                            Test.iArrFld[(int)(d2 + 1)] = -5;
                            break;
                        case 83:
                            Test.instanceCount *= (long)-123.91F;
                            lArr1[(int)(l2 + 1)] -= -58527;
                        case 84:
                            i2 += (int)(((l2 * i2) + i1) - Test.fFld);
                            Test.instanceCount *= l2;
                            lArr1[(int)(l2)] -= i23;
                            Test.iArrFld[(int)(l2)] *= (int)185L;
                            break;
                        case 85:
                            try {
                                i23 = (i23 / -1739545204);
                                i24 = (-47154 / i23);
                                Test.iArrFld[(int)(d2)] = (i1 / 23);
                            } catch (ArithmeticException a_e) {}
                            switch ((int)((l2 % 2) + 56)) {
                            case 56:
                                Test.fFld += Test.fFld;
                                Test.instanceCount = (long)f;
                                f = i;
                                break;
                            case 57:
                                i23 *= (int)d;
                                break;
                            }
                            break;
                        default:
                            Test.instanceCount <<= l2;
                        }
                    }
                    break;
                case 47:
                    Test.fFld = Test.fFld;
                    break;
                case 48:
                    i2 = i23;
                    break;
                case 49:
                    lArr1 = lArr1;
                case 50:
                    Test.bFld = bFld1;
                case 51:
                    i25 += (int)d;
                    break;
                case 52:
                    Test.instanceCount += (long)Test.fFld;
                    break;
                case 53:
                    Test.instanceCount = i25;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("f d2 i23 = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d2) + "," +
            i23);
        FuzzerUtils.out.println("l2 i24 i25 = " + l2 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("s1 byArr lArr1 = " + s1 + "," + FuzzerUtils.checkSum(byArr) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld bFld1 Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," + (bFld1 ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("dArrFld Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
