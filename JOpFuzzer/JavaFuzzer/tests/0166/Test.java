// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2996563394899868666L;
    public static volatile int iFld=809;
    public static float fFld=-59.95F;
    public static short sFld=14648;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 9);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public static long vMeth3_check_sum = 0;

    public static void vMeth1(int i2) {

        boolean b=true, bArr[][]=new boolean[N][N];
        double d=0.113722;
        int i3=-35454;
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, -5L);

        bArr[(i2 >>> 1) % N][(i2 >>> 1) % N] = b;
        for (d = 11; d < 356; d++) {
            if (bArr[(int)(d + 1)][(int)(d)]) continue;
            lArr = (lArr = (lArr = (lArr = FuzzerUtils.long1array(N, (long)8L))));
        }
        vMeth1_check_sum += i2 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i3 + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth3(double d2, int i4) {

        float f=-19.264F, fArr[]=new float[N];
        int i5=74, i6=68;
        byte by=67;

        FuzzerUtils.init(fArr, 1.787F);

        switch (((Test.iFld >>> 1) % 8) + 15) {
        case 15:
            if (Test.bFld) {
                for (f = 13; f < 317; f++) {
                    fArr[(int)(f + 1)] -= 1.909F;
                    Test.fFld += (((f * Test.instanceCount) + Test.instanceCount) - Test.iFld);
                    Test.iArrFld[(int)(f - 1)] += (int)5245745990837184689L;
                    Test.iArrFld[(int)(f)] += i5;
                    i5 >>= (int)-2310393374L;
                    Test.iFld = by;
                    Test.fFld += f;
                }
                vMeth3_check_sum += Double.doubleToLongBits(d2) + i4 + Float.floatToIntBits(f) + i5 + by + i6 +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            } else if (Test.bFld) {
                i6 = 1;
                while (++i6 < 212) {
                    Test.fFld = i5;
                    i5 -= Test.sFld;
                    Test.instanceCount = by;
                    Test.iArrFld[i6] *= i6;
                }
            }
        case 16:
            by = (byte)Test.instanceCount;
            break;
        case 17:
            Test.fFld = -19909;
            break;
        case 18:
            Test.fFld *= Test.iFld;
            break;
        case 19:
            d2 = Test.instanceCount;
            break;
        case 20:
            Test.instanceCount = 14895;
            break;
        case 21:
            Test.instanceCount = Test.instanceCount;
        case 22:
            Test.iArrFld[(i4 >>> 1) % N] = i6;
            break;
        }
        vMeth3_check_sum += Double.doubleToLongBits(d2) + i4 + Float.floatToIntBits(f) + i5 + by + i6 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth2(double d1) {

        float f1=0.451F;
        int i7=4, i8=-59471, iArr[][]=new int[N][N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.33953);
        FuzzerUtils.init(iArr, 5);

        Test.iFld >>= (++Test.iFld);
        vMeth3(d1, Test.iFld);
        for (double d3 : dArr) {
            f1 = 1;
            do {
                for (i7 = 1; i7 > 1; i7--) {
                    i8 += 56952;
                    iArr = iArr;
                    i8 += (((i7 * Test.iFld) + i8) - i7);
                }
                if (Test.bFld) continue;
                i8 *= i8;
            } while (++f1 < 4);
            if (false) break;
        }
        Test.iArrFld[(i7 >>> 1) % N] = i8;
        vMeth2_check_sum += Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i7 + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, int i1) {

        double d4=100.97942, d5=0.26117;
        int i9=197, i10=-96, i11=43879, i12=6, i13=78;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 249L);

        vMeth1((i1++) + (--i1));
        lArr1[(30554 >>> 1) % N][(-6 >>> 1) % N] = 170;
        vMeth1(i1);
        vMeth2(d4);
        l <<= Test.sFld;
        for (i9 = 17; 327 > i9; ++i9) {
            Test.iArrFld[i9 - 1] *= -36924;
            Test.sFld = (short)i10;
            if (Test.bFld) break;
            Test.iFld = i10;
        }
        for (d5 = 7; d5 < 229; ++d5) {
            for (i12 = 1; 7 > i12; i12++) {
                Test.bFld = false;
            }
            Test.instanceCount += -50612;
            Test.iFld = i11;
        }
        vMeth_check_sum += l + i1 + Double.doubleToLongBits(d4) + i9 + i10 + Double.doubleToLongBits(d5) + i11 + i12 +
            i13 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-225, i14=44136, i15=0, i16=11, i17=57411, i18=0, i19=10;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 50L);

        i = 253;
        while (--i > 0) {
            vMeth(Test.instanceCount, Test.iFld);
            Test.instanceCount = Test.iFld;
            Test.fFld += (i * i);
            Test.iFld ^= (int)6L;
            Test.iFld = (int)Test.instanceCount;
        }
        for (i14 = 3; i14 < 180; i14++) {
            for (i16 = 3; 142 > i16; i16++) {
                for (i18 = 1; i18 < 2; i18++) {
                    Test.instanceCount += (((i18 * i) + Test.instanceCount) - i17);
                    Test.iArrFld[i16 - 1] = (int)Test.instanceCount;
                    i19 *= Test.iFld;
                    i17 += (i18 - i15);
                    lArr2[i18 - 1] = i16;
                    Test.sFld += (short)i19;
                    if (Test.bFld) break;
                    lArr2[i14] = i18;
                }
                Test.bFld = Test.bFld;
            }
            Test.instanceCount >>>= i15;
            i17 += (((i14 * i15) + Test.instanceCount) - Test.iFld);
        }

        FuzzerUtils.out.println("i i14 i15 = " + i + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 lArr2 = " + i19 + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.bFld Test.iArrFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth3_check_sum: " + vMeth3_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth mainTest
//DEBUG  vMeth3 ->  vMeth3 vMeth2 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
