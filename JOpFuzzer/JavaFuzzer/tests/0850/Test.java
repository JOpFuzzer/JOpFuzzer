// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2037746808L;
    public float fFld=23.38F;
    public static float fFld1=-1.206F;
    public static byte byFld=-33;
    public static int iFld=58;
    public short sFld=29731;
    public long lArrFld[][]=new long[N][N];
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 54);
        FuzzerUtils.init(Test.byArrFld, (byte)-50);
        FuzzerUtils.init(Test.fArrFld, 0.710F);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        int i9=-3, i10=-154, i11=164, i12=1, i13=1, i14=233;
        double d=-27.59548;
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.783F);

        for (i9 = 1; i9 < 208; ++i9) {
            for (i11 = 1; i11 < 8; i11++) {
                i12 = i12;
                switch ((i11 % 10) + 29) {
                case 29:
                    d /= 245;
                    for (i13 = 1; i13 < 2; ++i13) {
                        i14 = Test.byFld;
                        d += i11;
                        Test.instanceCount = i13;
                        b = b;
                        i14 += (int)Test.instanceCount;
                        if (b) break;
                    }
                case 30:
                    fArr[i11] = -191L;
                    i12 -= i10;
                    i14 *= (int)f;
                case 31:
                    d = i11;
                    break;
                case 32:
                case 33:
                    i12 += (int)Test.instanceCount;
                    break;
                case 34:
                    i10 = (int)81.183F;
                    break;
                case 35:
                    i12 = 6695;
                    break;
                case 36:
                    i10 >>= i12;
                    break;
                case 37:
                    i12 *= i14;
                case 38:
                default:
                    i10 = i13;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d) + i13 + i14 +
            (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l, long l1, int i8) {

        int i15=34655, i16=-46530, i17=-38290, i18=24448, i19=-100, i20=-235;
        short s=3916;

        vMeth1(-1.537F);
        for (i15 = 2; i15 < 178; ++i15) {
            Test.fFld1 += (i15 * Test.fFld1);
            for (i17 = 1; i17 < 9; i17++) {
                i16 += (i17 * i17);
                for (i19 = i15; i19 < 2; ++i19) {
                    Test.iArrFld[i17 + 1] ^= 155;
                    Test.instanceCount += l1;
                    if (i18 != 0) {
                        vMeth_check_sum += l + l1 + i8 + i15 + i16 + i17 + i18 + i19 + i20 + s;
                        return;
                    }
                }
                i18 *= i19;
                Test.iArrFld[i15] += i19;
                s -= (short)i8;
                i18 += (((i17 * i17) + i8) - s);
                Test.fFld1 += (((i17 * i20) + l) - i8);
            }
            i20 += (-24080 + (i15 * i15));
        }
        vMeth_check_sum += l + l1 + i8 + i15 + i16 + i17 + i18 + i19 + i20 + s;
    }

    public static float fMeth(int i4, int i5) {

        int i6=5, i7=71, i21=39, i22=7, iArr[][]=new int[N][N];
        double d1=48.48044;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 44582);
        FuzzerUtils.init(lArr, 3808473780L);

        for (byte by : Test.byArrFld) {
            short s1=23611;
            switch ((((((int)(i5 + 90L)) >>> 1) % 4) * 5) + 66) {
            case 78:
                try {
                    i5 = (-1122981094 / Test.iArrFld[(i4 >>> 1) % N]);
                    i5 = (65 % i5);
                    i4 = (-32532 % Test.iArrFld[(i5 >>> 1) % N]);
                } catch (ArithmeticException a_e) {}
                for (i6 = 1; i6 < 4; i6++) {
                    vMeth(0L, Test.instanceCount, i5);
                    i5 = i7;
                    Test.fFld1 = Test.instanceCount;
                }
                Test.iArrFld[(i6 >>> 1) % N] &= (int)Test.instanceCount;
                for (d1 = 1; 4 > d1; d1++) {
                    Test.instanceCount = 3L;
                    Test.fFld1 += (float)(((d1 * i6) + i4) - i7);
                    Test.instanceCount %= 5;
                    Test.iArrFld[(int)(d1)] ^= i21;
                }
            case 85:
                iArr = iArr;
                i22 += 204;
                break;
            case 73:
                lArr[(i6 >>> 1) % N] += i6;
                break;
            case 72:
                s1 *= (short)-6;
                break;
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + i21 + i22 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-37051, i1=-20185, i2=2, i3=9, i23=9, i24=8, i25=7962, i26=-120, i27=56283, i28=0;
        double d2=118.126195, dArr[]=new double[N];
        long l2=-16L;
        float f1=-44.1019F;
        boolean b1=true;
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr, 0.58028);
        FuzzerUtils.init(sArr, (short)29600);

        for (i = 317; 2 < i; --i) {
            i1 ^= (int)lArrFld[i][i - 1];
            dArr[i - 1] -= (fFld++);
            i1 += (0 + (i * i));
            Test.fFld1 += (i * i);
        }
        i1 = 1;
        for (i2 = 164; i2 > 9; i2--) {
            i3 += (int)(((i - Test.instanceCount) + Math.abs(0.331F)) + ((i3--) + 38665));
            Test.iArrFld[i2 - 1] *= (int)(((Test.instanceCount * i3) - i2) + (Test.iArrFld[i2 + 1] - (Test.byFld++)));
            i3 %= (int)(((long)(((i1 + Test.instanceCount) * i) * fMeth(i2, i))) | 1);
            sArr[i2] *= (short)i3;
            i3 += (-21 + (i2 * i2));
        }
        Test.iArrFld[(i1 >>> 1) % N] += (int)d2;
        lArrFld[(-39279 >>> 1) % N][(i3 >>> 1) % N] = i;
        for (l2 = 19; l2 < 337; ++l2) {
            Test.byFld >>= (byte)i;
            Test.iFld = Test.iFld;
        }
        for (i24 = 8; i24 < 230; i24 += 2) {
            for (i26 = 2; 226 > i26; ++i26) {
                for (f1 = 1; 2 > f1; ++f1) {
                    i28 += (int)(((f1 * l2) + i2) - i26);
                    Test.fArrFld[(int)(f1)] += sFld;
                    switch ((i26 % 6) + 55) {
                    case 55:
                        if (b1) break;
                        i27 += i24;
                        Test.iFld += (int)((long)f1 ^ (long)fFld);
                        switch (((i24 % 3) * 5) + 44) {
                        case 58:
                            i27 *= i28;
                            break;
                        case 51:
                            Test.byFld += (byte)i26;
                            Test.iFld <<= (int)3703309979L;
                            break;
                        case 46:
                            Test.fFld1 *= i25;
                        }
                        break;
                    case 56:
                        Test.fFld1 += (-199 + (f1 * f1));
                    case 57:
                        Test.byFld *= (byte)48924;
                        break;
                    case 58:
                        lArrFld[(int)(f1)][(int)(f1)] = Test.instanceCount;
                        break;
                    case 59:
                        Test.instanceCount += Test.instanceCount;
                        break;
                    case 60:
                        lArrFld[i24 - 1][i24 + 1] -= Test.instanceCount;
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 d2 l2 = " + i3 + "," + Double.doubleToLongBits(d2) + "," + l2);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 f1 = " + i26 + "," + i27 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i28 b1 dArr = " + i28 + "," + (b1 ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.fFld1 = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Float.floatToIntBits(Test.fFld1));
        FuzzerUtils.out.println("Test.byFld Test.iFld sFld = " + Test.byFld + "," + Test.iFld + "," + sFld);
        FuzzerUtils.out.println("lArrFld Test.iArrFld Test.byArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
