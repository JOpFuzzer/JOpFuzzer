// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=39731L;
    public static double dFld=110.78111;
    public static int iFld=107;
    public static short sFld=8541;
    public static float fFld=2.252F;
    public volatile int iFld1=8;
    public static long lFld=2316666861L;
    public byte byFld=15;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.2800);
        FuzzerUtils.init(Test.iArrFld, 147);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2) {

        int i3=-12514, i4=1, i5=-33044, i6=137, i7=0, i8=15, i9=7009;
        short s=-5825;
        float f1=-112.418F;
        long l1=32617L;

        for (i3 = 344; 5 < i3; i3--) {
            i4 = (int)0L;
            i4 += (i3 * i3);
            i4 -= s;
            for (i5 = 1; i5 < 5; ++i5) {
                i2 = i2;
                f1 = -217;
                Test.instanceCount /= -115L;
                Test.iArrFld = Test.iArrFld;
                for (l1 = 2; l1 > 1; l1--) {
                    Test.iFld = (int)12103L;
                }
                Test.iFld += (((i5 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
            }
        }
        for (i8 = 13; 208 > i8; i8 += 2) {
            Test.instanceCount = (long)Test.dFld;
            i4 += (i8 + f1);
        }
        long meth_res = i2 + i3 + i4 + s + i5 + i6 + Float.floatToIntBits(f1) + l1 + i7 + i8 + i9;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i10=55, i11=195, i12=-69, i13=127, i14=18391;
        float f2=58.543F;
        boolean b=false, bArr[][]=new boolean[N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(byArr, (byte)-67);

        iMeth(Test.iFld);
        for (i10 = 3; i10 < 142; i10++) {
            f2 = Test.instanceCount;
            Test.iArrFld[i10 - 1][i10 + 1] <<= Test.iFld;
            for (i12 = 11; i12 > 1; i12--) {
                i14 = 1;
                do {
                    f2 = (float)Test.dFld;
                    f2 = Test.iFld;
                    i13 += (int)Test.dFld;
                    bArr[i14 + 1][i12 - 1] = b;
                    Test.dFld += i11;
                } while (++i14 < 2);
                i13 >>= -9;
                i13 += (((i12 * i10) + i14) - i12);
                byArr[i10 - 1] = (byte)Test.sFld;
                b = b;
            }
        }
        long meth_res = i10 + i11 + Float.floatToIntBits(f2) + i12 + i13 + i14 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, int i, float f) {

        int i1=-7;

        f -= (float)(-44768 - Test.dFld);
        Test.dArrFld[(i >>> 1) % N] -= (((--Test.instanceCount) * (i1 + f)) - lMeth());
        i += i1;
        vMeth_check_sum += l + i + Float.floatToIntBits(f) + i1;
    }

    public void mainTest(String[] strArr1) {

        int i15=-12, i16=193, i17=-6, i18=11, i19=-116, i20=-41811, i21=16378, i22=-135, i23=-33067, i24=6, i25=-6;
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 328487042L);

        vMeth(Test.instanceCount, Test.iFld, Test.fFld);
        Test.iFld += Test.iFld;
        i15 = 1;
        while (++i15 < 345) {
            for (i16 = 73; i16 > 2; i16--) {
                Test.fFld -= (float)0.123732;
            }
            Test.iArrFld[i15][i15] >>= -12814;
            Test.dArrFld[i15] = -13;
            Test.fFld += i15;
            for (i18 = i15; 73 > i18; ++i18) {
                if (b1) continue;
                Test.instanceCount = -240;
                Test.dFld = -150;
                Test.instanceCount += i17;
                i17 += i18;
            }
            i17 %= (int)(Test.iFld | 1);
            for (i20 = 73; i20 > 3; i20 -= 2) {
                i19 += (i20 * i17);
            }
            Test.dFld += iFld1;
            Test.iArrFld[i15 - 1][i15] += i19;
            Test.sFld = (short)i20;
        }
        for (i22 = 382; i22 > 13; --i22) {
            Test.lFld = byFld;
            Test.lFld -= (long)-52.51F;
            i23 *= Test.sFld;
            lArr[i22 - 1] *= Test.lFld;
            for (i24 = 3; 68 > i24; i24++) {
                i21 ^= (int)Test.instanceCount;
                i21 *= (int)Test.dFld;
                Test.instanceCount += Test.instanceCount;
            }
            Test.instanceCount = -1;
        }

        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 b1 = " + i18 + "," + i19 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld Test.fFld iFld1 = " + Test.sFld + "," + Float.floatToIntBits(Test.fFld) +
            "," + iFld1);
        FuzzerUtils.out.println("Test.lFld byFld Test.dArrFld = " + Test.lFld + "," + byFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
