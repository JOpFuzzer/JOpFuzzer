// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=146L;
    public static int iFld=-119;
    public double dFld=37.49151;
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 41685L);
        FuzzerUtils.init(Test.iArrFld, -45684);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i3, double d) {

        int i4=-14, i5=-53467, i7=-134, i8=0, i9=3, i10=0, i11=39127, i12=-139, iArr1[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, -23585);

        for (i4 = 1; 309 > i4; ++i4) {
            Test.lArrFld[i4 - 1] >>>= i3;
            Test.instanceCount += (long)(9.938F + (i4 * i4));
            i3 -= (int)1.29468;
            for (i7 = 5; i7 > 1; i7--) {
                for (i9 = 1; i9 < 2; i9++) {
                    i10 += (((i9 * i9) + i3) - i8);
                }
                i10 = (int)Test.instanceCount;
                if (i5 != 0) {
                }
                if (b) {
                    i10 += (i7 * i7);
                }
                for (i11 = 1; i11 < 2; ++i11) {
                    Test.instanceCount += i11;
                    i12 = i3;
                    Test.instanceCount = Test.instanceCount;
                }
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d) + i4 + i5 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + i11 + i12 +
            FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(long l) {

        int i1=-174, i2=-23646, i13=-6, i14=40050, iArr[]=new int[N];
        double d1=1.18769;
        float f=2.84F;
        boolean b1=true, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(bArr, true);

        for (i1 = 5; i1 < 225; ++i1) {
            iArr[i1 - 1] = sMeth(i1, d1);
            for (i13 = 1; 7 > i13; i13++) {
                if (i14 != 0) {
                }
                f = f;
                if (b1) break;
                iArr[i13] += (int)l;
                iArr[i1 + 1] = (int)-2.734F;
                f += (i13 * i2);
                bArr[i1 - 1] = false;
                i2 += i13;
                if (i1 != 0) {
                }
                Test.lArrFld[i13 - 1] = i14;
            }
            f -= i14;
        }
        long meth_res = l + i1 + i2 + Double.doubleToLongBits(d1) + i13 + i14 + Float.floatToIntBits(f) + (b1 ? 1 : 0)
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i) {

        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 14.77153);

        Test.instanceCount = iMeth(Test.instanceCount);
        dArr[(i >>> 1) % N] *= i;
        vSmallMeth_check_sum += i + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i15=9, i16=-5, i17=6052, i18=12, i19=48677, i20=-83, i21=6, i22=-117, i23=-54576;
        short s=-19168;
        boolean b2=false;
        float f2=2.922F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-68);

        for (int smallinvoc=0; smallinvoc<554; smallinvoc++) vSmallMeth(Test.iFld);
        Test.iArrFld[(Test.iFld >>> 1) % N] /= (int)9182093912464818965L;
        i15 = 179;
        for (i16 = 7; i16 < 230; i16++) {
            for (i18 = 6; i18 < 113; i18++) {
                Test.instanceCount = Test.instanceCount;
                switch ((((i17 >>> 1) % 10) * 5) + 34) {
                case 80:
                    i19 *= i16;
                    Test.lArrFld[i16 + 1] *= i17;
                    s = (short)i15;
                    break;
                case 40:
                    Test.iArrFld[i18 + 1] -= i16;
                    for (i20 = 1; i20 < 2; i20 += 3) {
                        i17 += i20;
                        Test.iFld *= 6;
                        s = (short)i15;
                        i21 -= i20;
                    }
                    for (i22 = 1; 2 > i22; ++i22) {
                        float f1=15.515F;
                        b2 = b2;
                        f1 = i19;
                        b2 = b2;
                        if (true) {
                            Test.iArrFld = Test.iArrFld;
                            i17 = (int)f1;
                            Test.iArrFld[i18 + 1] = 3947;
                        }
                        switch (((i16 % 2) * 5) + 101) {
                        case 106:
                        case 105:
                            dFld = f1;
                            break;
                        }
                        Test.instanceCount += (((i22 * f1) + i23) - Test.instanceCount);
                        Test.iFld -= (int)f1;
                        Test.iArrFld[i22 - 1] += (int)Test.instanceCount;
                        byArr[i18] = (byte)2403827182L;
                    }
                    break;
                case 41:
                    dFld *= i20;
                case 45:
                    i21 <<= (int)2911998934L;
                case 50:
                    i21 += i22;
                    break;
                case 55:
                    i19 += i15;
                    break;
                case 52:
                    if (b2) continue;
                    break;
                case 68:
                    f2 += i22;
                    break;
                case 82:
                    Test.iArrFld[(Test.iFld >>> 1) % N] *= (int)Test.instanceCount;
                    break;
                case 74:
                    f2 *= i15;
                    break;
                default:
                    Test.lArrFld[i16] *= i22;
                }
            }
        }

        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 s = " + i18 + "," + i19 + "," + s);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 b2 f2 = " + i23 + "," + (b2 ? 1 : 0) + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld dFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  sMeth ->  sMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
