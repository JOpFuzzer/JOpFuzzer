// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3909168720049094658L;
    public static float fFld=0.756F;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 56228);
        FuzzerUtils.init(Test.fArrFld, 0.752F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i10, int i11, int i12) {

        int i13=-109, i14=114, i15=9, i16=4, i17=19209, iArr2[]=new int[N];
        long l1=-4L, lArr[]=new long[N];
        byte by1=68;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 95.804F);
        FuzzerUtils.init(iArr2, -13896);
        FuzzerUtils.init(lArr, -3841554324L);

        fArr[(i11 >>> 1) % N] /= (i12 | 1);
        Test.fFld *= -2.371F;
        for (i13 = 9; 227 > i13; i13++) {
            double d=0.82215;
            i12 *= i13;
            i14 += (int)Test.instanceCount;
            i11 = (int)d;
            for (l1 = 1; l1 < 7; l1++) {
                for (i16 = 1; i16 < 2; ++i16) {
                    iArr2 = iArr2;
                    i12 += (int)Test.fFld;
                    d -= 4;
                    lArr[i16 - 1] = i10;
                    iArr2[(int)(l1)] -= 12;
                    i15 = by1;
                    d = i10;
                }
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + l1 + i15 + i16 + i17 + by1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        short s1=16903;
        int i6=3, i7=-37380, i8=-118, i9=-79, i18=12936, i19=-8, i20=26421, i21=0, i22=15422, iArr1[]=new int[N];
        boolean b=true;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 42181);
        FuzzerUtils.init(lArr1, -2L);

        s1 += (short)((--iArr1[(i6 >>> 1) % N]) - i7);
        for (i8 = 1; i8 < 189; i8++) {
            i9 -= iMeth1(i9, i8, i6);
            i9 += (((i8 * Test.instanceCount) + i9) - Test.instanceCount);
            i9 += -13;
        }
        i18 = 1;
        while (++i18 < 233) {
            for (i19 = 1; i19 < 7; ++i19) {
                for (i21 = 1; 2 > i21; i21++) {
                    Test.fFld += -13;
                    if (b) break;
                    switch (((i21 % 2) * 5) + 17) {
                    case 27:
                        i9 += (i21 + i19);
                        break;
                    case 26:
                        i22 += i22;
                        i6 = i22;
                        i9 += (i21 | i7);
                    default:
                        lArr1 = lArr1;
                    }
                }
            }
        }
        long meth_res = s1 + i6 + i7 + i8 + i9 + i18 + i19 + i20 + i21 + i22 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, long l, int i3) {

        float f=0.588F;
        byte by=-6;
        short s=-23194;
        int i4=4, i5=-191, i23=58, i24=57110, i25=132, iArr[]=new int[N];
        boolean b1=false;
        double d1=110.4227;

        FuzzerUtils.init(iArr, -5811);

        iArr[(i3 >>> 1) % N] <<= (int)(((10 + (i3 + -213663997L)) - (Test.instanceCount * i3)) + (-(i3 + l)));
        i3 *= (int)(i2 + ((i2 * l) - (f * l)));
        iArr[(i3 >>> 1) % N] -= i2;
        by = (byte)(s - ((i3 - i2) + (-(Test.instanceCount - Test.instanceCount))));
        for (i4 = 230; 5 < i4; i4 -= 3) {
            if (b1) {
                i5 *= (int)(((i5 + -762936332385524599L) + i5) + iMeth());
            } else {
                i3 &= i2;
            }
            l = i3;
            for (i23 = i4; i23 < 21; ++i23) {
                for (d1 = 1; d1 > 1; --d1) {
                    i2 = i24;
                }
                i3 += (((i23 * s) + s) - i23);
            }
            i5 += (((i4 * by) + i25) - i24);
            iArr[i4 + 1] += -17432;
        }
        vMeth_check_sum += i2 + l + i3 + Float.floatToIntBits(f) + by + s + i4 + i5 + (b1 ? 1 : 0) + i23 + i24 +
            Double.doubleToLongBits(d1) + i25 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-7745, i1=-152, i26=-45927, i27=-116, i28=1, i29=-44765, i30=-61143;
        short s2=15023;
        float f1=-1.617F;
        double d2=-2.81712;

        for (i = 7; i < 188; ++i) {
            vMeth(i1, -28356L, i1);
            i1 = (int)Test.instanceCount;
            i26 = 1;
            while (++i26 < 139) {
                Test.iArrFld[i] = (int)-123.725F;
                i1 = s2;
                i1 += (i26 ^ Test.instanceCount);
            }
            f1 = 1;
            while (++f1 < 139) {
                if (false) continue;
                Test.instanceCount += (long)(f1 * i26);
                lArrFld = lArrFld;
                i1 = i;
                switch ((((0 >>> 1) % 10) * 5) + 27) {
                case 74:
                    Test.instanceCount *= i;
                    Test.instanceCount *= i26;
                    d2 += i1;
                    break;
                case 49:
                    for (i27 = 1; i27 < 1; i27++) {
                        byte by2=77;
                        d2 = Test.fFld;
                        d2 = i27;
                        Test.fFld *= i1;
                        i1 = by2;
                    }
                    Test.fFld -= Test.instanceCount;
                    break;
                case 64:
                    Test.instanceCount += (long)((long)f1 | i28);
                    Test.instanceCount -= -61654;
                    break;
                case 67:
                    switch ((int)(((f1 % 2) * 5) + 117)) {
                    case 126:
                        for (i29 = 1; i29 < 1; i29++) {
                            i28 += (((i29 * i26) + i28) - i27);
                            i28 = i27;
                            i28 >>= 6;
                            Test.fArrFld[(int)(f1 + 1)] = i27;
                        }
                        break;
                    case 118:
                        s2 -= (short)-13;
                        break;
                    default:
                        try {
                            i28 = (i27 % -29);
                            i1 = (-1730212803 % Test.iArrFld[i - 1]);
                            i30 = (Test.iArrFld[i] / i29);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                case 44:
                    i28 = (int)Test.instanceCount;
                    break;
                case 48:
                    i28 = i27;
                    break;
                case 51:
                    i1 /= (int)(i29 | 1);
                    break;
                case 66:
                    Test.instanceCount = i1;
                case 58:
                    i28 += 8;
                    break;
                case 62:
                    Test.fFld += i;
                default:
                    i1 += (int)f1;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i26 = " + i + "," + i1 + "," + i26);
        FuzzerUtils.out.println("s2 f1 d2 = " + s2 + "," + Float.floatToIntBits(f1) + "," +
            Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 = " + i30);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iArrFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
