// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4294608450L;
    public static int iFld=-38757;
    public static volatile short sFld=-12144;
    public static double dFld=-15.65209;
    public static int iFld1=-58258;
    public static float fArrFld[]=new float[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -26.6F);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1() {

        int i4=-11, i5=3, i7=167;
        short s=-21704, sArr[]=new short[N];
        byte by1=-19;
        boolean b2=true;
        float f3=-5.796F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2397724477L);
        FuzzerUtils.init(sArr, (short)6218);

        for (float f2 : Test.fArrFld) {
            for (i4 = 1; 4 > i4; i4++) {
                int i6=0;
                f2 = Test.instanceCount;
                i5 -= i6;
                s = (short)i5;
                i7 /= -30512;
                Test.iFld += (((i4 * Test.iFld) + by1) - i4);
                if (b2) break;
            }
            lArr[(Test.iFld >>> 1) % N] = i5;
        }
        Test.instanceCount <<= Test.instanceCount;
        sArr[(i5 >>> 1) % N] -= (short)f3;
        i5 -= i5;
        Test.instanceCount |= -5;
        Test.instanceCount <<= Test.iFld;
        Test.bArrFld = Test.bArrFld;
        long meth_res = i4 + i5 + s + i7 + by1 + (b2 ? 1 : 0) + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(sArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(double d, int i3) {

        int i8=-154, i9=0, i10=-56, i11=-44543, i12=36, iArr1[]=new int[N];
        float f4=11.766F;
        byte by2=-88;

        FuzzerUtils.init(iArr1, -27643);

        Test.instanceCount += lMeth1();
        i8 = 365;
        do {
            Test.iFld >>= (int)Test.instanceCount;
            for (i9 = 1; i9 < 5; i9++) {
                for (i11 = 1; i11 < 2; ++i11) {
                    f4 = i8;
                    i12 = -124;
                    by2 >>= (byte)Test.instanceCount;
                    iArr1[i11 - 1] += i9;
                    Test.instanceCount += (((i11 * Test.instanceCount) + i12) - i9);
                    i3 += (((i11 * i10) + Test.sFld) - Test.instanceCount);
                    f4 += (1 + (i11 * i11));
                    i10 >>= (int)Test.instanceCount;
                }
                iArr1[i8] *= i10;
                iArr1[i9 + 1] *= (int)f4;
            }
        } while (--i8 > 0);
        vMeth_check_sum += Double.doubleToLongBits(d) + i3 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f4) + by2
            + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(boolean b1, int i1, int i2) {

        int i13=-36, i14=-31182, i15=33825, i16=11, iArr2[]=new int[N];
        float f5=-98.668F;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr2, 9);
        FuzzerUtils.init(dArr, 0.23197);

        vMeth(Test.dFld, Test.iFld);
        for (i13 = 10; i13 < 277; ++i13) {
            f5 = -14.400F;
            Test.instanceCount = i1;
            iArr2[i13] -= i1;
            switch (((i13 % 5) * 5) + 40) {
            case 47:
                if (true) {
                    Test.iFld = i2;
                    if (true) {
                        for (i15 = 6; i15 > 1; i15 -= 2) {
                            iArr2[i13] -= -181;
                            if (b1) break;
                            Test.iFld = (int)Test.instanceCount;
                            dArr[i13] += i15;
                            iArr2[i15] -= Test.sFld;
                        }
                    }
                } else if (b1) {
                    if (true) break;
                }
                break;
            case 42:
                Test.instanceCount = Test.instanceCount;
                break;
            case 44:
                Test.sFld += (short)i13;
            case 48:
                try {
                    i2 = (-13 % iArr2[i13 + 1]);
                    i16 = (79 / i15);
                    i16 = (i13 / -16882);
                } catch (ArithmeticException a_e) {}
                break;
            case 61:
                if (b1) break;
                break;
            }
        }
        long meth_res = (b1 ? 1 : 0) + i1 + i2 + i13 + i14 + Float.floatToIntBits(f5) + i15 + i16 +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b=true;
        byte by=-108, byArr[]=new byte[N];
        float f=-100.419F, f1=-2.981F;
        int i=-5, i17=14, i18=-4, i19=2, iArr[]=new int[N];
        short sArr1[]=new short[N];

        FuzzerUtils.init(byArr, (byte)1);
        FuzzerUtils.init(iArr, -104);
        FuzzerUtils.init(sArr1, (short)-15763);

        Test.iFld = (int)(((byArr[(-16328 >>> 1) % N] = (byte)Test.iFld) - (0.345 - (-iArr[(1942 >>> 1) % N]))) *
            (++Test.iFld));
        b = ((by++) < ((Test.iFld = Test.iFld) >> (long)(f * Test.iFld)));
        Test.iFld -= (--Test.iFld);
        for (f1 = 328; f1 > 9; f1 -= 3) {
            if (b || (((-Test.instanceCount) * lMeth(b, i, i)) >= Test.instanceCount)) break;
            i17 = 1;
            do {
                Test.instanceCount += (i17 - Test.instanceCount);
                for (i18 = 1; i18 < 1; ++i18) {
                    if (b) {
                        Test.instanceCount %= (Test.instanceCount | 1);
                        iArr[i17] += (int)Test.instanceCount;
                        i19 -= i17;
                    } else {
                        iArr[i17] -= (int)5L;
                        Test.dFld += i17;
                        Test.iFld = i;
                    }
                    Test.instanceCount <<= i19;
                    Test.instanceCount -= Test.iFld1;
                    sArr1[(int)(f1 - 1)] = (short)i;
                    Test.iFld += -120;
                    Test.iFld1 &= i;
                    switch (((Test.iFld1 >>> 1) % 2) + 64) {
                    case 64:
                    case 65:
                        Test.instanceCount += Test.sFld;
                        break;
                    default:
                        sArr1[(int)(f1)] += (short)Test.iFld;
                        switch ((int)(((f1 % 1) * 5) + 118)) {
                        case 120:
                            if (b) {
                                Test.instanceCount += (((i18 * Test.iFld) + i17) - i);
                                i19 += i18;
                                Test.iFld = (int)-17.206F;
                                sArr1[i18 - 1] -= (short)i19;
                            }
                            Test.sFld = (short)Test.iFld;
                        default:
                            Test.iFld = Test.sFld;
                        }
                    }
                }
            } while (++i17 < 236);
        }

        FuzzerUtils.out.println("b by f = " + (b ? 1 : 0) + "," + by + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("f1 i i17 = " + Float.floatToIntBits(f1) + "," + i + "," + i17);
        FuzzerUtils.out.println("i18 i19 byArr = " + i18 + "," + i19 + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("iArr sArr1 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(sArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.dFld Test.iFld1 Test.fArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Test.iFld1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.bArrFld = " + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
