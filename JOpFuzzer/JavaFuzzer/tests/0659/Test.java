// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1658842963026193063L;
    public static int iFld=-35;
    public static volatile double dFld=-1.42363;
    public float fFld=0.718F;
    public short sFld=-19403;
    public static long lFld=-811118372L;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, int i8) {

        int i9=-13357, i10=-56262, i11=13, i12=-1154, i13=-14, i14=-134, i15=-221, i16=-225, iArr[]=new int[N];
        float f1=-2.288F;
        byte by=-119;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, -46000);

        for (i9 = 189; 10 < i9; --i9) {
            for (i11 = 1; 9 > i11; i11++) {
                i13 += i8;
                for (i14 = 1; 2 > i14; ++i14) {
                    bArr[i11 + 1] = false;
                    Test.dFld = f1;
                    f1 = f1;
                    switch ((i14 % 2) + 114) {
                    case 114:
                        Test.instanceCount += i15;
                    case 115:
                        switch ((((i9 >>> 1) % 7) * 5) + 116) {
                        case 117:
                            i7 <<= 7467;
                            i10 = i12;
                            break;
                        case 126:
                            Test.iFld += (int)-145L;
                            Test.iFld += (((i14 * Test.iFld) + f1) - i9);
                            by += (byte)(i14 | Test.instanceCount);
                            break;
                        case 138:
                            f1 += i7;
                            break;
                        case 125:
                            f1 += (i14 * i12);
                            break;
                        case 129:
                            iArr[i14 + 1] = -80;
                            break;
                        case 119:
                        case 131:
                            i16 *= i15;
                            break;
                        default:
                            i13 += (-19 + (i14 * i14));
                        }
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f1) + by + i16 +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i5, int i6, long l) {

        int i17=120, i18=54190, i19=-115, i20=-21, i21=-21387, i22=-23823, iArr1[]=new int[N];
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.518F);
        FuzzerUtils.init(iArr1, -9);

        vMeth1(i6, i5);
        for (i17 = 14; i17 < 315; i17++) {
            i6 += i6;
            i19 = 1;
            do {
                fArr[i17] += 3415769934L;
                b = b;
                for (i20 = 1; i20 > i19; i20 -= 2) {
                    iArr1[i20 + 1] = (int)Test.instanceCount;
                    i6 = (int)l;
                    i6 += i5;
                    i6 = (int)Test.instanceCount;
                }
                i22 = 1;
                do {
                    i21 -= i19;
                    if (i19 != 0) {
                        vMeth_check_sum += i5 + i6 + l + i17 + i18 + i19 + (b ? 1 : 0) + i20 + i21 + i22 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    i5 += (i22 * i22);
                } while (++i22 < 1);
            } while (++i19 < 5);
        }
        vMeth_check_sum += i5 + i6 + l + i17 + i18 + i19 + (b ? 1 : 0) + i20 + i21 + i22 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i, int i1) {

        int i2=50864, i3=216, i4=3;

        for (i2 = 15; i2 < 278; i2++) {
            i += i2;
        }
        i4 = 1;
        while (++i4 < 176) {
            float f=0.465F;
            f += (i4 - Test.instanceCount);
            vMeth(-5, Test.iFld, Test.instanceCount);
        }
        long meth_res = i + i1 + i2 + i3 + i4;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i23=-60, i24=6, i25=16, i26=-29302, i27=-10, i28=242, i29=-14, i30=140, iArr2[]=new int[N];
        byte by1=-59;
        boolean b1=false;
        long lArr[]=new long[N];
        double dArr[]=new double[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr, 3L);
        FuzzerUtils.init(iArr2, 81);
        FuzzerUtils.init(dArr, -1.116269);
        FuzzerUtils.init(fArr1, -1.412F);

        lArr[(Test.iFld >>> 1) % N] += iMeth(Test.iFld, Test.iFld);
        iArr2[(Test.iFld >>> 1) % N] += Test.iFld;
        for (i23 = 4; i23 < 349; ++i23) {
            i24 += (i23 * i23);
        }
        fFld = (float)Test.dFld;
        i24 = Test.iFld;
        i24 <<= (int)Test.instanceCount;
        i24 /= (int)(Test.instanceCount | 1);
        for (i25 = 6; i25 < 122; i25++) {
            i26 += i25;
            by1 ^= (byte)i26;
            i24 += i23;
            for (i27 = 1; i27 < 216; i27 += 3) {
                if (b1) break;
                Test.iFld *= -33264;
                Test.iFld <<= i27;
                fFld -= Test.instanceCount;
                Test.dFld += Test.instanceCount;
                i28 -= i24;
            }
            i26 ^= (int)Test.instanceCount;
            i28 += sFld;
            for (i29 = 8; i29 < 216; i29++) {
                if (true) continue;
                Test.iFld += i29;
                i24 = (int)9887L;
                fFld = -4;
                fArr1[i25 + 1] = Test.instanceCount;
                i28 = sFld;
                Test.lFld <<= 55377;
                Test.dFld = i24;
            }
        }

        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 by1 i27 = " + i26 + "," + by1 + "," + i27);
        FuzzerUtils.out.println("i28 b1 i29 = " + i28 + "," + (b1 ? 1 : 0) + "," + i29);
        FuzzerUtils.out.println("i30 lArr iArr2 = " + i30 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("dArr fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("fFld sFld Test.lFld = " + Float.floatToIntBits(fFld) + "," + sFld + "," + Test.lFld);

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
