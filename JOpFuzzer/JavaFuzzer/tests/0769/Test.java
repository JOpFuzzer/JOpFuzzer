// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=20888L;
    public static boolean bFld=false;
    public static int iFld=-9;
    public static double dArrFld[]=new double[N];
    public static volatile short sArrFld[]=new short[N];
    public static boolean bArrFld[]=new boolean[N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.99492);
        FuzzerUtils.init(Test.sArrFld, (short)-32471);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.iArrFld, -18652);
        FuzzerUtils.init(Test.fArrFld, 2.641F);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(double d) {

        int i9=20155, i10=-25, i11=-59492, i12=12, i13=37437;
        double d1=94.72081;
        long l=4L;

        for (i9 = 5; i9 < 138; ++i9) {
            Test.instanceCount <<= Test.instanceCount;
        }
        Test.bArrFld[(i10 >>> 1) % N] = Test.bFld;
        d1 = 311;
        while ((d1 -= 2) > 0) {
            for (i11 = 1; i11 < 10; i11 += 3) {
                if (i11 != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d) + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12
                        + l + i13;
                    return;
                }
                i10 >>= i9;
                Test.iArrFld[(int)(d1 + 1)] <<= i10;
            }
            i12 = i10;
            Test.iArrFld = Test.iArrFld;
            i12 = (int)Test.instanceCount;
        }
        for (l = 190; l > 2; l -= 3) {
            i10 += (int)Test.instanceCount;
            Test.iFld += (int)(l - i13);
            Test.instanceCount += (-214 + (l * l));
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + l + i13;
    }

    public static long lMeth1() {

        int i4=0, i5=97, i6=10, i7=30671, i8=10;
        float f1=0.1000F;
        double d2=1.864;

        i4 = 1;
        while (++i4 < 123) {
            for (i5 = i4; i5 < 13; ++i5) {
                for (i7 = 1; i7 < 1; i7++) {
                    Test.dArrFld[i4] = (Test.instanceCount++);
                    Test.instanceCount -= -228;
                    i6 += (i7 | i4);
                    Test.instanceCount |= ((i5 * (i6--)) + i7);
                }
                f1 -= (-i5);
                Test.sArrFld[i5 + 1] = (short)(Test.instanceCount + (i6 >>=
                    (int)Long.reverseBytes(Test.instanceCount)));
                vMeth(d2);
                Test.iFld += (int)-7L;
                Test.dArrFld[i5 + 1] = i5;
                Test.iArrFld[i5 - 1] += i8;
                d2 *= 37499;
            }
            d2 += i4;
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(float f, int i3, byte by) {

        int i14=-238, i15=-11, i16=58736, i17=0, i18=-7;
        double d3=-1.44613;
        float f2=-1.289F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6355840858316681497L);

        i3 += (int)((++i3) * ((f++) * Test.instanceCount));
        lArr[(-51355 >>> 1) % N] = lMeth1();
        i14 += i3;
        Test.iFld >>= (int)Test.instanceCount;
        i15 = 1;
        while (++i15 < 254) {
            short s1=-11502;
            s1 = (short)Test.instanceCount;
            s1 = (short)d3;
        }
        f2 = 1;
        do {
            for (i16 = 1; i16 < 5; ++i16) {
                i18 = 1;
                do {
                    if (Test.bFld) continue;
                    f -= Test.iFld;
                    lArr = lArr;
                    Test.iArrFld[(int)(f2)] -= (int)Test.instanceCount;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)81);
                } while (++i18 < 2);
            }
        } while (++f2 < 333);
        long meth_res = Float.floatToIntBits(f) + i3 + by + i14 + i15 + Double.doubleToLongBits(d3) +
            Float.floatToIntBits(f2) + i16 + i17 + i18 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-81, i1=53508, i2=-33390, i19=-31975, i20=-63, i21=-233, i22=-15930, i23=61471, iArr[]=new int[N];
        short s=18041;
        float f3=1.492F;
        byte by1=83;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr, -13);
        FuzzerUtils.init(lArr1, -4354L);

        i = 1;
        do {
            for (i1 = 201; i1 > 7; i1--) {
                s += (short)lMeth(f3, i1, by1);
                i2 -= s;
                Test.iArrFld[i1] = i;
                Test.instanceCount = (long)f3;
                switch ((i % 1) + 122) {
                case 122:
                }
                for (i19 = 1; i19 < 2; ++i19) {
                    Test.iArrFld[(i >>> 1) % N] += by1;
                    switch ((i19 % 9) + 60) {
                    case 60:
                        Test.instanceCount = 28835;
                        try {
                            i21 = (i2 / Test.iArrFld[i1 - 1]);
                            Test.iArrFld[i - 1] = (i1 % Test.iFld);
                            Test.iArrFld[i1] = (-195 / i22);
                        } catch (ArithmeticException a_e) {}
                        i2 += -221;
                        Test.iArrFld[i - 1] = i21;
                        break;
                    case 61:
                        i21 &= i2;
                        f3 += (i19 - i21);
                        Test.fArrFld[i19 - 1] = i22;
                    case 62:
                        i20 = i20;
                        break;
                    case 63:
                    case 64:
                        Test.iFld = i;
                    case 65:
                        i2 = -14;
                    case 66:
                        i22 -= -6880;
                        i2 += (i19 | Test.instanceCount);
                        Test.instanceCount *= i22;
                        switch (((i % 5) * 5) + 91) {
                        case 111:
                            i20 += s;
                            if (Test.bFld) break;
                            i23 = by1;
                            break;
                        case 95:
                            iArr[i1 - 1] -= i22;
                        case 109:
                            lArr1[i19][i19] = 85;
                            i20 >>= (int)Test.instanceCount;
                            break;
                        case 96:
                            i22 <<= i22;
                            break;
                        case 93:
                            Test.bFld = true;
                            break;
                        default:
                            i23 <<= Test.iFld;
                        }
                        break;
                    case 67:
                        s = (short)15289;
                    case 68:
                        Test.instanceCount = (long)1.132F;
                        break;
                    }
                }
            }
        } while (++i < 125);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("s f3 by1 = " + s + "," + Float.floatToIntBits(f3) + "," + by1);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 iArr = " + i22 + "," + i23 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.iFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.dArrFld Test.sArrFld Test.bArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.sArrFld) +
            "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
