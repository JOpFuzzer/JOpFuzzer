// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1443043981L;
    public int iFld=27631;
    public static byte byFld=46;
    public static int iArrFld[]=new int[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 19128);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4, double d1) {

        int i5=22989, i6=-52, i7=-10, i8=26456, i9=-38628, i10=100, i11=-3, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -32360);

        for (i5 = 4; 141 > i5; ++i5) {
            short s=8236;
            i4 = i4;
            i4 -= i6;
            s = (short)1.513F;
        }
        i6 &= i5;
        Test.instanceCount >>= i6;
        for (i7 = 3; i7 < 121; ++i7) {
            Test.instanceCount -= i4;
            i6 += (int)d1;
            i9 = 13;
            while (--i9 > 0) {
                for (i10 = 1; i10 < 1; i10++) {
                    i6 *= (int)-215L;
                    if (false) continue;
                    iArr1[i10 + 1] += (int)Test.instanceCount;
                    i6 += (((i10 * i8) + Test.instanceCount) - i11);
                }
            }
        }
        long meth_res = i4 + Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i12=32477, i13=19774, i14=-7, i15=-34, i16=-214;
        double d2=-81.119342;
        boolean b=false;
        float f1=-27.512F;

        Test.byFld = (byte)iMeth(i12, d2);
        i13 = 1;
        do {
            i12 = Test.byFld;
            Test.instanceCount >>= -14;
            if (b) break;
            for (i14 = 1; 6 > i14; i14++) {
                i16 = 2;
                while ((i16 -= 2) > 0) {
                    i15 = i12;
                    i12 = 2;
                    i12 = (int)Test.instanceCount;
                }
                Test.iArrFld[i13 + 1] *= (int)f1;
                i15 += (i14 * i14);
                f1 *= 0;
                i15 += (int)Test.instanceCount;
                i12 += i14;
            }
        } while (++i13 < 275);
        vMeth1_check_sum += i12 + Double.doubleToLongBits(d2) + i13 + (b ? 1 : 0) + i14 + i15 + i16 +
            Float.floatToIntBits(f1);
    }

    public static void vMeth(int i, int i1) {

        int i2=-219, i3=11, i17=41906, i18=12, iArr[]=new int[N], iArr2[]=new int[N];
        long l=40827L;
        short s1=-23889;
        boolean b1=false;
        float f2=2.436F;

        FuzzerUtils.init(iArr, 209);
        FuzzerUtils.init(iArr2, -194);

        for (i2 = 10; i2 < 252; ++i2) {
            double d=0.11662;
            Test.instanceCount <<= Math.max(iArr[(i1 >>> 1) % N], (int)((i1 * i) + (d + i3)));
            l = 1;
            do {
                Test.instanceCount += l;
                switch (((((i3 -= i3) >>> 1) % 5) * 5) + 103) {
                case 120:
                    vMeth1();
                    i3 *= i1;
                    break;
                case 124:
                    for (i17 = 1; i17 < 1; i17++) {
                        i18 = s1;
                        Test.instanceCount >>= i;
                        i18 += (int)l;
                        Test.instanceCount = i;
                        b1 = b1;
                        Test.instanceCount *= i2;
                    }
                    Test.instanceCount = i3;
                    break;
                case 123:
                    iArr2[(int)(l - 1)] *= (int)f2;
                    break;
                case 113:
                    iArr2[(int)(l)] = i;
                    break;
                case 111:
                    i18 *= i;
                    break;
                }
            } while (++l < 7);
        }
        vMeth_check_sum += i + i1 + i2 + i3 + l + i17 + i18 + s1 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        float f=0.637F;
        boolean b2=false;
        int i19=-9848, i20=2231, i21=54, i22=-14, i23=3, i24=-65210, i25=-14;
        short s2=-16304;

        iFld -= (int)(Test.instanceCount + ((iFld++) * (--f)));
        vMeth(iFld, iFld);
        b2 = b2;
        byArrFld[(iFld >>> 1) % N] ^= (byte)iFld;
        for (i19 = 14; 349 > i19; i19++) {
            for (i21 = 75; i21 > 3; --i21) {
                for (i23 = 1; i23 < 2; i23++) {
                    Test.byFld += (byte)(((i23 * Test.instanceCount) + i23) - i24);
                    i20 = i24;
                    i22 *= i22;
                    b2 = b2;
                }
                i25 = 1;
                while (++i25 < 2) {
                    switch ((i25 % 3) + 126) {
                    case 126:
                    case 127:
                        Test.instanceCount <<= -56;
                        Test.instanceCount <<= -21836;
                        if (b2) {
                            Test.iArrFld[i21] += i21;
                            f = i21;
                            i20 += (i25 * i25);
                        } else {
                            switch (((i19 % 3) * 5) + 81) {
                            case 87:
                                Test.iArrFld = Test.iArrFld;
                                switch ((i19 % 2) + 35) {
                                case 35:
                                    s2 += (short)iFld;
                                    i20 >>>= -28;
                                    try {
                                        i22 = (i25 % -9);
                                        i22 = (iFld % -408703726);
                                        i20 = (-41239 % i20);
                                    } catch (ArithmeticException a_e) {}
                                    break;
                                case 36:
                                    i22 += (i25 * i25);
                                    switch (((i25 % 2) * 5) + 2) {
                                    case 5:
                                        Test.instanceCount -= Test.instanceCount;
                                        Test.iArrFld[i21 + 1] += i21;
                                        break;
                                    case 3:
                                        iFld += i19;
                                    }
                                    break;
                                default:
                                }
                                break;
                            case 86:
                                b2 = false;
                                break;
                            case 94:
                                iFld += (-64 + (i25 * i25));
                                break;
                            }
                        }
                        break;
                    case 128:
                        i22 = 14;
                    default:
                        iFld = i24;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f b2 i19 = " + Float.floatToIntBits(f) + "," + (b2 ? 1 : 0) + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("s2 = " + s2);

        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.iArrFld byArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
