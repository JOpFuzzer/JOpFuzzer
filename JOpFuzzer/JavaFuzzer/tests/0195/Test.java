// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=55117L;
    public static float fFld=90.155F;
    public static double dFld=-17.109404;
    public volatile int iFld=180;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.545F);
        FuzzerUtils.init(Test.lArrFld, -47741179856120472L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i2, long l1, int i3) {

        int i4=-9768, i5=10, i6=-9, i7=18263, i8=-39467, i9=952, iArr[]=new int[N];
        float f1=8.774F;
        short s1=4737;
        boolean b1=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(bArr, true);

        if (b1) {
            i2 *= (int)-119.635F;
            for (i4 = 1; i4 < 231; ++i4) {
                for (i6 = 1; 7 > i6; ++i6) {
                    for (i8 = i4; i8 < 2; i8++) {
                        boolean b=true;
                        byte by=-124;
                        i3 -= (int)Test.instanceCount;
                        if (b) {
                            iArr[i8 + 1] >>= (int)Test.instanceCount;
                        } else if (b) {
                            if (b) {
                                i3 <<= i3;
                            } else if (b) {
                                i5 += (i8 * i8);
                            } else {
                                l1 /= ((long)(f1) | 1);
                                bArr = bArr;
                                l1 += (i8 | Test.instanceCount);
                            }
                            s1 += (short)(((i8 * f1) + f1) - by);
                        } else {
                            if (b) continue;
                        }
                    }
                }
            }
        } else {
            iArr[(i2 >>> 1) % N] += 5684;
        }
        long meth_res = i2 + l1 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + s1 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(short s) {

        long l=-730161510L, l2=-91L;
        int i1=81, i10=-8131, i11=2173, iArr1[][]=new int[N][N];
        byte by1=104;

        FuzzerUtils.init(iArr1, -45914);

        for (l = 3; l < 279; ++l) {
            i1 = (int)lMeth1(182, Test.instanceCount, i1);
            i1 = -14;
            i1 *= (int)Test.instanceCount;
            iArr1[(int)(l + 1)][(int)(l - 1)] = i1;
            Test.fFld += l;
            i1 = i1;
            try {
                i1 = (iArr1[(int)(l - 1)][(int)(l)] % iArr1[(int)(l + 1)][(int)(l + 1)]);
                i1 = (1701884697 / i1);
                i1 = (-112 / i1);
            } catch (ArithmeticException a_e) {}
            i10 = 1;
            do {
                Test.instanceCount += i10;
                iArr1[(int)(l + 1)][i10] >>= (int)Test.instanceCount;
                Test.fFld -= by1;
                for (l2 = 1; 1 > l2; l2++) {
                    i1 += i10;
                    Test.fArrFld = Test.fArrFld;
                }
            } while (++i10 < 6);
        }
        long meth_res = s + l + i1 + i10 + by1 + l2 + i11 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth(double d, float f, int i) {

        short s2=5592;

        Test.fArrFld[(i >>> 1) % N] = (i % (lMeth(s2) | 1));
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i + s2;
    }

    public void mainTest(String[] strArr1) {

        int i12=-143, i13=66, i14=6644, i15=-147, i16=62, i17=-48602, i18=61123;
        boolean b2=true;

        for (int smallinvoc=0; smallinvoc<987; smallinvoc++) vSmallMeth(Test.dFld, Test.fFld, 88);
        iFld = iFld;
        iFld &= -233;
        for (i12 = 6; i12 < 316; i12++) {
            i13 += i12;
            for (i14 = 1; i14 < 81; ++i14) {
                b2 = b2;
                i13 *= i15;
                for (i16 = 1; i16 < 2; i16++) {
                    i17 += (int)(7.337F + (i16 * i16));
                    i13 = -11;
                    Test.instanceCount = (long)Test.dFld;
                    i18 *= i17;
                    Test.dFld -= i13;
                    if (b2) {
                        Test.fFld = i12;
                    } else if (false) {
                        i18 = (int)36195L;
                        Test.fFld += (i16 * i16);
                    } else if (b2) {
                        Test.fFld += ((long)i16 ^ (long)i13);
                    } else {
                        b2 = b2;
                        Test.fFld += Test.instanceCount;
                        i15 += i17;
                        i13 /= (int)((long)(Test.dFld) | 1);
                    }
                    iFld += (((i16 * i16) + i14) - i14);
                    i17 += (i16 * Test.instanceCount);
                    Test.lArrFld = FuzzerUtils.long1array(N, (long)42855L);
                    i17 = i12;
                }
                i13 = (int)Test.instanceCount;
                i15 = iFld;
            }
            Test.fArrFld[i12 + 1] = i14;
        }

        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 b2 i16 = " + i15 + "," + (b2 ? 1 : 0) + "," + i16);
        FuzzerUtils.out.println("i17 i18 = " + i17 + "," + i18);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iFld Test.fArrFld Test.lArrFld = " + iFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  lMeth1 ->  lMeth1 lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
