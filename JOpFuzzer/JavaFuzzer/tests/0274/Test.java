// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public static volatile float fFld=0.616F;
    public static double dFld=-40.119158;
    public volatile long lFld=-65332L;
    public static byte byFld=115;
    public static short sFld=31225;
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -127.65F);
        FuzzerUtils.init(Test.dArrFld, -14.70863);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(short s, long l) {

        int i8=-11, i9=34734, i10=-214, i11=247, i12=18089, i13=-17, i14=13, i15=3417, iArr1[]=new int[N];
        double d1=2.116607;
        long l1=6968853815780345839L;

        FuzzerUtils.init(iArr1, 119);

        for (i8 = 13; i8 < 260; ++i8) {
            i9 += (int)d1;
            i9 -= i9;
            for (i10 = i8; 7 > i10; ++i10) {
                for (i12 = 1; i12 < 1; ++i12) {
                    if (i9 != 0) {
                        vMeth2_check_sum += s + l + i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 + i14
                            + i15 + l1 + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    i11 = (int)l;
                    i13 -= (int)l;
                    i9 += i11;
                    i13 *= i10;
                }
                for (i14 = 1; i14 < 1; i14++) {
                    Test.fFld += (((i14 * i14) + l1) - l1);
                }
                Test.instanceCount -= i8;
                i15 >>= i15;
                iArr1[i8] += (int)Test.instanceCount;
            }
        }
        vMeth2_check_sum += s + l + i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 + i14 + i15 + l1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(float f) {

        int i3=4, i4=-11, i5=63, i6=11, i7=20;
        byte by=58;
        boolean b=true;
        short s1=-534;

        i3 = by;
        for (double d : Test.dArrFld) {
            for (i4 = 1; 4 > i4; i4 += 2) {
                if (((b = false) != true) || ((Float.intBitsToFloat(i3) + (-3 * (i5 >> Test.instanceCount))) !=
                    (++i5))) break;
                for (i6 = 4; i6 > i4; i6--) {
                    i5 ^= (i5++);
                    vMeth2(s1, -8L);
                    s1 += (short)i7;
                    Test.instanceCount = i6;
                    if (i6 != 0) {
                        vMeth1_check_sum += Float.floatToIntBits(f) + i3 + by + i4 + i5 + (b ? 1 : 0) + i6 + i7 + s1;
                        return;
                    }
                    Test.instanceCount += i6;
                    i7 += by;
                    Test.dFld = 124.157F;
                    i5 |= i7;
                    Test.instanceCount += (((i6 * i3) + Test.instanceCount) - Test.instanceCount);
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i3 + by + i4 + i5 + (b ? 1 : 0) + i6 + i7 + s1;
    }

    public static void vMeth(int i2) {

        int i17=36, i18=12, i19=-3, iArr[]=new int[N];
        float f1=1.246F;

        FuzzerUtils.init(iArr, -20220);

        iArr[(76 >>> 1) % N] >>= (int)(-((Test.instanceCount--) + (Test.fFld * i2)));
        Test.fArrFld[(i2 >>> 1) % N] *= (((long)(-1 - (i2 + -7.128944)) | i2) - Integer.reverseBytes(++i2));
        vMeth1(Test.fFld);
        for (int i16 : iArr) {
            for (i17 = 1; i17 < 4; ++i17) {
                short s2=5509;
                for (f1 = 1; f1 < 2; f1++) {
                    byte by1=-118;
                    by1 += (byte)f1;
                    Test.instanceCount *= 36977L;
                    Test.dFld = i16;
                    Test.instanceCount += (long)f1;
                    i19 -= i16;
                }
                try {
                    iArr[i17 - 1] = (-173 % i16);
                    i18 = (i18 / i19);
                    i18 = (i19 % -35830);
                } catch (ArithmeticException a_e) {}
                s2 = (short)i16;
            }
            i16 -= (int)Test.instanceCount;
            iArr[(i16 >>> 1) % N] -= i16;
        }
        vMeth_check_sum += i2 + i17 + i18 + Float.floatToIntBits(f1) + i19 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=48840, i1=-128, i20=-13195, i21=-194, i22=-192, i23=6, i24=-14, i25=1, i26=0, i27=7, i28=81, iArr2[]=new
            int[N];
        float f2=62.18F;

        FuzzerUtils.init(iArr2, -7);

        for (i = 7; 300 > i; ++i) {
            vMeth(i);
            i1 = i;
            Test.fFld += i;
            switch (((i % 2) * 5) + 109) {
            case 113:
                lFld = i;
                for (i20 = 86; i20 > 5; i20 -= 2) {
                    Test.instanceCount += (-12 + (i20 * i20));
                    for (i22 = i; i22 < 3; i22 += 2) {
                        short s3=-30752;
                        i23 >>= Test.byFld;
                        i24 *= i1;
                        s3 += (short)79;
                        iArr2[i] *= (int)Test.dFld;
                        Test.dFld *= 164;
                        lFld = (long)2.92103;
                    }
                    i25 = 1;
                    do {
                        Test.sFld += (short)i22;
                        Test.dFld *= -17380;
                        f2 = (float)Test.dFld;
                        iArr2[i20 - 1] -= i1;
                        Test.fFld %= (lFld | 1);
                        i1 += i20;
                    } while (++i25 < 3);
                    i21 += (int)lFld;
                    i23 = i1;
                }
                f2 -= f2;
                i1 += i;
                break;
            case 115:
                i26 = 1;
                do {
                    for (i27 = i26; i27 < 1; i27++) {
                        Test.fArrFld[i] -= i28;
                        i1 += (i27 - i1);
                    }
                } while (++i26 < 86);
                break;
            default:
                Test.dFld -= Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i i1 i20 = " + i + "," + i1 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 f2 = " + i24 + "," + i25 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("lFld Test.byFld Test.sFld = " + lFld + "," + Test.byFld + "," + Test.sFld);
        FuzzerUtils.out.println("Test.fArrFld Test.dArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
