// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public static byte byFld=97;
    public static boolean bFld=true;
    public short sFld=-25667;
    public double dFld=-32.9439;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 55447);
    }

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i13, int i14, int i15) {

        float f1=-2.657F, f2=-122.1004F;
        int i16=-2, i17=-5;

        Test.instanceCount *= i15;
        f1 = 1;
        while (++f1 < 301) {
            for (i16 = 1; i16 < 5; i16++) {
                f2 = i15;
                f2 = Test.instanceCount;
                i14 -= (int)f2;
                Test.byFld += (byte)(i16 * i16);
                Test.bFld = Test.bFld;
                i17 += (((i16 * i15) + Test.instanceCount) - f2);
            }
        }
        vMeth_check_sum += i13 + i14 + i15 + Float.floatToIntBits(f1) + i16 + i17 + Float.floatToIntBits(f2);
    }

    public static boolean bMeth() {

        int i7=16724, i8=71, i9=-129, i10=-2, i11=-61886, i12=6;
        double d=1.49515;
        float f3=-7.871F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4099888742L);
        FuzzerUtils.init(fArr, 1.859F);

        lArr = FuzzerUtils.long1array(N, (long)-141L);
        for (i7 = 3; i7 < 219; i7++) {
            if (Test.bFld) {
                for (d = i7; 7 > d; ++d) {
                    try {
                        i9 = (i9 / i7);
                        i9 = (89 % i9);
                        i9 = (Test.iArrFld[(int)(d - 1)] / 15651);
                    } catch (ArithmeticException a_e) {}
                    i10 = 1;
                    while (++i10 < 1) {
                        i8 += (i10 * i10);
                    }
                    fArr[i7 - 1] *= Test.iArrFld[(int)(d + 1)];
                    for (i11 = 1; 1 > i11; i11++) {
                        vMeth(9, 3, i12);
                        try {
                            i8 = (-2810 % i7);
                            i12 = (-98 / i7);
                            i9 = (Test.iArrFld[(int)(d)] / i8);
                        } catch (ArithmeticException a_e) {}
                        i9 >>= 50700;
                    }
                    Test.instanceCount += (long)(((d * f3) + Test.instanceCount) - i11);
                    i9 += (int)((long)d ^ i8);
                }
                Test.byFld += (byte)(((i7 * i11) + f3) - Test.instanceCount);
                return ((int)(i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + Float.floatToIntBits(f3) +
                    FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)))) % 2 > 0;
            } else if (Test.bFld) {
                if (Test.bFld) continue;
            } else {
                i9 >>= (int)-5L;
                return ((int)(i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + Float.floatToIntBits(f3) +
                    FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)))) % 2 > 0;
            }
        }
        long meth_res = i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth() {

        int i1=14, i2=-33035, i3=-185, i4=9, i5=-189, i6=2;
        long l=-1600601229L;
        boolean b=true, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, false);

        i1 += i1;
        for (l = 7; l < 362; ++l) {
            float f=-14.585F;
            f += l;
            for (i3 = 1; 5 > i3; ++i3) {
                for (i5 = 1; i5 < 2; i5 += 3) {
                    i1 &= (int)(-(i6 - (f--)));
                    i4 += (int)(((f - i3) - i4) + i4);
                    b = (b = ((bArr[(i2 >>> 1) % N][i3 + 1] = b) != b));
                    b = ((i6 < i4) & (bMeth() || Test.bFld));
                    i2 -= i5;
                    i1 = i2;
                }
                i1 *= -11;
                if (b) continue;
                f += (i3 * i3);
                i4 = (int)l;
            }
        }
        long meth_res = i1 + l + i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i18=38088, i19=234, i20=-90, i21=25014, i22=61857, i23=-10876;
        float f4=1.984F, fArr1[]=new float[N];
        long l1=31571L, l2=1870870224L, lArr1[]=new long[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 119.93429);
        FuzzerUtils.init(fArr1, -114.635F);
        FuzzerUtils.init(lArr1, 9583L);

        dArr[(i >>> 1) % N][(-12 >>> 1) % N] += (-(iMeth() * i));
        for (i18 = 1; i18 < 280; ++i18) {
            i >>= (int)Test.instanceCount;
            switch ((i18 % 5) + 48) {
            case 48:
                f4 += i;
                if (Test.bFld) break;
                for (l1 = 2; l1 < 90; l1++) {
                    for (l2 = 1; l2 < 2; l2++) {
                        Test.iArrFld[(int)(l1)] = i21;
                        i -= i19;
                        sFld = (short)i;
                        try {
                            i19 = (Test.iArrFld[(int)(l2)] / 51004);
                            i = (i18 % -51832);
                            i = (39327 / i);
                        } catch (ArithmeticException a_e) {}
                        i20 = i;
                        dFld *= 16900;
                    }
                    Test.instanceCount |= l1;
                    i20 *= (int)Test.instanceCount;
                    Test.byFld = (byte)i18;
                    for (i22 = (int)(l1); i22 < 2; ++i22) {
                        if (Test.bFld) continue;
                        Test.byFld = (byte)i21;
                        i += i18;
                        i23 *= i;
                        i23 += (((i22 * i23) + i18) - i21);
                        i20 = (int)Test.instanceCount;
                        i = i20;
                    }
                    Test.instanceCount *= (long)dFld;
                    sFld <<= (short)-22531L;
                    Test.instanceCount += l1;
                    i >>= i22;
                    i = -3;
                }
                break;
            case 49:
                fArr1[i18 + 1] += (float)dFld;
                break;
            case 50:
                i19 = i20;
                break;
            case 51:
                lArr1[i18] += (long)dFld;
                break;
            case 52:
                lArr1[i18 - 1] -= Test.instanceCount;
                break;
            }
        }

        FuzzerUtils.out.println("i i18 i19 = " + i + "," + i18 + "," + i19);
        FuzzerUtils.out.println("f4 l1 i20 = " + Float.floatToIntBits(f4) + "," + l1 + "," + i20);
        FuzzerUtils.out.println("l2 i21 i22 = " + l2 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 dArr fArr1 = " + i23 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.bFld = " + Test.instanceCount + "," + Test.byFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("sFld dFld Test.iArrFld = " + sFld + "," + Double.doubleToLongBits(dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
