// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=6730075572309202453L;
    public static byte byFld=-27;
    public static volatile float fFld=0.774F;
    public static int iFld=169;
    public short sFld=21297;
    public static boolean bFld=true;
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -49.851F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i3) {

        short s1=-30991;
        int i4=-13, i5=1, i6=45512, i7=2, i8=-5050, iArr[][]=new int[N][N];
        float f=-92.373F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 11254);
        FuzzerUtils.init(byArr, (byte)10);

        s1 = (short)i3;
        i4 = 1;
        do {
            i5 = 1;
            while (++i5 < 11) {
                i3 = i3;
                Test.byFld -= (byte)i3;
                iArr[i5][i4 + 1] >>= i3;
            }
            for (i6 = i4; i6 < 11; i6 += 2) {
                iArr[i4][(i3 >>> 1) % N] *= (int)f;
                s1 = (short)i3;
                iArr[i6][i6 - 1] -= i3;
                iArr[i6 - 1][i4 - 1] ^= 3992;
            }
        } while (++i4 < 147);
        i3 += i7;
        i8 = 1;
        while (++i8 < 376) {
            f = Test.instanceCount;
            iArr[i8][i8 + 1] = -5495;
        }
        long meth_res = i3 + s1 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i8 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(short s) {

        int i9=-109, i10=-58679, i11=12, i12=25583, i13=-61397;
        double d1=-2.5833, d2=0.122584, dArr[]=new double[N];
        boolean b=false;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 55.468F);
        FuzzerUtils.init(dArr, 81.113709);
        FuzzerUtils.init(lArr, 2962769891L);

        iMeth1(i9);
        for (d1 = 18; 366 > d1; ++d1) {
            for (i11 = 1; i11 < 5; i11++) {
                i12 += i9;
                Test.instanceCount <<= i10;
                i10 += i9;
                i13 = 1;
                do {
                    fArr[i13] -= i12;
                    switch ((((2 >>> 1) % 6) * 5) + 78) {
                    case 104:
                        switch ((i11 % 6) + 51) {
                        case 51:
                            Test.instanceCount <<= -3;
                            if (b) continue;
                            break;
                        case 52:
                            if (b) break;
                            i12 = i10;
                            break;
                        case 53:
                            dArr = dArr;
                        case 54:
                            i9 += (int)d2;
                        case 55:
                            Test.instanceCount = -23617;
                            break;
                        case 56:
                            b = b;
                        }
                        break;
                    case 93:
                        lArr[(int)(d1 + 1)] = i13;
                    case 86:
                        i10 -= 45749;
                        break;
                    case 98:
                        i9 &= i13;
                        break;
                    case 85:
                        d2 -= d1;
                        break;
                    case 90:
                        i9 += (((i13 * Test.instanceCount) + i10) - Test.fFld);
                        break;
                    }
                } while (++i13 < 2);
            }
        }
        long meth_res = s + i9 + Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 + (b ? 1 : 0) +
            Double.doubleToLongBits(d2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d, int i, long l) {

        int i1=-6, i2=-143, i14=5, i15=-110, iArr1[]=new int[N];
        float f1=0.131F;
        long l1=-65L;
        boolean b1=false;

        FuzzerUtils.init(iArr1, -10);

        for (i1 = 13; i1 < 262; i1++) {
            switch (((((i--) >>> 1) % 9) * 5) + 9) {
            case 44:
                i2 = (i2 + (++Test.byFld));
                Test.instanceCount += (i1 * i1);
                l = iMeth((short)(-6051));
                for (f1 = 1; 7 > f1; f1++) {
                    i15 += (int)(((f1 * i14) + i14) - Test.instanceCount);
                    i14 = i2;
                    Test.instanceCount *= -173L;
                    switch ((i1 % 2) + 11) {
                    case 11:
                        i *= i1;
                        iArr1[(int)(f1 - 1)] += (int)Test.instanceCount;
                    case 12:
                        Test.instanceCount += i15;
                        break;
                    }
                    i2 = i1;
                    Test.instanceCount = i15;
                }
            case 25:
                i -= 7;
                break;
            case 33:
                if (i != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d) + i + l + i1 + i2 + Float.floatToIntBits(f1) + i14 +
                        i15 + l1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                break;
            case 46:
                iArr1[i1 + 1] = (int)l1;
                break;
            case 48:
                i15 += i1;
                break;
            case 15:
                Test.instanceCount += i2;
                break;
            case 34:
                Test.instanceCount >>= i1;
                break;
            case 22:
                if (b1) continue;
            case 45:
                i14 = i2;
                break;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + l + i1 + i2 + Float.floatToIntBits(f1) + i14 + i15 + l1 +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        double d3=-102.106305;
        int i16=-60, i17=-166, i18=-164, i19=-13, i20=106, i21=10232, iArr2[]=new int[N], iArr3[]=new int[N];
        float f2=-96.143F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, -4);
        FuzzerUtils.init(lArr1, 65384L);
        FuzzerUtils.init(iArr3, -4);

        vMeth(d3, Test.iFld, Test.instanceCount);
        sFld >>= (short)Test.iFld;
        i16 = 1;
        while (++i16 < 177) {
            Test.iFld += i16;
            if (false) {
                switch ((i16 % 4) + 117) {
                case 117:
                    d3 = 25354L;
                    Test.iFld += (i16 * i16);
                    Test.iFld -= (int)-20866L;
                    break;
                case 118:
                    i17 = 1;
                    do {
                        Test.iFld = Test.byFld;
                        iArr2[i16 + 1] = Test.iFld;
                        for (i18 = 1; i18 < 1; i18++) {
                            i19 -= -38071;
                        }
                        lArr1[i16] = Test.iFld;
                        for (f2 = 1; f2 > 1; f2 -= 2) {
                            Test.instanceCount -= (long)Test.fFld;
                            i20 <<= (int)Test.instanceCount;
                            sFld = (short)i20;
                            iArr3[(int)(f2)] = 82;
                            i20 += (int)(((f2 * i20) + f2) - i17);
                            i19 += (int)(((f2 * Test.iFld) + i18) - i16);
                            switch (((i17 % 6) * 5) + 99) {
                            case 129:
                                i19 = 63;
                                switch (((i17 % 8) * 5) + 46) {
                                case 66:
                                    Test.fArrFld[i17 - 1] -= i18;
                                    iArr3 = iArr2;
                                    Test.iFld -= i20;
                                case 48:
                                    i19 += (int)Test.fFld;
                                    lArr1[(int)(f2)] >>>= i20;
                                case 73:
                                    sFld += (short)f2;
                                case 55:
                                    iArr2[i16] &= i18;
                                    break;
                                case 83:
                                    Test.bFld = Test.bFld;
                                    break;
                                case 64:
                                    i20 *= (int)f2;
                                    break;
                                case 57:
                                    iArr3[i16 + 1] %= (int)(i19 | 1);
                                    break;
                                case 76:
                                    Test.byFld = (byte)Test.instanceCount;
                                    break;
                                default:
                                    Test.iFld += i21;
                                }
                            case 115:
                                i20 >>= i18;
                                break;
                            case 121:
                                Test.iFld -= (int)Test.fFld;
                                break;
                            case 104:
                                lArr1[i16] += -11607L;
                                break;
                            case 102:
                                Test.instanceCount = -3851849342L;
                                break;
                            case 107:
                                if (false) continue;
                                break;
                            default:
                                try {
                                    i20 = (iArr3[i17 - 1] % -861362541);
                                    i20 = (156 / iArr2[i17 + 1]);
                                    i21 = (i18 % i18);
                                } catch (ArithmeticException a_e) {}
                            }
                        }
                    } while (++i17 < 142);
                    break;
                case 119:
                    iArr2[i16 - 1] &= (int)40938L;
                    break;
                case 120:
                    Test.iFld -= sFld;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("d3 i16 i17 = " + Double.doubleToLongBits(d3) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 f2 = " + i18 + "," + i19 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i20 i21 iArr2 = " + i20 + "," + i21 + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("lArr1 iArr3 = " + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld sFld Test.bFld = " + Test.iFld + "," + sFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
