// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public static boolean bFld=false;
    public static double dFld=1.71354;
    public static byte byFld=-94;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -37778);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i2, int i3, long l) {

        int i4=-8, i5=-22497, i6=-33999, i7=12, i8=16277, i9=-10;
        double d1=0.59444;
        byte by=8, by1=75;

        i4 = 1;
        while (++i4 < 215) {
            Test.iArrFld = Test.iArrFld;
        }
        d1 = 1;
        do {
            Test.instanceCount = -9;
            for (i5 = 1; i5 < 5; ++i5) {
                i7 = 1;
                while (++i7 < 2) {
                    i3 = by;
                    i2 <<= (int)Test.instanceCount;
                    i2 = i3;
                    Test.instanceCount += (((i7 * i4) + i2) - Test.instanceCount);
                    if (i4 != 0) {
                    }
                }
                for (i8 = 1; 2 > i8; ++i8) {
                    by1 -= (byte)i3;
                    i3 += (i8 ^ i4);
                    if (Test.bFld) break;
                }
            }
        } while (++d1 < 374);
        long meth_res = i2 + i3 + l + i4 + Double.doubleToLongBits(d1) + i5 + i6 + i7 + by + i8 + i9 + by1;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth() {

        int i10=39, i11=-45643, i12=43708, i13=-176, i14=-183, i15=1;
        short s1=-23627;
        float f=2.470F;

        sMeth(i10, -1, Test.instanceCount);
        Test.instanceCount = i10;
        i10 -= (int)1.685F;
        Test.instanceCount = i10;
        i10 *= (int)Test.dFld;
        i11 = 1;
        while (++i11 < 159) {
            Test.bFld = Test.bFld;
            if (Test.bFld) {
                for (i12 = 10; i12 > 1; i12 -= 3) {
                    i13 += i12;
                    for (i14 = 4; i14 > 1; --i14) {
                        s1 += (short)i10;
                        i15 -= (int)f;
                        i13 >>= (int)Test.instanceCount;
                        Test.iArrFld = Test.iArrFld;
                    }
                }
                vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + s1 + Float.floatToIntBits(f);
                return;
            } else if (Test.bFld) {
                i15 += (i11 ^ (long)f);
            }
        }
        vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + s1 + Float.floatToIntBits(f);
    }

    public static void vSmallMeth(short s) {

        int i16=7923;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4134919271540330251L);

        vMeth();
        lArr[(i16 >>> 1) % N] += Test.byFld;
        vSmallMeth_check_sum += s + i16 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        double d=-13.17846;
        int i1=-31353, i17=248, i18=-3, i19=8, i20=6, i21=-7, i22=26635, i23=-189, i24=-38464, i25=-5759, i26=215,
            i27=2, iArr[]=new int[N];
        short s2=11554;
        float f1=48.226F;

        FuzzerUtils.init(iArr, -44681);

        for (int i : iArr) {
            for (d = 63; d > 1; d--) {
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth((short)(29465));
            }
            i1 += i1;
            for (i17 = 1; i17 < 63; i17++) {
                i += (i17 | i17);
                s2 = (short)f1;
                for (i19 = 1; i19 < 2; i19++) {
                    i18 -= i19;
                    Test.dFld = 10.454F;
                    i20 = i17;
                }
                for (i21 = i17; i21 < 2; i21++) {
                    i1 *= 11078;
                    i22 >>= i22;
                    f1 = i19;
                }
            }
        }
        i22 -= (int)Test.instanceCount;
        i23 = 173;
        do {
            for (i24 = 1; i24 < 145; ++i24) {
                i1 *= (int)f1;
                i20 |= i25;
                f1 -= i20;
                Test.instanceCount += (long)(2.556F + (i24 * i24));
                i25 = i25;
                for (i26 = i23; i26 < 2; i26++) {
                    i1 |= i18;
                    switch ((i26 % 1) + 104) {
                    case 104:
                        Test.iArrFld[i23 - 1][i23 + 1] |= 156;
                    }
                    i25 += (i26 + i17);
                }
                if (Test.bFld) break;
            }
        } while (--i23 > 0);
        i22 = i27;

        FuzzerUtils.out.println("d i1 i17 = " + Double.doubleToLongBits(d) + "," + i1 + "," + i17);
        FuzzerUtils.out.println("i18 s2 f1 = " + i18 + "," + s2 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.dFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld Test.iArrFld = " + Test.byFld + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  sMeth ->  sMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
