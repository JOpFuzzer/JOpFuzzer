// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=238249371961436384L;
    public int iFld=-7;
    public static double dFld=-115.97937;
    public static float fFld=-123.901F;
    public int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.101027);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3) {

        int i4=-170, i5=-6, i6=64447, i7=-40020, i8=-29, iArr[]=new int[N];
        short s=-22432;
        float f1=-103.562F;

        FuzzerUtils.init(iArr, -239);

        switch (((8 >>> 1) % 1) + 31) {
        case 31:
            for (i4 = 325; i4 > 5; --i4) {
                for (i6 = i4; i6 < 5; ++i6) {
                    boolean b=true;
                    i7 -= s;
                    Test.dFld += i3;
                    b = b;
                    Test.instanceCount -= -1;
                    Test.dFld *= i3;
                }
            }
            Test.instanceCount += -10;
            i7 = (int)Test.dFld;
            break;
        }
        iArr = iArr;
        iArr[(i7 >>> 1) % N] += i4;
        i8 = 1;
        while (++i8 < 156) {
            iArr[i8 - 1] -= (int)f1;
            i3 = i6;
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + s + i8 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(double d1, int i2) {

        int i9=50476, i10=42, i11=-3;
        boolean b1=true;

        vMeth(i2);
        i2 += i2;
        i2 = i2;
        i2 += (int)Test.instanceCount;
        d1 += i2;
        i2 -= -27185;
        for (i9 = 5; i9 < 133; i9 += 2) {
            Test.instanceCount += i2;
            i11 = 1;
            while (++i11 < 24) {
                Test.instanceCount += (((i11 * i2) + Test.instanceCount) - Test.instanceCount);
                i2 = (int)-1932518476L;
                i2 %= (int)(i11 | 1);
                if (b1) continue;
                if (i9 != 0) {
                }
                Test.fFld = 58198;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i2 + i9 + i10 + i11 + (b1 ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(byte by1) {

        float f=0.234F, f2=-1.441F, f3=115.80F;
        int i1=41066, i12=-51277, i13=13, i14=143, i15=1, i16=80, i17=-33562, iArr1[][]=new int[N][N];
        double d=1.100044, dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr1, -10708);
        FuzzerUtils.init(dArr, -4.97103);

        f = (Math.abs((int)(i1 - d)) - iMeth1(Test.dFld, i1));
        for (f2 = 140; f2 > 3; --f2) {
            if (i1 != 0) {
            }
            for (i13 = 1; i13 < 11; ++i13) {
                for (f3 = 2; f3 > 1; --f3) {
                    i12 >>>= -43;
                    iArr1[(int)(f3 + 1)][(int)(f3 - 1)] = (int)Test.instanceCount;
                    Test.instanceCount += (long)(((f3 * i15) + by1) - i12);
                    i12 >>= i13;
                    i14 = -2;
                }
            }
            dArr[(int)(f2)][(int)(f2 - 1)] -= i15;
            iArr1[(int)(f2)][(int)(f2 - 1)] >>= -43;
            for (i16 = 11; i16 > 1; i16--) {
                int i18=42;
                try {
                    i12 = (i14 / i17);
                    i12 = (i18 / iArr1[(int)(f2 - 1)][(int)(f2)]);
                    i12 = (1917639049 / i15);
                } catch (ArithmeticException a_e) {}
                Test.fFld = i12;
            }
        }
        long meth_res = by1 + Float.floatToIntBits(f) + i1 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) +
            i12 + i13 + i14 + Float.floatToIntBits(f3) + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by=65;
        int i=1, i19=9, i20=-248, i21=-24873, i22=-6;
        long l=1L, l1=-25487L;
        short s1=25149;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 57.851F);

        by = (byte)iFld;
        i = 1;
        do {
            iFld = (int)((iFld--) - ((1914065846322078179L * iMeth(by)) + iFld));
            Test.instanceCount ^= i;
            for (l = 2; 178 > l; ++l) {
                for (i20 = 1; i20 < 2; i20++) {
                    Test.instanceCount *= i19;
                    Test.dFld -= s1;
                    iArrFld[(int)(l)] |= 3;
                    Test.dArrFld[(int)(l)] = i19;
                    Test.dFld = -8;
                    iArrFld[i - 1] *= by;
                    i21 = i20;
                    i19 ^= i20;
                    i19 = -12558;
                    fArr[i20] -= i;
                }
                for (l1 = 1; 2 > l1; ++l1) {
                    Test.instanceCount *= iFld;
                    switch (((i22 >>> 1) % 2) + 67) {
                    case 67:
                        Test.fFld += (l1 * l1);
                        iArrFld[(int)(l1 + 1)] >>>= 8;
                        break;
                    case 68:
                        Test.instanceCount >>= -5;
                        i21 += (int)Test.fFld;
                        Test.instanceCount -= i21;
                        Test.dArrFld[(int)(l1 - 1)] = 175;
                        break;
                    }
                    Test.dFld += 7;
                }
                Test.instanceCount += l;
            }
            Test.instanceCount += i;
            iArrFld[i] >>= i20;
            i19 += iFld;
        } while (++i < 141);

        FuzzerUtils.out.println("by i l = " + by + "," + i + "," + l);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("s1 l1 i22 = " + s1 + "," + l1 + "," + i22);
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld iArrFld Test.dArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
