// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-85L;
    public static float fFld=77.562F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10132);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public void vMeth(int i, int i1, int i2) {

        int i3=-185, i4=0;
        boolean b=true;

        Test.iArrFld[(i2 >>> 1) % N] >>>= Integer.reverseBytes(Test.iArrFld[(i2 >>> 1) % N] -= (0 + (~(i2 + i))));
        i2 = Math.min(i = i1, Integer.reverseBytes((int)(i - Test.instanceCount)));
        for (i3 = 10; i3 < 269; i3++) {
            if (b) continue;
            Test.instanceCount >>>= (((Test.instanceCount - -203) - Test.instanceCount) - (--i1));
            i1 += i3;
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + (b ? 1 : 0);
    }

    public static void vMeth2(boolean b2, int i7) {

        int i8=-10, i9=-47, i10=39, i11=-29827;
        short s=3433;
        double d=0.19634, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.110872);

        for (i8 = 5; i8 < 337; i8++) {
            i7 += i8;
            i7 = i9;
            Test.fFld += i7;
            s *= (short)d;
            i7 += 12;
            Test.fFld += (i8 * i8);
            Test.instanceCount = i7;
            switch (((i9 >>> 1) % 1) + 31) {
            case 31:
                i9 += (i8 * i8);
                for (i10 = 1; i10 < 5; ++i10) {
                    dArr[i10 - 1] *= i8;
                    i11 = (int)Test.instanceCount;
                    Test.iArrFld = Test.iArrFld;
                    if (i8 != 0) {
                        vMeth2_check_sum += (b2 ? 1 : 0) + i7 + i8 + i9 + s + Double.doubleToLongBits(d) + i10 + i11 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                }
                break;
            default:
                i9 += (i8 * i8);
            }
        }
        vMeth2_check_sum += (b2 ? 1 : 0) + i7 + i8 + i9 + s + Double.doubleToLongBits(d) + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i6) {

        boolean b3=false;
        double d1=-66.12831;
        int i12=-204, i13=-10, i14=34842, iArr[][]=new int[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -60963);
        FuzzerUtils.init(sArr, (short)-3896);

        vMeth2(b3, i6);
        if (b3) {
            d1 = 1;
            do {
                Test.iArrFld[(int)(d1)] = -13;
                iArr = FuzzerUtils.int2array(N, (int)-104);
            } while (++d1 < 122);
            i12 = 1;
            while (++i12 < 261) {
                Test.fFld += i12;
                for (i13 = 1; 6 > i13; ++i13) {
                    i6 = i13;
                    i14 ^= (int)Test.instanceCount;
                }
                i14 |= (int)Test.instanceCount;
                i6 -= (int)Test.instanceCount;
                Test.instanceCount -= (long)d1;
                Test.fFld += (65157 + (i12 * i12));
                sArr[i12] = (short)i14;
            }
        } else {
            i14 += (int)Test.fFld;
        }
        vMeth1_check_sum += i6 + (b3 ? 1 : 0) + Double.doubleToLongBits(d1) + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public static long lMeth(boolean b1) {

        int i15=55, i16=2, i17=-11, i18=-7, i19=1, i20=-239;
        double d2=-1.48251;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -1989334479653459597L);

        vMeth1(i15);
        i15 += (int)Test.instanceCount;
        i15 *= i15;
        lArr[(10249 >>> 1) % N] += 87;
        for (i16 = 281; i16 > 1; i16 -= 2) {
            i17 = (int)-1.834F;
            for (i18 = 11; i18 > 1; --i18) {
                i17 += (((i18 * Test.instanceCount) + i17) - i17);
            }
        }
        i17 = i18;
        i20 = 1;
        do {
            if (b1) {
                i17 = i16;
                d2 = 1;
                while (++d2 < 20) {
                    Test.instanceCount += (long)d2;
                    Test.iArrFld[(int)(d2)] = i17;
                }
            } else if (false) {
                i17 = i20;
            } else {
                i19 = i17;
            }
        } while ((i20 += 2) < 154);
        long meth_res = (b1 ? 1 : 0) + i15 + i16 + i17 + i18 + i19 + i20 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i5=-119;

        vMeth(i5 += ((--i5) - (--i5)), (int)(Test.instanceCount - (-(Test.instanceCount++))), i5 = Test.iArrFld[(i5 >>>
            1) % N]);
        Test.fFld -= lMeth(false);

        FuzzerUtils.out.println("i5 = " + i5);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iArrFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
