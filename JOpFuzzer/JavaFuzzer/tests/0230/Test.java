// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=34L;
    public boolean bFld=true;
    public static double dFld=-81.60941;
    public byte byFld=-16;

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, int i8, int i9) {

        int i11=-45, i12=4, i13=210, i14=204, iArr1[]=new int[N];
        short s=19055;
        boolean b=true;
        byte by=-120;

        FuzzerUtils.init(iArr1, 10);

        i9 = 179;
        i9 = i7;
        for (int i10 : iArr1) {
            Test.instanceCount <<= i10;
            for (i11 = 1; i11 < 4; i11++) {
                try {
                    i12 = (-1661909341 / iArr1[i11]);
                    iArr1[i11 - 1] = (-167 / iArr1[i11 - 1]);
                    iArr1[i11 - 1] = (-5068 / i10);
                } catch (ArithmeticException a_e) {}
                iArr1[i11 + 1] = -47019;
                s <<= (short)Test.instanceCount;
                for (i13 = 2; i13 > 1; i13--) {
                    if (false) {
                        if (b) continue;
                    } else {
                        Test.instanceCount /= (i12 | 1);
                        i12 -= i11;
                    }
                    i10 -= i13;
                    i7 -= by;
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i11 + i12 + s + i13 + i14 + (b ? 1 : 0) + by + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i6=-9159;
        double d=-2.116129;

        i6 <<= iMeth(i6, i6, i6);
        i6 = (int)d;
        vMeth_check_sum += i6 + Double.doubleToLongBits(d);
    }

    public static long lMeth() {

        int i15=-693, i16=5, i17=-35096, i18=149, i19=-142, i20=17545, iArr2[]=new int[N];
        float f=2.985F, fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 1.668F);
        FuzzerUtils.init(iArr2, 14);
        FuzzerUtils.init(lArr1, -15L);

        vMeth();
        i15 = (int)Test.instanceCount;
        Test.instanceCount >>>= Test.instanceCount;
        fArr[(44272 >>> 1) % N] += i15;
        iArr2[(i15 >>> 1) % N] = i15;
        i16 = 1;
        do {
            switch (((i16 >>> 1) % 7) + 19) {
            case 19:
                for (i17 = 1; 5 > i17; ++i17) {
                    Test.instanceCount -= i18;
                    Test.instanceCount += i17;
                    i15 -= 5;
                    lArr1[i17] = (long)f;
                    for (i19 = 1; i19 < 2; i19++) {
                        double d1=-100.73001;
                        i15 -= i18;
                        d1 = Test.instanceCount;
                    }
                }
            case 20:
                i18 += (32387 + (i16 * i16));
            case 21:
                i20 += (((i16 * i19) + Test.instanceCount) - f);
                break;
            case 22:
                fArr[i16 + 1] += 14L;
                break;
            case 23:
                Test.dFld += f;
                break;
            case 24:
                i15 += (((i16 * Test.instanceCount) + i17) - i19);
            case 25:
                Test.instanceCount += (i16 * f);
            default:
                i20 += (i16 * i18);
            }
        } while (++i16 < 332);
        long meth_res = i15 + i16 + i17 + i18 + Float.floatToIntBits(f) + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=5467, i1=10, i2=67, i3=7, i5=-6205, i22=105, i23=-22220, i24=33744, i25=-11, iArr[]=new int[N];
        short s1=31447;
        boolean bArr[][]=new boolean[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, -11L);
        FuzzerUtils.init(iArr, 0);

        i = 347;
        do {
            bFld = (bArr[i + 1][i + 1] = (bFld = bArr[i + 1][i - 1]));
            i1 += i;
            for (i2 = 4; i2 < 73; i2++) {
                int i4=-54650;
                float f1=96.394F;
                i1 >>= -46954;
                i3 *= (int)lArr[i2 + 1];
                try {
                    i4 = (iArr[i - 1] / i1);
                    i1 = (-46 / i4);
                    i4 = (i3 % i2);
                } catch (ArithmeticException a_e) {}
                i3 += (int)Test.instanceCount;
                switch ((i % 10) + 93) {
                case 93:
                    i5 = 1;
                    while (++i5 < 2) {
                        i4 = (3 - (++i1));
                        i1 >>>= (int)((lMeth() << s1) + i5);
                        i4 *= i1;
                    }
                    break;
                case 94:
                case 95:
                    Test.instanceCount += (long)f1;
                    byFld += (byte)i2;
                    i3 >>>= i2;
                    iArr[i + 1] += i2;
                case 96:
                    f1 += i2;
                    for (i22 = 1; i22 < 2; i22++) {
                        i23 += (i22 ^ i23);
                        iArr[i2 - 1] = (int)Test.instanceCount;
                    }
                    Test.dFld = f1;
                    s1 += byFld;
                    break;
                case 97:
                    i3 += (i2 ^ Test.instanceCount);
                case 98:
                    i1 >>= 11;
                    Test.instanceCount *= 30285;
                    iArr[i] &= (int)-412335939590753524L;
                    break;
                case 99:
                case 100:
                    for (i24 = 1; i24 < 2; ++i24) {
                        Test.instanceCount %= (i4 | 1);
                        i23 = 12740;
                    }
                case 101:
                    i25 -= byFld;
                case 102:
                }
            }
        } while (--i > 0);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i5 s1 = " + i3 + "," + i5 + "," + s1);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 bArr lArr = " + i25 + "," + FuzzerUtils.checkSum(bArr) + "," +
            FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount bFld Test.dFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("byFld = " + byFld);

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
