// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1889678037L;
    public int iFld=54919;
    public static volatile boolean bFld=true;
    public static int iFld1=61737;
    public static float fFld=117.313F;
    public double dArrFld[][]=new double[N][N];

    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i4, double d1) {

        int i5=-10, i6=30113, i7=6, i8=42, iArr1[]=new int[N];
        float f1=0.390F;

        FuzzerUtils.init(iArr1, 7);

        i4 = (int)Test.instanceCount;
        i5 = 1;
        do {
            i4 += i4;
            i4 += (((i5 * f1) + i5) - i5);
            i6 = 9;
            do {
                iArr1[i5 + 1] += (int)-5993505071098600376L;
                i4 = i4;
                for (i7 = 1; i7 < 1; i7++) {
                    Test.instanceCount += Test.instanceCount;
                    i8 += i6;
                }
                d1 *= i6;
                i8 = i6;
                i8 = i6;
                f1 -= 1543441713L;
            } while (--i6 > 0);
            i8 = (int)f1;
        } while (++i5 < 173);
        vMeth1_check_sum += l1 + i4 + Double.doubleToLongBits(d1) + i5 + Float.floatToIntBits(f1) + i6 + i7 + i8 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, int i1, int i2) {

        float f=-58.193F;
        int i3=4, i10=30018, i11=-36402, i12=25509, i13=-27062, i14=-4, i15=134;
        double d2=2.53377;
        boolean b1=true;
        long lArr[]=new long[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(lArr, 13L);
        FuzzerUtils.init(sArr, (short)10744);

        lArr[(i2 >>> 1) % N] += (long)(++f);
        i3 = 1;
        do {
            int i9=-184;
            vMeth1(l, i9, d2);
            i9 += i3;
            i2 += (int)Test.instanceCount;
            for (i10 = 1; i10 < 5; ++i10) {
                i2 -= i1;
            }
            for (i12 = 1; i12 < 5; i12++) {
                i1 = (int)Test.instanceCount;
            }
            if (b1) break;
            for (i14 = i3; 5 > i14; ++i14) {
                i9 = (int)f;
                sArr[i3][i14] <<= (short)i13;
            }
        } while (++i3 < 374);
        i1 >>= i12;
        i1 = (int)l;
        vMeth_check_sum += l + i1 + i2 + Float.floatToIntBits(f) + i3 + Double.doubleToLongBits(d2) + i10 + i11 + i12 +
            i13 + (b1 ? 1 : 0) + i14 + i15 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
    }

    public short sMeth() {

        int i16=140, i17=-9984, i18=-93, i19=-190, i20=-9, i21=-4, i22=4918;
        float f2=81.804F;
        byte by=-62;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -92L);

        vMeth(Test.instanceCount, iFld, iFld);
        iFld = (int)2701634562L;
        for (i16 = 397; i16 > 24; i16 -= 3) {
            i17 += (((i16 * iFld) + i16) - f2);
            for (i18 = 13; i18 > i16; i18 -= 3) {
                if (iFld != 0) {
                }
                iFld += (i18 - Test.instanceCount);
                Test.instanceCount = by;
            }
            if (i17 != 0) {
            }
            switch ((i16 % 7) + 96) {
            case 96:
                iFld <<= (int)Test.instanceCount;
                break;
            case 97:
                if (Test.bFld) break;
                for (i20 = 1; i20 < 13; ++i20) {
                    lArr1[i20 + 1] -= iFld;
                    i21 = by;
                }
                break;
            case 98:
                f2 += i16;
                break;
            case 99:
                i22 = (int)Test.instanceCount;
                break;
            case 100:
                i19 = 40738;
            case 101:
                Test.bFld = Test.bFld;
            case 102:
                by += (byte)i16;
            default:
                i17 -= (int)Test.instanceCount;
            }
        }
        long meth_res = i16 + i17 + Float.floatToIntBits(f2) + i18 + i19 + by + i20 + i21 + i22 +
            FuzzerUtils.checkSum(lArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b=false;
        double d=0.113374, d3=-51.70413;
        int i=14, i23=1, i24=254, i25=8778, i26=13, i27=-35807, i28=-5, i29=-30239, i30=-236, i31=-29026, i32=7,
            iArr[]=new int[N], iArr2[]=new int[N];
        byte by1=44;
        short s=-15558;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -45292);
        FuzzerUtils.init(iArr2, -65502);
        FuzzerUtils.init(fArr, 1.409F);

        b = (((iFld + Test.instanceCount) * (1 - (Test.instanceCount * 61251))) < dArrFld[(iFld >>> 1) % N][(iFld >>>
            1) % N]);
        for (d = 9; d < 167; ++d) {
            iArr[(int)(d + 1)] -= (int)(Math.min(Test.instanceCount, i - iFld) + sMeth());
            try {
                i = (8899 % i);
                iFld = (-65 % iFld);
                iArr[(int)(d - 1)] = (i / i);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount += (long)d;
            Test.instanceCount = Test.iFld1;
            i = by1;
        }
        for (i23 = 5; i23 < 324; ++i23) {
            Test.instanceCount *= i24;
            Test.iFld1 += (((i23 * Test.instanceCount) + iFld) - Test.instanceCount);
            i24 = (int)Test.instanceCount;
            i += i23;
        }
        if (b) {
            for (i25 = 20; i25 < 321; i25++) {
                for (i27 = 2; i27 < 84; i27++) {
                    switch ((i27 % 9) + 53) {
                    case 53:
                        for (i29 = 1; i29 < 2; i29++) {
                            dArrFld[i25][i25 + 1] = 54730L;
                        }
                        i = i26;
                        i30 -= i;
                        break;
                    case 54:
                        switch (((i26 >>> 1) % 2) + 18) {
                        case 18:
                            Test.fFld *= i30;
                            for (i31 = 1; i31 < 2; i31 += 2) {
                                i24 = (int)Test.instanceCount;
                                d3 += 92L;
                                Test.instanceCount = -11;
                            }
                            break;
                        case 19:
                            by1 = (byte)i27;
                            i28 += i27;
                            iFld = i28;
                            break;
                        }
                        i = -7164;
                        break;
                    case 55:
                        b = Test.bFld;
                        break;
                    case 56:
                        Test.instanceCount += (i27 + i25);
                        break;
                    case 57:
                        i32 = i27;
                        break;
                    case 58:
                        s += (short)i27;
                    case 59:
                        Test.instanceCount -= i32;
                        break;
                    case 60:
                        iArr2 = iArr2;
                        break;
                    case 61:
                        Test.instanceCount += (((i27 * i25) + i25) - Test.instanceCount);
                        break;
                    }
                }
            }
        } else if (false) {
            i26 = i26;
        } else {
            iArr[(i26 >>> 1) % N] += 4;
        }

        FuzzerUtils.out.println("b d i = " + (b ? 1 : 0) + "," + Double.doubleToLongBits(d) + "," + i);
        FuzzerUtils.out.println("by1 i23 i24 = " + by1 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 d3 = " + i31 + "," + i32 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("s iArr iArr2 = " + s + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.bFld = " + Test.instanceCount + "," + iFld + "," +
            (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld1 Test.fFld dArrFld = " + Test.iFld1 + "," + Float.floatToIntBits(Test.fFld)
            + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
