// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-17L;
    public static long lFld=-60820L;
    public static float fFld=-43.92F;
    public static byte byFld=79;
    public static boolean bFld=true;
    public volatile int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-3693);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i4=-174, i5=179, iArr[]=new int[N];
        double d1=-1.65190;

        FuzzerUtils.init(iArr, 14);

        iArr[(i4 >>> 1) % N] += (int)Test.lFld;
        d1 = Test.fFld;
        i5 = 1;
        do {
            i4 &= (int)7757999263595004181L;
        } while (++i5 < 388);
        vMeth1_check_sum += i4 + Double.doubleToLongBits(d1) + i5 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i2, int i3) {

        int i6=49, i7=-244, i8=-6, iArr1[]=new int[N];
        boolean b=false;
        double d2=89.74759;

        FuzzerUtils.init(iArr1, -12);

        vMeth1();
        Test.fFld += i3;
        i6 = 1;
        do {
            if (b) break;
            Test.lFld += (i6 * i6);
            i2 = (int)d2;
            iArr1[i6 - 1] *= -48130;
            i3 += i2;
            Test.instanceCount = i2;
            b = b;
            iArr1[i6 + 1] -= i2;
            switch ((i6 % 3) + 71) {
            case 71:
            case 72:
                for (i7 = i6; 5 > i7; ++i7) {
                    Test.byFld += (byte)(((i7 * i2) + i7) - i2);
                    iArr1 = iArr1;
                }
                break;
            case 73:
                d2 -= d2;
            }
        } while (++i6 < 369);
        vMeth_check_sum += i2 + i3 + i6 + (b ? 1 : 0) + Double.doubleToLongBits(d2) + i7 + i8 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth() {

        int i9=233, i10=8, i11=-81, i12=2, i13=8, i14=12, i15=-147, iArr2[]=new int[N];
        float f=70.411F;
        boolean b1=true;

        FuzzerUtils.init(iArr2, 30864);

        vMeth(i9, i9);
        for (i10 = 17; 287 > i10; i10++) {
            for (i12 = 1; i12 < 6; ++i12) {
                if (i12 != 0) {
                }
                for (i14 = 1; i14 < 2; i14++) {
                    Test.instanceCount += (i14 | Test.lFld);
                    iArr2[i14 + 1] *= i9;
                    i13 += (((i14 * i13) + i11) - i15);
                }
                i15 += (i12 * i12);
                Test.instanceCount = i14;
            }
            f = 1;
            while (++f < 6) {
                i11 <<= i15;
            }
            b1 = b1;
            iArr2[i10] += (int)Test.instanceCount;
            Test.instanceCount = Test.lFld;
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=14, i1=190, i16=0, i17=-54980, i18=-2, i19=52624;
        double d=-42.63561, d3=55.119677;
        short s=28616;

        for (i = 7; 238 > i; ++i) {
            i1 = (int)Test.lFld;
            Test.lFld = (long)(Math.sqrt(-iArrFld[i - 1]) - i1);
            i1 -= (int)(((-2 - (i1 + Test.instanceCount)) + (i1 + i)) + (iArrFld[i]++));
            d += iMeth();
            Test.lFld = i1;
            for (d3 = 109; d3 > 6; d3--) {
                for (i17 = 1; i17 < 2; ++i17) {
                    iArrFld[(int)(d3 + 1)] >>= (int)Test.instanceCount;
                    i16 = s;
                    i18 -= i18;
                    i18 = s;
                    switch ((int)((d3 % 10) + 116)) {
                    case 116:
                        Test.instanceCount *= Test.instanceCount;
                        iArrFld[i + 1] -= 10;
                        break;
                    case 117:
                        i18 += (i17 - i);
                        break;
                    case 118:
                        Test.lFld += (-927 + (i17 * i17));
                    case 119:
                        i16 = i18;
                        break;
                    case 120:
                    case 121:
                        Test.sArrFld[i17 + 1] -= (short)i17;
                        break;
                    case 122:
                        Test.fFld += i17;
                        i1 *= Test.byFld;
                        iArrFld[(int)(d3 + 1)] = i17;
                        i19 -= i18;
                        break;
                    case 123:
                        d = 0;
                        Test.fFld += Test.fFld;
                        i18 -= i1;
                        if (Test.bFld) continue;
                        break;
                    case 124:
                        i18 %= 176;
                        Test.fFld /= (i17 | 1);
                    case 125:
                    default:
                        Test.instanceCount += Test.byFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("d3 i16 i17 = " + Double.doubleToLongBits(d3) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 s i19 = " + i18 + "," + s + "," + i19);

        FuzzerUtils.out.println("Test.instanceCount Test.lFld Test.fFld = " + Test.instanceCount + "," + Test.lFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld Test.bFld iArrFld = " + Test.byFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.sArrFld = " + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
