// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-52969L;
    public static boolean bFld=true;
    public volatile int iFld=27367;
    public static int iFld1=8;
    public static long lFld=-59535L;
    public int iFld2=-21051;
    public byte byFld=-12;
    public double dFld=-1.105489;
    public int iArrFld[]=new int[N];

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6) {

        int i7=-44, i8=-14, i9=63, i10=12, i11=-14, i12=-30940, i13=-5, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 14);

        i6 = i6;
        if (false) {
            for (i7 = 13; 364 > i7; i7++) {
                i6 *= i8;
                for (i9 = 1; i9 < 5; i9++) {
                    double d1=-2.74539;
                    d1 += i10;
                }
                i10 *= i6;
                i8 = i6;
                if (true) break;
                iArr[i7 - 1] -= -27136;
                if (true) break;
                i11 = 1;
                do {
                    for (i12 = 1; i12 < 3; ++i12) {
                        Test.instanceCount += (i12 * i12);
                        i10 = -121;
                    }
                } while ((i11 += 2) < 5);
            }
        } else {
            iArr[(i6 >>> 1) % N] = i8;
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i2, int i3, double d) {

        int i4=-195, i5=29371, i14=5461, i15=52878, i16=58591;
        long l=-2784198978L;
        float f=-2.268F;

        for (i4 = 10; i4 < 216; i4++) {
            i5 += Math.min(i3, iMeth(-13));
            if (Test.bFld) {
                for (l = 1; l < 8; ++l) {
                    i3 += (int)l;
                    Test.bFld = Test.bFld;
                    d = i2;
                    i14 += (int)l;
                    for (i15 = 1; i15 < 2; ++i15) {
                        Test.instanceCount += i15;
                        iFld = -64182;
                        if (Test.bFld) continue;
                        f = i4;
                        i5 = (int)d;
                        iFld <<= i3;
                    }
                }
            } else {
                i16 <<= -45790;
            }
        }
        vMeth_check_sum += i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + l + i14 + i15 + i16 +
            Float.floatToIntBits(f);
    }

    public long lMeth(int i1) {

        double d2=-34.24881;
        int i17=-12, i18=187, i20=-26783, i21=-6484, i22=-51854, i23=60064;
        float f1=-1.856F, f2=48.446F;

        vMeth(i1, Test.iFld1, d2);
        for (i17 = 8; i17 < 331; i17 += 3) {
            Test.iFld1 += (((i17 * Test.lFld) + i1) - Test.instanceCount);
            Test.instanceCount += Test.iFld1;
            Test.iFld1 += (i17 - Test.iFld1);
        }
        iArrFld[(-158 >>> 1) % N] -= Test.iFld1;
        f1 = 1;
        while (++f1 < 373) {
            Test.bFld = true;
            Test.iFld1 = (int)f1;
            f2 += (f1 * iFld2);
            try {
                iFld = (i18 / Test.iFld1);
                iFld2 = (i18 % i1);
                iFld2 = (-1102643398 % i17);
            } catch (ArithmeticException a_e) {}
            for (i20 = 1; 5 > i20; ++i20) {
                for (i22 = i20; i22 < 2; ++i22) {
                    iFld2 += (((i22 * i17) + byFld) - f1);
                    i18 = -215;
                }
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d2) + i17 + i18 + Float.floatToIntBits(f1) +
            Float.floatToIntBits(f2) + i20 + i21 + i22 + i23;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=6322, i24=4, i25=-228, i26=6, i27=55204, i28=-23, i29=7, i30=0, i31=17, i32=161;
        float f3=-117.963F, fArr[]=new float[N];
        short s=23800;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(fArr, 2.987F);
        FuzzerUtils.init(lArr, 3L);

        Test.instanceCount = (i += (int)(i + lMeth(i)));
        i24 = 1;
        do {
            iFld -= 5;
            Test.lFld <<= i24;
        } while (++i24 < 268);
        i = (int)f3;
        iArrFld[(i >>> 1) % N] = i24;
        byFld = (byte)Test.instanceCount;
        for (i25 = 5; i25 < 254; ++i25) {
            i = i;
            for (i27 = 101; i27 > 1; --i27) {
                f3 -= i27;
                iArrFld[i27] /= (int)((long)(dFld) | 1);
                fArr[i27] = s;
                for (i29 = 1; i29 < 2; ++i29) {
                    lArr[i25 - 1][i29] >>= Test.instanceCount;
                    i30 = i;
                    Test.iFld1 += (int)(-9L + (i29 * i29));
                    iFld2 *= 25814;
                    i28 -= iFld2;
                    iArrFld[i27] += (int)dFld;
                    f3 /= (i29 | 1);
                    iFld2 += (i29 + byFld);
                }
                iArrFld[(Test.iFld1 >>> 1) % N] = (int)6057940481133273124L;
                for (i31 = 1; i31 < 2; ++i31) {
                    iFld >>= i30;
                    iArrFld[i31] = i24;
                    f3 += (i31 * i31);
                    iFld2 = 7;
                    i = i32;
                    f3 -= i30;
                }
            }
        }

        FuzzerUtils.out.println("i i24 f3 = " + i + "," + i24 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 s i29 = " + i28 + "," + s + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("fArr lArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld iFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0)
            + "," + iFld);
        FuzzerUtils.out.println("Test.iFld1 Test.lFld iFld2 = " + Test.iFld1 + "," + Test.lFld + "," + iFld2);
        FuzzerUtils.out.println("byFld dFld iArrFld = " + byFld + "," + Double.doubleToLongBits(dFld) + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
