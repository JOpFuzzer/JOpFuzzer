// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=42L;
    public static double dFld=2.14864;
    public static boolean bFld=true;
    public static byte byFld=-102;
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -60272L);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i7=13, i8=-13, i9=-6, i10=133, i11=-165;
        short s=25110;
        float f1=-4.600F;
        byte by1=-32;

        for (i7 = 2; 122 > i7; i7++) {
            if (Test.bFld) break;
            for (i9 = 1; i9 < 13; i9++) {
                s += (short)(11287 + (i9 * i9));
                i10 += i8;
                i11 = 2;
                do {
                    i8 = i11;
                    f1 += i11;
                    Test.lArrFld[i7] = i7;
                    f1 -= by1;
                    i8 = i11;
                    i10 = (int)23.863F;
                    Test.dFld = f1;
                    s += (short)(i11 - Test.instanceCount);
                } while ((i11 -= 2) > 0);
            }
            i8 += (i7 ^ i8);
        }
        long meth_res = i7 + i8 + i9 + i10 + s + i11 + Float.floatToIntBits(f1) + by1;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i6, byte by) {

        int i12=32, i13=-28745, i14=13019, i15=6, i16=247, i17=-180, iArr[]=new int[N];
        float f2=2.673F;

        FuzzerUtils.init(iArr, -47771);

        Test.dFld = ((iMeth1() - -6) - i6);
        i6 -= -6820;
        for (i12 = 16; i12 < 314; i12++) {
            for (i14 = 1; i14 < 6; ++i14) {
                i15 += (((i14 * Test.instanceCount) + i6) - i14);
                Test.instanceCount += (i14 - i14);
            }
            Test.instanceCount -= i14;
            for (i16 = 1; i16 < 6; i16++) {
                i13 = i15;
            }
            iArr[i12] *= i16;
            i6 += i13;
            f2 = (float)Test.dFld;
            if (Test.bFld) break;
            i15 *= (int)Test.instanceCount;
            Test.lArrFld[i12 + 1] += i15;
        }
        long meth_res = i6 + by + i12 + i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(double d1, float f) {

        int i5=8, i18=-112, i19=7, i20=50446, iArr1[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -19559);
        FuzzerUtils.init(fArr, 1.158F);

        i5 = iMeth(i5, Test.byFld);
        i5 &= i5;
        i5 *= i5;
        i5 = i5;
        i18 = 336;
        while ((i18 -= 3) > 0) {
            switch (((i18 % 2) * 5) + 87) {
            case 95:
                i5 |= (int)Test.instanceCount;
                break;
            case 97:
                try {
                    iArr1[i18 + 1] = (iArr1[i18] / -125);
                    i5 = (iArr1[i18 + 1] / -14616);
                    i5 = (i5 / i5);
                } catch (ArithmeticException a_e) {}
                fArr[i18 - 1] -= i18;
                Test.dFld -= 5;
                break;
            }
            Test.instanceCount = i18;
        }
        for (i19 = 6; i19 < 165; i19++) {
            Test.instanceCount <<= i20;
            Test.instanceCount >>= i18;
            i5 *= -176;
        }
        long meth_res = Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i5 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=50142, i1=-222, i2=89, i3=0, i4=45238, i22=65374;
        double d=-105.84657, d2=21.70332;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 78.244F);

        for (i = 2; i < 133; i++) {
            i1 -= (int)Math.sqrt(Test.dFld);
            for (i2 = i; i2 < 191; i2++) {
                switch ((i % 3) + 63) {
                case 63:
                    for (d = 1; 1 < d; d--) {
                        float f3=1.210F;
                        int i21=-31274;
                        Test.dFld = (lMeth(d, f3) + i1);
                        f3 += (float)(d * i);
                        i4 *= -20943;
                        switch (((i2 % 5) * 5) + 51) {
                        case 55:
                            f3 = Test.instanceCount;
                        case 72:
                            Test.instanceCount = Test.instanceCount;
                            i1 = i;
                            i3 -= i3;
                            iArrFld[(int)(d + 1)] -= (int)f3;
                            break;
                        case 66:
                            if (Test.bFld) break;
                            Test.bFld = Test.bFld;
                            Test.bFld = Test.bFld;
                            Test.instanceCount += (long)d;
                            break;
                        case 56:
                        case 62:
                            i3 = i1;
                            switch (((i2 % 7) * 5) + 41) {
                            case 54:
                                f3 = i;
                                f3 += (float)(((d * i2) + Test.instanceCount) - i3);
                                iArrFld[(int)(d)] += i2;
                                d2 = 0;
                                break;
                            case 72:
                                i1 <<= i3;
                            case 50:
                                i4 += i21;
                                iArrFld[i] += i;
                                break;
                            case 70:
                                fArr1[i] += i3;
                                i21 -= i2;
                                i3 = (int)f3;
                                break;
                            case 71:
                            case 74:
                                i21 = i3;
                                break;
                            case 52:
                                i4 += (int)(d * d);
                            default:
                                i21 += (int)d;
                            }
                            break;
                        }
                    }
                case 64:
                    i22 = i;
                case 65:
                    Test.lArrFld[i2 - 1] += 135L;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 d i4 = " + i3 + "," + Double.doubleToLongBits(d) + "," + i4);
        FuzzerUtils.out.println("d2 i22 fArr1 = " + Double.doubleToLongBits(d2) + "," + i22 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld Test.lArrFld iArrFld = " + Test.byFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
