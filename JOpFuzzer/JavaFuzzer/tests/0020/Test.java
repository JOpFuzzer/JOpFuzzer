// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=5265L;
    public static float fFld=-1.744F;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -46382);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i10, short s) {

        int i11=-1, i12=244, i13=130, iArr1[][]=new int[N][N];
        double d1=0.117951;
        float f=-2.972F;

        FuzzerUtils.init(iArr1, -5);

        i11 = 1;
        while (++i11 < 167) {
            Test.iArrFld[i11] += i11;
            i12 = 9;
            do {
                Test.instanceCount += i11;
                Test.instanceCount += (long)d1;
                for (f = 1; f < 1; f++) {
                    Test.iArrFld[i11] = i13;
                    i10 >>= i10;
                    i10 += i11;
                    Test.instanceCount += (long)f;
                    i13 = s;
                    i10 = i11;
                    i10 *= i10;
                }
                i10 = i11;
                iArr1 = iArr1;
            } while (--i12 > 0);
        }
        long meth_res = i10 + s + i11 + i12 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i13 +
            FuzzerUtils.checkSum(iArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth1(int i6, int i7, long l) {

        int i8=-9, i9=-34071, i14=54730, i15=-17262, i16=-56086, i17=22786, iArr[]=new int[N];
        double d=-125.17043, dArr[]=new double[N];
        byte by=-55;
        boolean b=false, bArr[]=new boolean[N];
        short s1=4031;
        long l1=199L;

        FuzzerUtils.init(iArr, -246);
        FuzzerUtils.init(dArr, 69.38056);
        FuzzerUtils.init(bArr, true);

        for (i8 = 6; 138 > i8; i8 += 2) {
            if (b && (b = bArr[i8])) {
                i9 += (11 + (i8 * i8));
                iArr[i8] |= (i7 / ((i7--) | 1));
                if (((long)((dArr[i8 - 1]--) - (i9 + d)) & iArr[i8]) != (++i9)) break;
                by = (byte)(--l);
            }
            i6 += i8;
        }
        b = (((--i6) >= (i7 <<= i9)) == (bArr[(13 >>> 1) % N] = (true || (!bMeth(i6, s1)))));
        i14 = 1;
        while (++i14 < 148) {
            i7 *= (int)l;
            for (i15 = 1; 11 > i15; i15++) {
                i16 |= s1;
                for (l1 = i15; l1 < 2; l1++) {
                    i17 = -146;
                    i6 |= (int)Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + l + i8 + i9 + Double.doubleToLongBits(d) + by + (b ? 1 : 0) + s1 + i14 + i15 +
            i16 + l1 + i17 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth() {

        int i4=1, i5=0, i18=-8, i19=36521, i20=9;
        byte by1=8;
        double d2=-45.15112;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-3873);

        for (i4 = 237; i4 > 1; --i4) {
            i5 += (i4 * i4);
            vMeth1(i5, i18, Test.instanceCount);
            i5 |= i4;
            for (i19 = i4; i19 < 7; i19++) {
                by1 = (byte)i18;
                i18 += i4;
            }
            Test.instanceCount += -194;
            switch (((i4 % 3) * 5) + 33) {
            case 41:
                i20 += i4;
                i18 *= (int)-68.982;
                i18 += (((i4 * i4) + i5) - i18);
            case 40:
                Test.instanceCount += i4;
                sArr[i4] -= (short)i5;
            case 37:
                d2 = i18;
                break;
            default:
                i5 -= (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += i4 + i5 + i18 + i19 + i20 + by1 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=60822, i1=-1, i2=140, i3=-41406, i21=-7, i22=8, i23=859, i24=5, i25=4, i26=1, i27=181, i28=-9,
            iArr2[][]=new int[N][N];
        boolean b1=true;
        byte by2=-117;
        double d3=2.123852, dArr1[]=new double[N];
        short s2=-24122;

        FuzzerUtils.init(iArr2, 55697);
        FuzzerUtils.init(dArr1, -68.6580);

        for (i = 5; 398 > i; i++) {
            for (i2 = i; i2 < 64; ++i2) {
                vMeth();
                i1 >>>= 233;
                i1 *= (int)4073788730L;
                i1 = i;
                if (b1) {
                    i21 = 1;
                    while (++i21 < 1) {
                        fArrFld[i21 + 1] = i2;
                        Test.fFld += (i21 * i21);
                        iArr2 = iArr2;
                        try {
                            i3 = (iArr2[i21 - 1][i2] / i22);
                            i1 = (989387145 / i3);
                            iArr2[i2][i21 + 1] = (-112 % i21);
                        } catch (ArithmeticException a_e) {}
                        i22 -= -12710;
                    }
                }
                Test.iArrFld[i2] *= i;
                i1 = 41014;
                Test.iArrFld[(i3 >>> 1) % N] *= (int)-2.379F;
            }
        }
        i1 >>= 249;
        i1 += i2;
        for (i23 = 378; i23 > 14; i23--) {
            for (i25 = 2; i25 < 69; ++i25) {
                dArr1[i25 - 1] += i2;
                Test.instanceCount = i2;
                i26 += by2;
                i22 *= 4;
                b1 = false;
                for (i27 = i25; 2 > i27; i27++) {
                    d3 = i2;
                    i3 += s2;
                    i28 += s2;
                    s2 += (short)i27;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i21 i22 = " + i3 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("b1 i23 i24 = " + (b1 ? 1 : 0) + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 by2 = " + i25 + "," + i26 + "," + by2);
        FuzzerUtils.out.println("i27 i28 d3 = " + i27 + "," + i28 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("s2 iArr2 dArr1 = " + s2 + "," + FuzzerUtils.checkSum(iArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iArrFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
