// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public static double dFld=-1.5973;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
        FuzzerUtils.init(Test.sArrFld, (short)13974);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i8, float f2, int i9) {

        int i10=-57227, i11=-8, i12=6, i13=12, i14=7, i15=-54257, i16=-3, i17=-1, i18=14636, i19=-11;
        boolean b=false;
        float fArr1[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr1, 115.195F);
        FuzzerUtils.init(byArr, (byte)0);

        for (i10 = 7; i10 < 369; i10 += 3) {
            i12 *= i11;
            for (i13 = 13; i13 > 1; i13--) {
                i15 = 1;
                do {
                    b = false;
                } while (++i15 < 2);
                i9 = i8;
            }
            fArr1 = FuzzerUtils.float1array(N, (float)-33.208F);
            for (i16 = 1; i16 < 13; ++i16) {
                for (i18 = 1; 2 > i18; ++i18) {
                    i9 += i12;
                    i9 = i16;
                    Test.instanceCount <<= Test.instanceCount;
                }
                byArr[i10] = (byte)i13;
                Test.iArrFld[i16 - 1] >>>= i16;
                Test.instanceCount = Test.instanceCount;
            }
        }
        long meth_res = i8 + Float.floatToIntBits(f2) + i9 + i10 + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + i16 +
            i17 + i18 + i19 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i4, long l, int i5) {

        long l1=180L;
        int i6=-8, i7=202, i20=-13, i21=-12, i22=-13, i23=13, i24=-230;
        float f1=37.34F;

        for (l1 = 248; l1 > 7; l1 -= 2) {
            i4 -= (int)43.73422;
            i5 += (int)(((i5 - i4) + (i5 + l1)) - f1);
        }
        i7 = 1;
        do {
            i5 = (int)((lMeth(i6, 69.775F, i5) - i4) * i4);
            for (i20 = 1; i20 < 4; ++i20) {
                Test.dFld = -6;
                for (i22 = 1; i22 < 2; i22++) {
                    i5 = i24;
                    Test.dFld -= -3350048730L;
                    i4 += (i22 - i20);
                    Test.instanceCount >>= i5;
                    Test.instanceCount += i22;
                    i23 += (((i22 * i5) + i6) - i23);
                    Test.sArrFld[i20 - 1] -= (short)f1;
                }
            }
        } while (++i7 < 387);
        vMeth_check_sum += i4 + l + i5 + l1 + i6 + Float.floatToIntBits(f1) + i7 + i20 + i21 + i22 + i23 + i24;
    }

    public static int iMeth(int i3, double d) {

        int i25=1, i26=-5, i27=25709, i28=1509, i29=-72, i30=-108, i31=-25935;
        byte by1=38;
        float f3=0.844F;
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 84L);

        if (b1) {
            vMeth(i3, Test.instanceCount, i3);
            for (i25 = 6; i25 < 151; ++i25) {
                for (i27 = 1; i27 < 11; i27++) {
                    for (i29 = 1; i29 < 2; ++i29) {
                        i3 = 44941;
                    }
                    i26 = by1;
                    Test.instanceCount = Test.instanceCount;
                    i31 = 1;
                    while ((i31 += 2) < 2) {
                        Test.iArrFld[i27] *= (int)Test.instanceCount;
                        f3 = f3;
                        if (b1) {
                            lArr[i25 + 1] = i3;
                        } else if (b1) {
                            i28 += (int)Test.instanceCount;
                        } else if (true) {
                            i28 = (int)Test.instanceCount;
                        }
                    }
                }
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d) + i25 + i26 + i27 + i28 + i29 + i30 + by1 + i31 +
            Float.floatToIntBits(f3) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=136, i1=0, i2=179, i32=20, i33=-14, i34=10, i35=16, i36=7, i37=-2503, i38=-102, i39=80;
        float f=-11.757F, fArr[]=new float[N];
        short s=-22584, s1=18500;
        byte by=36;
        boolean b2=false;
        long lArr1[]=new long[N], lArr2[]=new long[N];

        FuzzerUtils.init(fArr, 49.203F);
        FuzzerUtils.init(lArr1, -2707165064L);
        FuzzerUtils.init(lArr2, 128L);

        i *= (int)(Math.min(--i, i) * ((-7 * f) + s));
        for (i1 = 6; i1 < 137; i1++) {
            fArr[i1] -= (float)(Test.instanceCount * (Test.dFld * i2));
            by += (byte)Short.reverseBytes(s);
            Test.iArrFld[i1 + 1] = ((iMeth(i, 69.100433) * by) + i);
            s1 -= (short)i;
            fArr[i1] -= Test.instanceCount;
        }
        lArr1 = lArr2;
        for (i32 = 364; i32 > 19; i32 -= 3) {
            Test.instanceCount += (i32 | i1);
            for (i34 = i32; i34 < 218; ++i34) {
                i2 = by;
                f += (i34 * i34);
                Test.dFld += i32;
                i33 = (int)Test.dFld;
            }
            switch ((i32 % 6) + 77) {
            case 77:
                i35 &= 63;
                break;
            case 78:
                i33 = -27886;
                f = Test.instanceCount;
            case 79:
                if (b2) {
                    i35 *= (int)Test.instanceCount;
                } else if (b2) {
                    Test.instanceCount *= by;
                    for (i36 = i32; i36 < 218; i36++) {
                        if (b2) {
                            Test.iArrFld[i36 + 1] -= (int)Test.instanceCount;
                        }
                        i *= (int)-1.50175;
                        s += (short)(i36 | i1);
                        for (i38 = 1; i38 < 1; ++i38) {
                            i39 += (i38 * i38);
                            b2 = b2;
                        }
                    }
                } else if (false) {
                    i37 -= i1;
                }
                break;
            case 80:
                i33 = (int)Test.instanceCount;
                break;
            case 81:
                Test.iArrFld[i32] = i38;
            case 82:
                s += by;
                break;
            }
        }

        FuzzerUtils.out.println("i f s = " + i + "," + Float.floatToIntBits(f) + "," + s);
        FuzzerUtils.out.println("i1 i2 by = " + i1 + "," + i2 + "," + by);
        FuzzerUtils.out.println("s1 i32 i33 = " + s1 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 b2 i38 = " + i37 + "," + (b2 ? 1 : 0) + "," + i38);
        FuzzerUtils.out.println("i39 fArr lArr1 = " + i39 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            "," + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("lArr2 = " + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iArrFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.sArrFld = " + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
