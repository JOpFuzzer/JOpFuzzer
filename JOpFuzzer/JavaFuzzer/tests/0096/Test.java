// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public int iFld=-58440;
    public static int iFld1=-5;
    public static boolean bFld=true;
    public static long lFld=-8886492237541337398L;
    public float fArrFld[]=new float[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i6, int i7, int i8) {

        int i9=-1776, i10=-11, i11=-34, i12=-46113, i13=-5, i14=37423, iArr1[]=new int[N];
        short s=-26277;
        double d1=0.68709;
        byte by=-47;

        FuzzerUtils.init(iArr1, -36737);

        for (i9 = 5; i9 < 276; i9++) {
            s = (short)i8;
            for (i11 = 6; i9 < i11; i11 -= 2) {
                try {
                    i8 = (i7 % i11);
                    iArr1[i11 - 1] = (-189 % i9);
                    i6 = (i11 % -113);
                } catch (ArithmeticException a_e) {}
                d1 -= i7;
                for (i13 = i11; i13 < 1; ++i13) {
                    by = (byte)i14;
                    Test.instanceCount += 26041;
                    iArr1[i13 - 1] = 0;
                    i12 += (-163 + (i13 * i13));
                    i14 += i13;
                    try {
                        iArr1[i9] = (iArr1[i11] % i9);
                        iArr1[i11 + 1] = (14 / i11);
                        i6 = (-37646 % i9);
                    } catch (ArithmeticException a_e) {}
                    i10 <<= i14;
                    d1 -= d1;
                    i6 >>= i8;
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + s + i11 + i12 + Double.doubleToLongBits(d1) + i13 + i14 + by +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        float f1=-8.1006F;
        int i15=56614, i16=-88, i17=-10, i18=-3, i19=8, iArr2[]=new int[N];
        double d2=2.126795, dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 0.111178);
        FuzzerUtils.init(iArr2, -31372);

        f1 = fMeth(-17655, Test.iFld1, Test.iFld1);
        for (i15 = 1; i15 < 254; i15++) {
            dArr[(11 >>> 1) % N][i15] += f1;
        }
        Test.instanceCount >>= -12;
        d2 = Test.iFld1;
        switch (((i16 >>> 1) % 1) + 44) {
        case 44:
        default:
            switch ((((59 >>> 1) % 7) * 5) + 47) {
            case 79:
                iArr2[(Test.iFld1 >>> 1) % N] = 0;
                Test.iFld1 *= i15;
            case 80:
                i17 = 1;
                do {
                    Test.iFld1 = (int)Test.instanceCount;
                    Test.iFld1 -= (int)f1;
                } while (++i17 < 269);
                for (i18 = 314; 9 < i18; i18 -= 2) {
                    Test.iFld1 = (int)Test.instanceCount;
                    Test.iFld1 -= -56;
                }
            case 49:
                iArr2[(i16 >>> 1) % N] ^= i18;
                break;
            case 58:
                Test.instanceCount *= 10;
            case 81:
                i19 = 3;
                break;
            case 67:
                Test.instanceCount = Test.iFld1;
            case 62:
                iArr2[(65254 >>> 1) % N] = (int)-5806L;
                break;
            default:
                i19 -= (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i15 + i16 + Double.doubleToLongBits(d2) + i17 + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(int i2, int i3, int i4) {

        int i5=12, i20=-13, i21=-45168, i22=3947, i23=30, iArr3[]=new int[N];
        float f=1.815F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-31);
        FuzzerUtils.init(iArr3, -236);

        i4 = i2;
        i5 = 1;
        while (++i5 < 259) {
            i3 = (int)((long)(i3 + (f = i3)) << (i2 + (i3 + i4)));
            vMeth();
            Test.iFld1 >>= i2;
            Test.iFld1 = i2;
            if (Test.bFld) break;
            Test.instanceCount += i4;
            Test.iFld1 = (int)Test.instanceCount;
        }
        try {
            for (i20 = 5; 372 > i20; ++i20) {
                for (i22 = i20; i22 < 5; i22++) {
                    byArr = byArr;
                    iArr3 = iArr3;
                    i4 += i22;
                }
            }
        }
        catch (NullPointerException exc1) {
            f += f;
        }
        long meth_res = i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i20 + i21 + i22 + i23 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-19.11685;
        int i=24858, i1=-187, i24=-47890, i25=-9, i26=135, i27=-1, i28=-10, iArr[]=new int[N];
        float f2=107.314F;
        byte by1=-118;

        FuzzerUtils.init(iArr, -39722);

        d = (iFld - iArr[(iFld >>> 1) % N]);
        for (i = 6; i < 246; ++i) {
            iMeth(Test.iFld1, i1, -7);
            fArrFld[i - 1] += iFld;
            Test.instanceCount += (i + iFld);
            iFld >>= iFld;
            fArrFld[i - 1] = Test.instanceCount;
            if (Test.bFld) {
                i1 -= iFld;
                if (false) {
                    for (i24 = i; i24 < 105; ++i24) {
                        i1 += (i24 ^ (long)f2);
                        i25 += (int)2.128377;
                        i1 |= (int)Test.instanceCount;
                        iArr[i24] -= (int)f2;
                        by1 *= (byte)i24;
                        i25 = Test.iFld1;
                        iFld += (int)d;
                    }
                    i26 = 1;
                    while (++i26 < 105) {
                        Test.instanceCount >>>= 108;
                        Test.iFld1 = i1;
                        i1 += (int)Test.instanceCount;
                        i1 = (int)Test.instanceCount;
                    }
                    iFld >>>= i;
                    i25 = (int)Test.instanceCount;
                } else {
                    i1 <<= (int)Test.instanceCount;
                    for (i27 = 1; i27 < 105; i27++) {
                        f2 = iFld;
                        i1 -= (int)Test.lFld;
                        iFld += (((i27 * by1) + i24) - i1);
                    }
                }
            }
        }

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i24 i25 f2 = " + i24 + "," + i25 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("by1 i26 i27 = " + by1 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 iArr = " + i28 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.iFld1 = " + Test.instanceCount + "," + iFld + "," +
            Test.iFld1);
        FuzzerUtils.out.println("Test.bFld Test.lFld fArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.lFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
