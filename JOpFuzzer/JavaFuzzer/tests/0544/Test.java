// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=14L;
    public static int iFld=14;
    public static boolean bFld=false;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.371F);
        FuzzerUtils.init(Test.iArrFld, -6);
        FuzzerUtils.init(Test.lArrFld, -8896750289548994967L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, short s, int i5) {

        int i6=220, i7=0, i8=-14, i9=-3, iArr1[]=new int[N];
        byte by=97;
        float f2=1.170F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -249L);
        FuzzerUtils.init(iArr1, -1);

        i6 = 1;
        do {
            by += (byte)(((i6 * i6) + i6) - Test.iFld);
            i4 += (i6 * i6);
            Test.instanceCount += i4;
            for (i7 = i6; i7 < 6; ++i7) {
                Test.iFld *= s;
                i9 -= (int)3060310213608495393L;
                i9 += i6;
                Test.iArrFld = iArr1;
                switch (((i6 >>> 1) % 2) + 7) {
                case 7:
                    iArr1[i7] += -6;
                    break;
                case 8:
                    f2 *= f2;
                    break;
                }
                Test.fArrFld[i6 - 1] = i8;
            }
            Test.iFld -= s;
            Test.instanceCount += (i6 * i6);
        } while (++i6 < 285);
        vMeth2_check_sum += i4 + s + i5 + i6 + by + i7 + i8 + i9 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        int i2=53353, i3=427, iArr[][]=new int[N][N];
        short s1=24295;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)34);
        FuzzerUtils.init(iArr, -144);

        Test.instanceCount += (-(Test.iFld * (Test.instanceCount = Test.iFld)));
        for (i2 = 6; i2 < 240; i2++) {
            boolean b=false;
            if (b) {
                i3 >>= byArr[i2 + 1];
                Test.fArrFld[i2 - 1] += (i2 * ((Test.iFld++) - (i3 - i2)));
                iArr[i2 - 1][i2 + 1] %= (int)((++iArr[i2 + 1][i2]) | 1);
                vMeth2(6, s1, 36280);
            } else if (b) {
                Test.iFld *= i3;
            }
            switch ((i2 % 2) + 23) {
            case 23:
                Test.iFld += (i2 * i2);
                if (b) continue;
                Test.iArrFld[i2] -= i3;
                Test.iFld += (i2 * i2);
            case 24:
                Test.instanceCount = i2;
                Test.iArrFld[i2 - 1] = Test.iFld;
                break;
            }
        }
        vMeth1_check_sum += i2 + i3 + s1 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(float f, float f1) {

        int i=62982, i1=-9, i10=3, i11=-9, i12=-153, i13=50200, i14=54845;
        byte by1=-12;
        long lArr1[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr1, 2934212229L);
        FuzzerUtils.init(bArr, true);

        for (i = 173; i > 9; i--) {
            vMeth1();
            Test.iFld &= (int)Test.instanceCount;
            lArr1[i] <<= i1;
        }
        for (i10 = 277; i10 > 1; --i10) {
            try {
                Test.iArrFld[i10] = (Test.iFld / 235);
                i1 = (-1009896535 / Test.iFld);
                Test.iArrFld[i10] = (49206 % i12);
            } catch (ArithmeticException a_e) {}
            by1 -= (byte)Test.instanceCount;
            Test.iArrFld[(i11 >>> 1) % N] = (int)Test.instanceCount;
            for (i13 = 1; i13 < 6; i13++) {
                switch ((i13 % 6) + 90) {
                case 90:
                    if (i != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i + i1 + i10 + i11 +
                            i12 + by1 + i13 + i14 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    switch ((i13 % 4) + 9) {
                    case 9:
                        bArr[i13] = Test.bFld;
                        try {
                            i1 = (i10 % 4757);
                            i12 = (i % -48620);
                            i1 = (i14 / Test.iArrFld[i10 - 1]);
                        } catch (ArithmeticException a_e) {}
                        i1 += (int)Test.instanceCount;
                        break;
                    case 10:
                        i11 += (((i13 * i1) + i) - i13);
                    case 11:
                        Test.instanceCount *= (long)f;
                    case 12:
                        i12 = i1;
                        break;
                    }
                    break;
                case 91:
                    i14 = (int)Test.instanceCount;
                    break;
                case 92:
                    Test.instanceCount = -1857084484L;
                    break;
                case 93:
                    Test.iArrFld[i10] >>= i10;
                    break;
                case 94:
                    lArr1[i10 + 1] = i13;
                case 95:
                    i1 -= i10;
                    break;
                default:
                    Test.iFld += (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i + i1 + i10 + i11 + i12 + by1 + i13 +
            i14 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i15=53028, i16=0, i17=-11, i18=-2, i19=31098;
        byte by2=-12, byArr1[]=new byte[N];
        short s2=24074;
        float f3=1.487F;
        double d=-111.112091;

        FuzzerUtils.init(byArr1, (byte)61);

        vMeth(-5.444F, 1.595F);
        i15 = 1;
        do {
            for (i16 = 7; i16 < 207; i16++) {
                Test.iFld %= (int)(by2 | 1);
                Test.iFld = (int)Test.instanceCount;
                Test.iArrFld[i15] += i15;
                Test.iFld /= (int)-4150956690L;
                Test.instanceCount -= (long)1.360F;
                s2 += (short)(((i16 * Test.iFld) + Test.instanceCount) - i16);
                for (i18 = 1; i18 < 2; i18++) {
                    Test.iArrFld[i18] <<= i19;
                    f3 -= by2;
                    i19 += -138;
                    dArrFld = dArrFld;
                    Test.instanceCount = Test.instanceCount;
                    i19 *= (int)Test.instanceCount;
                    i19 = (int)Test.instanceCount;
                    switch ((i18 % 9) + 122) {
                    case 122:
                        i17 += (((i18 * by2) + Test.iFld) - i18);
                        if (true) {
                            Test.lArrFld = Test.lArrFld;
                            f3 *= i17;
                            Test.iFld += (int)d;
                        } else {
                            i17 += -38890;
                        }
                        s2 -= (short)i18;
                        switch (((i18 % 5) * 5) + 11) {
                        case 26:
                            Test.iArrFld[i16] = (int)d;
                            break;
                        case 22:
                            if (false) break;
                            by2 = (byte)d;
                            Test.instanceCount += 1;
                            break;
                        case 18:
                            byArr1[i16] >>= (byte)i19;
                            break;
                        case 36:
                        case 30:
                            try {
                                i19 = (51 % i15);
                                i17 = (i18 % i15);
                                i17 = (i17 % 1195318288);
                            } catch (ArithmeticException a_e) {}
                            break;
                        }
                        break;
                    case 123:
                        d *= 17658;
                        break;
                    case 124:
                        Test.instanceCount -= i18;
                        break;
                    case 125:
                        i17 >>= Test.iFld;
                        break;
                    case 126:
                        i19 |= i18;
                        break;
                    case 127:
                        i17 += i18;
                        break;
                    case 128:
                        i17 += (i18 + i18);
                        break;
                    case 129:
                        i19 += (int)(107.652F + (i18 * i18));
                        break;
                    case 130:
                    }
                }
            }
        } while (++i15 < 121);

        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("by2 s2 i18 = " + by2 + "," + s2 + "," + i18);
        FuzzerUtils.out.println("i19 f3 d = " + i19 + "," + Float.floatToIntBits(f3) + "," +
            Double.doubleToLongBits(d));
        FuzzerUtils.out.println("byArr1 = " + FuzzerUtils.checkSum(byArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fArrFld Test.iArrFld dArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
