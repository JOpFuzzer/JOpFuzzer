// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static int iFld=7;
    public static float fFld=0.917F;
    public short sFld=-5609;
    public static double dArrFld[]=new double[N];
    public static short sArrFld[][]=new short[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -18.120121);
        FuzzerUtils.init(Test.sArrFld, (short)-26612);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1, long l1, int i2) {


        i2 *= (int)l1;
        i2 -= i1;
        Test.dArrFld[(i1 >>> 1) % N] *= Test.instanceCount;
        vMeth2_check_sum += i1 + l1 + i2;
    }

    public static void vMeth1(int i) {

        int i3=9, i4=248, i5=64;
        boolean b1=true;
        float f=102.468F;

        vMeth2(i, Test.instanceCount, i);
        Test.dArrFld[(11 >>> 1) % N] += i;
        for (i3 = 2; i3 < 122; i3++) {
            Test.sArrFld[i3 - 1][i3] -= (short)i4;
            if (b1) break;
            i = -8;
            f *= f;
            i5 = 1;
            do {
                b1 = b1;
                switch ((i5 % 2) + 102) {
                case 102:
                    i -= (int)f;
                    if (b1) continue;
                    break;
                case 103:
                    Test.instanceCount = i4;
                    if (b1) break;
                default:
                    i4 ^= i;
                }
            } while (++i5 < 13);
        }
        vMeth1_check_sum += i + i3 + i4 + (b1 ? 1 : 0) + Float.floatToIntBits(f) + i5;
    }

    public static void vMeth(long l, boolean b) {


        vMeth1(Test.iFld);
        vMeth_check_sum += l + (b ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        boolean b2=false;
        int i6=-173, i7=133, i8=8, i9=34260, i10=5;
        byte by=-5, by1=-64, byArr[]=new byte[N];
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -61.132F);
        FuzzerUtils.init(lArr, 263497878746067467L);
        FuzzerUtils.init(byArr, (byte)-14);

        vMeth(Test.instanceCount, b2);
        fArr[(Test.iFld >>> 1) % N] += Test.fFld;
        Test.iFld = sFld;
        sFld = (short)Test.instanceCount;
        for (i6 = 2; i6 < 194; ++i6) {
            Test.iFld *= (int)101.531F;
            i8 = 1;
            while (++i8 < 131) {
                i7 = Test.iFld;
                lArr[i6] = Test.iFld;
                byArr[i6] += (byte)Test.iFld;
                switch ((i6 % 7) + 87) {
                case 87:
                    Test.instanceCount >>= i7;
                    switch ((i6 % 2) + 76) {
                    case 76:
                        by <<= (byte)i8;
                        break;
                    case 77:
                        Test.dArrFld[i8 - 1] *= i7;
                        Test.fFld = Test.instanceCount;
                        i7 -= (int)Test.instanceCount;
                        break;
                    default:
                        Test.iFld *= i6;
                    }
                    if (b2) continue;
                    i7 <<= i6;
                    break;
                case 88:
                    for (i9 = 1; i9 > 1; i9--) {
                        i10 -= i10;
                        Test.iFld = i8;
                        switch (((i8 % 1) * 5) + 43) {
                        case 46:
                        }
                        i10 = (int)-6110296305561827856L;
                        i7 = i9;
                        Test.iFld = by1;
                        if (b2) continue;
                        iArrFld[i9] += i6;
                        i10 = Test.iFld;
                    }
                    break;
                case 89:
                    Test.fFld -= Test.fFld;
                    break;
                case 90:
                    iArrFld[i6] = sFld;
                    break;
                case 91:
                    try {
                        iArrFld[i8] = (37555 % i9);
                        Test.iFld = (-696760707 % Test.iFld);
                        i10 = (i6 / i9);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 92:
                    i7 = -56796;
                case 93:
                    Test.instanceCount = Test.iFld;
                    break;
                default:
                    i7 = i10;
                }
            }
        }

        FuzzerUtils.out.println("b2 i6 i7 = " + (b2 ? 1 : 0) + "," + i6 + "," + i7);
        FuzzerUtils.out.println("i8 by i9 = " + i8 + "," + by + "," + i9);
        FuzzerUtils.out.println("i10 by1 fArr = " + i10 + "," + by1 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("lArr byArr = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("sFld Test.dArrFld Test.sArrFld = " + sFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
