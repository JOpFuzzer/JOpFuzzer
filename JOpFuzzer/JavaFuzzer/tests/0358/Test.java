// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=51457L;
    public int iFld=-43557;
    public static double dFld=2.340;
    public static float fFld=-1.85F;
    public static int iFld1=2;
    public static boolean bArrFld[]=new boolean[N];
    public static long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld, -3503495670L);
        FuzzerUtils.init(Test.sArrFld, (short)-27075);
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i4, int i5, byte by1) {

        long l2=-9L, l3=-4003270795736201908L;
        int i6=-11, i7=-62302, i8=-26190, i9=49158, i10=-37661, iArr[]=new int[N];
        float f1=1.146F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(byArr, (byte)125);

        i5 -= 39743;
        Test.lArrFld[(i5 >>> 1) % N] = i4;
        l2 = 1;
        do {
            for (i6 = 1; i6 < 5; ++i6) {
                i7 = (int)f1;
                Test.instanceCount -= (long)f1;
                iArr[i6] &= i7;
                Test.instanceCount += (i6 * i7);
                f1 *= i6;
                iArr[i6 + 1] += (int)Test.dFld;
                iArr[(int)(l2 + 1)] <<= 223;
            }
            for (l3 = 5; l3 > 1; l3 -= 3) {
                for (i9 = 1; i9 < 5; i9++) {
                    i4 = -30;
                    byArr[(int)(l3 - 1)] >>= (byte)26;
                }
            }
        } while (++l2 < 333);
        long meth_res = i4 + i5 + by1 + l2 + i6 + i7 + Float.floatToIntBits(f1) + l3 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2, int i3) {

        byte by2=-75;
        int i11=-26572, i12=-62909, i13=125, i15=17, iArr1[]=new int[N];
        float f2=-1.603F, fArr[]=new float[N];
        boolean b=true;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)24874);
        FuzzerUtils.init(fArr, 91.210F);
        FuzzerUtils.init(iArr1, -116);

        i2 = (-iMeth1(i2, -148, by2));
        switch ((((i1 >>> 1) % 9) * 5) + 35) {
        case 41:
            for (i11 = 1; 283 > i11; ++i11) {
                i1 = -7;
                i13 = 1;
                while (++i13 < 6) {
                    Test.instanceCount += (i13 ^ i2);
                    Test.instanceCount += (long)1.68031;
                    if (true) break;
                }
                Test.instanceCount &= i2;
                fArr[i11] += (float)Test.dFld;
                Test.instanceCount = -37166;
                i1 -= (int)f2;
                b = false;
                iArr1[i11 - 1] += -56328;
                i3 = i3;
            }
            break;
        case 57:
            iArr1[(72 >>> 1) % N] = (int)Test.dFld;
            break;
        case 37:
            f2 += 0.255F;
            break;
        case 48:
            Test.instanceCount = i3;
            break;
        case 63:
            Test.sArrFld[(-104 >>> 1) % N] *= (short)Test.instanceCount;
            break;
        case 75:
            iArr1[(i11 >>> 1) % N] -= i15;
            break;
        case 49:
            i15 = i12;
            break;
        case 43:
            i3 = (int)Test.instanceCount;
        case 74:
            b = b;
            break;
        default:
            iArr1[(i3 >>> 1) % N] -= i2;
        }
        long meth_res = i1 + i2 + i3 + by2 + i11 + i12 + i13 + Float.floatToIntBits(f2) + (b ? 1 : 0) + i15 +
            FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, long l1, short s) {

        int i16=1, i17=174, i18=-8, i19=243, i20=-125;
        boolean b1=false;

        Test.bArrFld[(i >>> 1) % N] = (!((++Test.lArrFld[(i >>> 1) % N]) != (-iMeth(i, i, i))));
        i += i;
        for (i16 = 6; i16 < 375; i16++) {
            i18 = 1;
            do {
                Test.iArrFld[i16 - 1] <<= -66;
                if (b1) continue;
                i -= (int)Test.fFld;
            } while (++i18 < 5);
            Test.iArrFld[i16] = -12769;
            for (i19 = 1; 5 > i19; ++i19) {
                l1 += (long)Test.dFld;
                i17 ^= i18;
                switch ((i16 % 10) + 113) {
                case 113:
                    l1 += i19;
                    Test.fFld = -7;
                case 114:
                    i20 += (int)Test.instanceCount;
                case 115:
                    Test.instanceCount *= s;
                    break;
                case 116:
                    i20 |= i18;
                    break;
                case 117:
                    i17 = (int)l1;
                    break;
                case 118:
                    i *= i20;
                    break;
                case 119:
                    Test.iFld1 = s;
                    break;
                case 120:
                    i += (i19 * i19);
                    break;
                case 121:
                    Test.instanceCount += Test.iFld1;
                    break;
                case 122:
                    Test.iArrFld = Test.iArrFld;
                    break;
                }
            }
        }
        vMeth_check_sum += i + l1 + s + i16 + i17 + i18 + (b1 ? 1 : 0) + i19 + i20;
    }

    public void mainTest(String[] strArr1) {

        byte by=-81;
        float f=-120.43F;
        short s2=-17269;
        int i21=-57050;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 7620422251075500739L);

        lArr[(-63 >>> 1) % N] = 56;
        for (long l : lArr) {
            by = (byte)(f - (iFld++));
            vMeth(-200, -118686522L, s2);
            Test.iFld1 = 9055;
            Test.sArrFld = Test.sArrFld;
            if (false) continue;
        }
        Test.sArrFld[(Test.iFld1 >>> 1) % N] = (short)182;
        iFld >>= iFld;
        i21 = 1;
        do {
            Test.instanceCount = -45098;
            Test.iFld1 += iFld;
            Test.iFld1 *= (int)30093L;
            Test.instanceCount += (i21 - Test.iFld1);
            Test.iFld1 %= (int)(Test.iFld1 | 1);
        } while (++i21 < 364);
        iFld = i21;
        iFld = by;
        by = (byte)205;
        Test.instanceCount = iFld;
        Test.iFld1 >>= 56326;
        iFld %= (int)(i21 | 1);

        FuzzerUtils.out.println("by f s2 = " + by + "," + Float.floatToIntBits(f) + "," + s2);
        FuzzerUtils.out.println("i21 lArr = " + i21 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld Test.iFld1 Test.bArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.iFld1 + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("Test.lArrFld Test.sArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
