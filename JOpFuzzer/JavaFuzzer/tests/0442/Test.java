// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2187269131L;
    public static byte byFld=-79;
    public float fFld=-32.759F;
    public static double dFld=-75.26225;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.74722);
        FuzzerUtils.init(Test.iArrFld, 50);
        FuzzerUtils.init(Test.lArrFld, -971682634009334289L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l3) {

        int i1=8, i2=226, i3=-131, i4=0;
        float f=14.759F;
        double d=0.43066;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 54203L);

        i1 *= (int)f;
        d = i1;
        for (i2 = 3; i2 < 319; i2++) {
            i4 = 1;
            do {
                i3 >>>= i1;
                lArr[(-11 >>> 1) % N] = 13;
                i1 -= i1;
                Test.byFld = (byte)i1;
                l3 <<= i3;
                Test.dArrFld[i2 - 1] += -14;
                b = true;
            } while (++i4 < 5);
            i1 -= i2;
            Test.instanceCount += (i2 * i2);
            f += i2;
            i1 = i2;
        }
        vMeth1_check_sum += l3 + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i2 + i3 + i4 + (b ? 1 : 0)
            + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l2, int i) {

        int i5=-1861, i6=4, i7=3;
        boolean b1=false;
        float f1=124.496F;
        double d1=-71.99111;
        long l4=73L;

        i = i;
        vMeth1(l2);
        for (i5 = 1; i5 < 212; i5++) {
            l2 <<= i;
            if (b1) continue;
            f1 -= l2;
            i6 *= i5;
            Test.iArrFld[i5] >>>= -12;
            d1 -= i;
            Test.instanceCount += (62468L + (i5 * i5));
            l2 += i5;
            Test.instanceCount *= i5;
            for (l4 = 8; l4 > i5; --l4) {
                Test.iArrFld[(int)(l4 - 1)] = i6;
                i6 += i;
            }
        }
        vMeth_check_sum += l2 + i + i5 + i6 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) +
            l4 + i7;
    }

    public static void vSmallMeth(long l, long l1) {

        float f2=0.264F;
        int i8=8;

        vMeth(Test.instanceCount, -32466);
        f2 = i8;
        vSmallMeth_check_sum += l + l1 + Float.floatToIntBits(f2) + i8;
    }

    public void mainTest(String[] strArr1) {

        int i9=63472, i10=12, i11=-30337, i12=75, i13=-161, i14=-18767, i15=177, i16=-53416, i17=-12, i18=42678;
        short s=-14109;
        boolean b2=false;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-100);

        for (int smallinvoc=0; smallinvoc<786; smallinvoc++) vSmallMeth(1972684601L, Test.instanceCount);
        for (i9 = 8; 309 > i9; ++i9) {
            fFld *= i9;
            i10 <<= i11;
            i10 += (i9 + i9);
            if (b2) {
                for (i12 = 4; i12 < 84; i12++) {
                    i13 += (i12 * i12);
                    i10 += (((i12 * fFld) + i11) - i13);
                    i13 /= (int)(s | 1);
                    i13 |= i12;
                    Test.instanceCount >>= -95;
                }
                i13 >>= (int)Test.instanceCount;
            } else if (b2) {
                i14 = 84;
                do {
                    Test.lArrFld[i14][i14 - 1] += 11;
                    i10 = -1688;
                    Test.dFld -= -1.22F;
                    i10 += i14;
                    for (i15 = 2; i15 > 1; i15 -= 2) {
                        i11 -= (int)31076L;
                        i13 -= i13;
                        byArr[i14 + 1] += (byte)i13;
                        Test.instanceCount += (((i15 * Test.instanceCount) + Test.instanceCount) - i15);
                        i11 >>= i12;
                    }
                    Test.iArrFld[i9 + 1] <<= (int)Test.instanceCount;
                    Test.dFld -= Test.instanceCount;
                } while ((i14 -= 2) > 0);
            }
            for (i17 = 4; i17 < 84; ++i17) {
                i11 += (i17 * s);
                i16 += i18;
            }
            i11 += (i9 + Test.byFld);
        }

        FuzzerUtils.out.println("i9 i10 i11 = " + i9 + "," + i10 + "," + i11);
        FuzzerUtils.out.println("i12 i13 s = " + i12 + "," + i13 + "," + s);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("b2 i17 i18 = " + (b2 ? 1 : 0) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld fFld = " + Test.instanceCount + "," + Test.byFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.dFld Test.dArrFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
