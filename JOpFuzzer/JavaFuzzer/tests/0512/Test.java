// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1606332043L;
    public static double dFld=0.104386;
    public static short sFld=22767;
    public static byte byFld=-117;
    public static float fFld=0.837F;
    public static int iFld=-9;
    public static boolean bFld=false;
    public static int iFld1=5687;
    public double dArrFld[]=new double[N];
    public float fArrFld[]=new float[N];

    public static long dMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(double d, long l1) {

        float f1=1.38F, fArr[]=new float[N];
        int i4=-45796, i5=185, i6=12605, i7=58364, iArr1[][]=new int[N][N];
        long l2=8L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4050787787368841508L);
        FuzzerUtils.init(iArr1, 140);
        FuzzerUtils.init(fArr, 2.54F);

        f1 = 1;
        while (++f1 < 358) {
            Test.iFld = (int)-3793305065L;
            l1 *= Test.iFld;
            lArr = lArr;
            iArr1[(int)(f1 - 1)][(int)(f1 + 1)] <<= Test.iFld;
            switch ((int)((f1 % 10) + 120)) {
            case 120:
                Test.byFld += (byte)(((f1 * Test.instanceCount) + Test.iFld) - Test.iFld);
                break;
            case 121:
                fArr[(int)(f1)] -= (float)0.21580;
            case 122:
                d += Test.iFld;
                for (i4 = 1; i4 < 5; i4 += 3) {
                    l2 = i4;
                    for (i6 = 1; i6 < 5; i6++) {
                        Test.sFld += (short)i6;
                        if (i5 != 0) {
                            vMeth_check_sum += Double.doubleToLongBits(d) + l1 + Float.floatToIntBits(f1) + i4 + i5 +
                                l2 + i6 + i7 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                    }
                    Test.fFld = i6;
                }
                break;
            case 123:
                iArr1[(int)(f1)][(int)(f1 + 1)] = i6;
                break;
            case 124:
                Test.iFld <<= (int)1797382301L;
                break;
            case 125:
                if (Test.bFld) break;
                break;
            case 126:
                Test.fFld -= l2;
            case 127:
                Test.iFld += i5;
            case 128:
            case 129:
                Test.fFld *= f1;
                break;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l1 + Float.floatToIntBits(f1) + i4 + i5 + l2 + i6 + i7 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static float fMeth() {

        int i8=-8, i9=197, i10=-109, i11=40960, iArr2[]=new int[N];
        float f2=-123.36F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr2, 28833);
        FuzzerUtils.init(byArr, (byte)66);

        vMeth(Test.dFld, Test.instanceCount);
        Test.instanceCount += Test.instanceCount;
        for (i8 = 346; 8 < i8; i8--) {
            for (f2 = 1; f2 < 5; f2++) {
                Test.fFld += i10;
                if (Test.bFld) break;
                Test.instanceCount = (long)Test.dFld;
                i11 = 2;
                while (--i11 > 0) {
                    switch (((Test.iFld >>> 1) % 5) + 21) {
                    case 21:
                        iArr2[i11] += i11;
                        break;
                    case 22:
                        if (i9 != 0) {
                        }
                    case 23:
                        byArr[i11 - 1] *= (byte)Test.instanceCount;
                        if (Test.bFld) {
                            try {
                                iArr2[i11] = (2042 / i10);
                                i9 = (-54 % i10);
                                iArr2[i8 - 1] = (-13 % Test.iFld1);
                            } catch (ArithmeticException a_e) {}
                        }
                        break;
                    case 24:
                    case 25:
                        iArr2[i11] = Test.byFld;
                        break;
                    default:
                        Test.iFld1 = (int)f2;
                    }
                }
            }
        }
        long meth_res = i8 + i9 + Float.floatToIntBits(f2) + i10 + i11 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(byArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static double dMeth(long l, int i) {

        int i1=87, i2=-7, i12=217, i13=6, iArr[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 1143);
        FuzzerUtils.init(lArr1, -765849535L);

        for (i1 = 16; i1 < 289; ++i1) {
            l += (i1 + Test.sFld);
            l >>= (((i + 8724) >> (long)(i2 - Test.dFld)) + Test.instanceCount);
            i2 >>= (int)((Test.byFld + (-(iArr[i1 - 1]++))) - ((Test.instanceCount - Test.dFld) - (Test.fFld + i)));
            i = (int)(((i2 -= i1) - (-(i - Test.fFld))) * Test.sFld);
            Test.instanceCount *= (long)fMeth();
            for (i12 = 6; 1 < i12; i12--) {
                i *= (int)2932672470494323450L;
                lArr1[i1 + 1] *= Test.instanceCount;
                i2 = (int)l;
                i2 -= (int)Test.instanceCount;
                Test.instanceCount *= -10;
                if (false) {
                    Test.fFld += Test.fFld;
                } else {
                    Test.instanceCount = i1;
                }
            }
        }
        long meth_res = l + i + i1 + i2 + i12 + i13 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-93.535F;
        int i14=103, i15=-193, i16=-6, i17=-7, i18=45, i19=63816, iArr3[]=new int[N];
        long l3=-5L;

        FuzzerUtils.init(iArr3, 189);

        f = (float)(Test.dFld * dMeth(36L, 4));
        Test.instanceCount *= -1835;
        for (i14 = 171; 8 < i14; i14--) {
            Test.byFld -= (byte)Test.iFld1;
            for (i16 = 8; i16 < 154; ++i16) {
                Test.instanceCount >>= i15;
                try {
                    i15 = (iArr3[i16] / iArr3[i14 - 1]);
                    Test.iFld1 = (iArr3[i14] / i17);
                    Test.iFld1 = (iArr3[i14] / i17);
                } catch (ArithmeticException a_e) {}
                Test.iFld -= Test.iFld1;
                Test.instanceCount -= -4054L;
                Test.dFld = i16;
                i15 += i17;
                for (i18 = i14; i18 < 2; i18++) {
                    i15 >>>= i17;
                    Test.fFld -= Test.sFld;
                    if (Test.bFld) {
                        i15 = 249;
                    }
                    Test.sFld += (short)i16;
                    Test.fFld = i15;
                    i15 += i17;
                    i15 = i19;
                    if (Test.bFld) break;
                    i19 += (((i18 * i17) + Test.instanceCount) - i15);
                    Test.instanceCount <<= i15;
                }
                Test.instanceCount *= i16;
            }
            iArr3[i14] <<= (int)-14L;
            try {
                i19 = (iArr3[i14 + 1] % i16);
                Test.iFld = (i18 % i18);
                i19 = (36 % i18);
            } catch (ArithmeticException a_e) {}
            switch (((-47 >>> 1) % 5) + 66) {
            case 66:
                l3 = 1;
                do {
                    i17 *= (int)f;
                    if (Test.bFld) continue;
                } while (++l3 < 154);
                break;
            case 67:
                dArrFld[i14 - 1] *= Test.instanceCount;
                break;
            case 68:
                fArrFld[i14 - 1] = l3;
                break;
            case 69:
                Test.iFld1 += (i14 | i15);
            case 70:
                if (Test.bFld) break;
            }
        }

        FuzzerUtils.out.println("f i14 i15 = " + Float.floatToIntBits(f) + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 l3 iArr3 = " + i19 + "," + l3 + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld Test.fFld Test.iFld = " + Test.byFld + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.bFld Test.iFld1 dArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld1 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  fMeth ->  fMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
