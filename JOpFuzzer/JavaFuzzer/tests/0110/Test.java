// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2385969485308816275L;
    public static byte byFld=-65;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -60);
        FuzzerUtils.init(Test.byArrFld, (byte)-6);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i7=-42494, i8=7, i9=65201, i10=-25519, i11=10801, i12=147;
        boolean b=false;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, -8L);
        FuzzerUtils.init(sArr, (short)24835);

        for (i7 = 7; i7 < 190; i7++) {
            i8 = 142;
            i8 += (int)Test.instanceCount;
            for (i9 = 9; i9 > 1; --i9) {
                if (b) {
                    i8 += i7;
                    lArr[(-238 >>> 1) % N] = i9;
                    for (i11 = 1; i11 < 2; ++i11) {
                        sArr[i7] = (short)5L;
                        i12 = i7;
                    }
                    i8 = i12;
                } else if (b) {
                    i12 <<= 6;
                    Test.byFld += (byte)(6 + (i9 * i9));
                } else if (b) {
                    i12 += i11;
                    vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
                        FuzzerUtils.checkSum(sArr);
                    return;
                } else {
                    if (i9 != 0) {
                        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
                            FuzzerUtils.checkSum(sArr);
                        return;
                    }
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i6) {

        int i13=-50185, i14=17872, i15=161, i16=60236, i17=-4, i18=35661;
        float f1=0.452F;
        double d=-2.82154;
        boolean b1=false;

        vMeth1();
        Test.iArrFld[(-62728 >>> 1) % N] <<= -72;
        for (i13 = 1; i13 < 366; i13++) {
            f1 = i13;
            for (i15 = 1; 5 > i15; i15++) {
                for (i17 = 2; i17 > 1; i17--) {
                    i16 += (121 + (i17 * i17));
                    i6 = (int)Test.instanceCount;
                    i18 += (i17 - Test.instanceCount);
                    Test.instanceCount += i17;
                    i18 -= (int)d;
                    i18 -= i13;
                    if (Test.bFld) break;
                    b1 = Test.bFld;
                    f1 += i17;
                }
            }
        }
        vMeth_check_sum += i6 + i13 + i14 + Float.floatToIntBits(f1) + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(d) + (b1 ? 1 : 0);
    }

    public static int iMeth(int i4, int i5) {

        float f=87.61F;
        int i19=175, i20=7, i21=-241, i22=-126, iArr[]=new int[N];
        long l=8L;
        double d1=-44.94567;

        FuzzerUtils.init(iArr, 3);

        iArr[(i4 >>> 1) % N] |= (int)(i5 - (i4 + (i5 + f)));
        vMeth(i5);
        for (i19 = 17; i19 < 348; i19++) {
            i4 *= i5;
            for (i21 = 5; i21 > 1; --i21) {
                i5 += (((i21 * Test.instanceCount) + i20) - Test.instanceCount);
                i20 -= i4;
                Test.instanceCount += Test.instanceCount;
                l = 2;
                do {
                    i5 = i21;
                    i5 = i22;
                } while (--l > 0);
                switch ((((i20 >>> 1) % 1) * 5) + 127) {
                case 128:
                    i22 = 232;
                    i4 |= i4;
                    i4 = (int)d1;
                    break;
                default:
                    Test.iArrFld[i19] >>>= (int)l;
                }
            }
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f) + i19 + i20 + i21 + i22 + l + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=6, i1=4, i2=14125, i3=-58855, i23=-168, i24=-12, i25=-15, i26=145, iArr1[][]=new int[N][N];
        float f2=1.994F;
        double d2=-88.89369, dArr[]=new double[N];
        short s=-2611;

        FuzzerUtils.init(dArr, 0.12798);
        FuzzerUtils.init(iArr1, -233);

        i = i;
        i1 = 164;
        do {
            try {
                i = (-115 / i1);
                i = (208 / i1);
                i = (i % 8465);
            } catch (ArithmeticException a_e) {}
            for (i2 = 18; 396 > i2; ++i2) {
                dArr[i1 - 1] = iMeth(-3386, -2);
                switch ((i2 % 9) + 66) {
                case 66:
                    Test.instanceCount += i;
                    Test.instanceCount = i2;
                    break;
                case 67:
                    if (Test.bFld) break;
                    break;
                case 68:
                    i3 >>= i3;
                    f2 *= Test.instanceCount;
                    Test.iArrFld = Test.iArrFld;
                    i3 += (i2 * i2);
                    break;
                case 69:
                    for (i23 = 1; i23 < 2; ++i23) {
                        Test.instanceCount += (i23 + i);
                        i3 = i2;
                    }
                    i24 += (i2 - f2);
                    i3 += i2;
                    Test.iArrFld[i2 - 1] += (int)d2;
                    break;
                case 70:
                    i24 += i3;
                    s <<= (short)-46;
                    f2 = Test.instanceCount;
                    break;
                case 71:
                    i24 >>>= (int)Test.instanceCount;
                    i24 = (int)d2;
                case 72:
                    switch (((i2 % 6) * 5) + 104) {
                    case 113:
                        Test.instanceCount = i2;
                        for (i25 = 1; i25 < 2; i25++) {
                            i += (int)Test.instanceCount;
                            Test.byArrFld[i25 - 1] &= (byte)i24;
                            try {
                                i = (i26 / i3);
                                i3 = (iArr1[i2 + 1][i1 - 1] % 216);
                                Test.iArrFld[i2 + 1] = (-146 / iArr1[i2 + 1][i2 - 1]);
                            } catch (ArithmeticException a_e) {}
                        }
                        break;
                    case 118:
                        i += (i2 * i2);
                        break;
                    case 114:
                        f2 += i2;
                    case 126:
                        iArr1[i2 - 1][i1 - 1] = Test.byFld;
                        break;
                    case 130:
                        Test.instanceCount -= -116L;
                        break;
                    case 112:
                        Test.byFld += (byte)(i2 | i23);
                    default:
                        i3 += (((i2 * f2) + i3) - Test.instanceCount);
                    }
                    break;
                case 73:
                case 74:
                    i26 -= (int)f2;
                    break;
                }
            }
        } while ((i1 -= 3) > 0);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 f2 i23 = " + i3 + "," + Float.floatToIntBits(f2) + "," + i23);
        FuzzerUtils.out.println("i24 d2 s = " + i24 + "," + Double.doubleToLongBits(d2) + "," + s);
        FuzzerUtils.out.println("i25 i26 dArr = " + i25 + "," + i26 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.bFld = " + Test.instanceCount + "," + Test.byFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld Test.byArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
