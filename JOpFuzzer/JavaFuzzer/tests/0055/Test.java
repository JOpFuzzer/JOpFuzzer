// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3392911650940865206L;
    public static short sFld=2014;
    public static float fFld=120.372F;
    public static byte byFld=-76;
    public static float fFld1=0.58F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 57);
        FuzzerUtils.init(Test.lArrFld, 68L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i9) {

        double d1=-2.19639;
        int i10=-20, i11=84, i12=11, i13=-5;
        boolean b=false;

        for (d1 = 2; d1 < 216; ++d1) {
            Test.instanceCount -= i10;
            for (i11 = 1; i11 < 8; i11 += 2) {
                i13 = 1;
                do {
                    i12 *= -8;
                    Test.sFld *= (short)Test.instanceCount;
                    Test.fFld *= i11;
                    Test.iArrFld[(int)(d1)] += (int)Test.instanceCount;
                    i12 *= (int)Test.instanceCount;
                    i9 -= i13;
                } while (++i13 < 3);
                i10 = i12;
                Test.instanceCount += (i11 * i11);
                b = b;
            }
            Test.lArrFld = FuzzerUtils.long1array(N, (long)-2260405677409888120L);
            i10 >>= -46666;
        }
        vMeth2_check_sum += i9 + Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 + (b ? 1 : 0);
    }

    public static void vMeth1(int i5, int i6, double d) {

        int i7=18714, i8=0;
        long l1=1L;
        boolean b1=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.931F);

        for (i7 = 4; 142 > i7; i7++) {
            i8 += (i7 ^ i7);
            vMeth2(i7);
            l1 = 1;
            do {
                Test.instanceCount = 10;
                Test.iArrFld = Test.iArrFld;
                i6 -= (int)l1;
                i8 >>= (int)8270125041517330591L;
                switch ((int)(((l1 % 7) * 5) + 6)) {
                case 18:
                    Test.instanceCount = i7;
                    switch ((int)((l1 % 8) + 20)) {
                    case 20:
                        Test.fFld += (l1 - Test.byFld);
                    case 21:
                        Test.instanceCount |= i6;
                        break;
                    case 22:
                        Test.instanceCount -= (long)d;
                        break;
                    case 23:
                        Test.instanceCount *= Test.instanceCount;
                        break;
                    case 24:
                        i6 = i6;
                        break;
                    case 25:
                        Test.lArrFld[i7] += i7;
                        break;
                    case 26:
                        if (b1) continue;
                    case 27:
                        i8 += (int)(l1 - i8);
                        break;
                    }
                    break;
                case 20:
                    i6 += i6;
                case 16:
                    Test.instanceCount += (53 + (l1 * l1));
                    break;
                case 10:
                    Test.instanceCount <<= Test.sFld;
                    break;
                case 14:
                    i8 &= i6;
                case 17:
                    i6 += (int)l1;
                    break;
                case 35:
                    if (b1) break;
                    break;
                default:
                    fArr[(int)(l1)] *= Test.fFld;
                }
            } while (++l1 < 11);
        }
        vMeth1_check_sum += i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + l1 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(float f, int i4, long l) {

        double d2=0.81097;
        int i14=7, i15=24, i16=138, i17=-4, i18=-2, i19=-50247;
        boolean b2=false;

        vMeth1(i4, 0, d2);
        Test.fFld *= 2979;
        for (i14 = 3; 279 > i14; i14++) {
            for (i16 = 1; i16 < 6; i16++) {
                f += (((i16 * i16) + Test.instanceCount) - i14);
                i4 = (int)Test.instanceCount;
                b2 = b2;
                f -= 14;
                f -= f;
                for (i18 = 1; 2 > i18; i18++) {
                    Test.fFld += (i18 - i14);
                    i4 = i18;
                    Test.lArrFld[i18 + 1] += i19;
                    i19 |= -10;
                    i4 += (i18 | Test.byFld);
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i4 + l + Double.doubleToLongBits(d2) + i14 + i15 + i16 + i17 + (b2
            ? 1 : 0) + i18 + i19;
    }

    public void mainTest(String[] strArr1) {

        int i=-20000, i1=204, i2=858, i3=70, i20=0, i21=-76, i22=-34321;
        long l2=162L, l3=35294L;
        boolean b3=false;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)16384);

        for (i = 5; 248 > i; i++) {
            for (i2 = 103; 3 < i2; --i2) {
                vMeth(Test.fFld1, i1, l2);
                Test.iArrFld[i2 + 1] = (int)Test.fFld1;
                if (b3) {
                    l2 += (((i2 * i2) + Test.instanceCount) - i);
                    sArr[i + 1][(i1 >>> 1) % N] = (short)i;
                    fArrFld[i - 1] = -7501;
                } else if (true) {
                    i1 *= -11668;
                    Test.iArrFld[i + 1] <<= i3;
                    switch (((i3 >>> 1) % 2) + 108) {
                    case 108:
                        i3 += Test.sFld;
                        Test.iArrFld[i - 1] = 47576;
                        break;
                    case 109:
                        i20 = 1;
                        do {
                            Test.iArrFld[i] |= i3;
                            l2 >>= i3;
                            l2 += i20;
                            i1 = (int)-2391529157L;
                            i3 += (int)Test.instanceCount;
                            i3 += (int)Test.fFld1;
                            i3 ^= i3;
                            Test.iArrFld[i20] = (int)Test.fFld;
                            i21 = (int)l2;
                            i1 += 188;
                        } while (++i20 < 2);
                        Test.iArrFld[i2 + 1] *= 11;
                        break;
                    }
                } else if (b3) {
                    fArrFld[i + 1] += i1;
                } else {
                    for (l3 = 2; l3 > 1; l3 -= 3) {
                        l2 = Test.sFld;
                        i1 %= (int)(i20 | 1);
                        i22 >>= -49129;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 l2 i20 = " + i3 + "," + l2 + "," + i20);
        FuzzerUtils.out.println("i21 b3 l3 = " + i21 + "," + (b3 ? 1 : 0) + "," + l3);
        FuzzerUtils.out.println("i22 sArr = " + i22 + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld Test.fFld1 Test.iArrFld = " + Test.byFld + "," +
            Float.floatToIntBits(Test.fFld1) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
