// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=168L;
    public static volatile float fFld=-120.778F;
    public static volatile boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 10);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8, int i9) {

        int i10=0, i11=-57188, i12=53131, i13=196, iArr[]=new int[N];
        double d=-120.73016, dArr[]=new double[N];
        long l=6L;
        short s=-1593;
        byte by=50, byArr[]=new byte[N];

        FuzzerUtils.init(dArr, 88.104635);
        FuzzerUtils.init(iArr, -84);
        FuzzerUtils.init(byArr, (byte)-45);

        for (i10 = 11; 282 > i10; i10++) {
            dArr[i10 - 1] *= d;
            for (l = 1; l < 6; ++l) {
                i11 += (int)(((l * i10) + i10) - i8);
                i9 += (int)l;
                try {
                    i12 = (i9 / i10);
                    i9 = (iArr[(int)(l + 1)] % -241344033);
                    i11 = (i12 / 1722477615);
                } catch (ArithmeticException a_e) {}
                iArr[(-10 >>> 1) % N] = i11;
                if (Test.bFld) {
                    i13 = 1;
                    do {
                        switch ((int)(((l % 1) * 5) + 83)) {
                        case 88:
                            byArr[i10 + 1] += (byte)i8;
                            Test.fFld -= -1.134F;
                            Test.instanceCount <<= s;
                            break;
                        default:
                            by = (byte)-64584;
                            i8 -= i9;
                        }
                    } while (++i13 < 2);
                } else {
                    iArr[i10] |= (int)7656938073684057179L;
                    vMeth2_check_sum += i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + l + i12 + i13 + s + by +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
                        FuzzerUtils.checkSum(byArr);
                    return;
                }
            }
        }
        vMeth2_check_sum += i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + l + i12 + i13 + s + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth1(int i5, int i6, int i7) {

        int i14=-53668, i15=9, i16=-92, iArr1[]=new int[N];
        float f1=2.918F;

        FuzzerUtils.init(iArr1, 39611);

        vMeth2(i7, i7);
        i14 = 1;
        while (++i14 < 379) {
            iArr1[i14] -= i7;
            i15 = 1;
            do {
                iArr1[i14] = i6;
                i6 -= (int)Test.instanceCount;
            } while (++i15 < 4);
            for (f1 = 1; f1 < 4; ++f1) {
                byte by1=94;
                Test.instanceCount += i5;
                i16 += (int)f1;
                i16 = (int)Test.instanceCount;
                i16 = i15;
                iArr1 = FuzzerUtils.int1array(N, (int)4);
                i5 += (int)((long)f1 | by1);
                iArr1[i14 - 1] = i14;
                Test.fFld += (f1 - i15);
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + i14 + i15 + Float.floatToIntBits(f1) + i16 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        float f=67.735F;
        int i=-64254, i1=-2, i2=7, i3=60200, i4=2;
        boolean b=false;
        short s1=27216;

        f += (i = ((i--) - i));
        for (i1 = 224; i1 > 6; i1--) {
            f += (i1 - Test.instanceCount);
            for (i3 = 1; 7 > i3; i3++) {
                i2 += i3;
                i2 += (((i3 * i2) + i2) - i3);
            }
            b = b;
            vMeth1(72, i3, i4);
            switch ((((i1 >>> 1) % 6) * 5) + 32) {
            case 57:
                Test.instanceCount = -31946;
                i &= i2;
                i2 += (i1 + i2);
                if (Test.bFld) {
                    i4 = (int)Test.instanceCount;
                    i4 = i4;
                } else if (Test.bFld) {
                    Test.fFld *= i3;
                } else {
                    b = b;
                }
                break;
            case 48:
                i4 += (i1 - i2);
                break;
            case 54:
                try {
                    i2 = (-11205 / Test.iArrFld[i1 + 1]);
                    Test.iArrFld[i1 + 1] = (i4 % 40276);
                    Test.iArrFld[i1 - 1] = (128 % i);
                } catch (ArithmeticException a_e) {}
            case 41:
                i2 *= (int)-6712627373043408066L;
            case 51:
                i2 |= i;
                break;
            case 49:
                try {
                    i2 = (i3 % i);
                    i4 = (-734755294 % i2);
                    Test.iArrFld[i1 + 1] = (i1 % i3);
                } catch (ArithmeticException a_e) {}
                break;
            default:
                i *= s1;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + i2 + i3 + i4 + (b ? 1 : 0) + s1;
    }

    public void mainTest(String[] strArr1) {

        double d1=1.80648, d2=1.112490;
        int i17=48653, i18=12, i19=46054, i20=97;
        short s2=-2880;
        byte by2=114;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -146L);

        vMeth();
        Test.instanceCount >>>= Test.instanceCount;
        Test.fFld = 66.396F;
        for (d1 = 3; 194 > d1; d1++) {
            Test.fFld += (float)(d1 + i17);
            if (Test.bFld) continue;
            if (Test.bFld) {
                Test.instanceCount += (long)d1;
                i17 = i17;
            } else {
                i17 = i17;
            }
            if (Test.bFld) {
                i17 = 69;
                Test.instanceCount -= i17;
                i17 = i17;
                s2 += (short)-39;
            } else {
                i17 += (72 + (d1 * d1));
                try {
                    i17 = (i17 / 174);
                    Test.iArrFld[(int)(d1 + 1)] = (i17 / i17);
                    i17 = (116 / i17);
                } catch (ArithmeticException a_e) {}
            }
            Test.fFld += (float)d1;
            i18 = 1;
            do {
                if (Test.bFld) break;
                i17 += (i18 | i17);
                switch (((i18 % 2) * 5) + 63) {
                case 68:
                    i17 -= i17;
                    lArr = lArr;
                    break;
                case 64:
                    i17 += (int)Test.instanceCount;
                    for (i19 = 1; i19 < 1; ++i19) {
                        d2 = 5;
                        d2 = by2;
                        Test.instanceCount += (i19 * i17);
                        Test.instanceCount += (i19 * i19);
                    }
                    break;
                default:
                    Test.iArrFld[i18] += by2;
                }
            } while (++i18 < 131);
        }

        FuzzerUtils.out.println("d1 i17 s2 = " + Double.doubleToLongBits(d1) + "," + i17 + "," + s2);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("d2 by2 lArr = " + Double.doubleToLongBits(d2) + "," + by2 + "," +
            FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
