// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3873577075L;
    public static float fFld=81.819F;
    public static short sFld=4951;
    public static double dFld=0.9113;
    public boolean bFld=true;
    public static volatile int iArrFld[]=new int[N];
    public static float fArrFld1[]=new float[N];
    public static byte byArrFld[]=new byte[N];
    public static volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -29);
        FuzzerUtils.init(Test.fArrFld1, 1.186F);
        FuzzerUtils.init(Test.byArrFld, (byte)98);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i8=-5, i9=-116;

        for (i8 = 17; 283 > i8; i8++) {
            i9 += i8;
        }
        vMeth_check_sum += i8 + i9;
    }

    public static double dMeth(int i5, long l) {

        int i6=-55299, i7=6, i10=1, i11=-28442;
        boolean b=true, b1=true;

        Test.instanceCount <<= (Test.iArrFld[(i5 >>> 1) % N]++);
        for (i6 = 355; i6 > 15; --i6) {
            vMeth();
            if (b) continue;
            Test.instanceCount = i7;
            i7 = i7;
            if (b1) continue;
            i7 *= (int)Test.fFld;
            for (i10 = 1; i10 < 5; i10++) {
                i11 = -3;
            }
            Test.iArrFld[i6] = Test.sFld;
            Test.instanceCount *= -23434;
            i11 -= (int)2.38771;
        }
        i5 = i6;
        i11 *= Test.sFld;
        long meth_res = i5 + l + i6 + i7 + (b ? 1 : 0) + (b1 ? 1 : 0) + i10 + i11;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(float f, int i4) {

        short s1=4184;
        long l1=-2474L, lArr[][]=new long[N][N];
        int i12=-3, i13=-4273, i14=-12, i15=-2, i16=-78;
        byte by=43;

        FuzzerUtils.init(lArr, 159L);

        s1 -= (short)((Test.instanceCount - (-172 << (i4 += i4))) - ((++i4) * dMeth(219, Test.instanceCount)));
        l1 = i4;
        i12 = 1;
        do {
            for (i13 = 1; i13 < 7; i13++) {
                for (i15 = i12; i15 < 2; ++i15) {
                    by = (byte)195;
                    i14 = i12;
                    if (false) break;
                    lArr[i13 - 1][i13 - 1] += 13;
                    lArr[i13] = FuzzerUtils.long1array(N, (long)56983L);
                    Test.fArrFld1[i12 - 1] = i15;
                    if (i15 != 0) {
                    }
                    Test.byArrFld[i13 - 1] -= (byte)i4;
                    Test.dFld = i13;
                    i16 *= (int)Test.dFld;
                }
            }
        } while (++i12 < 219);
        long meth_res = Float.floatToIntBits(f) + i4 + s1 + l1 + i12 + i13 + i14 + i15 + i16 + by +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i1=31086, i2=-2, i3=-16713, i17=-249, i18=11, i19=-1578, i20=53, i21=12, i22=-47450, i23=-31065, i24=10,
            iArr[]=new int[N];
        short s=-7204;
        byte by1=-55, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-93);
        FuzzerUtils.init(iArr, -1);

        byArr[(i1 >>> 1) % N] = (byte)(((++i1) - (23713 - s)) + Math.max(-61410, --iArr[(i1 >>> 1) % N]));
        for (i2 = 1; i2 < 279; ++i2) {
            iMeth(Test.fFld, i1);
            i1 = (int)1.649F;
        }
        i3 = i3;
        Test.dFld -= i2;
        by1 += (byte)i3;
        i1 = (int)Test.instanceCount;
        for (i17 = 4; i17 < 238; i17 += 3) {
            if (bFld) break;
            for (i19 = 321; i19 > 20; i19--) {
                i3 -= (int)Test.instanceCount;
            }
            for (i21 = 3; i21 < 321; i21++) {
                Test.instanceCount += -157;
                Test.fFld = by1;
                i1 = i19;
                by1 -= (byte)s;
                iArr[i17 + 1] += i23;
                Test.instanceCount *= 173;
                i22 += (int)Test.instanceCount;
                i3 = i1;
            }
            Test.bArrFld = Test.bArrFld;
            Test.iArrFld[i17] *= i1;
            i18 = (int)-6L;
            switch (((i21 >>> 1) % 1) + 16) {
            case 16:
                i24 = 1;
                do {
                    Test.fArrFld1[i17 - 1] = Test.instanceCount;
                    i3 += (((i24 * i3) + i19) - i2);
                    i18 = (int)Test.fFld;
                    Test.fFld *= i20;
                } while (++i24 < 321);
                break;
            }
        }

        FuzzerUtils.out.println("i1 s i2 = " + i1 + "," + s + "," + i2);
        FuzzerUtils.out.println("i3 by1 i17 = " + i3 + "," + by1 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 byArr iArr = " + i24 + "," + FuzzerUtils.checkSum(byArr) + "," +
            FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.dFld bFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + (bFld ? 1
            : 0) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld1 Test.byArrFld Test.bArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld1)) + "," + FuzzerUtils.checkSum(Test.byArrFld) +
            "," + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
