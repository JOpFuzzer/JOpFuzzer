// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13748L;
    public static double dFld=22.31131;
    public static boolean bFld=false;
    public static float fFld=-2.740F;
    public double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(double d, float f, int i4) {

        int i5=-11270, i6=228, i7=-111, i8=44578, i9=24930, i10=97, i11=51, iArr1[][]=new int[N][N], iArr2[]=new int[N];
        boolean b=true;
        byte by=-65, byArr[][]=new byte[N][N];
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr1, 188L);
        FuzzerUtils.init(iArr1, -18132);
        FuzzerUtils.init(fArr, -84.800F);
        FuzzerUtils.init(iArr2, 4948);
        FuzzerUtils.init(byArr, (byte)8);

        Test.dFld = Test.instanceCount;
        for (i5 = 20; i5 < 372; i5++) {
            for (i7 = i5; i7 < 5; i7++) {
                if (b) continue;
                iArr1[i5 - 1][i7] += i6;
                i6 -= (int)-50.75593;
                fArr[i7] += Test.instanceCount;
                iArr2[i5] >>>= i6;
                iArr1 = FuzzerUtils.int2array(N, (int)41547);
                Test.instanceCount |= Test.instanceCount;
                i6 += by;
                if (i9 != 0) {
                }
                for (i10 = 1; i10 < 1; i10++) {
                    i6 = i10;
                    byArr = FuzzerUtils.byte2array(N, (byte)121);
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) +
            by + i9 + i10 + i11 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(byArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(int i2) {

        short s1=-16524;
        long l1=37312L, lArr[]=new long[N];
        int i3=-12, i12=-50621, i13=-3, iArr[]=new int[N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(lArr, -4585061654076220229L);
        FuzzerUtils.init(iArr, 178);
        FuzzerUtils.init(fArr1, 83.139F);

        s1 *= (short)Math.min((int)((Test.instanceCount - Test.dFld) * Test.instanceCount), i2);
        for (l1 = 10; l1 < 367; l1++) {
            lArr = (lArr = (lArr = (lArr = lArr)));
            iArr[(int)(l1)] = (byMeth(Test.dFld, -84.733F, 14) + i2);
            Test.bFld = Test.bFld;
            for (i12 = 1; i12 < 5; ++i12) {
                lArr[i12 + 1] >>= -64106L;
                i13 += (7 + (i12 * i12));
                Test.fFld -= (float)-1.86651;
                i13 >>= (int)-7888785408487236720L;
                Test.instanceCount = i13;
                i3 = i3;
                fArr1 = fArr1;
            }
            try {
                i13 = (i2 / i13);
                i3 = (i12 % 425939030);
                i3 = (23934 / iArr[(int)(l1)]);
            } catch (ArithmeticException a_e) {}
            i13 <<= i3;
        }
        long meth_res = i2 + s1 + l1 + i3 + i12 + i13 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i=5714, i1=-160, i14=6, i15=-8596, i16=-50715, i17=-52, i18=-27, iArr3[]=new int[N];
        short s=-14098;
        byte by1=-3;

        FuzzerUtils.init(iArr3, -6);

        for (i = 16; i < 367; ++i) {
            i1 *= s;
            iMeth(1);
            for (i14 = 5; i14 > 1; i14--) {
                for (i16 = 1; 2 > i16; i16++) {
                    try {
                        i17 = (i17 / -3979);
                        i17 = (-62419 % i);
                        iArr3[i - 1] = (i14 % i1);
                    } catch (ArithmeticException a_e) {}
                    l ^= -76;
                    i17 *= (int)l;
                    Test.instanceCount -= by1;
                    switch (((i16 >>> 1) % 6) + 85) {
                    case 85:
                        i1 -= (int)Test.fFld;
                        break;
                    case 86:
                        i17 = i15;
                        i17 |= i14;
                        break;
                    case 87:
                        iArr3[i16 + 1] -= (int)647897243L;
                        break;
                    case 88:
                        i17 = i17;
                    case 89:
                        if (Test.bFld) break;
                        break;
                    case 90:
                        i1 += (((i16 * i16) + i17) - i18);
                        break;
                    default:
                        i17 = 0;
                    }
                }
            }
        }
        vMeth_check_sum += l + i + i1 + s + i14 + i15 + i16 + i17 + by1 + i18 + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        long l3=7L, lArr2[]=new long[N];
        int i19=95, i20=200, i21=-134, i22=18646, i23=-42593, i24=-33, i25=-5, i26=-10, iArr4[]=new int[N], iArr5[]=new
            int[N];
        short s2=-21090;
        double d1=49.6224;

        FuzzerUtils.init(iArr4, 2);
        FuzzerUtils.init(iArr5, 4);
        FuzzerUtils.init(lArr2, -7487852845950696291L);

        vMeth(Test.instanceCount);
        for (l3 = 7; l3 < 255; l3++) {
            i19 += (-141 + (l3 * l3));
            Test.fFld = i19;
            i19 = i19;
        }
        for (i20 = 144; i20 > 9; --i20) {
            iArr4[i20] <<= s2;
            for (i22 = i20; i22 < 186; i22 += 2) {
                iArr5[i20] |= s2;
                i19 = i20;
                Test.instanceCount += (i22 | l3);
                i21 -= i20;
                i19 += (int)l3;
                i23 += (i22 - i20);
                lArr2[i20] %= (i23 | 1);
                dArrFld[i20 - 1] += Test.instanceCount;
                Test.bFld = Test.bFld;
                iArr4[i22 - 1] += i22;
            }
            Test.instanceCount = i21;
            for (i24 = 6; i24 < 186; ++i24) {
                for (d1 = 1; d1 < 2; d1 += 2) {
                    i25 += (int)(((d1 * i26) + Test.instanceCount) - i21);
                    s2 = (short)i19;
                    i19 >>>= (int)-16094L;
                    i25 *= (int)l3;
                    i19 += (int)(((d1 * Test.instanceCount) + i21) - l3);
                    iArr4[(i21 >>> 1) % N] >>= (int)l3;
                }
                i19 += (((i24 * l3) + i23) - i22);
            }
            iArr5[i20] += i24;
            iArr4[i20] *= i23;
        }

        FuzzerUtils.out.println("l3 i19 i20 = " + l3 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 s2 i22 = " + i21 + "," + s2 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("d1 i26 iArr4 = " + Double.doubleToLongBits(d1) + "," + i26 + "," +
            FuzzerUtils.checkSum(iArr4));
        FuzzerUtils.out.println("iArr5 lArr2 = " + FuzzerUtils.checkSum(iArr5) + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld dArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
