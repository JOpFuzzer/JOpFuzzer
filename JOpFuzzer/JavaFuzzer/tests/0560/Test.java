// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=40423L;
    public int iFld=-28168;
    public static float fFld=-123.205F;
    public static short sFld=26921;
    public static volatile double dFld=2.81797;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -14.850F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i2, int i3, byte by1) {

        int i4=-4, i5=28211, iArr1[]=new int[N];
        double d=-1.31929;
        float f=1.389F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 7);
        FuzzerUtils.init(lArr, -3626017156L);

        for (i4 = 7; 310 > i4; i4++) {
            i2 += (int)Test.instanceCount;
            Test.instanceCount += i3;
            i2 += (int)0L;
            switch ((i4 % 1) + 120) {
            case 120:
                if (i2 != 0) {
                }
                iArr1[i4 - 1] <<= (int)Test.instanceCount;
            }
            i3 -= (int)d;
            f = 1;
            do {
                Test.fFld += (f * Test.sFld);
                i5 *= i4;
                Test.instanceCount <<= i3;
            } while (++f < 5);
            lArr[i4 + 1] += 31733L;
            Test.instanceCount += (i4 ^ i5);
            iArr1[i4 - 1] += 28130;
        }
        long meth_res = i2 + i3 + by1 + i4 + i5 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static long lMeth(int i1) {

        byte by2=76;
        int i6=-189, i7=142, i8=-31, i9=24987, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 24);

        iArr[(i1 >>> 1) % N] = byMeth(-81, i1, by2);
        i1 -= (int)Test.dFld;
        for (i6 = 4; i6 < 309; ++i6) {
            for (i8 = i6; 5 > i8; i8 += 2) {
                Test.instanceCount = Test.instanceCount;
                Test.instanceCount >>= -3590148684023449440L;
                iArr[i6 - 1] = i1;
                i1 += by2;
                i1 += (int)(-105.606F + (i8 * i8));
                i1 -= i9;
            }
            i7 |= i9;
            i1 += (i6 * Test.sFld);
            Test.instanceCount = -9222;
            i1 += i1;
            i1 *= i9;
        }
        long meth_res = i1 + by2 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i=6569, i10=-32, i11=5930, i12=-30, i13=2, i14=-59;
        boolean b=true;
        byte by3=-126;

        i >>>= (int)((Float.intBitsToFloat(i) - (-Double.longBitsToDouble(5815238331932338307L))) + (lMeth(11) - i));
        for (i10 = 8; i10 < 398; i10++) {
            Test.sFld = (short)i11;
            i12 = 4;
            do {
                Test.instanceCount += i10;
                i11 *= i;
                for (i13 = 1; i13 < 1; i13++) {
                    if (b) continue;
                    Test.instanceCount = Test.instanceCount;
                    if (true) break;
                    Test.dFld = Test.instanceCount;
                    if (true) {
                        i = by3;
                    }
                    Test.instanceCount = 73L;
                    i14 = i14;
                }
            } while (--i12 > 0);
        }
        vMeth_check_sum += i + i10 + i11 + i12 + i13 + i14 + (b ? 1 : 0) + by3;
    }

    public void mainTest(String[] strArr1) {

        byte by=-35;
        int i15=-135, i16=-20397, i17=-1, i18=-22779, i19=3, i20=-12;
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 6L);

        iFld *= (iFld += ((by + -26703) + Math.min(iFld, iFld)));
        vMeth();
        for (i15 = 344; i15 > 11; i15--) {
            if (b1) {
                Test.instanceCount += i15;
            } else {
                by = (byte)iFld;
                Test.fFld += i15;
                iFld <<= iFld;
                Test.sFld -= (short)i16;
            }
            Test.fArrFld[i15 + 1] += 14;
            if (true) {
                lArr1[i15] -= (long)Test.dFld;
            }
            for (i17 = i15; i17 < 76; i17++) {
                iFld += (int)Test.dFld;
                for (i19 = 1; i19 < 1; ++i19) {
                    Test.instanceCount *= i15;
                    switch (((i19 % 2) * 5) + 124) {
                    case 128:
                        b1 = true;
                        if (b1) continue;
                        Test.fFld += i19;
                        by = (byte)Test.sFld;
                        break;
                    case 131:
                        if (b1) continue;
                        Test.fFld += Test.sFld;
                        iFld = i19;
                        Test.instanceCount *= (long)Test.fFld;
                        break;
                    default:
                        Test.fFld += i20;
                        if (b1) break;
                        lArr1[i17 + 1] = i20;
                    }
                    i18 += (i19 * i19);
                    i20 = i20;
                }
            }
        }

        FuzzerUtils.out.println("by i15 i16 = " + by + "," + i15 + "," + i16);
        FuzzerUtils.out.println("b1 i17 i18 = " + (b1 ? 1 : 0) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 lArr1 = " + i19 + "," + i20 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.dFld Test.fArrFld = " + Test.sFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
