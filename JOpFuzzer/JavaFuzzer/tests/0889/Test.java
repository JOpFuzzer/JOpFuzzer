// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=36164L;
    public byte byFld=16;
    public static float fFld=-69.149F;
    public static volatile short sFld=-11648;
    public static double dFld=-1.85946;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public volatile float fArrFld[][]=new float[N][N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 5131017877662181430L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vSmallMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static void vSmallMeth() {

        int i=110;

        i = (++i);
        vSmallMeth_check_sum += i;
    }

    public static void vSmallMeth1(int i3) {


        Test.instanceCount -= 14;
        vSmallMeth1_check_sum += i3;
    }

    public static float fMeth() {

        int i11=-20461, i12=200, iArr1[]=new int[N];
        double d=77.129088, dArr[]=new double[N];
        short s=-24839;

        FuzzerUtils.init(iArr1, -3);
        FuzzerUtils.init(dArr, 0.30046);

        for (int i10 : iArr1) {
            Test.instanceCount -= i10;
            for (i11 = 1; i11 < 4; ++i11) {
                i10 >>= i10;
                i12 += (i11 * Test.instanceCount);
                i10 <<= (int)Test.instanceCount;
                dArr[i11 + 1] -= i11;
                switch ((i11 % 2) + 12) {
                case 12:
                    i10 = i12;
                    i12 = (int)-2L;
                    Test.instanceCount -= -41783;
                    break;
                case 13:
                    d += -184;
                    Test.instanceCount = 0;
                    break;
                }
                i10 = s;
                i12 = (int)Test.instanceCount;
            }
        }
        long meth_res = i11 + i12 + Double.doubleToLongBits(d) + s + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1() {

        int i8=9, i9=-12, i13=195, i14=82;
        float f1=-1.518F;

        for (i8 = 16; i8 < 370; i8 += 3) {
            i9 = (int)(i9 *= (int)fMeth());
            f1 = i9;
            for (i13 = 1; i13 < 13; i13++) {
                Test.lArrFld[i13 - 1] = -63;
                i9 -= i8;
            }
        }
        vMeth1_check_sum += i8 + i9 + Float.floatToIntBits(f1) + i13 + i14;
    }

    public void vMeth(int i7) {

        int i15=-6, i16=231, i17=20869, i18=-7, iArr2[][]=new int[N][N];
        float f2=63.802F;
        long l=-6367082327430480287L;
        double d1=116.109342;

        FuzzerUtils.init(iArr2, -30481);

        Test.lArrFld[(i7 >>> 1) % N] = ((++i7) - ((-(i7 << byFld)) % ((i7 -= i7) | 1)));
        vMeth1();
        for (i15 = 15; i15 < 322; ++i15) {
            Test.fFld += 2.666F;
            for (f2 = 1; f2 < 5; ++f2) {
                Test.fFld = Test.instanceCount;
                for (l = 1; 2 > l; l += 3) {
                    d1 -= byFld;
                    i17 -= i15;
                    Test.instanceCount -= Test.sFld;
                    Test.instanceCount = Test.sFld;
                    if (true) break;
                }
                iArr2 = iArr2;
                i7 += (int)(f2 * i15);
                i17 -= (int)Test.fFld;
            }
        }
        vMeth_check_sum += i7 + i15 + i16 + Float.floatToIntBits(f2) + i17 + l + i18 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i1=225, i2=10, i4=48236, i5=51293, i6=13, i19=-5, i20=14, i21=-11235, i22=-1042, iArr[]=new int[N];
        float f=19.872F;

        FuzzerUtils.init(iArr, -9);

        for (int smallinvoc=0; smallinvoc<320; smallinvoc++) vSmallMeth();
        for (i1 = 5; i1 < 321; ++i1) {
            i2 += (i1 * i1);
        }
        for (int smallinvoc=0; smallinvoc<654; smallinvoc++) vSmallMeth1((int)(((i2 + f) * (i1 + i2)) * (5L + (f *
            i2))));
        vSmallMeth();
        i4 = i1;
        iArr = (iArr = (iArr = (iArr = iArr)));
        Test.instanceCount -= i2;
        switch (((((int)(f - 4)) >>> 1) % 10) + 17) {
        case 17:
            for (i5 = 5; i5 < 291; i5++) {
                Test.lArrFld[i5 - 1] = i6;
                i2 ^= (--i4);
                vSmallMeth();
                vMeth(i2);
                if (Test.bFld) {
                    i2 = (int)Test.instanceCount;
                    i2 += (int)Test.dFld;
                    for (i19 = 5; i19 < 88; ++i19) {
                        i2 = i19;
                        for (i21 = 1; i21 < 2; ++i21) {
                            f *= i20;
                            Test.lArrFld[i21 - 1] >>= i2;
                            try {
                                i2 = (i1 % 1961140353);
                                iArr[i21 + 1] = (1441152123 % i19);
                                i4 = (i19 % i19);
                            } catch (ArithmeticException a_e) {}
                            Test.fFld -= Test.fFld;
                            Test.instanceCount += i21;
                            Test.dFld = i19;
                            i4 = byFld;
                            i4 += (((i21 * i1) + i5) - i19);
                        }
                        Test.dFld = i5;
                        fArrFld[i19][i5 + 1] = i4;
                    }
                } else {
                    Test.sFld = byFld;
                }
            }
            break;
        case 18:
            i20 *= i1;
            break;
        case 19:
            Test.sFld = (short)9.851F;
        case 20:
            i20 = i6;
            break;
        case 21:
            i2 *= (int)77.85729;
            break;
        case 22:
            i20 &= 61074;
        case 23:
            i2 -= i20;
            break;
        case 24:
            dArrFld[(i5 >>> 1) % N] += 4;
            break;
        case 25:
            Test.instanceCount = i22;
            break;
        case 26:
            fArrFld[(i4 >>> 1) % N][(i5 >>> 1) % N] -= f;
        default:
            Test.instanceCount ^= Test.instanceCount;
        }

        FuzzerUtils.out.println("i1 i2 f = " + i1 + "," + i2 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i4 i5 i6 = " + i4 + "," + i5 + "," + i6);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 iArr = " + i22 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount byFld Test.fFld = " + Test.instanceCount + "," + byFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.dFld Test.bFld = " + Test.sFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lArrFld fArrFld dArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth1_check_sum: " + vSmallMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vSmallMeth1 ->  vSmallMeth1 mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
