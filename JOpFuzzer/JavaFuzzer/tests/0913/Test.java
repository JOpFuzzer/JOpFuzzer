// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-81L;
    public static volatile int iFld=1;
    public static int iFld1=-221;
    public static boolean bFld=true;
    public volatile boolean bFld1=false;
    public static short sFld=6544;
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 57571);
        FuzzerUtils.init(Test.iArrFld1, -62604);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i1=-201, i2=7849, i3=-11, i4=-131, i5=4, i6=-1, i7=9;
        float f=0.811F;
        boolean b=true;
        double d2=0.88295, dArr[]=new double[N];
        short s=29947;

        FuzzerUtils.init(dArr, 92.24036);

        for (i1 = 330; 13 < i1; i1 -= 3) {
            i2 = i1;
            i2 -= 14;
        }
        f = -9;
        b = true;
        for (i3 = 6; 373 > i3; i3++) {
            i5 = 1;
            do {
                Test.instanceCount += i4;
                Test.iFld += (i5 - i2);
                switch ((i3 % 10) + 92) {
                case 92:
                    for (i6 = 1; 1 > i6; i6++) {
                        double d1=1.24931;
                        if (b) {
                            d1 = i4;
                            Test.instanceCount += (((i6 * i5) + i2) - Test.iFld1);
                            i2 = i5;
                        } else {
                            i2 += (((i6 * Test.iFld1) + i6) - i1);
                        }
                    }
                    break;
                case 93:
                    dArr[i3] *= f;
                    break;
                case 94:
                    Test.iArrFld1[i5] = Test.iArrFld;
                    break;
                case 95:
                case 96:
                    Test.iFld += (i5 * i5);
                    break;
                case 97:
                    d2 = Test.iFld;
                    break;
                case 98:
                    Test.iFld1 -= i5;
                case 99:
                    i2 = i7;
                case 100:
                    i2 += (((i5 * i6) + i4) - s);
                    break;
                case 101:
                }
            } while (++i5 < 5);
        }
        vMeth2_check_sum += i1 + i2 + Float.floatToIntBits(f) + (b ? 1 : 0) + i3 + i4 + i5 + i6 + i7 +
            Double.doubleToLongBits(d2) + s + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(long l) {


        vMeth2();
        Test.iArrFld1[(Test.iFld >>> 1) % N] = Test.iArrFld;
        vMeth1_check_sum += l;
    }

    public static void vMeth() {

        double d=2.119681;
        int i=-11, i8=241, i9=-56969, i10=0, i11=227, i12=146, i13=-54098;
        long l1=1887177396423115444L;
        float f1=-36.249F;

        for (d = 1; d < 141; ++d) {
            try {
                Test.iArrFld1[(int)(d)][(int)(d - 1)] = (Test.iFld / Test.iArrFld[(int)(d + 1)]);
                i = (-62657 / Test.iArrFld[(int)(d)]);
                i = (Test.iFld / -218);
            } catch (ArithmeticException a_e) {}
            vMeth1(-3430712038160483129L);
            i8 = Test.iFld1;
            for (i9 = 1; 11 > i9; i9++) {
                i8 ^= (int)-1605049293L;
            }
            i >>= i;
            for (i11 = 1; i11 < 11; i11++) {
                Test.iFld *= (int)d;
                Test.instanceCount = Test.instanceCount;
            }
        }
        for (l1 = 5; l1 < 374; l1 += 2) {
            i13 += (int)(((l1 * f1) + Test.iFld) - i11);
            i = Test.iFld1;
            i13 = i;
            i *= i11;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i8 + i9 + i10 + i11 + i12 + l1 + i13 +
            Float.floatToIntBits(f1);
    }

    public void mainTest(String[] strArr1) {

        int i14=2408, i15=44056, i16=-2, i18=229, i19=-4480, i20=11, i21=44906, i22=215, i23=8, i24=64127;
        byte by=-28;
        double dArr1[]=new double[N];
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr1, 1.80950);
        FuzzerUtils.init(sArr, (short)-14656);
        FuzzerUtils.init(lArr, -227L);

        Test.iFld -= (int)119L;
        vMeth();
        Test.iFld1 += -51975;
        for (i14 = 291; i14 > 5; --i14) {
            switch (((i14 % 2) * 5) + 123) {
            case 126:
                Test.instanceCount = Test.instanceCount;
                Test.bFld = Test.bFld;
                break;
            case 133:
                i16 += (i14 * i14);
                if (bFld1) continue;
                Test.iFld = Test.iFld;
                Test.iArrFld1[i14 + 1][i14] = (int)Test.instanceCount;
            }
        }
        for (int i17 : Test.iArrFld) {
            Test.instanceCount += Test.instanceCount;
            for (i18 = 1; i18 < 63; ++i18) {
                for (i20 = 1; i20 < 2; i20++) {
                    Test.iFld >>= i15;
                    Test.iFld1 += (int)1016977440402124292L;
                }
                for (i22 = i18; i22 < 2; ++i22) {
                    float f2=0.988F;
                    Test.iFld1 += i22;
                    f2 += (i22 + Test.instanceCount);
                    if (Test.bFld) {
                        Test.iFld1 += i19;
                        switch (((i22 >>> 1) % 9) + 52) {
                        case 52:
                            i21 = (int)6491049653046286299L;
                            dArr1[i18 - 1] -= i19;
                            break;
                        case 53:
                            sArr[i22 - 1] = (short)i20;
                            Test.instanceCount -= i16;
                            i16 = i23;
                            break;
                        case 54:
                            by = (byte)Test.instanceCount;
                        case 55:
                            i16 = 7;
                            break;
                        case 56:
                            Test.iFld += -238;
                            break;
                        case 57:
                            i19 += (((i22 * Test.instanceCount) + Test.instanceCount) - i18);
                            break;
                        case 58:
                            i17 += (-18634 + (i22 * i22));
                            break;
                        case 59:
                            Test.iArrFld[i22] = (int)Test.instanceCount;
                            break;
                        case 60:
                            i19 += (122 + (i22 * i22));
                            break;
                        default:
                            lArr[i22] += Test.sFld;
                        }
                    } else {
                        i24 >>= 1;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("by i24 dArr1 = " + by + "," + i24 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println("sArr lArr = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.iFld1 = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.iFld1);
        FuzzerUtils.out.println("Test.bFld bFld1 Test.sFld = " + (Test.bFld ? 1 : 0) + "," + (bFld1 ? 1 : 0) + "," +
            Test.sFld);
        FuzzerUtils.out.println("Test.iArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
