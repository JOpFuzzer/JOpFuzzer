// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=152118422L;
    public static int iFld=47097;
    public static float fFld=0.721F;
    public static boolean bFld=false;
    public static short sFld=-12825;
    public static long lArrFld[]=new long[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2903741563L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i3) {

        double d=-1.130712;
        int i4=14, i5=-1, i6=-22461, i7=-14, i8=2, i9=6, i10=6, i11=-62, i12=-6, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -3);

        i3 = (int)Test.instanceCount;
        Test.instanceCount -= (long)d;
        Test.fFld *= i3;
        Test.fFld -= i3;
        i3 = i3;
        for (i4 = 8; i4 < 212; i4++) {
            for (i6 = 8; i6 > 1; i6--) {
                if (Test.bFld) {
                    for (i8 = i4; i8 < 2; i8 += 2) {
                        i9 += (i8 * i8);
                    }
                    for (i10 = 1; 2 > i10; i10++) {
                        i9 *= (int)d;
                        iArr2[i10 + 1] += (int)Test.instanceCount;
                        Test.iFld += (i10 * i6);
                        Test.fFld += i12;
                    }
                } else {
                    i9 += i12;
                }
            }
        }
        long meth_res = i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr2);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(long l1) {

        float f4=-67.622F;
        int i13=52291, i14=174, i15=8624, iArr3[]=new int[N];
        short s=-19757;
        double d1=20.51115;

        FuzzerUtils.init(iArr3, 21551);

        Test.iFld = sMeth(Test.iFld);
        for (f4 = 7; 139 > f4; ++f4) {
            i13 -= 23612;
            for (i14 = 1; i14 < 12; i14 += 3) {
                s = (short)i15;
                Test.fFld -= (float)d1;
                Test.instanceCount = l1;
                Test.instanceCount -= (long)Test.fFld;
                iArr3 = FuzzerUtils.int1array(N, (int)45);
                switch ((int)(((f4 % 2) * 5) + 102)) {
                case 104:
                    i15 -= Test.iFld;
                    Test.fFld *= (float)d1;
                    if (false) continue;
                    break;
                case 110:
                    Test.iFld = Test.iFld;
                    break;
                }
                iArr3[i14] -= i13;
            }
        }
        vMeth_check_sum += l1 + Float.floatToIntBits(f4) + i13 + i14 + i15 + s + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr3);
    }

    public static long lMeth(float f2, float f3, long l) {

        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 8160);

        Test.iFld <<= (int)(Test.iFld + Math.max((long)(Test.iFld + f2), Test.lArrFld[(Test.iFld >>> 1) % N]));
        iArr1[(Test.iFld >>> 1) % N] = (++Test.iFld);
        vMeth(Test.instanceCount);
        long meth_res = Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + l + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.840F, f1=-49.896F;
        int i=64931, i1=50, i2=49040, i16=-164, i17=-14, i18=-11605, i19=-93, i20=-40898, i21=14, i22=-106, i23=44174,
            iArr[]=new int[N];
        byte by=-33;
        double d2=0.18970, dArr[]=new double[N];

        FuzzerUtils.init(iArr, 33);
        FuzzerUtils.init(dArr, -2.36770);

        f += (++Test.iFld);
        for (i = 5; 173 > i; ++i) {
            iArr[i + 1] += iArr[(Test.iFld >>> 1) % N];
            i1 = (int)(Test.iFld - (i1 * (Test.instanceCount % (Test.instanceCount | 1))));
        }
        for (f1 = 7; f1 < 322; f1++) {
            i2 = (++by);
        }
        i2 >>>= (int)((Test.instanceCount - (Test.instanceCount * Test.instanceCount)) * ((i2 = Test.iFld) + (-1 /
            (Test.instanceCount | 1))));
        Test.lArrFld[(i1 >>> 1) % N] += (long)(lMeth(f1, f1, Test.instanceCount) - d2);
        for (i16 = 3; i16 < 338; ++i16) {
            i1 += (i16 - Test.iFld);
            for (i18 = 4; i18 < 75; i18++) {
                i1 *= 19699;
                d2 += i2;
            }
            for (i20 = 1; i20 < 75; i20++) {
                for (i22 = 1; i22 < 2; i22++) {
                    Test.instanceCount = i21;
                    Test.sFld += (short)i22;
                    switch (((i22 % 10) * 5) + 18) {
                    case 21:
                        bArrFld[i22 + 1] = true;
                        f += i16;
                    case 55:
                        bArrFld[(i2 >>> 1) % N] = Test.bFld;
                        i2 -= by;
                        i23 += (i22 * i19);
                        break;
                    case 42:
                        iArr[i22] = i20;
                        Test.sFld = (short)i1;
                        switch (((i21 >>> 1) % 10) + 80) {
                        case 80:
                            i19 = 46777;
                            dArr[i20] += i22;
                            d2 *= Test.instanceCount;
                        case 81:
                            i23 *= i19;
                        case 82:
                            i23 += (int)f1;
                            break;
                        case 83:
                            iArr[i20] = (int)f;
                        case 84:
                            i17 |= (int)-4999089933406971302L;
                        case 85:
                            f += (((i22 * Test.iFld) + Test.iFld) - i2);
                            break;
                        case 86:
                            i19 = i2;
                            break;
                        case 87:
                            d2 = Test.iFld;
                        case 88:
                            i17 += (((i22 * i18) + i) - f1);
                            break;
                        case 89:
                            i17 += i19;
                        }
                        break;
                    case 68:
                        i17 += (((i22 * i19) + Test.instanceCount) - i20);
                    case 40:
                        i17 = 81;
                    case 43:
                        i21 = i18;
                        break;
                    case 65:
                        Test.sFld += (short)(62338 + (i22 * i22));
                        break;
                    case 66:
                        i23 >>= Test.sFld;
                        break;
                    case 51:
                        d2 *= Test.instanceCount;
                        break;
                    case 57:
                        iArr[i20] >>= i19;
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("f1 i2 by = " + Float.floatToIntBits(f1) + "," + i2 + "," + by);
        FuzzerUtils.out.println("d2 i16 i17 = " + Double.doubleToLongBits(d2) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("iArr dArr = " + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.sFld Test.lArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("bArrFld = " + FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
