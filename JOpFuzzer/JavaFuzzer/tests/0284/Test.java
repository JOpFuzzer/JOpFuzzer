// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3908693312L;
    public static volatile int iFld=12;
    public static int iFld1=-12;
    public static double dArrFld[]=new double[N];
    public static volatile float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.40808);
        FuzzerUtils.init(Test.fArrFld, 2.933F);
        FuzzerUtils.init(Test.lArrFld, -5656051085488504728L);
        FuzzerUtils.init(Test.iArrFld, 11);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(short s, int i3, int i4) {

        int i5=-207, i6=-3, i7=-33, i8=-51201, i9=37740;
        float f2=10.373F;

        for (i5 = 270; 16 < i5; i5 -= 3) {
            switch ((((i3 >>> 1) % 4) * 5) + 15) {
            case 33:
                i7 = 1;
                while (++i7 < 18) {
                    f2 += (((i7 * i3) + s) - i4);
                    for (i8 = 1; i8 < 1; ++i8) {
                        double d1=77.125084;
                        switch (((i8 >>> 1) % 6) + 63) {
                        case 63:
                            Test.lArrFld[i5 + 1] += Test.instanceCount;
                            Test.iFld += i8;
                            i6 *= i8;
                            break;
                        case 64:
                            f2 += i8;
                            f2 %= (i9 | 1);
                        case 65:
                            i4 += (i8 - Test.instanceCount);
                            d1 -= i5;
                            f2 = i6;
                            break;
                        case 66:
                            i4 = i3;
                        case 67:
                            d1 = Test.instanceCount;
                            break;
                        case 68:
                            Test.instanceCount = Test.instanceCount;
                            break;
                        default:
                            Test.iFld += (((i8 * Test.instanceCount) + i7) - i4);
                        }
                    }
                }
            case 27:
                Test.instanceCount >>>= i9;
            case 21:
                f2 += (i5 - Test.instanceCount);
            case 30:
                i9 += (((i5 * f2) + i6) - i3);
                break;
            }
        }
        long meth_res = s + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f2) + i8 + i9;
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(double d) {

        float f1=0.877F, f3=0.670F;
        int i10=-14, i11=-63847, i13=-187, i14=50959, i15=226, i16=8, i17=241, i18=32175;
        byte by=-78;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)18122);

        sArr[(48 >>> 1) % N] += (short)((f1 * Test.iFld) - (iMeth2((short)(18634), Test.iFld, Test.iFld) * -22312));
        Test.iFld += Test.iFld;
        Test.instanceCount -= Test.instanceCount;
        for (i10 = 10; i10 < 374; ++i10) {
            Test.instanceCount *= by;
            Test.iFld -= i10;
            Test.fArrFld[i10] += Test.iFld;
        }
        for (i13 = 6; i13 < 229; ++i13) {
            for (i15 = 1; 7 > i15; i15 += 3) {
                Test.iFld = i13;
                for (i17 = 4; i17 > 1; i17 -= 2) {
                    switch ((i13 % 1) + 121) {
                    case 121:
                        i16 = (int)f3;
                        Test.iArrFld[i15] = (int)15.86330;
                    default:
                        i11 /= (int)(Test.instanceCount | 1);
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i10 + i11 + by + i13 + i14 + i15 + i16
            + i17 + i18 + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(sArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, long l, int i2) {

        double d2=-21.10978;
        int i19=30698, i20=-24, i21=64564, i22=-209, i23=-17107;
        short s1=-17998;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4163792369792986215L);

        Test.dArrFld[(0 >>> 1) % N] -= ((lArr[(i2 >>> 1) % N]--) + Test.fArrFld[(i1 >>> 1) % N]);
        Test.instanceCount *= ((iMeth1(d2) * i1) + i2);
        i19 = 138;
        while ((i19 -= 3) > 0) {
            for (i20 = 33; i20 > i19; i20 -= 3) {
                Test.iFld += (((i20 * Test.instanceCount) + i20) - Test.iFld);
                i1 >>>= (int)l;
                for (i22 = 1; i22 > 1; i22--) {
                    switch (((i19 % 3) * 5) + 41) {
                    case 44:
                        Test.instanceCount += (i22 | i22);
                        break;
                    case 54:
                        Test.fArrFld[i19] = i1;
                        i23 += (int)(-1295074909568468194L + (i22 * i22));
                        s1 -= (short)d2;
                        break;
                    case 50:
                    default:
                        i2 = -2;
                        i2 += i23;
                        Test.iArrFld[i19 - 1] >>>= 39231;
                    }
                }
            }
        }
        long meth_res = i1 + l + i2 + Double.doubleToLongBits(d2) + i19 + i20 + i21 + i22 + i23 + s1 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-35849, i24=-52464, i25=-62, i26=51948, i27=61, i28=-57, i29=11, i30=-11, iArr[]=new int[N];
        float f=98.549F;
        short s2=-14806;
        boolean b=true, b1=true;
        double d3=2.35286;

        FuzzerUtils.init(iArr, -64694);

        Test.iFld = (int)Test.dArrFld[(12818 >>> 1) % N];
        if (b) {
            i = 1;
            while (++i < 374) {
                f = (-iMeth(i, -23367L, i));
                Test.iFld <<= Test.iFld;
                s2 += (short)(i | (long)f);
            }
        } else {
            for (i24 = 5; 128 > i24; i24++) {
                try {
                    Test.iFld = (Test.iFld / Test.iArrFld[i24]);
                    Test.iArrFld[i24 + 1] = (i24 % 1081113320);
                    i25 = (i / i);
                } catch (ArithmeticException a_e) {}
                if (b) continue;
                for (i26 = 3; i26 < 204; ++i26) {
                    Test.iFld += i25;
                    i25 += i26;
                    if (b) {
                        i27 = Test.iFld;
                        try {
                            Test.iFld = (-49353 % Test.iFld1);
                            Test.iFld = (Test.iFld / iArr[i24]);
                            i27 = (i26 % 22109);
                        } catch (ArithmeticException a_e) {}
                        s2 = (short)126;
                        i28 = 1;
                        do {
                            i27 <<= i;
                            d3 -= 0.79787;
                            Test.instanceCount -= i28;
                            i25 = i26;
                            Test.iFld1 += (((i28 * Test.instanceCount) + Test.iFld) - Test.iFld);
                        } while (++i28 < 2);
                    } else if (b) {
                        if (b) continue;
                        for (i29 = 1; i29 < 2; i29++) {
                            Test.iArrFld[i24] |= i25;
                            if (false) {
                                d3 -= Test.instanceCount;
                                i27 += Test.iFld1;
                                Test.iArrFld = Test.iArrFld;
                            }
                        }
                        i30 += (i26 * i30);
                    } else if (b1) {
                        f = 4854098771566174199L;
                    } else {
                        Test.iArrFld[i24 - 1] = i28;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i f s2 = " + i + "," + Float.floatToIntBits(f) + "," + s2);
        FuzzerUtils.out.println("b i24 i25 = " + (b ? 1 : 0) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("d3 i29 i30 = " + Double.doubleToLongBits(d3) + "," + i29 + "," + i30);
        FuzzerUtils.out.println("b1 iArr = " + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.iFld1 = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.iFld1);
        FuzzerUtils.out.println("Test.dArrFld Test.fArrFld Test.lArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
