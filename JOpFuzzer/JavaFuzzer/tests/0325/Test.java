// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=59596L;
    public static volatile short sFld=25933;
    public static boolean bFld=true;
    public float fFld=1.703F;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -190);
        FuzzerUtils.init(Test.lArrFld, -4808899238648683921L);
        FuzzerUtils.init(Test.dArrFld, -2.37840);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i8, long l1, int i9) {

        int i10=0, i11=-4;
        double d1=2.82148;
        byte by1=-96;
        float f=76.439F;

        i9 += i10;
        i10 = 211;
        d1 = d1;
        by1 = (byte)-123.48F;
        f += Test.sFld;
        i11 = 1;
        do {
            f += (i11 * i10);
            f = Test.instanceCount;
        } while (++i11 < 187);
        i8 ^= -34224;
        i8 += i11;
        Test.bFld = Test.bFld;
        i8 += (int)7L;
        Test.lArrFld[(37665 >>> 1) % N] -= 1249551387L;
        l1 = i11;
        l1 *= i11;
        long meth_res = i8 + l1 + i9 + i10 + Double.doubleToLongBits(d1) + by1 + Float.floatToIntBits(f) + i11;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(byte by, boolean b1, int i2) {

        int i3=12, i4=49, i5=-1, i6=-58401, i7=0;
        double d=-41.53866;
        float fArr1[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr1, -2.299F);
        FuzzerUtils.init(lArr, -14L);

        for (i3 = 145; 2 < i3; i3 -= 2) {
            for (i5 = 22; i5 > 1; i5 -= 2) {
                for (d = 1; d < 3; ++d) {
                    try {
                        Test.iArrFld[i3] = (i2 / 51810);
                        i6 = (i7 % 1917517745);
                        i4 = (i3 / i2);
                    } catch (ArithmeticException a_e) {}
                    switch (((i3 % 7) * 5) + 37) {
                    case 65:
                        try {
                            i6 = (i5 / i6);
                            i4 = (-171 % i6);
                            i6 = (i3 / -28);
                        } catch (ArithmeticException a_e) {}
                        switch ((i3 % 1) + 79) {
                        case 79:
                            Test.instanceCount += (-1 + (d * d));
                            break;
                        default:
                            Test.instanceCount -= (i7 - Test.iArrFld[(int)(d)]);
                            i2 = (int)(((-(i2 + i2)) + (Test.instanceCount *= i2)) + i2);
                            i6 += (int)(d * d);
                            fArr1[i3 - 1] += (-((-lArr[(int)(d + 1)]) * (i6 + i3)));
                        }
                        if (bMeth(i5, Test.instanceCount, i6)) break;
                        break;
                    case 38:
                        i6 += (int)d;
                        Test.lArrFld[(int)(d + 1)] = Test.instanceCount;
                        break;
                    case 44:
                        i4 += i3;
                    case 60:
                    case 48:
                        Test.iArrFld[i5 - 1] *= (int)64800L;
                    case 54:
                        Test.iArrFld[(int)(d)] += (int)233L;
                        break;
                    case 51:
                        i4 = (int)3011618467L;
                        break;
                    default:
                        i6 ^= (int)Test.instanceCount;
                    }
                }
            }
        }
        long meth_res = by + (b1 ? 1 : 0) + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(boolean b, long l) {

        int i=-194, i1=1459, i12=38969, i13=250, i14=-227;
        byte by2=1;
        float f1=-93.598F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -103.326F);

        i = 1;
        while (++i < 278) {
            b = b;
            i1 += (i ^ i1);
            Test.iArrFld[i - 1] <<= (int)((fArr[i] + (-44701 - (--l))) - ((i1 *= (int)l) + iMeth(by2, true, i)));
            try {
                i1 = (130 / i);
                i1 = (Test.iArrFld[i - 1] / -56);
                i1 = (-50799 / Test.iArrFld[i]);
            } catch (ArithmeticException a_e) {}
            Test.lArrFld[i] ^= 1;
            i12 = 6;
            while ((i12 -= 3) > 0) {
                Test.iArrFld[i12] = (int)-5810632322789034915L;
                Test.iArrFld[i] = -10478;
                f1 -= 166L;
                for (i13 = 3; i13 > 1; --i13) {
                    try {
                        i14 = (Test.iArrFld[i12 - 1] % i12);
                        i1 = (i14 % -249);
                        i14 = (i12 / i);
                    } catch (ArithmeticException a_e) {}
                    fArr[i13] *= i13;
                    by2 *= (byte)i14;
                }
                i1 <<= i14;
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + l + i + i1 + by2 + i12 + Float.floatToIntBits(f1) + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i15=-9, i16=-232, i17=21303, i18=-38508, i19=0, i20=10, i21=13, i22=-182, i23=121, i24=-234;
        double d2=-1.36954;
        byte by3=-30;
        float f2=0.973F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-1963);

        vMeth(Test.bFld, Test.instanceCount);
        for (i15 = 12; i15 < 323; ++i15) {
            sArr[i15] += (short)i15;
            Test.dArrFld[i15 + 1] = i15;
            i16 >>= i15;
            i16 = Test.sFld;
            d2 = by3;
            fArrFld[i15] *= i15;
            if (Test.bFld) {
                for (f2 = 2; f2 < 81; ++f2) {
                    Test.instanceCount *= -111;
                    Test.instanceCount = Test.instanceCount;
                    for (i18 = 1; i18 < 2; i18++) {
                        i19 += by3;
                        fFld += (i18 - Test.instanceCount);
                    }
                    Test.bFld = Test.bFld;
                    for (i20 = 1; i20 < 2; ++i20) {
                        Test.lArrFld[(int)(f2 + 1)] = Test.instanceCount;
                        i17 *= i20;
                        i16 = (int)-203650510L;
                        Test.instanceCount += (((i20 * i18) + i15) - i15);
                        i19 += i20;
                    }
                    Test.bFld = Test.bFld;
                    d2 = -1.646F;
                    i19 = i18;
                    Test.instanceCount = Test.instanceCount;
                    for (i22 = 1; i22 < 2; ++i22) {
                        i24 += -9;
                    }
                }
                Test.iArrFld[i15] = (int)Test.instanceCount;
                i21 -= i20;
            }
        }

        FuzzerUtils.out.println("i15 i16 d2 = " + i15 + "," + i16 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("by3 f2 i17 = " + by3 + "," + Float.floatToIntBits(f2) + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 sArr = " + i24 + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("fFld Test.iArrFld Test.lArrFld = " + Float.floatToIntBits(fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.dArrFld fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))
            + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
