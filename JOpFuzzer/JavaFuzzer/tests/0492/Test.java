// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=4L;
    public static int iFld=-12;
    public float fFld=1.78F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[][]=new float[N][N];
    public float fArrFld1[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -28096);
        FuzzerUtils.init(Test.lArrFld, 7915654228763002952L);
        FuzzerUtils.init(Test.fArrFld, 13.464F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=17947, i4=-11, i5=-172, i6=-63409, i7=-12;
        float f=2.173F;
        double d1=0.38635, d2=24.102545;

        i3 = i3;
        i3 -= (int)Test.instanceCount;
        Test.iArrFld[(i3 >>> 1) % N] = (int)f;
        f = i3;
        for (i4 = 6; i4 < 145; ++i4) {
            i3 += (int)Test.instanceCount;
            f = (float)d1;
            for (d2 = 1; d2 < 11; d2++) {
                i7 = 1;
                while (++i7 < 2) {
                    Test.lArrFld[i4] += i3;
                    Test.iArrFld[(int)(d2 + 1)] -= (int)d2;
                    Test.instanceCount -= i6;
                    f -= i7;
                    i5 += (((i7 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                    f = i4;
                }
            }
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f) + i4 + i5 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(d2) + i6 + i7;
    }

    public static int iMeth() {

        float f1=-73.504F, fArr[]=new float[N];
        int i8=229, i9=7810, i10=-132, i12=-23, i13=-6;
        short s=24247;

        FuzzerUtils.init(fArr, 0.824F);

        vMeth1();
        f1 -= i8;
        Test.instanceCount = i8;
        for (i9 = 5; i9 < 176; ++i9) {
            i8 = i8;
            i12 = 1;
            while (++i12 < 9) {
                s |= (short)Test.iFld;
                i13 = 1;
                while (++i13 < 1) {
                    Test.iFld += i13;
                    f1 -= i12;
                }
            }
            switch (((i10 >>> 1) % 1) + 13) {
            case 13:
            default:
                f1 += (-238 + (i9 * i9));
            }
        }
        Test.iFld = i13;
        fArr[(i13 >>> 1) % N] += i8;
        Test.iArrFld[(64700 >>> 1) % N] = i12;
        long meth_res = Float.floatToIntBits(f1) + i8 + i9 + i10 + i12 + s + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1, int i2) {


        i1 = iMeth();
        vMeth_check_sum += i + i1 + i2;
    }

    public void mainTest(String[] strArr1) {

        double d=0.1535;
        int i15=6, i16=10, i17=-26, i18=-9, i19=152;
        byte by=28;
        boolean b=false;
        float f2=-80.70F;
        short s1=-22262, sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-10419);

        d *= Math.min(-35, (int)(Long.reverseBytes(Test.instanceCount) - (Test.instanceCount + d)));
        vMeth(Test.iFld, Test.iFld, Test.iFld);
        Test.instanceCount <<= Test.iFld;
        i15 = 147;
        do {
            switch (((-59 >>> 1) % 2) + 41) {
            case 41:
                Test.instanceCount += (i15 - i15);
                break;
            case 42:
                for (i16 = 10; i16 < 171; ++i16) {
                    i17 -= i16;
                    if (b) {
                        d *= Test.iFld;
                        i17 -= by;
                        fFld -= Test.instanceCount;
                        i17 = Test.iFld;
                    } else {
                        for (f2 = 1; f2 < 2; ++f2) {
                            Test.fArrFld[i16 - 1] = fArrFld1;
                            s1 += (short)Test.iFld;
                            Test.iFld += i15;
                            Test.iFld -= i16;
                            Test.iArrFld[i15] >>= Test.iFld;
                            i17 *= i19;
                            fFld = Test.instanceCount;
                            Test.iArrFld[i16] &= i19;
                        }
                        switch (((i16 % 2) * 5) + 11) {
                        case 18:
                            i18 = Test.iFld;
                            break;
                        case 20:
                            d -= i15;
                            sArr[i16 + 1] = sArr[i15 - 1];
                            s1 >>= (short)1542056945L;
                        default:
                            i17 >>>= i16;
                            b = b;
                        }
                        d *= i16;
                    }
                }
                break;
            }
        } while (--i15 > 0);

        FuzzerUtils.out.println("d i15 i16 = " + Double.doubleToLongBits(d) + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 by b = " + i17 + "," + by + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("f2 i18 s1 = " + Float.floatToIntBits(f2) + "," + i18 + "," + s1);
        FuzzerUtils.out.println("i19 sArr = " + i19 + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld fFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("fArrFld1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld1)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
