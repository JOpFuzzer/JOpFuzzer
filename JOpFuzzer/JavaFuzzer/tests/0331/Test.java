// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-33277L;
    public static short sFld=16788;
    public static byte byFld=17;
    public float fFld=31.374F;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 36952);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth(int i) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -10);

        i ^= Math.min((i--) * iArr[(i >>> 1) % N], iArr[(i >>> 1) % N]);
        vSmallMeth_check_sum += i + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i11, int i12, byte by) {

        long l1=2233726349L, lArr[]=new long[N];
        float f=2.926F, fArr[]=new float[N];
        int i14=-42138, i15=-65260, i16=-8, i17=6, i18=-142;

        FuzzerUtils.init(lArr, 8292841300952368013L);
        FuzzerUtils.init(fArr, 29.663F);

        for (int i13 : Test.iArrFld) {
            lArr[(i11 >>> 1) % N] -= 63243;
        }
        l1 -= Test.sFld;
        l1 = i12;
        Test.iArrFld[(-40226 >>> 1) % N] -= (int)f;
        i14 = 1;
        do {
            for (i15 = 1; i15 < 9; i15++) {
                for (i17 = 2; i17 > 1; i17 -= 3) {
                    int i19=243;
                    Test.iArrFld[i15] = i19;
                    i19 += (i17 - Test.instanceCount);
                    lArr[i14 + 1] = l1;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-4);
                }
                f += i15;
                by += (byte)(i15 * i15);
                fArr[i15 - 1] -= Test.instanceCount;
            }
        } while (++i14 < 182);
        vMeth1_check_sum += i11 + i12 + by + l1 + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i20=-3145;
        float f1=-105.513F;

        vMeth1(i20, i20, Test.byFld);
        i20 += i20;
        Test.iArrFld[(i20 >>> 1) % N] += (int)f1;
        Test.iArrFld[(i20 >>> 1) % N] >>= i20;
        Test.instanceCount = Test.instanceCount;
        Test.instanceCount *= i20;
        vMeth_check_sum += i20 + Float.floatToIntBits(f1);
    }

    public int iMeth(int i7, boolean b, int i8) {

        int i9=14, i10=56103, i21=-206, i22=-195, i23=8, i24=4, i25=-101;
        long l2=57864L;

        i7 *= i7;
        for (i9 = 211; i9 > 13; --i9) {
            vMeth();
            for (i21 = i9; i21 < 8; i21++) {
                if (b) continue;
            }
        }
        Test.instanceCount -= (long)fFld;
        for (l2 = 170; l2 > 8; l2--) {
            b = b;
            i8 += (int)(l2 * l2);
            i8 += (int)l2;
        }
        Test.bArrFld[(44398 >>> 1) % N] = false;
        for (i24 = 16; i24 < 318; i24++) {
            b = b;
            fFld += l2;
            i10 += (((i24 * i8) + Test.sFld) - i21);
        }
        long meth_res = i7 + (b ? 1 : 0) + i8 + i9 + i10 + i21 + i22 + l2 + i23 + i24 + i25;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=109, i2=6, i3=-42549, i4=8834, i5=10896, i6=-127, i26=-9, i27=-64499, i28=-17649, i29=-30888, i30=28535,
            i31=-9686;
        boolean b1=true;
        double dArr[]=new double[N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(dArr, 76.104585);
        FuzzerUtils.init(sArr, (short)27863);

        for (int smallinvoc=0; smallinvoc<361; smallinvoc++) vSmallMeth(i1);
        for (i2 = 11; i2 < 352; i2++) {
            i4 = 1;
            do {
                long l=-2L;
                Test.instanceCount += (((i4 * i1) + l) - i1);
                i3 = (Test.iArrFld[i4 + 1]--);
                for (i5 = i2; i5 < 1; i5 += 3) {
                    i3 >>= (i3++);
                    i1 <<= iMeth(i6, false, 11);
                    lArrFld[i2 + 1] = i3;
                    fFld += (-72 + (i5 * i5));
                    dArr[i4] = fFld;
                }
                for (i26 = 1; i26 > i2; i26 -= 3) {
                    fFld = 14;
                    i6 += (int)Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    i6 -= i4;
                    fFld += (i26 - i6);
                    try {
                        i1 = (-1271707774 / i6);
                        Test.iArrFld[i2 - 1] = (i26 % -50);
                        Test.iArrFld[i26 + 1] = (i4 / 113);
                    } catch (ArithmeticException a_e) {}
                    i1 *= i26;
                }
            } while (++i4 < 74);
            for (i28 = 1; i28 < 74; ++i28) {
                i1 += (i28 * i28);
                switch (((i4 >>> 1) % 1) + 88) {
                case 88:
                    for (i30 = i2; i30 < 2; i30++) {
                        i27 <<= i26;
                        i1 <<= i31;
                        Test.instanceCount -= i2;
                        switch ((i28 % 8) + 103) {
                        case 103:
                            Test.instanceCount = 29956;
                            if (b1) continue;
                            break;
                        case 104:
                            i6 += i2;
                            break;
                        case 105:
                            sArr[i2][i2 + 1] = (short)i29;
                            break;
                        case 106:
                        case 107:
                            fFld += i26;
                            break;
                        case 108:
                            Test.iArrFld[(i30 >>> 1) % N] <<= -159;
                            break;
                        case 109:
                            Test.sFld &= (short)i3;
                            break;
                        case 110:
                            Test.byFld -= (byte)i4;
                            break;
                        }
                    }
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i1 i2 i3 = " + i1 + "," + i2 + "," + i3);
        FuzzerUtils.out.println("i4 i5 i6 = " + i4 + "," + i5 + "," + i6);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("b1 dArr sArr = " + (b1 ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.byFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("fFld Test.iArrFld Test.bArrFld = " + Float.floatToIntBits(fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
