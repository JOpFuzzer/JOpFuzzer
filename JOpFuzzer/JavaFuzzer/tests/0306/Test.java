// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8171852248155882288L;
    public static float fFld=-102.676F;
    public boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 10.8114);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, short s1, int i5) {

        int i6=0, i7=-8, i8=-63181, i9=13, i10=12579, i11=51331, i12=-61333, iArr[]=new int[N];
        byte by1=-46;
        short sArr[]=new short[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)-13821);
        FuzzerUtils.init(fArr, 23.766F);
        FuzzerUtils.init(iArr, -56952);

        for (i6 = 6; i6 < 169; i6++) {
            for (i8 = 1; i8 < 10; ++i8) {
                sArr[i6] = (short)i7;
                i10 = 1;
                while (++i10 < 2) {
                    Test.instanceCount += (i10 | i5);
                    i5 += i10;
                    i4 >>= by1;
                }
                for (i11 = 1; i11 < 2; i11++) {
                    i9 = i6;
                    i7 -= i11;
                    i7 += i11;
                    Test.dArrFld[i8 - 1] += Test.instanceCount;
                    i12 &= i9;
                    fArr[i6 - 1] = i12;
                    iArr[i8 + 1] >>= i4;
                }
            }
        }
        vMeth2_check_sum += i4 + s1 + i5 + i6 + i7 + i8 + i9 + i10 + by1 + i11 + i12 + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(float f, int i3, float f1) {

        short s=-10496;
        byte by=35;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -97.251F);

        s /= (short)((-(i3 = (++by))) | 1);
        vMeth2(14, s, i3);
        fArr1[(i3 >>> 1) % N] = by;
        f1 = i3;
        vMeth1_check_sum += Float.floatToIntBits(f) + i3 + Float.floatToIntBits(f1) + s + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth(int i2, boolean b) {

        int i13=-1, i14=1972, i15=61758, i16=-209, iArr1[][]=new int[N][N];
        double d=-2.28522, d1=0.25529;
        byte by2=43, byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, -48733);
        FuzzerUtils.init(byArr, (byte)32);

        vMeth1(Test.fFld, i2, Test.fFld);
        if (b) {
            i2 *= (int)Test.instanceCount;
            i2 *= 85;
            for (i13 = 16; i13 < 359; i13++) {
                i2 &= 117;
            }
            d *= i14;
        } else if (true) {
            i14 >>= i2;
            Test.fFld = 225L;
        }
        i15 = 1;
        while (++i15 < 362) {
            d -= by2;
            iArr1[i15 - 1] = FuzzerUtils.int1array(N, (int)73);
            for (d1 = 5; d1 > 1; d1 -= 3) {
                Test.instanceCount += (long)(((d1 * i15) + i2) - Test.instanceCount);
                byArr = byArr;
            }
        }
        vMeth_check_sum += i2 + (b ? 1 : 0) + i13 + i14 + Double.doubleToLongBits(d) + i15 + by2 +
            Double.doubleToLongBits(d1) + i16 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=-2, i17=14, i18=54252, i19=6, i20=23976, i21=-253, i22=-209, i23=-109, i24=-46556, i25=-18, i26=-4,
            i27=184, i28=-10, i29=28684;
        float f2=30.578F;
        double d2=87.69909;

        for (i = 5; 339 > i; i++) {
            vMeth(i1, bFld);
            for (i17 = 75; i17 > 4; i17--) {
                i19 = 1;
                do {
                    Test.dArrFld[i19 + 1] += i;
                    if (bFld) break;
                    Test.instanceCount += (i19 ^ Test.instanceCount);
                } while (++i19 < 2);
                Test.fFld += (i17 + i17);
                i18 &= -6595;
            }
            i18 += (int)Test.instanceCount;
            for (i20 = 75; i20 > 3; i20 -= 3) {
                sArrFld[i20] = (short)i18;
                i1 = i22;
                i1 &= i21;
                Test.instanceCount += i20;
                i18 = (int)-76.217F;
            }
        }
        Test.instanceCount >>>= i18;
        i18 = i18;
        i23 += i20;
        i24 = 1;
        while (++i24 < 328) {
            for (f2 = 3; 77 > f2; ++f2) {
                i25 += 74;
                i22 *= (int)d2;
                for (i26 = 2; i26 > 1; i26 -= 3) {
                    i21 = 3;
                }
                i18 ^= i22;
                i25 += (int)(((f2 * f2) + i) - i24);
                for (i28 = 1; i28 < 2; ++i28) {
                    Test.instanceCount >>= i21;
                    Test.instanceCount -= 218L;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i17 = " + i + "," + i1 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 f2 i25 = " + i24 + "," + Float.floatToIntBits(f2) + "," + i25);
        FuzzerUtils.out.println("d2 i26 i27 = " + Double.doubleToLongBits(d2) + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 = " + i28 + "," + i29);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dArrFld sArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))
            + "," + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
