// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4152235503145141249L;
    public double dFld=1.94367;
    public static int iFld=-7;
    public static byte byFld=8;
    public static int iFld1=-13;
    public long lArrFld[]=new long[N];

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5, int i6) {

        int i8=-62042, i9=-51217, iArr[]=new int[N];
        float f1=0.503F;

        FuzzerUtils.init(iArr, 45646);

        iArr[(47369 >>> 1) % N] += Test.iFld;
        for (int i7 : iArr) {
            for (i8 = 1; i8 < 4; ++i8) {
                f1 %= 2.663F;
                f1 *= Test.instanceCount;
                i6 *= (int)f1;
                Test.iFld = (int)3769841391L;
                Test.iFld >>= i8;
                i7 += i4;
                f1 += (-228 + (i8 * i8));
                i6 <<= i8;
            }
            switch ((((i6 >>> 1) % 2) * 5) + 60) {
            case 64:
                i5 *= -68;
            case 62:
                Test.iFld += (int)Test.instanceCount;
                break;
            }
            i9 *= Test.byFld;
        }
        vMeth1_check_sum += i4 + i5 + i6 + i8 + i9 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, int i3, float f) {

        int i11=9, i12=45164, i13=-55, i14=13, iArr1[]=new int[N];
        double d1=-2.114675;
        boolean b=true;

        FuzzerUtils.init(iArr1, 6);

        vMeth1(Test.iFld, Test.iFld, i3);
        for (int i10 : iArr1) {
            Test.instanceCount = i10;
            for (i11 = 1; 4 > i11; ++i11) {
                Test.iFld = Test.iFld1;
                for (i13 = i11; 2 > i13; ++i13) {
                    i14 -= (int)d1;
                    Test.iFld = i13;
                    f *= Test.iFld1;
                    iArr1[i13] *= Test.iFld;
                    iArr1[i11] >>= (int)Test.instanceCount;
                    if (b) break;
                    Test.iFld1 += (i13 ^ l);
                    i14 += (i13 * i13);
                }
                f += l;
            }
        }
        vMeth_check_sum += l + i3 + Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d1) + (b
            ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth(int i2, double d) {

        float f2=126.680F;

        vMeth(Test.instanceCount, Test.iFld, f2);
        long meth_res = i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=71, i1=5, i15=-205, i16=-65, i17=-35, i18=5, i19=7724, i20=-2, i21=-28165, i22=13316, iArr2[]=new int[N];
        boolean b1=true;
        float f3=0.681F;

        FuzzerUtils.init(iArr2, -70);

        dFld -= (Test.iFld++);
        for (i = 1; 135 > i; i++) {
            i1 >>= (int)lMeth(i, 1.35183);
        }
        Test.instanceCount = i;
        Test.iFld *= i;
        switch (((i1 >>> 1) % 6) + 49) {
        case 49:
            for (i15 = 22; i15 < 385; ++i15) {
                for (i17 = 4; i17 < 69; i17++) {
                    iArr2[i15 - 1] = Test.byFld;
                    iArr2 = FuzzerUtils.int1array(N, (int)189);
                    i18 += Test.iFld1;
                    try {
                        iArr2[i17 + 1] = (i17 / 42751);
                        Test.iFld1 = (2005626468 / Test.iFld);
                        i16 = (148 % i17);
                    } catch (ArithmeticException a_e) {}
                }
                if (b1) continue;
                i18 = Test.iFld1;
                iArr2[i15 + 1] = (int)-1798617415L;
                f3 += i15;
                i18 += (31 + (i15 * i15));
            }
            for (i19 = 5; i19 < 165; ++i19) {
                i16 += (i19 - i15);
                Test.iFld += (int)Test.instanceCount;
            }
            Test.instanceCount += i17;
            Test.iFld -= i16;
            break;
        case 50:
            f3 -= i18;
        case 51:
            i16 = -58;
            for (i21 = 13; i21 < 327; i21++) {
                i22 += (204 + (i21 * i21));
                Test.iFld ^= i15;
                i20 *= i22;
                i1 = i22;
                i22 = Test.byFld;
            }
        case 52:
            i20 = Test.iFld;
            break;
        case 53:
            Test.byFld -= (byte)i1;
            break;
        case 54:
            lArrFld[(i16 >>> 1) % N] -= i18;
            break;
        default:
            i1 *= (int)Test.instanceCount;
        }

        FuzzerUtils.out.println("i i1 i15 = " + i + "," + i1 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("b1 f3 i19 = " + (b1 ? 1 : 0) + "," + Float.floatToIntBits(f3) + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld Test.iFld1 lArrFld = " + Test.byFld + "," + Test.iFld1 + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
