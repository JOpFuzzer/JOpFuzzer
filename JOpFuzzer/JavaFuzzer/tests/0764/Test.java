// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=199L;
    public static int iFld=0;
    public static volatile int iArrFld[]=new int[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 2);
        FuzzerUtils.init(Test.dArrFld, -8.108294);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth() {

        byte by=57;
        int i=-169, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -31983);

        by = (byte)iArr[(i >>> 1) % N];
        i += (Integer.reverseBytes(iArr[(i >>> 1) % N]) & iArr[(i >>> 1) % N]);
        vSmallMeth_check_sum += by + i + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(long l, int i4) {

        double d1=1.8175;
        short s=-18808;
        boolean b=true;
        byte by2=-90;
        float f1=-82.352F;
        int i6=-86, i7=32855, iArr1[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -7);
        FuzzerUtils.init(lArr, -3849536978L);

        for (int i5 : iArr1) {
            i4 = (int)(l--);
            if (b) {
                vSmallMeth();
                d1 %= (i4 | 1);
                s += (short)487;
                lArr[(i4 >>> 1) % N] -= 9;
            }
            by2 *= (byte)i4;
            f1 += i4;
            i5 <<= Test.iFld;
            for (i6 = 1; i6 < 4; ++i6) {
                f1 += (((i6 * s) + l) - i6);
                if (b) {
                    i5 = Test.iFld;
                }
                i5 = (int)f1;
            }
        }
        long meth_res = l + i4 + Double.doubleToLongBits(d1) + s + (b ? 1 : 0) + by2 + Float.floatToIntBits(f1) + i6 +
            i7 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i1, int i2, int i3) {

        double d=23.57284;
        float f2=62.270F;
        int i8=-1, i9=-42799, i10=-5, i11=57643;

        Test.instanceCount -= (long)((++d) - Math.abs(iMeth(Test.instanceCount, Test.iFld)));
        i3 >>>= Test.iFld;
        f2 -= i3;
        d *= -7;
        for (i8 = 12; i8 < 229; i8++) {
            Test.iArrFld = Test.iArrFld;
            Test.dArrFld[i8 + 1] += i8;
            i2 += (i8 + Test.instanceCount);
            i3 -= i2;
            Test.iArrFld[i8] = i3;
            for (i10 = 1; i10 < 7; ++i10) {
                i1 -= -8;
                i11 <<= i3;
            }
            Test.iArrFld = Test.iArrFld;
            i3 += (i8 + f2);
        }
        long meth_res = i1 + i2 + i3 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-1.208F;
        byte by1=-38;
        int i12=239, i13=16925, i14=13, i15=15268, i16=96, i17=-33880, i18=-59433, i19=-11;

        for (int smallinvoc=0; smallinvoc<821; smallinvoc++) vSmallMeth();
        Test.iFld -= Test.iFld;
        Test.iFld ^= (int)((long)(-(--f)) | (Test.instanceCount + (Test.instanceCount *= Test.iFld)));
        by1 &= (byte)(-(lMeth(Test.iFld, 29418, Test.iFld) - i12));
        Test.iFld %= (int)(Test.iFld | 1);
        switch ((((Test.iFld >>> 1) % 2) * 5) + 26) {
        case 36:
            for (i13 = 389; i13 > 20; i13 -= 2) {
                i12 += (i13 * i13);
                for (i15 = 136; i15 > 2; i15--) {
                    Test.iFld += 242;
                    f = i15;
                    i17 = 1;
                    do {
                        Test.iFld += (((i17 * i16) + Test.iFld) - i15);
                        f = Test.instanceCount;
                        i16 -= (int)Test.instanceCount;
                        Test.iArrFld[i15] = i13;
                        Test.instanceCount += (((i17 * i16) + i17) - i13);
                        switch ((i15 % 3) + 43) {
                        case 43:
                        case 44:
                            i12 -= i12;
                            break;
                        case 45:
                            i16 += (i17 * i12);
                            if (false) break;
                            i16 = i15;
                            break;
                        }
                    } while (++i17 < 2);
                    i16 += 14;
                    Test.iArrFld[i13] = (int)Test.instanceCount;
                    for (i18 = 2; i18 > 1; i18--) {
                        Test.instanceCount += i18;
                        Test.iFld -= i13;
                    }
                    Test.instanceCount -= i17;
                    i19 += (((i15 * i15) + Test.instanceCount) - f);
                    Test.instanceCount -= i12;
                }
            }
            break;
        case 27:
            i12 = i19;
        default:
            i19 *= (int)f;
        }

        FuzzerUtils.out.println("f by1 i12 = " + Float.floatToIntBits(f) + "," + by1 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 = " + i19);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.iArrFld = " + Test.instanceCount + "," + Test.iFld +
            "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
