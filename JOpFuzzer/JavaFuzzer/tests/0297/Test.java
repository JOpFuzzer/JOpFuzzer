// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=23485L;
    public static volatile double dFld=2.1943;
    public static byte byFld=-90;
    public static short sFld=1768;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7741);
        FuzzerUtils.init(Test.lArrFld, 5394924019103408792L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i5) {

        int i6=36, i7=0, i8=-45, i9=-51404, i10=191, i11=6, iArr[]=new int[N];
        long l=-4514536553240839363L;

        FuzzerUtils.init(iArr, 6);

        i6 = 1;
        do {
            boolean b=false;
            i5 += (int)Test.dFld;
            for (i7 = 9; i7 > 1; --i7) {
                i9 -= i9;
                if (true) continue;
                Test.instanceCount += (i7 * i9);
                i9 ^= i5;
                i5 ^= i7;
                i8 = i7;
                iArr[i7 - 1] -= (int)l;
            }
            i8 = (int)Test.instanceCount;
            if (b) break;
            for (i10 = 1; i10 < 9; ++i10) {
                i9 ^= i9;
                i11 = i8;
            }
        } while (++i6 < 180);
        long meth_res = i5 + i6 + i7 + i8 + i9 + l + i10 + i11 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i2=27585, i3=244, i4=-153, i12=0, i13=-133;
        boolean b1=true;
        float f1=-1.89F;

        for (i2 = 9; 314 > i2; i2++) {
            i4 = 1;
            while (++i4 < 5) {
                Test.instanceCount <<= iMeth1(i4);
                Test.instanceCount = i2;
                i3 %= -54661;
                if (b1) break;
                Test.instanceCount *= i3;
                f1 += (i4 * i4);
                i3 += (int)Test.instanceCount;
            }
            for (i12 = 1; i12 < 5; i12 += 2) {
                Test.instanceCount -= Test.instanceCount;
                Test.iArrFld[i2 - 1] = i3;
                i3 = i2;
                i3 += (int)2051670091259440574L;
                Test.dFld += i2;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + i12 + i13;
    }

    public static int iMeth(float f) {

        int i=-12513, i1=8, i14=-4, i15=119, i16=-76, i17=4;

        for (i = 14; i < 224; i++) {
            vMeth();
            i1 >>= -4;
            for (i14 = 1; i14 < 8; i14++) {
                Test.lArrFld[i14 - 1] >>= i1;
                Test.iArrFld[i14 + 1] -= (int)Test.dFld;
                i1 += (int)Test.instanceCount;
                f = i14;
                for (i16 = 2; i16 > 1; i16--) {
                    Test.instanceCount = Test.byFld;
                    i15 -= (int)1.376F;
                    Test.dFld = i16;
                }
                i1 &= i;
                Test.sFld = (short)i17;
                Test.instanceCount = i17;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i + i1 + i14 + i15 + i16 + i17;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f2=-1.901F;
        int i18=24583, i19=16, i20=135, i21=0, i22=42091, i23=15805, i24=-37968, i25=38404, i26=-14;
        boolean b2=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        Test.instanceCount = (long)(Math.max(iMeth(f2), -13241) - f2);
        Test.byFld <<= (byte)Test.instanceCount;
        for (i18 = 5; i18 < 155; ++i18) {
            for (i20 = 10; i20 < 167; i20++) {
                i21 += (int)Test.instanceCount;
                i19 += (i20 * i20);
                i19 += (i20 - Test.sFld);
            }
            i19 = i18;
            for (i22 = 4; i22 < 167; i22++) {
                for (i24 = 1; i24 < 2; i24++) {
                    i23 += (i24 + i25);
                    Test.lArrFld[i24] += 24919;
                    switch (((i18 % 9) * 5) + 103) {
                    case 111:
                        Test.instanceCount += Test.instanceCount;
                        i19 <<= i21;
                        break;
                    case 125:
                        if (b2) {
                            Test.iArrFld[i18] /= (int)(Test.instanceCount | 1);
                            f2 += (float)Test.dFld;
                        } else {
                            i25 = i19;
                            i19 = (int)Test.instanceCount;
                        }
                        i25 += (int)(4L + (i24 * i24));
                        f2 = i23;
                    case 120:
                        i23 >>>= i24;
                        b2 = false;
                        Test.dFld = i21;
                        Test.instanceCount >>>= Test.instanceCount;
                    case 133:
                        Test.instanceCount -= (long)Test.dFld;
                    case 124:
                        Test.instanceCount = i24;
                        bArr[i24] = b2;
                        i19 <<= i18;
                        break;
                    case 113:
                        i23 -= i19;
                        break;
                    case 148:
                        i23 -= Test.sFld;
                        break;
                    case 106:
                        i19 = i19;
                        break;
                    case 119:
                        i25 += i26;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f2 i18 i19 = " + Float.floatToIntBits(f2) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("b2 i26 bArr = " + (b2 ? 1 : 0) + "," + i26 + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.sFld Test.iArrFld Test.lArrFld = " + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
