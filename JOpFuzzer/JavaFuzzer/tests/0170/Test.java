// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2091669903924628624L;
    public static float fFld=47.449F;
    public static short sFld=32239;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];
    public volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
        FuzzerUtils.init(Test.lArrFld, 244L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i5=-37189, i6=-9, i7=-40907, i8=88, i9=-38, i10=-3, i11=-110;
        double d1=2.60943;

        i5 = i5;
        for (d1 = 12; d1 < 343; ++d1) {
            i6 += (int)(d1 - i6);
            Test.fFld += Test.instanceCount;
            i5 = (int)Test.instanceCount;
            Test.iArrFld[(int)(d1 + 1)] = (int)-2995210606574551032L;
        }
        for (i7 = 4; i7 < 151; ++i7) {
            for (i9 = 1; i9 < 11; i9++) {
                i11 = 1;
                do {
                    Test.iArrFld[i7 - 1] |= i7;
                    i6 ^= -12;
                    switch ((((i5 >>> 1) % 2) * 5) + 44) {
                    case 52:
                        Test.instanceCount *= -7L;
                        Test.iArrFld[i11 - 1] *= -12;
                    case 51:
                        Test.instanceCount -= 11;
                    }
                } while (++i11 < 2);
            }
        }
        vMeth1_check_sum += i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + i10 + i11;
    }

    public static void vMeth(int i1) {

        int i2=44705, i3=10322, i4=57469, i12=111, i13=-34, i14=-19936, i15=10, i16=-14;
        byte by=-93;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6L);

        i2 -= ((i2 = i2) >>> Math.min(i1--, i2 * i1));
        for (i3 = 141; i3 > 6; --i3) {
            switch (((i3 % 2) * 5) + 29) {
            case 39:
                vMeth1();
                Test.instanceCount >>= i4;
                for (i12 = 12; i12 > i3; i12 -= 3) {
                    Test.iArrFld[i3] -= i1;
                    i1 += (((i12 * by) + i14) - i13);
                    lArr[i12 + 1] += (long)Test.fFld;
                    Test.instanceCount <<= Test.sFld;
                    i14 *= i1;
                    if (i13 != 0) {
                        vMeth_check_sum += i1 + i2 + i3 + i4 + i12 + i13 + by + i14 + i15 + i16 + (b ? 1 : 0) +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                }
                for (i15 = 12; i15 > i3; i15 -= 2) {
                    Test.sFld = (short)253;
                    if (b) continue;
                }
                break;
            case 31:
                b = b;
                break;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i12 + i13 + by + i14 + i15 + i16 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(int i, double d, short s) {


        vMeth(-9);
        vSmallMeth_check_sum += i + Double.doubleToLongBits(d) + s;
    }

    public void mainTest(String[] strArr1) {

        int i17=-238, i18=156, i19=-6, i20=-81, i21=-36044, i22=50156, i23=62699, i24=58433, i25=-8;
        boolean b1=true;
        byte by1=19;

        for (int smallinvoc=0; smallinvoc<650; smallinvoc++) vSmallMeth(i17, 2.27984, Test.sFld);
        for (i18 = 2; i18 < 145; i18 += 3) {
            Test.instanceCount -= i19;
            i19 += i18;
            for (i20 = 1; i20 < i18; ++i20) {
                Test.lArrFld[i20] = i18;
                if (true) {
                    i21 += (int)Test.instanceCount;
                    switch (((i18 % 4) * 5) + 126) {
                    case 137:
                        Test.fFld = -25357;
                        i21 = i17;
                    case 136:
                        i19 >>>= (int)-86L;
                        for (i22 = 2; i18 < i22; i22--) {
                            if (b1) {
                                Test.lArrFld[i18 - 1] -= i19;
                                sArrFld[i22 - 1] >>= (short)i23;
                                Test.iArrFld[i20 + 1] = i18;
                                Test.fFld += i22;
                            } else if (b1) {
                            } else {
                                try {
                                    i24 = (i23 / i23);
                                    i24 = (336028578 % i23);
                                    i21 = (i20 / i22);
                                } catch (ArithmeticException a_e) {}
                                Test.sFld += (short)(((i22 * i24) + i17) - Test.instanceCount);
                                i24 += (((i22 * i20) + i21) - i24);
                                Test.iArrFld[i20] |= 2;
                            }
                            i17 <<= i17;
                            Test.fFld = -3L;
                        }
                        break;
                    case 135:
                        i24 = i19;
                        break;
                    case 139:
                        i23 = 2;
                        Test.iArrFld[i18 + 1] /= (int)(i18 | 1);
                        i25 = 1;
                        do {
                            if (b1) continue;
                            Test.instanceCount -= by1;
                        } while (++i25 < 2);
                        break;
                    default:
                        i21 = i24;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 b1 i24 = " + i23 + "," + (b1 ? 1 : 0) + "," + i24);
        FuzzerUtils.out.println("i25 by1 = " + i25 + "," + by1);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
