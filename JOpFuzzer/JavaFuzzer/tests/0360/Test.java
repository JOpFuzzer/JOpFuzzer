// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=8616230793127933031L;
    public static int iFld=248;
    public byte byFld=-99;
    public static long lFld=-2607209893448156329L;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 11L);
        FuzzerUtils.init(Test.iArrFld, 13833);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static void vSmallMeth(int i, int i1) {

        byte by=-55;

        by += (byte)(--i);
        vSmallMeth_check_sum += i + i1 + by;
    }

    public static double dMeth(long l, int i8) {

        byte by1=2;
        double d1=-109.38931;
        short s=-3639;

        i8 = (int)l;
        by1 = (byte)Test.instanceCount;
        d1 = i8;
        Test.iArrFld = Test.iArrFld;
        i8 += s;
        long meth_res = l + i8 + by1 + Double.doubleToLongBits(d1) + s;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i4) {

        int i5=-1, i6=-5, i9=88, i10=174, i11=-94, i12=4, i13=-136, i14=3;
        float f=116.635F, fArr[][]=new float[N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)84);
        FuzzerUtils.init(fArr, 0.727F);

        Test.instanceCount = (--byArr[(i4 >>> 1) % N]);
        for (i5 = 10; i5 < 160; i5++) {
            int i7=13125;
            Test.instanceCount <<= Math.min(--Test.lArrFld[i5], (long)(fArr[i5 + 1][i5 + 1] + (i7 + i7)));
            dMeth(Test.instanceCount, i6);
            for (i9 = 1; i9 < 11; i9 += 2) {
                boolean b=true;
                i6 += (((i9 * i10) + i5) - i9);
                for (i11 = 1; i11 < 3; i11++) {
                    f = i7;
                }
                if (b) continue;
                if (b) continue;
                for (i13 = 1; i13 < 3; i13++) {
                    i6 += (i13 - i14);
                    Test.instanceCount = i12;
                    i7 += (i13 * i13);
                    i6 = i9;
                }
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f) + i13 + i14 +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(int i2, int i3, double d) {


        vMeth(i3);
        Test.iFld = Test.iFld;
        long meth_res = i2 + i3 + Double.doubleToLongBits(d);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d2=0.51247, d3=84.47974, dArr[]=new double[N];
        float f1=0.726F, fArr1[]=new float[N];
        int i16=-6, i17=-11, i18=-55734, i19=40680, i21=9, i22=-111;
        long l1=-3139424788L, l2=1107L;
        short s1=13367, sArr[]=new short[N];
        boolean b1=false;

        FuzzerUtils.init(sArr, (short)3839);
        FuzzerUtils.init(fArr1, 83.235F);
        FuzzerUtils.init(dArr, -1.78097);

        for (int smallinvoc=0; smallinvoc<155; smallinvoc++) vSmallMeth((int)((lMeth(Test.iFld, Test.iFld, d2) -
            Test.iFld) - Test.iFld), Test.iFld);
        f1 -= Test.iFld;
        for (int i15 : iArrFld1) {
            i16 = 63;
            while (--i16 > 0) {
                int i20=-105;
                for (i17 = 1; i17 < 1; i17 += 2) {
                    l1 += i15;
                    iArrFld1[i17 - 1] += i15;
                    Test.instanceCount += Test.iFld;
                    byFld <<= (byte)i18;
                    i18 += (int)(-30.498F + (i17 * i17));
                    i18 -= (int)l1;
                    iArrFld1[i16 + 1] <<= i18;
                }
                Test.lFld += (-13 + (i16 * i16));
                Test.iFld += i17;
                Test.instanceCount = -5;
                sArr[i16 - 1] %= (short)(byFld | 1);
                iArrFld1[i16] /= (int)(i15 | 1);
                l1 = s1;
                for (l2 = 1; l2 < 1; ++l2) {
                    l1 += Test.iFld;
                    i15 -= s1;
                    fArr1[i16 + 1] = i15;
                    i15 *= i19;
                }
                i20 += (i16 * i16);
                i15 = 6;
            }
            d3 = 1;
            while (++d3 < 63) {
                dArr[(int)(d3 + 1)] += i17;
                for (i21 = 1; i21 < 1; i21++) {
                    l1 >>= -4;
                    if (b1) break;
                }
            }
        }

        FuzzerUtils.out.println("d2 f1 i16 = " + Double.doubleToLongBits(d2) + "," + Float.floatToIntBits(f1) + "," +
            i16);
        FuzzerUtils.out.println("i17 i18 l1 = " + i17 + "," + i18 + "," + l1);
        FuzzerUtils.out.println("s1 l2 i19 = " + s1 + "," + l2 + "," + i19);
        FuzzerUtils.out.println("d3 i21 i22 = " + Double.doubleToLongBits(d3) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("b1 sArr fArr1 = " + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(sArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld byFld = " + Test.instanceCount + "," + Test.iFld + "," +
            byFld);
        FuzzerUtils.out.println("Test.lFld Test.lArrFld Test.iArrFld = " + Test.lFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iArrFld1 = " + FuzzerUtils.checkSum(iArrFld1));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
