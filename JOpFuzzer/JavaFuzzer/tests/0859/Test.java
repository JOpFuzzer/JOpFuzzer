// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static volatile short sFld=-29447;
    public int iFld=0;
    public double dFld=-2.105616;
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -796124398L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i10, long l) {

        double d2=43.27880, d3=-109.6628;
        int i11=34734, i12=111, i13=-7, iArr1[]=new int[N];
        float f2=0.472F;
        byte by=30;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 64);
        FuzzerUtils.init(lArr1, 1114295087432979119L);

        d2 = 1;
        do {
            i11 = 1;
            do {
                for (i12 = 1; 1 > i12; ++i12) {
                    try {
                        i10 = (i13 / i10);
                        i10 = (429874430 / iArr1[i12 + 1]);
                        i13 = (-205 / iArr1[i12 - 1]);
                    } catch (ArithmeticException a_e) {}
                    i10 = (int)Test.instanceCount;
                    lArr1[i11][i12] = l;
                    i13 = (int)d2;
                }
                f2 = (float)d2;
                l -= i10;
                i13 = i10;
                i13 <<= (int)Test.instanceCount;
                by *= (byte)i10;
                if (i11 != 0) {
                }
            } while (++i11 < 10);
            d3 *= i10;
            Test.instanceCount += (long)((long)d2 | i11);
        } while (++d2 < 165);
        long meth_res = i10 + l + Double.doubleToLongBits(d2) + i11 + i12 + i13 + Float.floatToIntBits(f2) + by +
            Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        float f1=-36.450F;
        int i6=17038, i7=227, i8=1, i9=-170, iArr[]=new int[N];
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, 24.85538);
        FuzzerUtils.init(iArr, -30);
        FuzzerUtils.init(lArr, -37921L);

        for (double d1 : dArr) {
            int i5=123;
            i5 *= 8;
            Test.instanceCount = (i5 * Test.sFld);
            d1 = ((iArr[(i5 >>> 1) % N]--) + ((i5 + Test.instanceCount) - (++i5)));
            f1 = i5;
            d1 = Integer.reverseBytes(i5++);
            i5 %= (int)((i5++) | 1);
            Test.instanceCount += Math.abs(i5 * (i5 + i5));
            for (i6 = 1; i6 < 4; ++i6) {
                for (i8 = 2; i8 > 1; i8 -= 3) {
                    lArr[i8] -= (long)(d1++);
                    i7 -= (int)lMeth(i5, Test.instanceCount);
                    iArr[i8 - 1] *= i7;
                    Test.instanceCount += i8;
                    iArr[i8] = i6;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(int i3, double d, int i4) {


        vMeth();
        vSmallMeth_check_sum += i3 + Double.doubleToLongBits(d) + i4;
    }

    public void mainTest(String[] strArr1) {

        float f=2.322F;
        int i=33585, i1=124, i2=-4, i14=0, i15=-26676, i16=238, i17=10, i18=172, i19=-5953, i20=16293, i21=-9,
            iArr2[]=new int[N], iArr3[]=new int[N];
        long l1=-4230252739L;

        FuzzerUtils.init(iArr2, 102);
        FuzzerUtils.init(iArr3, 121);

        f = Math.min(Math.min(19052 + (i--), Test.instanceCount++), Test.instanceCount--);
        for (i1 = 17; 360 > i1; i1++) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(iFld, dFld, i);
        }
        i14 = 1;
        do {
            iFld = -53;
            i -= (int)6739159686303606622L;
            iArr2[i14 - 1] *= i1;
            iArr2[i14 + 1] = (int)Test.instanceCount;
            for (i15 = 3; i15 < 69; i15++) {
                i2 = (int)dFld;
                iArr2[i14 + 1] -= (int)Test.instanceCount;
                for (i17 = 1; 2 > i17; ++i17) {
                    dFld = Test.sFld;
                    i18 *= (int)Test.instanceCount;
                    Test.lArrFld[(i18 >>> 1) % N] = i17;
                    iArr2[i14] = (int)l1;
                }
                l1 = l1;
                l1 += (213 + (i15 * i15));
                i19 ^= i;
                Test.instanceCount = l1;
                i18 -= (int)Test.instanceCount;
                for (i20 = 2; i15 < i20; i20 -= 2) {
                    iArr3[i15] = (int)-2.768F;
                    dFld /= (i | 1);
                    i = -37;
                    Test.instanceCount = i1;
                    iArr3[i14 + 1] = i18;
                    i18 += i15;
                    Test.instanceCount = i17;
                    f -= i21;
                }
            }
        } while (++i14 < 367);

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i14 i15 = " + i2 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("l1 i19 i20 = " + l1 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 iArr2 iArr3 = " + i21 + "," + FuzzerUtils.checkSum(iArr2) + "," +
            FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld iFld = " + Test.instanceCount + "," + Test.sFld + "," +
            iFld);
        FuzzerUtils.out.println("dFld Test.lArrFld = " + Double.doubleToLongBits(dFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
