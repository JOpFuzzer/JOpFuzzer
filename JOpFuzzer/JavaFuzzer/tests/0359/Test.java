// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1L;
    public static double dFld=31.115878;
    public static short sFld=-22764;
    public float fFld=16.5F;
    public byte byFld=28;
    public long lArrFld[]=new long[N];

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static int iMeth(int i4, long l) {

        byte by=-103;
        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -148);

        by = (byte)(--by);
        iArr1[(227 >>> 1) % N] += iArr1[(9 >>> 1) % N];
        long meth_res = i4 + l + by + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i7, long l2) {

        float f=1.749F;
        int i8=30548, i9=6, i10=3, i11=-26169, i12=-13, i13=213, i14=-47038, i15=-10;
        byte by1=86;
        boolean b=true;

        i7 = (i7 - (i7 <<= (i7++)));
        f -= (Integer.reverseBytes(3 + (i7--)) - Math.max(i7, iMeth(i7, 10L)));
        for (i8 = 299; 6 < i8; --i8) {
            i9 = i8;
            i9 -= i8;
            for (i10 = 1; i10 < 6; i10++) {
                for (i12 = 1; i12 < 2; ++i12) {
                    i13 -= i8;
                    i13 += (((i12 * Test.instanceCount) + i10) - i12);
                    by1 += (byte)(((i12 * i8) + i8) - i9);
                    i11 += i9;
                }
                for (i14 = 2; i14 > 1; i14--) {
                    Test.sFld <<= (short)0;
                    b = b;
                    i11 = (int)f;
                }
            }
        }
        vMeth_check_sum += i7 + l2 + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + i12 + i13 + by1 + i14 + i15 + (b ?
            1 : 0);
    }

    public static float fMeth(long l1, int i5) {

        int i6=-13, i16=-25835, i17=-5, iArr2[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr2, 25354);

        l1 -= ((iArr2[(i5 >>> 1) % N]--) + i5);
        i5 = (int)l1;
        i6 = 1;
        while (++i6 < 283) {
            i5 = (int)(i6 + Math.abs(i5 % (i5 | 1)));
            switch ((i6 % 2) + 90) {
            case 90:
                vMeth(i6, l1);
            case 91:
                Test.instanceCount -= 176;
                Test.instanceCount = (long)1.128F;
                Test.dFld -= Test.sFld;
                break;
            }
            i5 += 32;
            l1 += (i6 * i6);
            i5 *= i6;
            for (i16 = 1; i16 < 6; ++i16) {
                b1 = true;
                if (i16 != 0) {
                }
            }
        }
        long meth_res = l1 + i5 + i6 + i16 + i17 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-48646, i1=-234, i2=-64, i3=-160, i18=-6, i19=-146, i20=-12, i21=-10, i22=-48, i23=-131, i24=1, i25=-5,
            iArr[]=new int[N];

        FuzzerUtils.init(iArr, 159);

        for (i = 12; 221 > i; i++) {
            if (false) {
                for (i2 = 120; i2 > 3; i2 -= 2) {
                    lArrFld[i + 1] = (long)((-Test.dFld) - -9);
                    lArrFld[i2] -= (--iArr[i2]);
                    iMeth((int)(fMeth(Test.instanceCount, i1) * i), Test.instanceCount);
                    for (i18 = 3; i18 > 1; i18 -= 2) {
                        byte by2=118;
                        switch ((i18 % 2) + 91) {
                        case 91:
                            fFld += i18;
                            Test.instanceCount %= (i1 | 1);
                            if (false) continue;
                            break;
                        case 92:
                            by2 >>= (byte)Test.instanceCount;
                            i19 += i19;
                            break;
                        default:
                            i19 /= (int)(i1 | 1);
                            try {
                                i1 = (-78790103 % i18);
                                iArr[i2 + 1] = (-78 % i19);
                                i1 = (i1 / i3);
                            } catch (ArithmeticException a_e) {}
                            iArr = iArr;
                        }
                        i3 += (i18 + Test.instanceCount);
                        i1 <<= i;
                        iArr[i - 1] &= i3;
                    }
                    for (i20 = 3; i20 > 1; --i20) {
                        i3 *= (int)Test.instanceCount;
                    }
                    i21 += (int)Test.instanceCount;
                    Test.instanceCount += i2;
                    Test.instanceCount += i2;
                }
                for (i22 = 5; i22 < 120; ++i22) {
                    Test.instanceCount = byFld;
                    for (i24 = 1; i24 < 2; i24++) {
                        fFld -= i3;
                    }
                    try {
                        iArr[i22 + 1] = (i22 / -42310);
                        i19 = (i24 / iArr[i22]);
                        i3 = (i24 / 28);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i18 i19 = " + i3 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("fFld byFld lArrFld = " + Float.floatToIntBits(fFld) + "," + byFld + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest vMeth fMeth
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
