// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3462691675L;
    public volatile int iFld=96;
    public double dFld=-13.54124;
    public static float fFld=115.67F;
    public static int iFld1=10;
    public static volatile boolean bFld=false;
    public static short sFld=9150;
    public static byte byFld=117;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 252L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1, int i4, long l) {

        int i5=1143, i6=-46050, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 13);

        for (i5 = 221; i5 > 1; i5 -= 3) {
            Test.instanceCount <<= Test.iFld1;
            iArr = iArr;
            Test.iFld1 += (((i5 * f1) + l) - Test.iFld1);
        }
        long meth_res = Float.floatToIntBits(f1) + i4 + l + i5 + i6 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        float f2=102.543F;
        int i7=-44814, i8=167, i9=3913, i10=-2, iArr1[]=new int[N];
        long l1=-1898412575L;
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, 10);
        FuzzerUtils.init(bArr, true);

        Test.fFld *= Test.iFld1;
        if (Test.bFld) {
            Test.iFld1 -= iMeth(Test.fFld, Test.iFld1, Test.instanceCount);
            for (f2 = 13; f2 < 319; ++f2) {
                for (i8 = 1; i8 < 5; i8++) {
                    if (Test.bFld) continue;
                    Test.iFld1 >>= i7;
                    for (l1 = 2; 1 < l1; l1--) {
                        i10 = (int)-99L;
                        Test.instanceCount += Test.instanceCount;
                        Test.sFld += (short)l1;
                        if (b) {
                            iArr1[(int)(l1)] += 171;
                            Test.iFld1 *= Test.iFld1;
                        } else if (Test.bFld) {
                            i9 += (int)76.91813;
                        } else {
                            Test.fFld += (l1 * l1);
                        }
                    }
                }
            }
        } else if (true) {
            bArr[(i10 >>> 1) % N] = false;
        } else if (b) {
            i10 ^= i8;
        }
        long meth_res = Float.floatToIntBits(f2) + i7 + i8 + i9 + l1 + i10 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1)
            + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i2, int i3, short s) {

        int i11=-16, i12=20, i13=50, i14=-47715, i15=-11, i16=-12, iArr2[]=new int[N];
        double d=122.72408;

        FuzzerUtils.init(iArr2, 165);

        i3 |= (int)lMeth();
        if (Test.bFld) {
            i11 = 1;
            while (++i11 < 368) {
                i3 += (53469 + (i11 * i11));
                i3 += (((i11 * i2) + i3) - i11);
                d = s;
                for (i12 = 1; 5 > i12; i12++) {
                    d = i12;
                }
                for (i14 = 1; i14 < 5; i14++) {
                    i16 = 1;
                    do {
                        if (Test.bFld) break;
                    } while (++i16 < 2);
                    Test.fFld = Test.fFld;
                    iArr2[i11 - 1] = i13;
                    i3 += (int)Test.instanceCount;
                    Test.byFld += (byte)(i14 * i14);
                }
            }
        }
        vMeth_check_sum += i2 + i3 + s + i11 + Double.doubleToLongBits(d) + i12 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        float f=-2.408F;
        int i=-54303, i1=132, i17=59688, i18=-46870, i19=10, i20=-134, iArr3[]=new int[N];
        long l2=60L, l3=-188L, l4=-2968110895759384427L;

        FuzzerUtils.init(iArr3, 14821);

        f = (((f / (Test.instanceCount | 1)) - (iFld % (iFld | 1))) + ((long)(iFld - dFld) | (Test.instanceCount + 6)));
        for (i = 1; i < 372; ++i) {
            switch (((i >>> 1) % 2) + 46) {
            case 46:
                i1 += (((i * iFld) + iFld) - f);
                vMeth(i, iFld, (short)(-4779));
                break;
            case 47:
                i1 += (i * i);
                Test.iFld1 = (int)Test.instanceCount;
                Test.iFld1 = i1;
            }
            i17 = 1;
            while (++i17 < 68) {
                Test.instanceCount = l2;
                l2 += (i17 * i17);
                for (i18 = 1; 1 > i18; ++i18) {
                    dFld -= f;
                    iFld += (int)f;
                    Test.iFld1 += (i18 + i1);
                    dFld *= i17;
                    i1 += (i18 * i18);
                    Test.iFld1 += i18;
                    Test.iFld1 = 51677;
                    iFld = (int)-2.531F;
                }
            }
            try {
                i1 = (i1 / iArr3[i - 1]);
                i19 = (240 / i19);
                Test.iFld1 = (-1359572580 % i1);
            } catch (ArithmeticException a_e) {}
            switch ((((Test.iFld1 >>> 1) % 9) * 5) + 47) {
            case 60:
                for (l3 = 4; l3 < 68; ++l3) {
                    l2 += (6 + (l3 * l3));
                    iFld -= (int)-2.38571;
                    Test.sFld += (short)l2;
                    try {
                        Test.iFld1 = (i19 % i);
                        iFld = (193 / i18);
                        iArr3[i + 1] = (i17 / 200);
                    } catch (ArithmeticException a_e) {}
                }
                Test.fFld *= l3;
                Test.bFld = Test.bFld;
            case 57:
                Test.instanceCount += iFld;
            case 68:
                if (Test.bFld) continue;
                break;
            case 63:
                iFld = i18;
                break;
            case 74:
                Test.instanceCount -= i18;
                break;
            case 75:
                Test.lArrFld[i] >>= Test.instanceCount;
            case 49:
                l4 = i17;
                break;
            case 53:
                iFld *= i19;
            case 66:
                i19 <<= (int)11L;
                break;
            default:
                iArr3[i + 1] = i17;
            }
        }

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("i17 l2 i18 = " + i17 + "," + l2 + "," + i18);
        FuzzerUtils.out.println("i19 l3 i20 = " + i19 + "," + l3 + "," + i20);
        FuzzerUtils.out.println("l4 iArr3 = " + l4 + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount iFld dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.fFld Test.iFld1 Test.bFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.iFld1 + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld Test.byFld Test.lArrFld = " + Test.sFld + "," + Test.byFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
