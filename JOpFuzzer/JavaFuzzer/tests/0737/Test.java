// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=4082835166652087056L;
    public static float fFld=-1.1001F;
    public static boolean bFld=true;
    public static short sFld=-10619;
    public static double dFld=-1.69171;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
        FuzzerUtils.init(Test.lArrFld, -48638L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i10, int i11, int i12) {

        int i13=42303, i14=6, i15=6;
        float f=-107.827F;
        byte by=96;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(bArr1, false);

        i13 = 1;
        do {
            f = -87;
            if (i11 != 0) {
                vMeth1_check_sum += i10 + i11 + i12 + i13 + Float.floatToIntBits(f) + by + i14 + i15 +
                    FuzzerUtils.checkSum(bArr1);
                return;
            }
            i10 += i13;
            i11 = -19507;
            i10 += (i13 | by);
            for (i14 = i13; 5 > i14; ++i14) {
                i11 += i14;
                Test.iArrFld[(i10 >>> 1) % N] = (int)-43208L;
                i10 *= (int)1579084709690508944L;
                Test.iArrFld = Test.iArrFld;
                i11 += by;
                bArr1[i13 + 1] = Test.bFld;
                Test.fFld *= i11;
                try {
                    i15 = (i10 % -9050);
                    i12 = (i13 % -4693);
                    i12 = (Test.iArrFld[i13] / i11);
                } catch (ArithmeticException a_e) {}
            }
        } while (++i13 < 353);
        vMeth1_check_sum += i10 + i11 + i12 + i13 + Float.floatToIntBits(f) + by + i14 + i15 +
            FuzzerUtils.checkSum(bArr1);
    }

    public static int iMeth(int i7, long l) {

        int i8=-5, i9=-39641;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i8 = 362; i8 > 11; i8--) {
            switch ((((((int)(i7 * l)) >>> 1) % 10) * 5) + 68) {
            case 95:
                bArr[i8 - 1] = Test.bFld;
                vMeth1(i8, i8, i8);
                i9 = i8;
                i9 += (i8 - i9);
                break;
            case 90:
                i7 -= i9;
                Test.iArrFld = Test.iArrFld;
                break;
            case 74:
                Test.fFld += i8;
                break;
            case 105:
                if (i8 != 0) {
                }
                break;
            case 75:
            case 98:
                Test.fFld /= (i9 | 1);
                if (Test.bFld) {
                    Test.fFld += (i8 - i8);
                    i9 += (((i8 * Test.fFld) + l) - i7);
                } else {
                    Test.fFld = i9;
                }
                break;
            case 102:
                i9 += i7;
                break;
            case 96:
                i7 -= (int)Test.instanceCount;
                break;
            case 79:
                i9 -= i7;
                break;
            case 99:
                if (i7 != 0) {
                }
                break;
            default:
                Test.instanceCount += i7;
            }
        }
        long meth_res = i7 + l + i8 + i9 + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        int i1=139, i2=-13, i3=2, i4=253, i5=-7, i6=22435, i16=-39032, i17=24, iArr[][]=new int[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.399F);
        FuzzerUtils.init(iArr, -46779);

        for (i1 = 4; i1 < 193; i1++) {
            for (i3 = 1; i3 < 8; ++i3) {
                i2 -= (int)fArr[i3];
                iArr[i3 - 1] = (iArr[i1 + 1] = (iArr[i3] = (iArr[i3] = iArr[i3])));
            }
            Test.fFld += (((i1 * i4) + Test.instanceCount) - Test.instanceCount);
            for (i5 = 1; 8 > i5; i5++) {
                if ((iMeth(-202, Test.instanceCount) * i1) != i) continue;
                i4 <<= 195;
                Test.instanceCount >>= i4;
                Test.instanceCount += i5;
                for (i16 = 1; 2 > i16; ++i16) {
                    i4 += (int)Test.fFld;
                    i = i3;
                }
                i6 >>= i;
                if (Test.bFld) break;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=-12, i19=-14, i20=15020, i21=7;

        vMeth(i18);
        for (long l1 : Test.lArrFld) {
            Test.iArrFld[(i18 >>> 1) % N] = (int)-119.566F;
            i18 %= (int)(Test.instanceCount | 1);
            i18 += i18;
            Test.fFld += i18;
            switch (((i18 >>> 1) % 10) + 10) {
            case 10:
                l1 = i18;
                i19 = 1;
                while (++i19 < 63) {
                    i18 += i19;
                    Test.iArrFld[i19 + 1] += i18;
                    for (i20 = 1; i20 < 1; ++i20) {
                        i18 &= i21;
                        i21 += i20;
                        Test.sFld -= (short)l1;
                        if (Test.bFld) {
                            i21 += i18;
                            Test.lArrFld = FuzzerUtils.long1array(N, (long)58189L);
                            switch (((i19 % 1) * 5) + 52) {
                            case 55:
                                l1 = i19;
                                i21 += (((i20 * l1) + i20) - i21);
                                Test.dFld = 8L;
                                Test.iArrFld[i19 - 1] = (int)34601L;
                                break;
                            }
                        } else if (Test.bFld) {
                            i21 *= (int)122L;
                            i21 >>= i21;
                        }
                        i21 &= (int)l1;
                        l1 = i20;
                        if (Test.bFld) break;
                        i18 *= i19;
                        Test.lArrFld[i19] *= i19;
                    }
                }
                break;
            case 11:
                i18 += i18;
                break;
            case 12:
                i18 = i18;
                break;
            case 13:
                i21 += i20;
                break;
            case 14:
                Test.instanceCount = i21;
                break;
            case 15:
                Test.dFld -= -8;
                break;
            case 16:
                Test.bFld = Test.bFld;
                break;
            case 17:
                i18 *= Test.sFld;
            case 18:
                i18 *= (int)Test.fFld;
                break;
            case 19:
                Test.iArrFld[(i18 >>> 1) % N] &= i20;
                break;
            }
        }

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 = " + i21);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld Test.dFld Test.iArrFld = " + Test.sFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
