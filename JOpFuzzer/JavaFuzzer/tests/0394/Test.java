// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=4055417387L;
    public static float fFld=27.228F;
    public static volatile boolean bFld=true;
    public static byte byFld=-84;
    public static volatile short sFld=-20252;
    public byte byFld1=49;
    public int iFld=11;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
        FuzzerUtils.init(Test.lArrFld, 3042724147L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        double d=2.12679, d1=-2.30506;
        int i11=-52, i12=101, i13=-8;
        short s=31885;

        for (d = 3; 227 > d; ++d) {
            i11 = (int)Test.instanceCount;
            i11 -= i11;
            switch ((int)((d % 4) + 48)) {
            case 48:
                d1 = 1;
                do {
                    i11 = (int)Test.instanceCount;
                    for (i12 = (int)(d1); i12 < 1; ++i12) {
                        i11 = i12;
                        switch ((int)((d % 1) + 116)) {
                        case 116:
                            i11 += (int)Test.instanceCount;
                            s = (short)Test.instanceCount;
                            Test.fFld = (float)d1;
                            break;
                        }
                        Test.instanceCount += (((i12 * i11) + Test.instanceCount) - i12);
                        i11 >>= 37;
                        Test.lArrFld[(int)(d1 - 1)] = Test.lArrFld[(int)(d1 - 1)];
                    }
                } while (++d1 < 7);
            case 49:
                if (Test.bFld) continue;
                break;
            case 50:
                Test.fFld += Test.instanceCount;
            case 51:
                Test.bFld = Test.bFld;
                break;
            default:
                i13 = i11;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i11 + Double.doubleToLongBits(d1) + i12 + i13 + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i7, long l1, int i8) {

        int i9=27566, i10=12, i15=-210, i16=-27679, i17=-36, i18=-14;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, -35.96253);

        for (i9 = 2; i9 < 286; i9++) {
            iMeth();
            Test.instanceCount += i7;
        }
        for (i15 = 2; 139 > i15; ++i15) {
            double d2=-2.2406;
            if (i9 != 0) {
                vMeth_check_sum += i7 + l1 + i8 + i9 + i10 + i15 + i16 + i17 + i18 +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
            Test.bFld = Test.bFld;
            dArr[i15 - 1][i15] *= Test.byFld;
            i8 = Test.sFld;
            Test.iArrFld[(-132 >>> 1) % N] = (int)Test.instanceCount;
            l1 -= (long)d2;
            i16 = Test.sFld;
        }
        for (i17 = 20; 393 > i17; i17++) {
            i18 >>= (int)-8L;
            Test.fFld += i17;
            if (Test.bFld) break;
        }
        vMeth_check_sum += i7 + l1 + i8 + i9 + i10 + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth(long l) {

        float f=-2.435F;
        int i19=92, i20=-4, i21=-179;

        for (int i6 : Test.iArrFld) {
            f = ((i6++) - ((--i6) + i6));
            vMeth(i6, Test.instanceCount, -4);
            Test.instanceCount *= i6;
            i19 = 1;
            while (++i19 < 4) {
                i6 = (int)l;
                if (Test.bFld) {
                    Test.instanceCount += i6;
                    i6 += i6;
                } else if (Test.bFld) {
                    i6 = i20;
                } else {
                    i6 += (i19 | i6);
                }
                i21 = 1;
                while (++i21 < 1) {
                    if (i19 != 0) {
                    }
                    Test.bFld = Test.bFld;
                    i6 <<= i21;
                }
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + i19 + i20 + i21;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=8, i1=2, i2=-5, i3=-12054, i4=47, i5=14, i22=6609, i23=-11, i24=10, i25=238, i26=5, i27=155, i28=3,
            iArr[]=new int[N];
        double d3=-1.60022;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(fArr, 2.247F);

        for (i = 10; i < 376; ++i) {
            for (i2 = 2; i2 < 69; i2 += 3) {
                iArr[i2 - 1] = (int)(-((13L - Math.max(i3, i2)) - i3));
                for (i4 = 4; i2 < i4; --i4) {
                    i1 = (int)((--Test.instanceCount) + ((++i5) * Math.min(-7697445186157497400L, Test.instanceCount)));
                }
                i3 *= (int)lMeth(Test.instanceCount);
                switch (((i2 % 5) * 5) + 44) {
                case 62:
                    if (Test.bFld) {
                        Test.iArrFld[i2] = 31842;
                    } else {
                        d3 -= i4;
                        for (i22 = 1; 4 > i22; i22++) {
                            i23 = i4;
                            i5 = -27524;
                            i5 += i1;
                            Test.instanceCount += (i22 + Test.instanceCount);
                            i23 += (i22 * i2);
                            d3 -= 2.143F;
                            Test.fFld += i3;
                            fArr[i] += i3;
                            Test.fFld += (((i22 * i2) + i22) - Test.fFld);
                        }
                        for (i24 = 4; i24 > 1; --i24) {
                            i1 = (int)-14L;
                        }
                        for (i26 = 1; i26 < 4; i26++) {
                            Test.sFld += (short)(((i26 * i22) + Test.instanceCount) - Test.instanceCount);
                            i1 += (i26 + i1);
                            Test.instanceCount >>= i23;
                            i1 <<= i28;
                            i27 >>= byFld1;
                            i23 *= i27;
                        }
                    }
                    fArr[i - 1] *= i;
                    break;
                case 51:
                    i25 += i2;
                    break;
                case 63:
                    i3 = 8;
                    break;
                case 61:
                    d3 -= i5;
                    break;
                case 52:
                    i1 = iFld;
                    break;
                default:
                    i27 <<= i4;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("d3 i22 i23 = " + Double.doubleToLongBits(d3) + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 iArr = " + i27 + "," + i28 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld Test.sFld byFld1 = " + Test.byFld + "," + Test.sFld + "," + byFld1);
        FuzzerUtils.out.println("iFld Test.iArrFld Test.lArrFld = " + iFld + "," + FuzzerUtils.checkSum(Test.iArrFld) +
            "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
