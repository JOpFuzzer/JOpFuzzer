// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-16329L;
    public static int iFld=22318;
    public static double dFld=14.114480;
    public static float fFld=91.809F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -103);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i7=8, i8=240, i9=246, i10=-22223, i11=-20572, i12=32;
        byte by=-107;
        short s=25971;

        switch (((Test.iFld >>> 1) % 2) + 101) {
        case 101:
            Test.iArrFld = Test.iArrFld;
            switch (((Test.iFld >>> 1) % 4) + 27) {
            case 27:
                for (i7 = 6; 281 > i7; ++i7) {
                    for (i9 = 1; i9 < 6; ++i9) {
                        for (i11 = 1; i11 < 2; ++i11) {
                            by += (byte)Test.dFld;
                            i12 = -185;
                            by = (byte)i7;
                            i12 += (i11 ^ Test.instanceCount);
                        }
                        Test.fFld += 12;
                        Test.instanceCount += (long)Test.dFld;
                        i8 <<= i9;
                        Test.fFld += (i9 * i9);
                        i8 = (int)Test.instanceCount;
                    }
                }
            case 28:
                s = (short)-8;
                break;
            case 29:
                i10 = (int)Test.fFld;
                break;
            case 30:
                i12 = (int)Test.fFld;
            }
            break;
        case 102:
            i8 |= i12;
            break;
        default:
            i10 = (int)Test.instanceCount;
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + by + s;
    }

    public static void vMeth() {

        float f1=46.995F;
        int i6=-49522, i13=16943, i14=-51926, i15=46583;
        boolean b=false, bArr[]=new boolean[N];
        byte by1=49;

        FuzzerUtils.init(bArr, false);

        for (f1 = 2; f1 < 348; ++f1) {
            vMeth1();
            if (Test.iFld != 0) {
                vMeth_check_sum += Float.floatToIntBits(f1) + i6 + i13 + i14 + i15 + (b ? 1 : 0) + by1 +
                    FuzzerUtils.checkSum(bArr);
                return;
            }
            for (i13 = (int)(f1); i13 < 5; ++i13) {
                try {
                    i14 = (i14 / 63447);
                    i6 = (823833553 / i6);
                    Test.iArrFld[(int)(f1)] = (Test.iFld % 154);
                } catch (ArithmeticException a_e) {}
            }
            Test.fFld += (((f1 * Test.iFld) + Test.instanceCount) - i6);
        }
        i15 = 1;
        do {
            Test.iArrFld[i15 + 1] += i15;
            i6 += (22361 + (i15 * i15));
            i14 = i13;
            bArr[i15 + 1] = true;
            if (b) break;
            Test.iFld = by1;
            by1 += (byte)i13;
            Test.fFld += (((i15 * by1) + i6) - i13);
        } while (++i15 < 298);
        vMeth_check_sum += Float.floatToIntBits(f1) + i6 + i13 + i14 + i15 + (b ? 1 : 0) + by1 +
            FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth() {

        int i2=2, i3=-133, i4=4, i5=-4, i16=445, iArr[]=new int[N];
        float f=0.1017F, fArr[]=new float[N];
        double d=0.13022, dArr[]=new double[N];
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr, 96.973F);
        FuzzerUtils.init(lArr, 146943447L);
        FuzzerUtils.init(iArr, -110);
        FuzzerUtils.init(dArr, 2.29231);
        FuzzerUtils.init(byArr, (byte)-7);

        for (i2 = 4; i2 < 123; ++i2) {
            i4 = 13;
            while (--i4 > 0) {
                f += (i4 * i2);
                fArr = (fArr = (fArr = (fArr = fArr)));
                i5 *= (int)lArr[i4 - 1];
                i5 += (((i4 * i4) + i2) - i3);
                try {
                    i5 = (iArr[i4] % 2048510712);
                    i3 = (iArr[i4 + 1] % i3);
                    i3 = (iArr[i2 + 1] / 53036);
                } catch (ArithmeticException a_e) {}
                iArr[i4] <<= (int)Test.instanceCount;
                i3 += i4;
                dArr[i4] -= (f++);
            }
        }
        i3 &= byArr[(-27161 >>> 1) % N];
        f = (float)(((Test.instanceCount - i5) - d) * f);
        vMeth();
        Test.iArrFld[(i16 >>> 1) % N] = 11;
        i5 = i3;
        long meth_res = i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + Double.doubleToLongBits(d) + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-54104, i1=7, i17=33, i18=5, i19=5, i20=-13, i21=-17, i22=2551, i23=14;
        byte by2=84;
        short s1=-4428;
        boolean b2=true;
        float fArr1[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr1, 9.260F);
        FuzzerUtils.init(lArr1, 9498L);

        for (i = 22; i < 378; i++) {
            if (Math.min(iMeth(), i1) == i1) continue;
            fArr1[i + 1] = 24456;
            i1 ^= i1;
            i1 = (int)-1750909457489992706L;
            Test.iFld &= i;
            switch (((i % 7) * 5) + 101) {
            case 111:
                Test.iArrFld[i - 1] *= i;
                break;
            case 126:
                Test.iArrFld[i + 1] = (int)Test.instanceCount;
                break;
            case 110:
                switch (((i % 10) * 5) + 120) {
                case 163:
                    i17 = 1;
                    while ((i17 += 3) < 71) {
                        by2 += (byte)i17;
                        Test.iFld += (i17 * i17);
                        Test.iFld -= (int)1.105987;
                    }
                case 126:
                case 148:
                    Test.iFld += (i * i);
                    Test.iFld = (int)Test.instanceCount;
                    break;
                case 146:
                    for (i18 = i; 71 > i18; i18++) {
                        for (i20 = 1; i20 < 1; i20++) {
                            boolean b1=true;
                            i21 >>= i19;
                            Test.iFld = s1;
                            i22 *= (int)Test.fFld;
                            lArr1[i18 + 1] = by2;
                            Test.instanceCount += i22;
                            Test.iArrFld[i18] = i17;
                            if (b1) break;
                            Test.iArrFld[i] -= i17;
                            Test.iArrFld = Test.iArrFld;
                        }
                        Test.iFld = i;
                        Test.iArrFld[i + 1] -= i21;
                        Test.iArrFld[i18 - 1] -= i19;
                    }
                    break;
                case 155:
                case 157:
                    i1 -= -4;
                    break;
                case 145:
                    Test.dFld = i18;
                    break;
                case 161:
                    if (b2) break;
                    break;
                case 162:
                    Test.iArrFld[i + 1] <<= i23;
                    break;
                case 158:
                    Test.fFld += 124;
                    break;
                default:
                    Test.fFld += 9;
                }
                break;
            case 131:
                if (b2) continue;
                break;
            case 105:
                if (true) break;
                break;
            case 118:
                Test.iFld -= i1;
                break;
            case 116:
                b2 = b2;
            default:
                Test.iArrFld = Test.iArrFld;
            }
        }

        FuzzerUtils.out.println("i i1 i17 = " + i + "," + i1 + "," + i17);
        FuzzerUtils.out.println("by2 i18 i19 = " + by2 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 s1 = " + i20 + "," + i21 + "," + s1);
        FuzzerUtils.out.println("i22 b2 i23 = " + i22 + "," + (b2 ? 1 : 0) + "," + i23);
        FuzzerUtils.out.println("fArr1 lArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
