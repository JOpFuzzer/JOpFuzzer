// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=985515124717858798L;
    public float fFld=1.874F;
    public static boolean bFld=false;
    public static byte byFld=88;
    public long lFld=-613522154L;
    public int iFld=-12;
    public int iFld1=-3;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 113);
        FuzzerUtils.init(Test.byArrFld, (byte)126);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i8, int i9) {

        double d=-54.58417;
        int i10=46, i11=31733, i12=-28532;
        short s=-19369;
        float f=-10.42F, f1=0.621F;
        byte by1=27;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        d = 1;
        do {
            i10 = 10;
            while (--i10 > 0) {
                Test.iArrFld[(int)(d)] >>= s;
                i9 = i8;
                for (i11 = 1; i11 < 1; i11++) {
                    i12 += (int)f;
                    bArr = bArr;
                    by1 += (byte)(i11 * i11);
                    f *= i10;
                    i9 -= (int)f;
                    Test.instanceCount -= (long)d;
                }
            }
            f1 = 1;
            while (++f1 < 10) {
                Test.iArrFld[(int)(d)] -= i8;
                i8 >>= by1;
                i12 += (int)(((f1 * i11) + Test.instanceCount) - i9);
            }
        } while (++d < 160);
        long meth_res = i8 + i9 + Double.doubleToLongBits(d) + i10 + s + i11 + i12 + Float.floatToIntBits(f) + by1 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i3, int i4, int i5) {

        int i6=18671, i7=147, i13=31, i14=-12, i15=6, i16=85, i17=0;
        float f2=66.115F;
        byte by2=-45;
        short s1=-32146;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3918250485L);

        for (i6 = 9; i6 < 288; ++i6) {
            Test.instanceCount *= (long)(lMeth(i5, i4) + f2);
            Test.iArrFld[i6] /= (int)(i6 | 1);
            by2 *= (byte)s1;
            i5 += i5;
            lArr = lArr;
            for (i13 = 6; 1 < i13; i13 -= 3) {
                i15 = i5;
                lArr[i6] *= s1;
                for (i16 = 1; i16 < 6; i16++) {
                    i15 = i16;
                    switch ((((-49008 >>> 1) % 6) * 5) + 55) {
                    case 80:
                        Test.instanceCount += (i16 * i16);
                        if (i7 != 0) {
                        }
                        i3 += (i16 | i7);
                    case 70:
                        f2 = Test.instanceCount;
                    case 77:
                        i15 *= i4;
                        break;
                    case 74:
                        Test.iArrFld[i16] >>= i6;
                        break;
                    case 64:
                        if (Test.bFld) break;
                        break;
                    case 79:
                        Test.instanceCount += (i16 * i16);
                    default:
                        s1 += (short)(i16 * i16);
                    }
                }
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f2) + by2 + s1 + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(byte by, int i2) {


        iMeth(i2, i2, 16353);
        i2 ^= i2;
        vSmallMeth_check_sum += by + i2;
    }

    public void mainTest(String[] strArr1) {

        int i=-59557, i1=-9, i18=54047, i19=-12, i20=-49736, i21=-58, i22=-33490, i23=-210, i24=161;
        double d1=33.32327;
        short s2=-28028;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 77L);

        for (i = 21; i < 374; ++i) {
            Test.iArrFld[i - 1] >>>= (int)(Math.max(++Test.iArrFld[i + 1], i1 - i1) * ((++i1) + Math.abs(fFld)));
        }
        for (int smallinvoc=0; smallinvoc<863; smallinvoc++) vSmallMeth(Test.byFld, -29106);
        fFld = 187;
        i18 = 1;
        while (++i18 < 376) {
            d1 = i1;
            fFld += i18;
            i1 <<= (int)Test.instanceCount;
        }
        fFld = i18;
        if (false) {
            for (i19 = 8; i19 < 387; i19++) {
                i20 *= i19;
                Test.iArrFld[i19] = (int)Test.instanceCount;
                switch ((i19 % 8) + 21) {
                case 21:
                    for (i21 = 4; i21 < 66; ++i21) {
                        i22 = (int)lFld;
                        d1 = i;
                        switch (((i19 % 6) * 5) + 5) {
                        case 9:
                            i22 += (int)-12L;
                            i22 += 168;
                            break;
                        case 23:
                            for (i23 = 1; i23 < 2; i23++) {
                                Test.bFld = Test.bFld;
                                lArr1 = lArr1;
                                try {
                                    Test.iArrFld[i23] = (i23 / -107);
                                    i20 = (i21 / Test.iArrFld[i23]);
                                    i24 = (-1807247021 / i1);
                                } catch (ArithmeticException a_e) {}
                                i24 = i20;
                                i1 = (int)d1;
                                lArr1[i23 - 1] = i24;
                                fFld += i;
                                i20 += (i23 * i23);
                                i24 >>= i21;
                            }
                            break;
                        case 33:
                            if (Test.bFld) continue;
                        case 13:
                            i20 += (int)fFld;
                        case 21:
                            iFld += (i21 * i21);
                            break;
                        case 26:
                        }
                    }
                case 22:
                    i20 += iFld;
                    break;
                case 23:
                    Test.iArrFld[i19 + 1] -= (int)lFld;
                    break;
                case 24:
                    Test.byArrFld[i19 + 1] |= (byte)lFld;
                    break;
                case 25:
                    i24 = i;
                case 26:
                    i1 *= (int)Test.instanceCount;
                    break;
                case 27:
                    try {
                        Test.iArrFld[i19 + 1] = (8038 % i);
                        i20 = (Test.iArrFld[i19 + 1] / 1989371547);
                        i1 = (49677 / i23);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 28:
                    i20 += (((i19 * i1) + s2) - s2);
                    break;
                default:
                    iFld1 = s2;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i18 = " + i + "," + i1 + "," + i18);
        FuzzerUtils.out.println("d1 i19 i20 = " + Double.doubleToLongBits(d1) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 s2 lArr1 = " + i24 + "," + s2 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld lFld iFld = " + Test.byFld + "," + lFld + "," + iFld);
        FuzzerUtils.out.println("iFld1 Test.iArrFld Test.byArrFld = " + iFld1 + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
