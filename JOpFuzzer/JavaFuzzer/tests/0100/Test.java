// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1919838257L;
    public static boolean bFld=true;
    public static byte byFld=-46;
    public float fFld=0.816F;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 532937125L);
        FuzzerUtils.init(Test.iArrFld, -134);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(float f) {

        int i7=1, i8=-202, i9=240, i10=-179, i11=63, i12=-21, i13=3, i14=-143, i15=13, i16=60, i17=35841;
        short s=-31073;
        byte by=66;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 1L);

        for (i7 = 306; i7 > 8; i7 -= 2) {
            for (i9 = 1; i9 < 11; i9++) {
                i11 = 1;
                do {
                    lArr = lArr;
                } while (++i11 < 2);
            }
            for (i12 = 1; 11 > i12; ++i12) {
                for (i14 = 1; i14 < 2; ++i14) {
                    i15 += i14;
                    Test.instanceCount += i14;
                }
                i15 >>= s;
                if (Test.bFld) continue;
                i10 = -142;
                for (i16 = 1; i16 < 2; i16++) {
                    Test.instanceCount = 52715;
                    i17 += i7;
                    i17 -= by;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + s + i16 + i17 + by
            + FuzzerUtils.checkSum(lArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth() {

        int i2=4654, i3=-8, i4=238, i5=4, i6=224;
        float f1=28.872F;
        short s1=-18499;

        for (i2 = 13; i2 < 291; ++i2) {
            i4 = 1;
            while (++i4 < 6) {
                for (i5 = 1; i5 > 1; i5--) {
                    i3 *= (int)Test.instanceCount;
                    Test.bFld = (Test.bFld = bMeth(2.216F));
                    i6 += (((i5 * i3) + i4) - Test.instanceCount);
                    Test.instanceCount += (i5 + f1);
                    Test.lArrFld[i2 + 1] = i5;
                    Test.instanceCount += (i5 * i5);
                }
                i6 += i4;
                f1 = i4;
            }
            i3 += (int)Test.instanceCount;
            Test.byFld <<= (byte)s1;
            Test.instanceCount += i2;
            Test.instanceCount -= i6;
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + s1;
    }

    public static int iMeth() {

        int i18=-40277, i19=0, i20=17, i21=152, i22=10;
        double d=22.20959;
        float f2=-6.900F;

        vMeth();
        Test.iArrFld[(2 >>> 1) % N] = 10;
        i18 = 1;
        while (++i18 < 294) {
            Test.bFld = Test.bFld;
            i19 += (i18 * i18);
            for (i20 = 1; i20 < 6; ++i20) {
                Test.instanceCount <<= i20;
                for (d = 2; d > 1; d -= 3) {
                    i21 += (int)((long)d ^ i19);
                    switch ((((-7 >>> 1) % 3) * 5) + 110) {
                    case 123:
                        Test.iArrFld[i20 + 1] *= Test.byFld;
                        i19 >>= i19;
                        i21 *= i19;
                        break;
                    case 115:
                        i19 += (int)(((d * Test.instanceCount) + i20) - i21);
                        Test.lArrFld[i20 - 1] <<= i19;
                        break;
                    case 112:
                        i21 = (int)Test.instanceCount;
                    default:
                        i19 *= (int)f2;
                    }
                }
            }
        }
        long meth_res = i18 + i19 + i20 + i21 + Double.doubleToLongBits(d) + i22 + Float.floatToIntBits(f2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=5, i1=197, i23=-17562, i24=-7, i25=7511, iArr[][]=new int[N][N];
        double d1=0.94734, dArr[]=new double[N];
        float f3=-74.650F, fArr[]=new float[N];
        short s2=-18227;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(dArr, 0.48838);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr, 56.327F);
        FuzzerUtils.init(iArr, -29327);

        for (i = 10; i < 226; i++) {
            i1 = ((-iMeth()) - -28882);
            for (i23 = 6; i23 < 116; i23++) {
                switch ((i % 10) + 95) {
                case 95:
                    i1 -= 14;
                    i1 = i23;
                    for (d1 = 1; d1 < 2; ++d1) {
                        dArr[i] = fFld;
                        switch ((i23 % 2) + 116) {
                        case 116:
                            i24 += (int)(((d1 * fFld) + i) - i24);
                            switch ((((i25 >>> 1) % 1) * 5) + 35) {
                            case 37:
                                i1 = 28697;
                                Test.iArrFld[(int)(d1 - 1)] *= (int)f3;
                                break;
                            default:
                                f3 += (float)(d1 * d1);
                                dArr[i] = i23;
                                s2 = (short)i25;
                                i25 += i1;
                            }
                            Test.byFld = (byte)i1;
                            break;
                        case 117:
                            i24 = i25;
                            i24 &= (int)Test.instanceCount;
                            break;
                        }
                    }
                    break;
                case 96:
                    i25 += (((i23 * Test.instanceCount) + i25) - Test.instanceCount);
                    Test.iArrFld[i] >>>= (int)Test.instanceCount;
                    break;
                case 97:
                    i1 = (int)-120.71870;
                    bArr[i] = true;
                    i1 = (int)Test.instanceCount;
                    fArr = fArr;
                    break;
                case 98:
                    i25 = s2;
                    i24 = i25;
                    if (Test.bFld) continue;
                    i25 += i24;
                    break;
                case 99:
                    try {
                        Test.iArrFld[i] = (i / i23);
                        i1 = (i23 % 55299);
                        i25 = (i23 % -1);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 100:
                    iArr = iArr;
                case 101:
                    Test.instanceCount ^= 2626398578L;
                case 102:
                    i25 += i25;
                case 103:
                    i1 += (i23 ^ i23);
                    break;
                case 104:
                    i24 *= -149;
                default:
                    Test.instanceCount -= 58352;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i23 = " + i + "," + i1 + "," + i23);
        FuzzerUtils.out.println("i24 d1 i25 = " + i24 + "," + Double.doubleToLongBits(d1) + "," + i25);
        FuzzerUtils.out.println("f3 s2 dArr = " + Float.floatToIntBits(f3) + "," + s2 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("bArr fArr iArr = " + FuzzerUtils.checkSum(bArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.byFld = " + Test.instanceCount + "," + (Test.bFld ?
            1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("fFld Test.lArrFld Test.iArrFld = " + Float.floatToIntBits(fFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
