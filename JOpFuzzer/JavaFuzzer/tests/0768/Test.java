// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-42596L;
    public static byte byFld=-82;
    public double dFld=-2.105702;
    public static float fFld=2.593F;
    public int iArrFld[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b1, int i6) {

        double d=-46.77537, dArr[]=new double[N];
        int i7=-17, i8=-9176, i9=-212, iArr1[]=new int[N];
        float f1=0.600F;
        short s1=5516;

        FuzzerUtils.init(dArr, -2.115842);
        FuzzerUtils.init(iArr1, -10764);

        d = 1;
        do {
            Test.instanceCount *= i6;
            dArr[(int)(d + 1)] = i6;
            i6 *= i6;
            for (i7 = 1; i7 < 7; ++i7) {
                iArr1 = iArr1;
                f1 += (((i7 * i7) + i6) - s1);
                i6 *= i8;
                Test.instanceCount = i6;
                i6 += i7;
                if (b1) break;
            }
        } while (++d < 241);
        i9 = 1;
        do {
            Test.instanceCount *= i7;
            Test.instanceCount = i6;
            Test.byFld += (byte)-84.81960;
        } while (++i9 < 225);
        long meth_res = (b1 ? 1 : 0) + i6 + Double.doubleToLongBits(d) + i7 + i8 + Float.floatToIntBits(f1) + s1 + i9 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(int i2, float f, long l1) {

        int i3=-17281, i4=-1, i5=217, i10=-53273, i11=0, i12=59667, iArr[]=new int[N];
        long l2=337206886L;
        short s=-30241;
        boolean b2=true;
        double d1=116.14717;

        FuzzerUtils.init(iArr, 151);

        for (i3 = 378; i3 > 9; --i3) {
            switch (((i3 % 8) * 5) + 54) {
            case 73:
                i2 += i3;
                for (l2 = i3; l2 < 5; ++l2) {
                    f *= (iArr[i3 - 1] ^= ((s++) * iMeth(b2, i3)));
                    i2 -= 227;
                }
                break;
            case 63:
                d1 = -13393;
                i10 = 1;
                while (++i10 < 5) {
                    f = f;
                    for (i11 = i10; i11 < 1; i11++) {
                        if (b2) continue;
                        i12 += (((i11 * l1) + i5) - i11);
                        f += ((long)i11 | (long)f);
                        i12 = (int)l1;
                        f += Test.instanceCount;
                    }
                }
                break;
            case 76:
                i4 -= Test.byFld;
                break;
            case 82:
                i12 = (int)-94L;
            case 69:
                i12 >>= i10;
                break;
            case 72:
            case 81:
                i12 = i4;
                break;
            case 74:
                s += (short)i10;
                break;
            default:
                i2 += (i3 + f);
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + l1 + i3 + i4 + l2 + i5 + s + (b2 ? 1 : 0) +
            Double.doubleToLongBits(d1) + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vSmallMeth(int i, long l, int i1) {

        boolean b=true;

        b = (bMeth(-9, 2.689F, Test.instanceCount) || b);
        vSmallMeth_check_sum += i + l + i1 + (b ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i13=11, i14=-8076, i15=-35, i16=-13, i17=5, i18=-99, i19=6, i20=-113, i21=24678, i22=-49, i23=38105;
        double d2=114.5708;
        short s2=13834;
        float fArr[][]=new float[N][N];
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 2.450F);
        FuzzerUtils.init(byArr, (byte)-90);
        FuzzerUtils.init(lArr, 2872L);

        for (int smallinvoc=0; smallinvoc<163; smallinvoc++) vSmallMeth(i13, Test.instanceCount, i13);
        for (i14 = 2; i14 < 327; i14++) {
            i15 += i15;
        }
        iArrFld[(-199 >>> 1) % N] -= 56109;
        for (i16 = 9; i16 < 155; i16++) {
            for (i18 = 2; i18 < 172; i18++) {
                fArr[i18 - 1][i18 - 1] = i17;
                i15 += (((i18 * i16) + i13) - i19);
                switch (((i18 >>> 1) % 1) + 43) {
                case 43:
                    iArrFld[i18] = (int)dFld;
                    dFld += Test.fFld;
                default:
                    byArr[i16 + 1] = (byte)i19;
                    d2 = s2;
                }
                lArr[i18 + 1] = i17;
                Test.instanceCount -= Test.instanceCount;
                iArrFld[i18] = (int)Test.fFld;
            }
            if (true) break;
            for (i20 = 9; i20 < 172; i20++) {
                for (i22 = 1; 2 > i22; i22++) {
                    i15 += i21;
                    i13 *= (int)Test.instanceCount;
                    iArrFld[i16 + 1] += s2;
                    i21 = (int)Test.fFld;
                    i17 = i17;
                    dFld += Test.fFld;
                    i23 >>= 34717;
                    Test.instanceCount ^= i21;
                    lArr[i22] += Test.instanceCount;
                }
                i15 <<= (int)Test.instanceCount;
            }
            i21 += -12;
        }

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 d2 s2 = " + i19 + "," + Double.doubleToLongBits(d2) + "," + s2);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 fArr byArr = " + i23 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld dFld = " + Test.instanceCount + "," + Test.byFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.fFld iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  bMeth ->  bMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth bMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
