// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-286524442L;
    public float fFld=1.247F;
    public static short sFld=4268;
    public static int iArrFld[][]=new int[N][N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -194);
        FuzzerUtils.init(Test.lArrFld, -54808L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2, long l1, int i3) {

        int i4=2, i5=6670, i6=-40421, iArr1[]=new int[N];
        boolean b=true;
        byte by=105;
        float f2=26.830F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 11L);
        FuzzerUtils.init(iArr1, -3);

        i3 -= (int)8262002122431464796L;
        i4 = 1;
        do {
            i3 = i3;
            if (b) continue;
            switch ((i4 % 8) + 39) {
            case 39:
                by /= (byte)-58815;
                i3 += (((i4 * Test.instanceCount) + f2) - i2);
                i3 += (i4 * i4);
                lArr[i4 + 1] <<= i3;
                break;
            case 40:
                i3 -= (int)f2;
                lArr[(i4 >>> 1) % N] = Test.sFld;
                for (i5 = 1; 5 > i5; ++i5) {
                    by *= (byte)Test.instanceCount;
                    i2 <<= i3;
                    if (b) continue;
                }
                break;
            case 41:
                i3 += 25341;
                break;
            case 42:
                f2 -= i4;
                break;
            case 43:
                lArr[i4 + 1] += l1;
                break;
            case 44:
                i6 += (i4 * i4);
                break;
            case 45:
                iArr1[i4 - 1] >>>= i4;
            case 46:
            }
        } while (++i4 < 341);
        vMeth2_check_sum += i2 + l1 + i3 + i4 + (b ? 1 : 0) + by + Float.floatToIntBits(f2) + i5 + i6 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(long l, float f1, int i1) {

        double d=-2.79074;

        f1 = (float)(((f1 - i1) * (-(d + i1))) + (Integer.reverseBytes(i1) ^ (l - i1)));
        vMeth2(i1, l, i1);
        i1 = i1;
        i1 >>= -27;
        vMeth1_check_sum += l + Float.floatToIntBits(f1) + i1 + Double.doubleToLongBits(d);
    }

    public static void vMeth(float f) {

        int i7=-9, i8=49672, i9=-3, i10=16633;
        double d1=-99.63738;

        vMeth1(-18370L, f, i7);
        i8 = 1;
        do {
            Test.iArrFld[i8][i8] |= i8;
            i7 = i8;
            for (i9 = 1; i9 < 11; i9++) {
                f += (float)d1;
                Test.instanceCount = i10;
                i10 = i9;
                f -= i7;
                Test.instanceCount = i9;
            }
            Test.lArrFld[i8 + 1] -= Test.instanceCount;
            i10 -= (int)Test.instanceCount;
            i7 >>= i8;
            i10 >>= i8;
            i7 -= i7;
        } while (++i8 < 139);
        vMeth_check_sum += Float.floatToIntBits(f) + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i=-45, i11=-6, i12=31697, i13=-35971, i14=-30994, i15=-52303, iArr[][]=new int[N][N];
        long l2=-59912L;
        byte by1=7;
        double d2=101.85854;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)10904);
        FuzzerUtils.init(iArr, -187);

        sArr = (sArr = (sArr = (sArr = sArr)));
        Test.instanceCount -= -176;
        iArr[(i >>> 1) % N][(i >>> 1) % N] += (int)((i--) - ((fFld++) + 45247));
        vMeth(fFld);
        Test.lArrFld[(i >>> 1) % N] += i;
        Test.iArrFld[(i >>> 1) % N][(i >>> 1) % N] -= i;
        i *= (int)Test.instanceCount;
        fFld -= Test.instanceCount;
        i11 = 1;
        while (++i11 < 309) {
            Test.iArrFld[i11][i11 + 1] = (int)91L;
            for (l2 = 2; 81 > l2; l2++) {
                i13 = 1;
                do {
                    by1 += (byte)(i13 | (long)fFld);
                    Test.instanceCount = i13;
                    by1 += (byte)i12;
                    Test.instanceCount = l2;
                    d2 += i;
                    Test.instanceCount = Test.instanceCount;
                    fFld += (((i13 * l2) + i12) - i12);
                    i12 *= -43402;
                    i = 17070;
                } while (++i13 < 2);
                i12 = i13;
                by1 ^= (byte)l2;
                Test.instanceCount -= -10327;
                i12 -= i11;
                iArr[(int)(l2 - 1)][i11 - 1] *= i13;
                for (i14 = 2; i14 > i11; i14--) {
                    i -= Test.sFld;
                    i12 = i13;
                    Test.instanceCount -= i15;
                }
            }
        }

        FuzzerUtils.out.println("i i11 l2 = " + i + "," + i11 + "," + l2);
        FuzzerUtils.out.println("i12 i13 by1 = " + i12 + "," + i13 + "," + by1);
        FuzzerUtils.out.println("d2 i14 i15 = " + Double.doubleToLongBits(d2) + "," + i14 + "," + i15);
        FuzzerUtils.out.println("sArr iArr = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
