// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5873936953351376709L;
    public double dFld=0.51206;
    public static int iFld=-63321;
    public static volatile float fFld=1.469F;
    public static short sFld=29483;
    public boolean bFld=true;
    public static int iFld1=7;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -12085);
        FuzzerUtils.init(Test.dArrFld, 2.127800);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        int i9=-106, i10=-12, i11=9, i12=-8, i13=52214;
        boolean b=false;

        for (i9 = 310; i9 > 14; i9 -= 3) {
            for (i11 = 1; i11 < 16; ++i11) {
                i12 &= i12;
                i13 = 1;
                do {
                    Test.fFld += (((i13 * i9) + Test.fFld) - i12);
                    if (b) break;
                    f = -15920;
                    Test.dArrFld[i9 - 1] -= -5L;
                    f = -3;
                } while (++i13 < 2);
                Test.instanceCount >>= i9;
            }
            f *= i12;
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + i13 + (b ? 1 : 0);
    }

    public static int iMeth(int i7, int i8) {

        int i14=21682, i15=-7958, i16=-43, i17=-152, i19=-2;
        byte by1=-13;
        double d=29.106;

        vMeth1(Test.fFld);
        Test.instanceCount += Test.iFld;
        for (i14 = 7; i14 < 305; ++i14) {
            i8 = i14;
            switch ((((i7 >>> 1) % 1) * 5) + 2) {
            case 4:
                Test.iFld += (int)Test.instanceCount;
                break;
            }
        }
        Test.sFld -= by1;
        for (i16 = 19; i16 < 377; i16++) {
            Test.iArrFld[i16] += (int)Test.instanceCount;
            i15 = i8;
            i19 = 1;
            while (++i19 < 5) {
                Test.dArrFld = Test.dArrFld;
                d -= d;
                i15 *= i7;
                d -= i17;
            }
        }
        long meth_res = i7 + i8 + i14 + i15 + by1 + i16 + i17 + i19 + Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i1) {

        int i2=65151, i3=2, i4=-3, i5=102, i6=5;
        byte by=97, byArr[][]=new byte[N][N];
        boolean b1=true;

        FuzzerUtils.init(byArr, (byte)-111);

        i2 = 1;
        while (++i2 < 216) {
            for (i3 = 7; i3 > 1; --i3) {
                i1 ^= by;
                i1 += i3;
                for (i5 = i3; i5 < 2; ++i5) {
                    Test.iArrFld[i5 - 1] *= (int)((++Test.dArrFld[i3 - 1]) * ((-6 + (i2 - i1)) - (++byArr[i5 - 1][i3 +
                        1])));
                    if ((((-4 - Test.instanceCount) - (Test.iArrFld[i2 + 1]++)) < ((-(i6 - -12L)) * (dFld /
                        (Test.instanceCount | 1)))) && (((35L + (i2 - Test.iFld)) + iMeth(i6, i4)) != -1)) break;
                    Test.fFld = i1;
                    switch (((i5 % 7) * 5) + 35) {
                    case 53:
                        Test.iFld -= Test.iFld;
                        i6 += (int)Test.fFld;
                    case 50:
                        lArrFld[i5] *= (long)dFld;
                        Test.iFld += (int)Test.instanceCount;
                        Test.fFld = -6L;
                        by <<= (byte)6;
                        break;
                    case 60:
                        Test.iFld <<= i5;
                        break;
                    case 49:
                        Test.instanceCount += (((i5 * i4) + Test.instanceCount) - Test.instanceCount);
                        break;
                    case 68:
                        b1 = b1;
                    case 37:
                    case 59:
                        i1 = i5;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + by + i5 + i6 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=12196, i21=-4, i22=0, i23=59207, i24=-1, i25=201, i26=-48464, i27=-10;
        byte by2=-121;

        dFld = (Test.iFld++);
        Test.iArrFld[(1 >>> 1) % N] = (int)((Test.iFld++) * (Math.max(135L, Test.instanceCount) + (Test.fFld =
            Test.iFld)));
        Test.fFld -= Test.iFld;
        i = 1;
        while (++i < 230) {
            vMeth(Test.iFld);
            bFld = bFld;
            lArrFld[i + 1] += (long)Test.fFld;
            by2 += (byte)-159;
        }
        for (i21 = 8; i21 < 221; i21++) {
            Test.instanceCount = i21;
            Test.instanceCount += i21;
            for (i23 = 4; i23 < 118; ++i23) {
                Test.iFld <<= i24;
                i24 *= i23;
                if (bFld) {
                    Test.fFld *= i;
                    Test.instanceCount += i;
                    switch ((i23 % 8) + 17) {
                    case 17:
                        dFld *= 6;
                        break;
                    case 18:
                        try {
                            Test.iArrFld[i23] = (100 % i24);
                            i24 = (Test.iFld / 113);
                            i22 = (-13718 % i23);
                        } catch (ArithmeticException a_e) {}
                        for (i25 = 2; i25 > 1; i25 -= 3) {
                            Test.iFld >>= (int)-11L;
                            Test.instanceCount -= (long)44.79869;
                            switch (((i25 % 2) * 5) + 22) {
                            case 24:
                                i24 <<= i24;
                                try {
                                    Test.iArrFld[i21 - 1] = (Test.iArrFld[i23] / Test.iArrFld[i25 + 1]);
                                    Test.iFld = (Test.iArrFld[i23 - 1] / 45038);
                                    Test.iFld = (-57 % i22);
                                } catch (ArithmeticException a_e) {}
                                i24 = i22;
                                break;
                            case 26:
                                Test.iFld = by2;
                                i22 -= i22;
                                i22 += (((i25 * Test.iFld) + i26) - i25);
                                break;
                            default:
                                byArrFld[i23 + 1] *= (byte)i21;
                            }
                        }
                        break;
                    case 19:
                        i24 += Test.iFld1;
                        break;
                    case 20:
                        i27 += (i23 | (long)Test.fFld);
                        break;
                    case 21:
                        Test.instanceCount *= Test.iFld;
                        break;
                    case 22:
                        Test.instanceCount = (long)1.247F;
                        break;
                    case 23:
                    case 24:
                        Test.iFld -= Test.iFld;
                        break;
                    default:
                        if (bFld) break;
                    }
                } else if (false) {
                    i24 += (i23 | Test.iFld1);
                }
            }
        }

        FuzzerUtils.out.println("i by2 i21 = " + i + "," + by2 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);

        FuzzerUtils.out.println("Test.instanceCount dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.sFld bFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.sFld + ","
            + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld1 Test.iArrFld Test.dArrFld = " + Test.iFld1 + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("lArrFld byArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
