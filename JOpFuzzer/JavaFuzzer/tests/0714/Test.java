// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public static float fFld=1.953F;
    public static boolean bFld=true;
    public static short sFld=4043;
    public volatile float fFld1=-37.690F;
    public int iFld=-171;
    public static double dArrFld[][]=new double[N][N];
    public static volatile short sArrFld[]=new short[N];
    public static volatile int iArrFld[]=new int[N];
    public int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -68.37717);
        FuzzerUtils.init(Test.sArrFld, (short)-9597);
        FuzzerUtils.init(Test.iArrFld, -14);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vMeth(long l1, int i1) {

        int i2=43451, i3=11;

        for (i2 = 1; i2 < 305; i2++) {
            l1 >>>= i3;
        }
        vMeth_check_sum += l1 + i1 + i2 + i3;
    }

    public static int iMeth1() {

        byte by1=17;
        float f=1.391F;
        int iArr1[]=new int[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 206);
        FuzzerUtils.init(lArr, 3L);

        for (int i5 : iArr1) {
            double d=-2.49934;
            vMeth(Test.instanceCount, i5);
            switch (((5 >>> 1) % 5) + 83) {
            case 83:
                lArr[(4656 >>> 1) % N][(i5 >>> 1) % N] -= i5;
                Test.dArrFld = FuzzerUtils.double2array(N, (double)0.106034);
                switch (((i5 >>> 1) % 7) + 106) {
                case 106:
                    i5 += (int)d;
                    i5 = by1;
                    i5 = (int)Test.instanceCount;
                    i5 = i5;
                    break;
                case 107:
                    i5 += (int)Test.instanceCount;
                    i5 = by1;
                    i5 -= i5;
                    break;
                case 108:
                case 109:
                    i5 = i5;
                    Test.sArrFld[(1 >>> 1) % N] = (short)i5;
                    break;
                case 110:
                    i5 *= (int)Test.instanceCount;
                case 111:
                    i5 %= (int)(i5 | 1);
                case 112:
                    f = i5;
                    break;
                default:
                    Test.instanceCount = i5;
                }
                break;
            case 84:
                Test.instanceCount *= -94;
                break;
            case 85:
                if (i5 != 0) {
                }
                break;
            case 86:
                Test.instanceCount -= (long)f;
                break;
            case 87:
                Test.dArrFld[(i5 >>> 1) % N][(39498 >>> 1) % N] = i5;
                break;
            default:
                iArr1[(i5 >>> 1) % N] = (int)f;
            }
        }
        long meth_res = by1 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i4, boolean b) {

        int i6=-55, i7=-26321, i8=-224;
        double d1=0.6305;

        vMeth((long)(iMeth1() - Test.fFld), -6);
        i6 = (int)Test.instanceCount;
        switch (((i4 >>> 1) % 6) + 8) {
        case 8:
            d1 -= Test.instanceCount;
            i4 -= (int)Test.instanceCount;
            i6 = i4;
            Test.instanceCount *= (long)Test.fFld;
            break;
        case 9:
            for (i7 = 17; i7 < 288; i7++) {
                try {
                    i6 = (-15791 % Test.iArrFld[i7 - 1]);
                    i6 = (i6 / i4);
                    i4 = (-205 % i4);
                } catch (ArithmeticException a_e) {}
                i6 <<= -13;
                i4 += (int)Test.instanceCount;
                i4 += i8;
            }
            i6 += i6;
            break;
        case 10:
            i8 = (int)Test.instanceCount;
            i6 -= (int)d1;
            break;
        case 11:
            i6 = -136;
            break;
        case 12:
            i6 = (int)d1;
            break;
        case 13:
            i8 *= i4;
            break;
        }
        long meth_res = i4 + (b ? 1 : 0) + i6 + Double.doubleToLongBits(d1) + i7 + i8;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=28727, i10=50142, i11=-23834, i13=-11, i14=38649, i15=97, i16=8, i17=226, i18=-235, i19=-15469, i20=6,
            iArr[]=new int[N];
        long l=2683367115809182535L;
        byte by=-61;
        double d2=-69.59090;

        FuzzerUtils.init(iArr, -171);

        Test.instanceCount &= (((i * l) - (++by)) * ((i * Test.instanceCount) >> (iArr[(2 >>> 1) % N] = i)));
        vMeth(iMeth(-40300, Test.bFld) - -22169, i);
        iArr[(0 >>> 1) % N] += i;
        for (i10 = 11; i10 < 219; i10++) {
            for (i13 = 2; 121 > i13; ++i13) {
                if (Test.bFld) continue;
                i11 += (((i13 * Test.instanceCount) + Test.instanceCount) - i13);
                l |= 4246617557L;
                i = (int)Test.instanceCount;
            }
            for (i15 = 1; i15 < 121; i15++) {
                for (i17 = 1; i17 < 2; ++i17) {
                    if (true) break;
                    i18 += (((i17 * i13) + i11) - i10);
                    i -= (int)d2;
                }
                i18 += i15;
                by |= (byte)Test.instanceCount;
                i18 = (int)-15265L;
                Test.fFld -= i16;
                Test.fFld -= Test.fFld;
                i += (i15 - i15);
                Test.fFld += (i15 + l);
                for (i19 = 1; i19 < 2; i19++) {
                    i18 -= (int)d2;
                    switch (((64385 >>> 1) % 7) + 71) {
                    case 71:
                        Test.iArrFld[(i14 >>> 1) % N] -= Test.sFld;
                        switch ((i15 % 10) + 20) {
                        case 20:
                            switch ((((-64741 >>> 1) % 2) * 5) + 94) {
                            case 97:
                                i20 = i15;
                                fFld1 = (float)-1.93021;
                            case 96:
                                Test.instanceCount <<= i;
                            }
                            break;
                        case 21:
                            i14 -= (int)fFld1;
                            break;
                        case 22:
                        case 23:
                            i16 -= (int)fFld1;
                            break;
                        case 24:
                            i20 += (i19 + i20);
                            break;
                        case 25:
                        case 26:
                            Test.fFld = i;
                        case 27:
                            i16 += (int)Test.instanceCount;
                            break;
                        case 28:
                            i20 = (int)l;
                            break;
                        case 29:
                            Test.sFld = (short)Test.fFld;
                        }
                        break;
                    case 72:
                        Test.fFld += i19;
                        break;
                    case 73:
                        Test.iArrFld[i19 - 1] -= (int)l;
                        break;
                    case 74:
                        try {
                            i11 = (iFld / i18);
                            iFld = (i19 / -48007);
                            iArr[i19] = (42437 / i);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 75:
                        iArr[i10] *= (int)-140L;
                        break;
                    case 76:
                        i11 = (int)4L;
                        break;
                    case 77:
                        iArrFld1[i15] += i19;
                        break;
                    default:
                        i14 = i10;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i l by = " + i + "," + l + "," + by);
        FuzzerUtils.out.println("i10 i11 i13 = " + i10 + "," + i11 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 d2 = " + i17 + "," + i18 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i19 i20 iArr = " + i19 + "," + i20 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld fFld1 iFld = " + Test.sFld + "," + Float.floatToIntBits(fFld1) + "," + iFld);
        FuzzerUtils.out.println("Test.dArrFld Test.sArrFld Test.iArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.sArrFld) +
            "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iArrFld1 = " + FuzzerUtils.checkSum(iArrFld1));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest iMeth iMeth1
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
