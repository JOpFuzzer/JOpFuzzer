// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=7729L;
    public static int iFld=43978;
    public static boolean bFld=false;
    public static volatile byte byFld=-113;
    public static volatile int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static int iArrFld1[][]=new int[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
        FuzzerUtils.init(Test.dArrFld, -1.62828);
        FuzzerUtils.init(Test.iArrFld1, -5);
        FuzzerUtils.init(Test.lArrFld, 33958L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i1, int i2) {

        int i3=-1, i4=71, i5=-38730, i6=-14, i7=-13604, i8=10, i9=-47953, i10=21855;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2253200506628896544L);

        for (i3 = 8; i3 < 165; i3++) {
            for (i5 = 10; i5 > 1; i5 -= 3) {
                for (i7 = 1; 4 > i7; i7++) {
                    byte by=21;
                    double d=92.83954;
                    float f1=79.435F;
                    lArr = lArr;
                    Test.dArrFld[i3] = i5;
                    by |= (byte)Test.instanceCount;
                    Test.iArrFld[i7 + 1] = (int)d;
                    Test.instanceCount += i3;
                    Test.iArrFld1 = Test.iArrFld1;
                    f1 = i5;
                    Test.iArrFld[i5 + 1] = -9718;
                }
                for (i9 = 1; i9 < 4; i9++) {
                    i4 -= i4;
                    Test.iArrFld[i3] = i8;
                    i10 += (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(boolean b, long l) {

        int i=6892, i11=-8, i12=-209, i13=-119, i14=15609, i15=-165, i16=-26190;
        float f=1.653F;
        byte by1=-29;
        short s=23731;

        i /= (int)(Math.min(++Test.iFld, Test.iFld) | 1);
        Test.iArrFld[(Test.iFld >>> 1) % N] += (int)(((f - Test.iFld) + iMeth(i, Test.iFld)) + -11);
        for (i11 = 123; i11 > 4; --i11) {
            by1 = (byte)2.114355;
            for (i13 = 1; i13 < 13; i13++) {
                Test.iArrFld1[i13][i13] %= (int)((long)(f) | 1);
                for (i15 = 2; i15 > 1; i15--) {
                    Test.instanceCount = i12;
                    i <<= i14;
                    s += (short)i15;
                    by1 += (byte)(i15 ^ Test.iFld);
                    Test.lArrFld[i11 + 1] = i16;
                    i12 += (i15 | i16);
                    i16 -= i11;
                    i16 <<= i16;
                }
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + l + i + Float.floatToIntBits(f) + i11 + i12 + by1 + i13 + i14 + i15 + i16 + s;
    }

    public static void vMeth() {

        double d1=-95.20072;
        int i17=1, i18=76, i19=-2499, i20=3;

        vMeth1(Test.bFld, Test.instanceCount);
        Test.instanceCount = Test.iFld;
        d1 = Test.iFld;
        Test.iArrFld1[(-93 >>> 1) % N][(Test.iFld >>> 1) % N] -= (int)-242L;
        Test.iFld *= Test.iFld;
        Test.iFld -= (int)Test.instanceCount;
        Test.iFld -= (int)Test.instanceCount;
        Test.iArrFld1[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = Test.iFld;
        for (i17 = 16; i17 < 308; ++i17) {
            for (i19 = 1; 6 > i19; i19++) {
                Test.bFld = Test.bFld;
                i18 += (58379 + (i19 * i19));
            }
            Test.byFld = (byte)Test.instanceCount;
            i18 *= (int)d1;
            i18 -= (int)Test.instanceCount;
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i17 + i18 + i19 + i20;
    }

    public void mainTest(String[] strArr1) {

        int i21=43226, i22=-21518, i24=-38261, i25=2285, i26=26285, i27=-25, i28=32544;
        float f2=-27.825F;
        short s1=-1438;
        double d2=-49.112686;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)-97);

        vMeth();
        for (i21 = 12; 252 > i21; ++i21) {
            Test.iFld += (((i21 * i21) + f2) - Test.instanceCount);
            s1 *= (short)Test.iFld;
            try {
                Test.iFld = (i21 / i22);
                Test.iArrFld[i21 - 1] = (i21 % Test.iArrFld[i21]);
                Test.iFld = (i21 % Test.iArrFld1[i21 + 1][i21 + 1]);
            } catch (ArithmeticException a_e) {}
            Test.lArrFld[i21 + 1] -= i21;
            i22 <<= (int)Test.instanceCount;
            Test.lArrFld[i21 + 1] = i21;
            d2 = 0.46F;
            i22 <<= Test.iFld;
        }
        byArr[(i22 >>> 1) % N][(i22 >>> 1) % N] += (byte)i22;
        for (int i23 : Test.iArrFld) {
            Test.iArrFld[(Test.iFld >>> 1) % N] = (int)Test.instanceCount;
        }
        Test.iArrFld = Test.iArrFld1[(Test.iFld >>> 1) % N];
        i24 = 1;
        do {
            f2 -= i24;
            Test.iFld &= (int)Test.instanceCount;
            Test.iFld >>= i22;
            Test.dArrFld[i24 - 1] = f2;
            i22 *= 0;
            d2 = -33762L;
            Test.instanceCount = i22;
        } while (++i24 < 372);
        for (i25 = 2; i25 < 296; ++i25) {
            for (i27 = 1; i27 < 86; i27++) {
                i26 += i25;
                i28 *= (int)17.10481;
                Test.iFld += Test.iFld;
                try {
                    i22 = (i25 % -49150);
                    i22 = (i25 % 351457293);
                    Test.iArrFld[i25] = (i25 % -139);
                } catch (ArithmeticException a_e) {}
                i28 += i27;
            }
        }
        Test.iFld = (int)d2;

        FuzzerUtils.out.println("i21 i22 f2 = " + i21 + "," + i22 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("s1 d2 i24 = " + s1 + "," + Double.doubleToLongBits(d2) + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 byArr = " + i28 + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld Test.iArrFld Test.dArrFld = " + Test.byFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.iArrFld1 Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld1) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
