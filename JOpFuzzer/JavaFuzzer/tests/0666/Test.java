// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-29670L;
    public int iFld=164;
    public byte byFld=82;
    public static short sFld=22971;
    public boolean bFld=true;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -68L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i4) {

        int i5=9, i6=-14, i7=10, i8=-51019, iArr[]=new int[N];
        byte by1=-32;

        FuzzerUtils.init(iArr, -3);

        iArr[(i4 >>> 1) % N] = i4;
        i5 = 1;
        do {
            for (i6 = 1; 6 > i6; ++i6) {
                by1 *= (byte)i7;
                i7 += (-54827 + (i6 * i6));
                i7 <<= i6;
                Test.instanceCount += i7;
                iArr[i6 + 1] <<= i4;
                i7 = i5;
                i8 = 2;
                do {
                    iArr[i6 - 1] = 12;
                    i4 += i6;
                    iArr[i8 + 1] += i7;
                } while (--i8 > 0);
                i7 += (int)-59.231F;
                i7 -= (int)Test.instanceCount;
            }
        } while (++i5 < 298);
        long meth_res = i4 + i5 + i6 + i7 + by1 + i8 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d) {

        int i2=-86, i3=201, i9=-214;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 49.50511);

        i2 >>= (i2--);
        i2 = i2;
        i3 = 1;
        while (++i3 < 295) {
            short s=31489;
            i2 = Math.abs(iMeth1(i2) + i2);
            i2 += i3;
            Test.lArrFld[i3] |= 238;
            dArr[i3] = FuzzerUtils.double1array(N, (double)99.60813);
            i2 -= (int)d;
            s = (short)i9;
        }
        i2 += (int)d;
        vMeth_check_sum += Double.doubleToLongBits(d) + i2 + i3 + i9 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(byte by) {

        double d1=-17.38168;
        float f1=0.371F;
        int i10=68, i11=-186, i12=253, i13=-34448, i14=91, i15=-58, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 12);

        vMeth(d1);
        f1 -= (float)1.30131;
        for (i10 = 6; i10 < 286; ++i10) {
            i11 = i10;
        }
        for (i12 = 17; i12 < 308; ++i12) {
            i11 *= by;
            Test.instanceCount -= i13;
            for (i14 = 1; i14 < 6; i14 += 2) {
                i13 = (int)-2906576147L;
                i15 >>>= i13;
                by = (byte)i12;
                iArr1[i14 + 1] = 124;
                Test.instanceCount *= (long)f1;
                d1 -= Test.instanceCount;
            }
            i11 *= 128;
        }
        long meth_res = by + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + i15
            + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=239, i1=135, i16=-41801, i17=-38688, i18=4, i19=12, i20=29344, i21=-8410, i22=-7, i23=34890;
        long l=-3894205504L;
        float f=-14.349F;
        double d2=97.18634;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)19697);

        for (i = 11; 384 > i; i++) {
            i1 -= -212;
            l = (long)((i - (Test.instanceCount - i1)) + (f++));
            iFld = (--iArrFld[i - 1]);
            iMeth(byFld);
            for (i16 = i; i16 < 68; i16++) {
                i17 += (i16 * i16);
            }
            fArrFld[i] *= i1;
        }
        Test.sFld = (short)iFld;
        iFld = i1;
        i17 = iFld;
        for (d2 = 4; d2 < 135; d2++) {
            f += f;
            for (i19 = (int)(d2); i19 < 191; i19++) {
                iArrFld[i19] += (int)d2;
                l -= l;
                switch (((50495 >>> 1) % 9) + 97) {
                case 97:
                    i17 += i19;
                    iArrFld[(int)(d2)] >>= (int)Test.instanceCount;
                case 98:
                    if (bFld) break;
                    Test.instanceCount += i19;
                    Test.sFld -= (short)l;
                    break;
                case 99:
                    Test.lArrFld[(int)(d2 - 1)] -= 143L;
                    try {
                        iArrFld[(int)(d2)] = (i / 51772);
                        i20 = (iFld / 102);
                        iFld = (144 % i);
                    } catch (ArithmeticException a_e) {}
                    for (i21 = 1; i21 > 1; --i21) {
                        sArr = sArr;
                        i20 |= i17;
                        i18 = (int)-1270681770L;
                        i23 += (((i21 * i21) + f) - l);
                        iArrFld[i19 - 1] *= (int)l;
                    }
                    break;
                case 100:
                    i20 <<= i1;
                    break;
                case 101:
                    i1 = i;
                case 102:
                    iFld = (int)f;
                    break;
                case 103:
                    if (bFld) break;
                    break;
                case 104:
                    if (bFld) break;
                    break;
                case 105:
                    i1 >>= -10978;
                    break;
                default:
                    iFld >>= 2;
                }
            }
        }

        FuzzerUtils.out.println("i i1 l = " + i + "," + i1 + "," + l);
        FuzzerUtils.out.println("f i16 i17 = " + Float.floatToIntBits(f) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("d2 i18 i19 = " + Double.doubleToLongBits(d2) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 sArr = " + i23 + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount iFld byFld = " + Test.instanceCount + "," + iFld + "," + byFld);
        FuzzerUtils.out.println("Test.sFld bFld iArrFld = " + Test.sFld + "," + (bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.lArrFld fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
