// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=6L;
    public int iFld=47903;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -43267L);
        FuzzerUtils.init(Test.fArrFld, 0.412F);
    }

    public static long fMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6, long l1) {

        byte by=10;
        int i7=-14, i8=-66, i9=55820, i10=61922, iArr1[]=new int[N];
        float f2=-114.7F;

        FuzzerUtils.init(iArr1, 27085);

        by >>= (byte)i6;
        for (i7 = 10; i7 < 334; i7++) {
            i9 = 1;
            while (++i9 < 5) {
                iArr1 = iArr1;
                Test.instanceCount *= i6;
                by = (byte)i6;
                l1 -= i6;
                i6 <<= i8;
                i10 = 1;
                while (++i10 < 1) {
                    l1 += (((i10 * i8) + Test.instanceCount) - i8);
                }
                i8 += (((i9 * i10) + i10) - Test.instanceCount);
            }
            f2 -= 1694;
            i6 += (i7 + f2);
            try {
                iArr1[i7 + 1] = (i8 / -567290654);
                i6 = (i10 / -52455);
                i6 = (i10 / i6);
            } catch (ArithmeticException a_e) {}
            l1 <<= 1447525620L;
        }
        vMeth_check_sum += i6 + l1 + by + i7 + i8 + i9 + i10 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1);
    }

    public static short sMeth(int i5, long l) {

        int i11=-221, i12=3, i13=-69, i14=228, i15=-206, i16=-169, i17=-57019, i18=46889, iArr2[]=new int[N],
            iArr3[]=new int[N];
        double d1=90.37762, dArr[]=new double[N];
        short s=-32517;
        float f3=2.314F;
        boolean b=false;
        byte by1=63;

        FuzzerUtils.init(dArr, -97.48573);
        FuzzerUtils.init(iArr2, 212);
        FuzzerUtils.init(iArr3, -4);

        vMeth(i5, 299697852071096155L);
        for (i11 = 3; 303 > i11; ++i11) {
            dArr[i11 + 1] -= i5;
            d1 *= -10;
        }
        i12 = i5;
        if (b) {
            for (i13 = 3; i13 < 158; ++i13) {
                for (i15 = 1; i15 < 10; i15++) {
                    for (i17 = 2; i17 > 1; --i17) {
                        i18 = s;
                        f3 *= f3;
                        try {
                            i16 = (i14 % 54602);
                            i16 = (i18 / -38416);
                            iArr2[i17 - 1] = (i15 / i14);
                        } catch (ArithmeticException a_e) {}
                        iArr3[i15 - 1] += i17;
                        if (b) break;
                        by1 = (byte)i17;
                    }
                }
            }
        }
        long meth_res = i5 + l + i11 + i12 + Double.doubleToLongBits(d1) + i13 + i14 + i15 + i16 + i17 + i18 + s +
            Float.floatToIntBits(f3) + (b ? 1 : 0) + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static float fMeth() {

        int i1=189, i2=-50351, i3=-6, i4=44247, iArr[]=new int[N];
        float f1=0.380F, f4=-105.1010F;
        double d2=93.97812;

        FuzzerUtils.init(iArr, -163);

        for (i1 = 4; i1 < 249; ++i1) {
            i3 = 1;
            while (++i3 < 7) {
                f1 = (++Test.lArrFld[i1 + 1]);
                i2 *= (int)((--Test.instanceCount) - iArr[i3 + 1]);
                i4 = 1;
                do {
                    i2 -= (int)(Test.instanceCount++);
                    f1 = (Math.min(i4, ++iArr[i3 + 1]) * 97.848F);
                    f1 += (i3 - (sMeth(i2, Test.instanceCount) + i2));
                    Test.instanceCount = (long)f4;
                    iArr[i1 - 1] = i3;
                    i2 = i2;
                    f1 *= i2;
                    Test.instanceCount *= i3;
                    f1 = (float)1.20845;
                } while (++i4 < 1);
                iArr[i1 - 1] = (int)d2;
            }
        }
        long meth_res = i1 + i2 + i3 + Float.floatToIntBits(f1) + i4 + Float.floatToIntBits(f4) +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=10577, i19=-2, i20=-12845, i21=42955, i22=78, i23=2, i24=-7, iArr4[]=new int[N];
        double d=-79.58447;
        float f=-2.850F;

        FuzzerUtils.init(iArr4, 77);

        Test.instanceCount -= i;
        i -= (int)(((i + d) + f) + (fMeth() + d));
        for (i19 = 10; i19 < 244; ++i19) {
            i ^= i20;
            f = i;
            i20 += i19;
            iArr4[i19] <<= i;
            Test.fArrFld[i19] += i20;
            switch (((i19 % 1) * 5) + 109) {
            case 111:
                i += (((i19 * i19) + i) - i);
                i20 = i;
                for (i21 = 4; 107 > i21; ++i21) {
                    for (i23 = i21; i23 < 2; i23++) {
                        i22 -= -240;
                        i20 = (int)Test.instanceCount;
                        Test.instanceCount -= i24;
                        i20 -= i19;
                        iArr4[(i24 >>> 1) % N] <<= i20;
                        Test.instanceCount = iFld;
                        iFld -= (int)-10L;
                        Test.instanceCount += i23;
                        f -= i23;
                        i24 <<= 65256;
                    }
                    iArr4[i21] = -148;
                    f += (i21 * i21);
                    switch ((i21 % 8) + 69) {
                    case 69:
                    case 70:
                        if (Test.bFld) continue;
                    case 71:
                        i24 += (i21 + Test.instanceCount);
                        i20 = i;
                        break;
                    case 72:
                        i20 += (i21 + f);
                        break;
                    case 73:
                        d = -4213998172L;
                        break;
                    case 74:
                        iArr4[i21 - 1] /= -187;
                    case 75:
                        iArr4[i21] >>= (int)Test.instanceCount;
                        break;
                    case 76:
                        Test.fArrFld[i19 - 1] -= -5;
                        break;
                    }
                }
                break;
            default:
                f += ((long)i19 | (long)i20);
            }
        }

        FuzzerUtils.out.println("i d f = " + i + "," + Double.doubleToLongBits(d) + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("iArr4 = " + FuzzerUtils.checkSum(iArr4));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.bFld = " + Test.instanceCount + "," + iFld + "," +
            (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  sMeth ->  sMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
