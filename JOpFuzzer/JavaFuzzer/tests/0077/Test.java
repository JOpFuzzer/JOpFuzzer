// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=7407273496391021930L;
    public static double dFld=45.29818;
    public static boolean bFld=true;
    public static short sFld=-2927;
    public static int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 44);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7) {

        int i8=24254, i9=34873, i10=104;
        double d=0.57406;
        float f1=2.173F;
        byte by=26;

        i8 = 1;
        while (++i8 < 284) {
            for (d = 1; 6 > d; ++d) {
                try {
                    i7 = (59326 % i8);
                    i9 = (49241 / i7);
                    i7 = (i8 % 106);
                } catch (ArithmeticException a_e) {}
                i9 = (int)-22.946F;
                Test.dFld += i7;
            }
            i7 = (int)Test.instanceCount;
            f1 = i8;
            i10 = 1;
            do {
                boolean b=true;
                if (b) break;
                i9 += (int)Test.instanceCount;
                Test.instanceCount |= -54199L;
                try {
                    i9 = (50757 % Test.iArrFld[i10]);
                    i7 = (163 % Test.iArrFld[i8 + 1]);
                    i9 = (-229 / i10);
                } catch (ArithmeticException a_e) {}
                Test.dFld *= -233;
                i7 += i10;
                by += (byte)i9;
            } while (++i10 < 6);
        }
        vMeth2_check_sum += i7 + i8 + Double.doubleToLongBits(d) + i9 + Float.floatToIntBits(f1) + i10 + by;
    }

    public static void vMeth1(int i4, float f) {

        int i5=5427, i6=-12, i11=5;
        byte by1=-45;

        i4 = (int)(((i4 * Test.instanceCount) - (Test.iArrFld[(i4 >>> 1) % N]++)) + (--i4));
        for (i5 = 2; 132 > i5; i5++) {
            Test.instanceCount -= (long)((f++) - ((i5 - i6) - (-(f * i5))));
            vMeth2(i4);
            i4 <<= i5;
            i6 = i6;
            by1 *= (byte)i6;
            i11 = 1;
            while (++i11 < 12) {
                i4 -= 9066;
                i6 += -56;
                i6 <<= i4;
                i6 -= i6;
                i4 += (int)(2124207519L + (i11 * i11));
                if (i5 != 0) {
                    vMeth1_check_sum += i4 + Float.floatToIntBits(f) + i5 + i6 + by1 + i11;
                    return;
                }
                Test.iArrFld = Test.iArrFld;
            }
        }
        vMeth1_check_sum += i4 + Float.floatToIntBits(f) + i5 + i6 + by1 + i11;
    }

    public static void vMeth(int i, int i1) {

        int i2=-40902, i3=-41147, i12=7, i13=249, i14=-31794;
        long l=3512218620L;

        for (i2 = 19; 345 > i2; ++i2) {
            float f2=-54.440F;
            vMeth1(i1, f2);
            Test.iArrFld[i2 + 1] = (int)-4L;
            for (i12 = 1; i12 < 5; i12++) {
                Test.bFld = Test.bFld;
                for (l = 1; l < 2; l++) {
                    Test.iArrFld[i2 - 1] = i12;
                    i1 = -6;
                }
                Test.instanceCount = i1;
                Test.instanceCount = Test.sFld;
                i1 *= i;
                if (Test.bFld) {
                    i14 -= i2;
                } else {
                    Test.instanceCount <<= i13;
                    i13 += (i12 * l);
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i12 + i13 + l + i14;
    }

    public void mainTest(String[] strArr1) {

        int i15=-5, i16=-4, i17=245, i18=-7, i19=-1, i20=-38, iArr[][]=new int[N][N];
        double d1=-34.104031;
        byte by2=37;
        float f3=18.110F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -31.308F);
        FuzzerUtils.init(iArr, -224);

        vMeth(i15, i15);
        for (i16 = 175; i16 > 6; i16 -= 2) {
            d1 = 298;
            while (--d1 > 0) {
                by2 += (byte)i17;
                i17 += i15;
                if (Test.bFld) {
                    for (i18 = 1; i18 < 1; i18++) {
                        Test.bFld = false;
                        Test.iArrFld[(int)(d1)] = i19;
                        Test.dFld -= f3;
                    }
                    i17 += (int)d1;
                } else {
                    i20 = 1;
                    while (++i20 < 1) {
                        switch ((int)((d1 % 4) + 94)) {
                        case 94:
                            Test.sFld -= (short)Test.instanceCount;
                            switch ((int)((d1 % 8) + 36)) {
                            case 36:
                            case 37:
                                try {
                                    Test.iArrFld[i20 + 1] = (-102 / Test.iArrFld[i16 - 1]);
                                    Test.iArrFld[i16 - 1] = (33997 / i16);
                                    i19 = (i19 % Test.iArrFld[i16]);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 38:
                                f3 += Test.instanceCount;
                                fArr[i16 - 1] -= i19;
                                break;
                            case 39:
                                i19 += (((i20 * Test.instanceCount) + i19) - i18);
                                i15 -= -90;
                                try {
                                    i19 = (-27467 % Test.iArrFld[i16]);
                                    i19 = (i15 / -50861);
                                    i19 = (i15 % 39031);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 40:
                                Test.instanceCount = i15;
                                Test.instanceCount += (i20 ^ i20);
                                break;
                            case 41:
                                f3 += -25663;
                                break;
                            case 42:
                                i15 = i18;
                                i19 += (-24889 + (i20 * i20));
                                Test.iArrFld[i16 - 1] = Test.sFld;
                            case 43:
                                i19 += i20;
                                break;
                            default:
                                i17 *= (int)106.7657;
                                bArrFld[i16] = Test.bFld;
                            }
                            break;
                        case 95:
                            i15 = (int)f3;
                            break;
                        case 96:
                            iArr[i16][i16 - 1] -= (int)Test.instanceCount;
                            break;
                        case 97:
                            try {
                                Test.iArrFld[(int)(d1)] = (iArr[i16][i20] % -45958);
                                iArr[i20 - 1][i16 - 1] = (i16 % 1670621601);
                                i15 = (i17 / i20);
                            } catch (ArithmeticException a_e) {}
                            break;
                        default:
                            if (true) break;
                        }
                    }
                }
            }
        }

        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("d1 by2 i18 = " + Double.doubleToLongBits(d1) + "," + by2 + "," + i18);
        FuzzerUtils.out.println("i19 f3 i20 = " + i19 + "," + Float.floatToIntBits(f3) + "," + i20);
        FuzzerUtils.out.println("fArr iArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld Test.iArrFld bArrFld = " + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
