// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=1001952749L;
    public float fFld=14.505F;
    public short sFld=-17609;
    public short sArrFld[]=new short[N];
    public static volatile double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 1.77016);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4, float f1, int i5) {

        int i6=-5, i7=105, i8=130, i9=-13, iArr[]=new int[N];
        float f2=-2.326F;
        boolean b=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-6);
        FuzzerUtils.init(iArr, 130);

        Test.instanceCount -= Test.instanceCount;
        f1 -= i5;
        for (i6 = 8; 223 > i6; i6++) {
            f2 = 1;
            do {
                byArr[(int)(f2 + 1)] += (byte)f2;
                b = b;
                i5 += i7;
                i4 = (int)Test.instanceCount;
                if (b) {
                    try {
                        i5 = (i4 / -29);
                        i5 = (i4 / i7);
                        i7 = (iArr[(int)(f2)] % i7);
                    } catch (ArithmeticException a_e) {}
                }
                for (i8 = 1; i8 > 1; i8 -= 3) {
                    double d=0.82975;
                    iArr[i6 - 1] += i9;
                    i7 |= i9;
                    i7 += (int)d;
                    Test.instanceCount += 3013323287L;
                }
            } while (++f2 < 7);
        }
        long meth_res = i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + Float.floatToIntBits(f2) + (b ? 1 : 0) + i8 + i9
            + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, short s, long l1) {

        int i2=19289, i3=178, i10=-7456, i11=-4, i12=-3, i13=-204;
        float f3=13.727F, fArr[]=new float[N];
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6908753351188419862L);
        FuzzerUtils.init(fArr, 0.452F);

        for (i2 = 250; i2 > 6; --i2) {
            i3 *= iMeth(i3, -1.302F, i3);
            for (i10 = 7; i10 > 1; i10 -= 2) {
                i3 += (i10 + i11);
                for (i12 = i2; i12 < 3; ++i12) {
                    i11 *= (int)-3101134584962434167L;
                    lArr[i10] = -14L;
                    i3 += (((i12 * i10) + l) - i12);
                    f3 *= i2;
                    i3 += i12;
                    i13 <<= (int)5L;
                }
                if (b1) break;
            }
            i11 = i3;
            i13 += i2;
        }
        fArr[(i13 >>> 1) % N] *= 111.535F;
        vMeth_check_sum += l + s + l1 + i2 + i3 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f3) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth(float f) {

        short s1=-25430;

        vMeth(Test.instanceCount, s1, Test.instanceCount);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + s1;
    }

    public void mainTest(String[] strArr1) {

        int i=-1369, i1=0, i14=12, i15=204, i16=2121, i17=-37233, iArr1[]=new int[N];
        float f4=0.385F;
        boolean b2=true;
        long l2=1483377077L;
        double d1=-34.35510;

        FuzzerUtils.init(iArr1, -26);

        for (i = 4; i < 214; ++i) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(fFld);
            for (i14 = 7; i14 < 120; ++i14) {
                i1 <<= i1;
                sArrFld[i + 1] *= (short)238;
                for (f4 = i14; f4 < 2; ++f4) {
                    long l3=-16674L;
                    iArr1[(int)(f4 + 1)] *= -88;
                    if (b2) continue;
                    if (b2) continue;
                    i16 *= (int)Test.instanceCount;
                    sFld &= (short)0;
                    Test.dArrFld[i14 - 1] = fFld;
                    lArrFld[(int)(f4)] *= -145;
                    i1 += (int)Test.instanceCount;
                    switch (((5 >>> 1) % 5) + 39) {
                    case 39:
                        i1 += (int)(58714L + (f4 * f4));
                        break;
                    case 40:
                        try {
                            i16 = (i / iArr1[i]);
                            i1 = (i17 % 190);
                            i1 = (i16 / i16);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount |= -49985;
                        i15 += (int)(f4 * f4);
                        if (b2) {
                            i16 = i17;
                            i1 += (int)(((f4 * i1) + Test.instanceCount) - f4);
                            try {
                                i17 = (i16 / i16);
                                i16 = (i17 % i14);
                                i17 = (i14 % -481564034);
                            } catch (ArithmeticException a_e) {}
                        } else if (b2) {
                            if (b2) {
                            } else if (b2) {
                                i1 = i;
                            } else if (b2) {
                                l2 += i14;
                                i16 = i17;
                                i16 = (int)fFld;
                                iArr1[i14] *= (int)2.345F;
                            }
                            sFld *= (short)i1;
                        }
                    case 41:
                        i17 += (int)d1;
                        break;
                    case 42:
                        i1 = (int)l3;
                        break;
                    case 43:
                        i16 += (int)((long)f4 ^ i14);
                    default:
                        i16 *= i14;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i14 = " + i + "," + i1 + "," + i14);
        FuzzerUtils.out.println("i15 f4 i16 = " + i15 + "," + Float.floatToIntBits(f4) + "," + i16);
        FuzzerUtils.out.println("b2 i17 l2 = " + (b2 ? 1 : 0) + "," + i17 + "," + l2);
        FuzzerUtils.out.println("d1 iArr1 = " + Double.doubleToLongBits(d1) + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount fFld sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + sFld);
        FuzzerUtils.out.println("sArrFld Test.dArrFld lArrFld = " + FuzzerUtils.checkSum(sArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
