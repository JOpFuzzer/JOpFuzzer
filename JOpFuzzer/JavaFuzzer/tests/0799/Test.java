// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-710838673814255170L;
    public static int iFld=82;
    public static double dFld=93.107980;
    public static short sFld=793;
    public boolean bFld=false;
    public int iArrFld[][]=new int[N][N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i2, int i3, double d) {

        int i4=147, i5=24366, i6=-14, i7=48313, iArr[]=new int[N];
        float f=0.485F;
        byte by=-23;
        double d1=0.22914;
        boolean b1=true;
        long l1=253L;

        FuzzerUtils.init(iArr, 14);

        for (i4 = 2; i4 < 128; ++i4) {
            i6 = 1;
            while (++i6 < 12) {
                if (false) break;
                i2 = i3;
                iArr[i6] = i2;
                f += 3;
                Test.instanceCount >>= Test.instanceCount;
                i5 *= -10;
                by *= (byte)-229;
                for (d1 = i6; d1 < 1; ++d1) {
                    i2 += (int)((long)d1 ^ i7);
                    if (b1) continue;
                }
            }
            iArr[i4] <<= i6;
            iArr[i4] = (int)l1;
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + Float.floatToIntBits(f) + by +
            Double.doubleToLongBits(d1) + i7 + (b1 ? 1 : 0) + l1 + FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth1(boolean b, int i, long l) {

        int i1=-187, i8=34156, i9=41968, iArr1[]=new int[N];
        double d2=0.38826;

        FuzzerUtils.init(iArr1, 63248);

        i1 = 243;
        while (--i1 > 0) {
            b = (bMeth(Test.iFld, i1, Test.dFld) && b);
            for (i8 = 1; i8 < 7; i8++) {
                i9 = -222;
                Test.sFld += (short)(((i8 * l) + i1) - Test.iFld);
                d2 = 1;
                do {
                    i9 += Test.iFld;
                    i += (int)(d2 + Test.instanceCount);
                    Test.iFld = i1;
                } while (++d2 < 2);
                i9 = i9;
                Test.instanceCount *= i8;
                i9 *= i8;
                iArr1[i8 - 1] = (int)Test.dFld;
                if (i1 != 0) {
                    vMeth1_check_sum += (b ? 1 : 0) + i + l + i1 + i8 + i9 + Double.doubleToLongBits(d2) +
                        FuzzerUtils.checkSum(iArr1);
                    return;
                }
                i9 += (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i + l + i1 + i8 + i9 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        boolean b2=false;
        int i10=-4, i11=49362, i12=-6, i13=16454, i14=-237, i15=11;
        double d3=-37.72482;
        byte by1=-103;
        float f1=0.991F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3203579954L);

        vMeth1(b2, Test.iFld, -5913L);
        Test.iFld ^= Test.iFld;
        Test.iFld -= Test.sFld;
        for (i10 = 317; i10 > 3; --i10) {
            switch ((i10 % 2) + 95) {
            case 95:
                for (d3 = 1; d3 < 5; d3++) {
                    i12 += (int)d3;
                    by1 += (byte)(d3 * d3);
                    i12 = -4406;
                    i12 += (int)d3;
                    for (i13 = 1; i13 < 2; i13 += 3) {
                        Test.instanceCount -= (long)f1;
                        i12 += (((i13 * i15) + f1) - i11);
                        Test.instanceCount -= i11;
                        i12 += (i13 * i13);
                    }
                }
                break;
            case 96:
                f1 -= i15;
                break;
            }
        }
        vMeth_check_sum += (b2 ? 1 : 0) + i10 + i11 + Double.doubleToLongBits(d3) + i12 + by1 + i13 + i14 +
            Float.floatToIntBits(f1) + i15 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        float f3=0.402F, fArr[]=new float[N];
        int i16=-8, i17=43825, i18=153, i19=110, i20=72, i21=-2, i22=-43289, i23=3, i24=5777, i25=-60924;
        byte by2=13;

        FuzzerUtils.init(fArr, -2.474F);

        vMeth();
        for (float f2 : fArr) {
            Test.instanceCount += Test.instanceCount;
            for (f3 = 1; f3 < 63; ++f3) {
                i16 = (int)Test.instanceCount;
            }
            f2 += i16;
            for (i17 = 2; i17 < 63; i17++) {
                Test.sFld = (short)i17;
            }
            Test.instanceCount = Test.instanceCount;
            Test.iFld += Test.iFld;
            if (bFld) {
                i16 = Test.iFld;
                i18 -= (int)Test.dFld;
            } else {
                by2 -= (byte)f2;
                for (i19 = 1; i19 < 63; i19++) {
                    Test.iFld ^= (int)Test.instanceCount;
                    i21 = 1;
                    do {
                        i20 = (int)Test.instanceCount;
                        Test.iFld -= -203;
                    } while (++i21 < 2);
                }
                Test.iFld |= (int)Test.instanceCount;
            }
            for (i22 = 2; i22 < 63; i22++) {
                i20 -= 6;
                i23 += (i22 | i17);
                i16 += by2;
                for (i24 = 1; i24 < 2; ++i24) {
                    if (false) {
                        iArrFld[i24][i24] = -124;
                        by2 = (byte)-6;
                    } else if (bFld) {
                        Test.dFld += Test.dFld;
                        by2 *= (byte)i19;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f3 i16 i17 = " + Float.floatToIntBits(f3) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 by2 i19 = " + i18 + "," + by2 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld bFld iArrFld = " + Test.sFld + "," + (bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
