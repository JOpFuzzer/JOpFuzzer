// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-13L;
    public static short sFld=-18037;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 78L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, int i5) {

        int i6=1906, i7=23627, i8=15, i9=24428, i10=10, iArr[][]=new int[N][N];
        byte by1=40;
        short s=-32240;
        double d=0.128583;
        float f2=-41.834F;
        boolean b=true;

        FuzzerUtils.init(iArr, -238);

        for (i6 = 21; i6 < 356; i6++) {
            i5 <<= i5;
            if (i5 != 0) {
                vMeth_check_sum += l1 + i5 + i6 + i7 + i8 + i9 + by1 + s + Double.doubleToLongBits(d) + i10 +
                    Float.floatToIntBits(f2) + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
                return;
            }
            for (i8 = 1; i8 < 5; i8++) {
                switch (((i6 % 6) * 5) + 104) {
                case 133:
                    by1 += (byte)i9;
                    l1 = s;
                    i7 = 142;
                    break;
                case 121:
                    i7 *= i5;
                    i9 = i8;
                    iArr[i8][i6 - 1] = i6;
                    break;
                case 126:
                    i7 *= (int)l1;
                    for (d = i6; d < 2; d++) {
                        if (i8 != 0) {
                            vMeth_check_sum += l1 + i5 + i6 + i7 + i8 + i9 + by1 + s + Double.doubleToLongBits(d) + i10
                                + Float.floatToIntBits(f2) + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        i10 += (7 + (d * d));
                    }
                    break;
                case 132:
                    i5 = (int)f2;
                    break;
                case 125:
                    i9 -= i8;
                case 110:
                    b = b;
                    break;
                default:
                    l1 += (i8 - i7);
                }
            }
        }
        vMeth_check_sum += l1 + i5 + i6 + i7 + i8 + i9 + by1 + s + Double.doubleToLongBits(d) + i10 +
            Float.floatToIntBits(f2) + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(long l, int i4) {

        short s1=-13011;
        long l2=-34617L;
        int i11=8, i12=3, i13=2, i14=-168, i15=-163, iArr1[]=new int[N];
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -36375);
        FuzzerUtils.init(dArr, 0.49707);

        vMeth(Test.instanceCount, -10);
        i4 += (int)l;
        i4 *= i4;
        iArr1[(i4 >>> 1) % N] = s1;
        for (l2 = 390; l2 > 14; l2--) {
            for (i12 = 1; i12 < 4; ++i12) {
                i13 = 12;
                if (b1) {
                    for (i14 = i12; 2 > i14; i14++) {
                        float f3=-1.416F;
                        i11 *= (int)Test.instanceCount;
                        i4 &= 15273;
                        i15 += (int)f3;
                        dArr[(int)(l2)] += i15;
                        i15 += i14;
                        l = -4587;
                    }
                }
            }
        }
        long meth_res = l + i4 + s1 + l2 + i11 + i12 + i13 + i14 + i15 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2) {

        float f=2.428F, f1=2.84F;
        int i3=60440, i16=-33298, i17=-24974, i18=4, i19=-19214;
        boolean b2=true;

        for (f = 3; f < 300; f++) {
            f1 %= ((((i2 * Test.instanceCount) + (i3--)) * ((i2 * i2) * iMeth1(Test.instanceCount, i2))) | 1);
            i2 |= 1;
            i2 += (int)f;
        }
        Test.instanceCount = i2;
        Test.lArrFld[(i2 >>> 1) % N] *= i2;
        if (b2) {
            i3 += (int)Test.instanceCount;
        } else {
            for (i16 = 8; i16 < 269; ++i16) {
                switch (((i16 % 1) * 5) + 39) {
                case 42:
                    switch (((56 >>> 1) % 4) + 22) {
                    case 22:
                        i2 -= i3;
                        break;
                    case 23:
                        for (i18 = i16; 6 > i18; i18++) {
                            i19 >>= i16;
                            f1 += i18;
                        }
                        break;
                    case 24:
                    case 25:
                        Test.instanceCount = i19;
                    default:
                        i17 = Test.sFld;
                    }
                    break;
                }
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + i3 + Float.floatToIntBits(f1) + (b2 ? 1 : 0) + i16 + i17 + i18 +
            i19;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=12078, i1=-3, i20=-6, i21=-8, i22=2, i23=33415, i24=-40568, i25=23210, i26=64286, i27=-219, iArr2[]=new
            int[N];
        byte by=60;
        float f4=1.833F;
        double d1=0.6152;

        FuzzerUtils.init(iArr2, -194);

        i = 1;
        do {
            by += (byte)(i - i);
            i1 <<= i1;
            Test.lArrFld[i] += (Test.instanceCount + Integer.reverseBytes(iMeth(i1)));
        } while (++i < 386);
        for (i20 = 19; i20 < 377; i20++) {
            i21 = (int)Test.instanceCount;
            Test.instanceCount += Test.sFld;
            Test.instanceCount += -11040;
            for (i22 = 3; i22 < 70; ++i22) {
                Test.instanceCount += (((i22 * Test.instanceCount) + f4) - i23);
            }
            Test.instanceCount >>= i22;
            i1 = 78;
            i24 >>= -42994;
            for (i25 = 4; i25 < 70; ++i25) {
                f4 = f4;
                f4 = by;
                i23 = (int)-44136L;
                i1 += (i25 * by);
                iArr2[i20 - 1] %= (int)(i22 | 1);
                i24 -= (int)Test.instanceCount;
                Test.sFld = (short)193;
                i27 = 1;
                do {
                    Test.sFld = (short)i25;
                    iArr2[i20 - 1] += i22;
                    i21 >>>= i25;
                    d1 = Test.sFld;
                    i23 *= i;
                    Test.instanceCount = i1;
                    i24 += i27;
                    Test.instanceCount = i27;
                } while (++i27 < 2);
            }
        }

        FuzzerUtils.out.println("i by i1 = " + i + "," + by + "," + i1);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 f4 i24 = " + i23 + "," + Float.floatToIntBits(f4) + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("d1 iArr2 = " + Double.doubleToLongBits(d1) + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.lArrFld = " + Test.instanceCount + "," + Test.sFld +
            "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
