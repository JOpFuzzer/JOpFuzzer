// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-26089L;
    public static double dFld=-111.87908;
    public static int iFld=-4;
    public static int iFld1=253;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -220);
        FuzzerUtils.init(Test.byArrFld, (byte)6);
    }

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f2, long l1, int i6) {

        int i7=7, i8=-53481, i9=-15252, i10=10866, i11=-14, i12=34731, i13=152;

        for (i7 = 13; i7 < 241; i7++) {
            Test.iFld *= i6;
            f2 += i7;
            Test.iArrFld[i7] *= (int)l1;
            Test.iFld += i8;
            for (i9 = 1; 7 > i9; ++i9) {
                for (i11 = 1; i11 < 2; ++i11) {
                    i6 *= (int)Test.instanceCount;
                }
                i8 *= i12;
                i13 = 1;
                while (++i13 < 2) {
                    Test.iArrFld[i13 + 1] <<= (int)-3062460677L;
                    l1 += (i13 + Test.instanceCount);
                    Test.iFld -= i8;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)-118);
                    l1 -= i12;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + l1 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13;
    }

    public static boolean bMeth(double d, short s, float f1) {

        int i15=-34899, i16=-48332, i17=770, i18=187;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -186L);
        FuzzerUtils.init(fArr, -7.911F);

        Test.iFld >>>= (Test.iFld--);
        vMeth(20.401F, Test.instanceCount, -36694);
        for (int i14 : Test.iArrFld) {
            for (i15 = 1; i15 < 4; i15++) {
                i16 += (-7 + (i15 * i15));
                lArr[i15] = -8912L;
                Test.iArrFld[i15 + 1] = i15;
                lArr = FuzzerUtils.long1array(N, (long)44286L);
                Test.instanceCount -= i16;
                for (i17 = 1; i17 < 2; i17++) {
                    switch ((i15 % 2) + 98) {
                    case 98:
                        Test.iFld += (((i17 * i14) + Test.iFld) - i16);
                        fArr[i17 - 1] = i18;
                    case 99:
                        Test.instanceCount += (i17 + i17);
                        i14 = i14;
                        break;
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + s + Float.floatToIntBits(f1) + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth() {

        long l=-1263251247302932776L;
        int i3=-23, i4=-17930, i5=-63935, i19=54990, i20=46, i21=-14, iArr[][]=new int[N][N];
        boolean b=false;
        short s1=-4992;
        float f3=2.177F;
        double d1=-2.52881;

        FuzzerUtils.init(iArr, -53145);

        iArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] += (++Test.iFld);
        if (b) {
            for (l = 11; l < 192; ++l) {
                for (i4 = 1; 9 > i4; i4++) {
                    b = bMeth(Test.dFld, (short)(-10034), 2.910F);
                }
                Test.iArrFld[(int)(l - 1)] <<= s1;
                for (i19 = 1; i19 < 9; i19++) {
                    i20 &= (int)l;
                    i3 = (int)f3;
                    Test.iFld <<= s1;
                    b = true;
                    if (b) {
                        for (d1 = 1; d1 < 2; d1 += 2) {
                            try {
                                i3 = (1326951674 / i19);
                                Test.iFld = (215 / i20);
                                Test.iArrFld[i19] = (-1071041182 / Test.iFld);
                            } catch (ArithmeticException a_e) {}
                            i5 = i20;
                        }
                    }
                }
            }
        } else if (b) {
            Test.instanceCount = Test.iFld;
        } else if (false) {
            iArr[(i19 >>> 1) % N][(i19 >>> 1) % N] -= Test.iFld;
        }
        long meth_res = l + i3 + i4 + i5 + (b ? 1 : 0) + s1 + i19 + i20 + Float.floatToIntBits(f3) +
            Double.doubleToLongBits(d1) + i21 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-47428, i1=-93, i2=-86, i22=-7, i23=-14, i24=71, i25=6, i26=-3, i27=190, i28=8;
        float f=-2.152F;
        byte by=-124;
        boolean b1=false, bArr[]=new boolean[N];
        short s2=31391;
        double d2=49.125678;

        FuzzerUtils.init(bArr, true);

        i = 1;
        while (++i < 335) {
            for (i1 = 1; 75 > i1; i1++) {
                i2 = (int)((-(-(i2 -= i))) + (++Test.instanceCount));
            }
            f -= (float)(((Test.dFld * Test.instanceCount) + iMeth()) - i);
            Test.instanceCount = Test.iFld;
            for (i22 = 1; i22 < 75; ++i22) {
                i2 += (((i22 * Test.iFld1) + by) - i1);
                bArr[i22 + 1] = true;
            }
            Test.instanceCount = i;
            i24 = 1;
            do {
                Test.iArrFld[i24 + 1] <<= (int)Test.instanceCount;
                Test.iArrFld[i24 + 1] += 15;
                if (false) break;
            } while (++i24 < 75);
            Test.iArrFld[i + 1] *= i;
            by += (byte)(((i * i1) + i22) - i1);
            Test.instanceCount += (long)Test.dFld;
            for (i25 = i; 75 > i25; ++i25) {
                Test.instanceCount |= i24;
                b1 = true;
                s2 = (short)-9;
                i27 = 1;
                while (++i27 < 1) {
                    Test.iFld1 += Test.iFld;
                    Test.iFld1 += (int)Test.instanceCount;
                }
                Test.iFld += (((i25 * Test.instanceCount) + i1) - i27);
                Test.iArrFld[i] = i24;
                switch (((i % 4) * 5) + 94) {
                case 97:
                    f += (i25 * i);
                    for (d2 = i; d2 < 1; d2++) {
                        Test.instanceCount += (long)(d2 * d2);
                        Test.byArrFld[i25] -= by;
                    }
                    break;
                case 110:
                    Test.dFld += i;
                    break;
                case 109:
                    i26 >>= (int)Test.instanceCount;
                    break;
                case 101:
                    by >>>= (byte)i1;
                default:
                    f += i22;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("f i22 i23 = " + Float.floatToIntBits(f) + "," + i22 + "," + i23);
        FuzzerUtils.out.println("by i24 i25 = " + by + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 b1 s2 = " + i26 + "," + (b1 ? 1 : 0) + "," + s2);
        FuzzerUtils.out.println("i27 d2 i28 = " + i27 + "," + Double.doubleToLongBits(d2) + "," + i28);
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.iFld1 Test.iArrFld lArrFld = " + Test.iFld1 + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.byArrFld = " + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
