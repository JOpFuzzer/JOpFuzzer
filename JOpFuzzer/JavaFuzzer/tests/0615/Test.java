// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3476403257L;
    public static double dFld=2.30094;
    public static short sFld=-25733;
    public static volatile float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 120.207F);
        FuzzerUtils.init(Test.iArrFld, -105);
        FuzzerUtils.init(Test.lArrFld, 27432L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, float f2, boolean b1) {

        int i7=-1, i8=-38625, i9=150, i10=-1684, i11=52392, i12=-242, i13=-251, iArr2[][]=new int[N][N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(iArr2, 9717);
        FuzzerUtils.init(dArr1, 7.115453);

        i6 >>= i6;
        i6 &= i6;
        for (i7 = 7; i7 < 124; ++i7) {
            iArr2[i7 - 1] = iArr2[i7 + 1];
            for (i9 = 1; i9 < 13; ++i9) {
                f2 += (i9 - i10);
                i8 = i7;
                i6 += (((i9 * i7) + i8) - i7);
            }
            Test.instanceCount = (long)f2;
            for (i11 = 1; i11 < 13; ++i11) {
                i13 = 1;
                do {
                    dArr1[i11 - 1] = i9;
                    Test.dFld -= -14;
                    Test.sFld += (short)i13;
                    i8 += (int)Test.instanceCount;
                } while (++i13 < 2);
            }
        }
        vMeth1_check_sum += i6 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static void vMeth(boolean b) {

        int i14=29165, i15=-12, i16=-5, i17=-100, i18=12, i19=169, i20=7, i21=-37065, i22=-32790, i24=-86;
        float f3=-19.326F;

        if (b) {
            vMeth1(i14, f3, b);
            for (i15 = 6; i15 < 306; i15++) {
                i16 *= i16;
            }
            Test.instanceCount = 1495533094133554268L;
        } else {
            for (i17 = 12; i17 < 241; ++i17) {
                Test.instanceCount += (0 + (i17 * i17));
                switch ((i17 % 10) + 24) {
                case 24:
                    for (i19 = 1; i19 < 7; i19++) {
                        Test.sFld *= (short)28280;
                        i16 *= (int)Test.dFld;
                        Test.iArrFld[i19] = i14;
                        for (i21 = 1; 2 > i21; ++i21) {
                            Test.fArrFld[i21 - 1] += Test.instanceCount;
                            i20 = -26429;
                        }
                    }
                    break;
                case 25:
                    i16 = i21;
                case 26:
                    i20 %= 154;
                    break;
                case 27:
                    Test.instanceCount += (i17 * i17);
                case 28:
                    i24 += (i17 * i17);
                    break;
                case 29:
                    i14 -= i15;
                    break;
                case 30:
                    i14 = (int)f3;
                    break;
                case 31:
                    i14 += (i17 * i22);
                    break;
                case 32:
                    Test.iArrFld[i17 + 1] = i16;
                    break;
                case 33:
                    i24 = i17;
                default:
                    Test.iArrFld[i17] = Test.sFld;
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i14 + Float.floatToIntBits(f3) + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22
            + i24;
    }

    public static int iMeth(double d1, float f1, double d2) {

        boolean b2=true;
        int i25=-43638, i26=-6, i27=-8, i28=-48, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 9);

        for (int i5 : iArr1) {
            vMeth(b2);
            for (i25 = 1; 4 > i25; ++i25) {
                Test.iArrFld[i25 + 1] *= (int)-103L;
                for (i27 = i25; 2 > i27; ++i27) {
                    i26 >>>= (int)90L;
                    i28 += i27;
                    i28 *= i25;
                    Test.iArrFld[i25] /= -12;
                    switch (((i28 >>> 1) % 2) + 24) {
                    case 24:
                        i26 *= i26;
                        i5 = (int)-63023L;
                        Test.lArrFld[i27 - 1] &= Test.instanceCount;
                        break;
                    case 25:
                        d2 += i25;
                        i5 += (i27 ^ Test.instanceCount);
                        break;
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + (b2 ? 1
            : 0) + i25 + i26 + i27 + i28 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-128, i1=185, i2=58, i3=7, i4=-11, i29=65012, i30=11627, i31=0, i32=0, iArr[]=new int[N];
        double d=-1.92022, dArr[]=new double[N];
        float f=0.387F;
        byte by=101, byArr[]=new byte[N];

        FuzzerUtils.init(iArr, -207);
        FuzzerUtils.init(dArr, -31.7170);
        FuzzerUtils.init(byArr, (byte)65);

        for (i = 1; i < 250; ++i) {
            for (i2 = i; i2 < 101; i2++) {
                i3 |= (int)((i3 = (i1 - i2)) - ((iArr[i2 + 1]--) + Test.instanceCount));
                Test.instanceCount >>= (i1--);
            }
            d = ((i3 *= iArr[i - 1]) + (-Test.fArrFld[i + 1]));
            i1 += (((i * Test.instanceCount) + i2) - Test.instanceCount);
            dArr[i + 1] *= (Math.max(iArr[i - 1], Math.min(i1, i)) + (byArr[i + 1] >> i3));
            for (f = i; f < 101; f++) {
                i4 <<= iMeth(d, f, d);
                Test.iArrFld[(int)(f - 1)] >>= i1;
                Test.lArrFld[i] = by;
                Test.instanceCount += (long)(f + Test.instanceCount);
                switch ((int)((f % 1) + 32)) {
                case 32:
                    Test.lArrFld[(int)(f + 1)] += 3121778793450740609L;
                }
                iArr[(int)(f)] = i3;
                Test.instanceCount -= Test.instanceCount;
            }
            for (i29 = 1; i29 < 101; i29++) {
                i3 += (((i29 * i1) + Test.instanceCount) - i29);
                for (i31 = i29; i31 < 2; ++i31) {
                    iArr[i31 + 1] <<= i4;
                }
                Test.instanceCount -= i31;
                iArr = iArr;
                byArr[i29 - 1] >>= (byte)i4;
                Test.iArrFld[i29 - 1] = (int)Test.instanceCount;
                i3 -= (int)Test.dFld;
                switch (((i30 >>> 1) % 5) + 67) {
                case 67:
                    Test.instanceCount += Test.sFld;
                    iArr[i + 1] -= -5;
                    Test.lArrFld[i29 + 1] = 8;
                case 68:
                    i3 *= -52304;
                case 69:
                    i3 >>>= 97;
                    break;
                case 70:
                    Test.sFld >>= (short)i4;
                    break;
                case 71:
                    d -= i1;
                    break;
                default:
                    Test.instanceCount += Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 d f = " + i3 + "," + Double.doubleToLongBits(d) + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i4 by i29 = " + i4 + "," + by + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("iArr dArr byArr = " + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.fArrFld Test.iArrFld Test.lArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld) +
            "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
