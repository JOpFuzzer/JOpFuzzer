// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static byte byFld=-100;
    public static float fFld=0.332F;
    public static boolean bFld=false;
    public static double dFld=-24.112418;
    public short sFld=6407;
    public volatile int iFld=-65373;
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1964527731L);
    }

    public static long vMeth_check_sum = 0;
    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static void vMeth(byte by, int i) {

        short s=9212;
        float f=0.782F;

        s = (short)Math.min(i, --i);
        f -= (i++);
        vMeth_check_sum += by + i + s + Float.floatToIntBits(f);
    }

    public static void vSmallMeth(boolean b) {

        int i3=54984, iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr1, -7);

        iArr1[(i3 >>> 1) % N][(i3 >>> 1) % N] = i3;
        Test.byFld = (byte)(Test.byFld++);
        vSmallMeth_check_sum += (b ? 1 : 0) + i3 + FuzzerUtils.checkSum(iArr1);
    }

    public static double dMeth(float f2) {

        int i13=-60, i14=55575, i15=1, i16=97, i17=-22, i18=121, i19=43310, i20=0, iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, -60810);

        iArr3[(47194 >>> 1) % N] <<= i13;
        for (i14 = 6; 275 > i14; i14++) {
            iArr3[i14 - 1] ^= i15;
            if (i15 != 0) {
            }
        }
        i16 = 1;
        while (++i16 < 130) {
            for (i17 = 1; i17 < 12; ++i17) {
                Test.fFld = i14;
            }
            iArr3[i16] *= i13;
            iArr3[i16] *= i13;
            i15 >>>= i13;
            for (i19 = i16; i19 < 12; i19++) {
                iArr3[i16 - 1] += i15;
                if (Test.bFld) break;
                i20 += (int)Test.instanceCount;
                i13 -= (int)Test.dFld;
            }
        }
        long meth_res = Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr3);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(int i6, int i7, int i8) {

        short s2=25160;
        int i9=32769, i10=11020, i11=-3361, i12=-9, i21=-10, i22=-177, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 16);

        i6 = (int)(((-183 - (i6 - i6)) - (Test.fFld - i7)) + ((Test.fFld + s2) + (i8 + i7)));
        for (i9 = 4; i9 < 392; i9++) {
            i7 = (int)((Test.fFld += (i9 + i7)) * ((i7++) * i7));
            for (i11 = i9; i11 < 4; i11 += 3) {
                iArr2[i11] += (int)Float.intBitsToFloat(++i6);
                i8 += (((i11 * i10) + Test.fFld) - Test.instanceCount);
                iArr2[i11 - 1] <<= (int)(Test.byFld - Math.abs(Test.fFld));
                Test.instanceCount += (long)(dMeth(Test.fFld) - -17);
                for (i21 = 1; i21 < 1; i21++) {
                    Test.instanceCount >>= i8;
                    i7 += i12;
                    try {
                        i10 = (i11 / 260583236);
                        iArr2[i9 - 1] = (-67 / i8);
                        i10 = (77575636 / iArr2[i21]);
                    } catch (ArithmeticException a_e) {}
                    iArr2[i21 + 1] = i7;
                    Test.lArrFld[i11 + 1][i21 - 1] = i21;
                    iArr2[i9] /= (int)((long)(Test.dFld) | 1);
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + s2 + i9 + i10 + i11 + i12 + i21 + i22 + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(int i4, short s1, int i5) {

        int i23=28753, i24=-60586, i25=7, i26=30318, i27=0, i28=3865;

        switch (((--i4) >>> 1) % 10) {
        case 0:
        case 1:
            vMeth1(67, 37986, i4);
            Test.instanceCount = 6;
            break;
        case 2:
            for (i23 = 17; 280 > i23; i23++) {
                for (i25 = 1; i25 < 6; ++i25) {
                    s1 = (short)-2;
                    Test.instanceCount >>= i23;
                    Test.byFld += (byte)(-61578 + (i25 * i25));
                    Test.byFld = (byte)i5;
                    i4 *= Test.byFld;
                    for (i27 = 2; i27 > 1; --i27) {
                        i28 += i27;
                        i4 = -5;
                        i5 = i24;
                        if (i26 != 0) {
                        }
                    }
                }
            }
            break;
        case 3:
            Test.dFld -= i25;
            break;
        case 4:
            i28 -= (int)Test.fFld;
            break;
        case 5:
        case 6:
            i26 += 112;
        case 7:
            i5 <<= i27;
            break;
        case 8:
            i5 = i5;
            break;
        case 9:
        }
        long meth_res = i4 + s1 + i5 + i23 + i24 + i25 + i26 + i27 + i28;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f1=-36.994F, fArr[]=new float[N];
        int i1=1, i29=11, i30=-4, i31=-172, iArr[]=new int[N];
        long l=-1856054362494941362L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -27264L);
        FuzzerUtils.init(fArr, -57.72F);
        FuzzerUtils.init(iArr, 16788);

        vMeth((byte)(--Test.byFld), (int)(-1 + ((f1 *= Test.instanceCount) + (i1 + i1))));
        l = 1;
        while (++l < 204) {
            lArr[(int)(l)] = ((-l) * l);
            vMeth((byte)((--fArr[(int)(l + 1)]) + i1), i1 - (Math.abs(i1) + (i1 - i1)));
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(i1 != iMeth(i1, sFld, i1));
            i1 >>= sFld;
            i29 = 1;
            do {
                i1 = i29;
                i1 += (((i29 * i29) + i1) - i1);
                switch ((i29 % 8) + 104) {
                case 104:
                    i1 += i1;
                    iArr[(int)(l + 1)] -= (int)l;
                    Test.dFld -= i29;
                    Test.instanceCount = sFld;
                    break;
                case 105:
                    Test.byFld += (byte)i1;
                    Test.instanceCount >>>= Test.instanceCount;
                    iArr[(int)(l + 1)] = i1;
                    for (i30 = (int)(l); i30 < 1; ++i30) {
                        if (Test.bFld) break;
                        switch ((int)(((l % 7) * 5) + 16)) {
                        case 30:
                            Test.byFld += (byte)(((i30 * i30) + i29) - i1);
                            sFld &= Test.byFld;
                            i31 += (int)Test.fFld;
                            Test.lArrFld[i29 - 1][(int)(l + 1)] *= i31;
                            break;
                        case 51:
                            try {
                                i1 = (i30 % 1461597796);
                                iArr[i29 + 1] = (i30 / 225);
                                iArr[i29 + 1] = (-92 / i29);
                            } catch (ArithmeticException a_e) {}
                            Test.dFld -= l;
                            Test.fFld += i30;
                            break;
                        case 47:
                            i1 += (int)Test.fFld;
                            i1 += (int)-64L;
                            i1 += i29;
                            break;
                        case 34:
                            i1 = i30;
                        case 46:
                            i1 -= sFld;
                            break;
                        case 18:
                            fArr[i29 - 1] -= i1;
                            break;
                        case 42:
                            i1 += iFld;
                            break;
                        default:
                            i31 >>= -59532;
                        }
                    }
                    break;
                case 106:
                    Test.bFld = true;
                case 107:
                    Test.instanceCount = l;
                    break;
                case 108:
                    if (Test.bFld) break;
                    break;
                case 109:
                    iFld *= i31;
                    break;
                case 110:
                    Test.instanceCount -= i1;
                    break;
                case 111:
                    fArr[i29 + 1] -= 0.888F;
                default:
                    iFld += (((i29 * Test.byFld) + i31) - i31);
                }
            } while (++i29 < 123);
        }

        FuzzerUtils.out.println("f1 i1 l = " + Float.floatToIntBits(f1) + "," + i1 + "," + l);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("lArr fArr iArr = " + FuzzerUtils.checkSum(lArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.dFld sFld = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(Test.dFld) + "," + sFld);
        FuzzerUtils.out.println("iFld Test.lArrFld = " + iFld + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
