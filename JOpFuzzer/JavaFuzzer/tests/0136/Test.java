// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1147086996787450689L;
    public static short sFld=-5012;
    public static byte byFld=-105;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 85);
        FuzzerUtils.init(Test.lArrFld, 2843725756032972891L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2() {

        int i6=-44199, i7=-45922, i8=7, i9=-10, i10=-11;
        float f=51.861F;
        boolean b=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)27388);

        for (i6 = 17; i6 < 274; i6++) {
            i7 = (int)-3620156485229852199L;
            for (i8 = 1; i8 < 6; i8++) {
                i9 >>>= i8;
                Test.sFld = (short)Test.instanceCount;
                i9 <<= (int)-43103L;
                i7 += (((i8 * i9) + i7) - i6);
                Test.instanceCount = Test.sFld;
                Test.iArrFld1[(i8 >>> 1) % N] = (int)Test.instanceCount;
                i10 = 1;
                do {
                    switch (((i7 >>> 1) % 6) + 9) {
                    case 9:
                        switch (((i10 % 2) * 5) + 22) {
                        case 32:
                            f += f;
                            i7 += (int)64777L;
                            i9 <<= (int)Test.instanceCount;
                        case 24:
                            if (i8 != 0) {
                            }
                        default:
                        }
                    case 10:
                        sArr[i8] >>= (short)8059;
                        break;
                    case 11:
                        i9 += (i10 ^ Test.sFld);
                        break;
                    case 12:
                        b = b;
                        break;
                    case 13:
                        i7 += Test.byFld;
                        break;
                    case 14:
                        i7 += (-170 + (i10 * i10));
                    default:
                        i9 += i10;
                    }
                } while (++i10 < 2);
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i4, int i5, long l) {

        int i11=245, i12=-32476, i13=10, i14=20112, i15=4651;

        Test.lArrFld[(i5 >>> 1) % N] *= (iMeth2() - i5);
        for (i11 = 1; i11 < 316; ++i11) {
            try {
                i12 = (-219 / i4);
                i12 = (i4 % 148);
                i5 = (-29 % i4);
            } catch (ArithmeticException a_e) {}
            i12 += (i11 * i11);
            Test.iArrFld1[i11] *= i5;
            i4 <<= i11;
            i12 -= i12;
            i13 = 1;
            while (++i13 < 5) {
                Test.iArrFld1[i11] <<= -11;
                Test.iArrFld1 = FuzzerUtils.int1array(N, (int)7);
                Test.byFld ^= (byte)i11;
                Test.iArrFld1[i11] <<= i11;
                for (i14 = i13; 1 > i14; i14++) {
                    i15 = (int)47162L;
                    i4 += (i14 + i15);
                }
            }
        }
        long meth_res = i4 + i5 + l + i11 + i12 + i13 + i14 + i15;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=0, i2=14, i3=2, i16=66, i17=-9561, i18=9, i19=-12;
        float f1=-56.992F;

        i1 = 138;
        do {
            for (i2 = 1; i2 < 11; i2++) {
                Test.iArrFld1[i1 - 1] -= iMeth1(i3, i1, Test.instanceCount);
            }
            for (i16 = 1; i16 < 11; ++i16) {
                Test.instanceCount += (i16 ^ i17);
                f1 = 3600249769057426324L;
                i3 >>>= 124;
                f1 = (float)-1.4743;
                for (i18 = 2; i18 > 1; i18 -= 2) {
                    Test.instanceCount = Test.instanceCount;
                    Test.sFld += (short)(i18 * Test.instanceCount);
                    i3 += i1;
                }
            }
            i19 += (i1 + i3);
            i17 -= (int)f1;
            i3 += (((i1 * i19) + Test.instanceCount) - i2);
        } while (--i1 > 0);
        long meth_res = i1 + i2 + i3 + i16 + i17 + Float.floatToIntBits(f1) + i18 + i19;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by=122;
        int i=-9, i20=-75, i21=-254;

        iArrFld[(-13 >>> 1) % N] = (by = (byte)((i + i) + iMeth()));
        for (i20 = 4; i20 < 132; i20++) {
            boolean b1=true;
            if (b1) break;
        }

        FuzzerUtils.out.println("by i i20 = " + by + "," + i + "," + i20);
        FuzzerUtils.out.println("i21 = " + i21);

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.byFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("iArrFld Test.iArrFld1 Test.lArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld1) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
