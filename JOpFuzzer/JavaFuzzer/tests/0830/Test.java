// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=40705L;
    public float fFld=44.461F;
    public double dFld=18.29187;
    public static short sFld=-22781;
    public static double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];
    public int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.94762);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(double d, byte by, long l1) {

        int i1=-7, i2=104, i3=-204, i4=6, i5=-38036, iArr[]=new int[N];
        float f=-111.868F, fArr[]=new float[N];
        boolean b=true;
        short s=26250, sArr[][]=new short[N][N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(sArr, (short)-7269);
        FuzzerUtils.init(lArr, -7L);
        FuzzerUtils.init(iArr, -107);
        FuzzerUtils.init(fArr, -1.796F);

        for (i1 = 12; i1 < 330; i1++) {
            if (b) {
                switch ((i1 % 10) + 62) {
                case 62:
                    sArr[i1][i1 - 1] *= (short)i1;
                case 63:
                    lArr[i1 + 1][i1 - 1] = 3;
                    i2 = i1;
                    if (b) {
                        for (i3 = 1; i3 < 5; ++i3) {
                            switch (((10 >>> 1) % 10) + 102) {
                            case 102:
                                iArr[i1 + 1] = i4;
                                i5 = 1;
                                while (++i5 < 2) {
                                    i4 = i2;
                                    i4 += (i5 * i5);
                                    i4 -= (int)f;
                                    Test.instanceCount += (i5 - i2);
                                }
                                break;
                            case 103:
                                f *= i2;
                                break;
                            case 104:
                                i2 += (i3 * i3);
                            case 105:
                                try {
                                    i2 = (i5 / i2);
                                    i4 = (iArr[i3] % -226);
                                    i4 = (2018727430 / i2);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 106:
                                f = l1;
                                break;
                            case 107:
                                i4 += i3;
                                break;
                            case 108:
                                i4 -= i4;
                                break;
                            case 109:
                                if (i1 != 0) {
                                    vMeth_check_sum += Double.doubleToLongBits(d) + by + l1 + i1 + i2 + i3 + i4 + i5 +
                                        Float.floatToIntBits(f) + (b ? 1 : 0) + s + FuzzerUtils.checkSum(sArr) +
                                        FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
                                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                    return;
                                }
                            case 110:
                                i2 += (int)(-20036L + (i3 * i3));
                            case 111:
                                i2 += i3;
                                break;
                            }
                        }
                    } else {
                        l1 = i5;
                    }
                case 64:
                    lArr[i1 - 1][i1] *= (long)d;
                    break;
                case 65:
                    d /= (i1 | 1);
                    break;
                case 66:
                    l1 = i2;
                    break;
                case 67:
                    fArr[i1] = l1;
                    break;
                case 68:
                    s += (short)(23974 + (i1 * i1));
                    break;
                case 69:
                    l1 = (long)f;
                    break;
                case 70:
                    if (b) break;
                case 71:
                    l1 += (i1 ^ (long)f);
                    break;
                }
            } else {
                i4 = i1;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + by + l1 + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + (b
            ? 1 : 0) + s + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(long l) {

        byte by1=101;

        vMeth(0.94159, by1, Test.instanceCount);
        long meth_res = l + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth() {

        int i=7;

        Test.dArrFld[(i >>> 1) % N] += iMeth(Test.instanceCount);
        vSmallMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        int i6=-253, i7=-48658, i8=101, i9=-34028, i10=-31045, i11=-63582, i12=-5, i13=-154, i14=-47001;
        byte by2=92;
        boolean b1=false;
        double d1=-2.34492;

        for (int smallinvoc=0; smallinvoc<502; smallinvoc++) vSmallMeth();
        i6 -= (int)38L;
        for (i7 = 13; i7 < 271; ++i7) {
            lArrFld[i7] += -75;
            i6 = i8;
            Test.instanceCount = Test.instanceCount;
            switch ((i7 % 6) + 77) {
            case 77:
                Test.instanceCount = i8;
                Test.instanceCount = i6;
                i6 >>= i7;
                break;
            case 78:
                i8 = (int)Test.instanceCount;
                if (false) {
                    i8 += (i7 * i7);
                    iArrFld[i7 + 1][i7] *= (int)2L;
                    fFld -= by2;
                    i6 += i7;
                }
                i6 = i8;
                break;
            case 79:
            case 80:
                for (i9 = 97; i7 < i9; i9 -= 3) {
                    for (i11 = 1; i11 < 1; i11++) {
                        i6 = i7;
                    }
                    Test.instanceCount >>= i12;
                    i6 = (int)Test.instanceCount;
                }
                if (b1) continue;
                break;
            case 81:
                i10 += (((i7 * Test.instanceCount) + i11) - i7);
                d1 = 1;
                while (++d1 < 97) {
                    for (i13 = 1; i13 > d1; --i13) {
                        i14 <<= i14;
                        dFld *= -19103;
                        Test.sFld -= (short)i13;
                        i6 -= (int)Test.instanceCount;
                    }
                }
                break;
            case 82:
                i8 -= i14;
                break;
            }
        }

        FuzzerUtils.out.println("i6 i7 i8 = " + i6 + "," + i7 + "," + i8);
        FuzzerUtils.out.println("by2 i9 i10 = " + by2 + "," + i9 + "," + i10);
        FuzzerUtils.out.println("i11 i12 b1 = " + i11 + "," + i12 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("d1 i13 i14 = " + Double.doubleToLongBits(d1) + "," + i13 + "," + i14);

        FuzzerUtils.out.println("Test.instanceCount fFld dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.sFld Test.dArrFld lArrFld = " + Test.sFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
