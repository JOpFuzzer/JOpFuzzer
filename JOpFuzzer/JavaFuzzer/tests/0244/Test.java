// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=64640L;
    public static double dFld=-16.40051;
    public static float fFld=-2.215F;
    public int iFld=-13;
    public static float fArrFld[]=new float[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.313F);
        FuzzerUtils.init(Test.sArrFld, (short)-1587);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(float f1, int i13) {

        int i14=150, i15=9650;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 218531395L);

        for (i14 = 244; i14 > 7; --i14) {
            Test.sArrFld[i14] -= (short)-10;
            i15 *= i14;
        }
        Test.fFld += Test.fFld;
        i13 = (int)Test.fFld;
        i15 += i13;
        i15 = i14;
        lArr[(35910 >>> 1) % N] = i14;
        long meth_res = Float.floatToIntBits(f1) + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(long l, long l1) {

        int i6=6, i7=80, i8=-154, i9=11, i10=138, i11=21546, i12=-42009;
        byte by=125;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 0L);

        i6 = (int)Math.min((long)((-(Test.dFld - 11)) + i6), l);
        i7 = 1;
        do {
            for (i8 = i7; 13 > i8; ++i8) {
                i6 += (i8 * by);
                for (i10 = 1; i10 < 1; ++i10) {
                    i6 *= (int)(Test.fFld - i7);
                    Test.fArrFld[i8] += (((i7 - 8L) + (i10 * i11)) * (l--));
                }
                i12 = 1;
                while (++i12 < 1) {
                    i11 = ((byMeth(Test.fFld, i9) ^ i7) * i6);
                    i9 = i10;
                    l <<= by;
                    lArr1 = FuzzerUtils.long1array(N, (long)-36L);
                    lArr1[i8 - 1] = (long)65.75964;
                    l1 = i7;
                    i6 = (int)46192L;
                }
            }
        } while (++i7 < 125);
        vMeth_check_sum += l + l1 + i6 + i7 + i8 + i9 + by + i10 + i11 + i12 + FuzzerUtils.checkSum(lArr1);
    }

    public int iMeth(int i2, int i3) {

        int i4=-65, i5=-253, i16=-2, iArr1[]=new int[N];
        short s1=-12120;

        FuzzerUtils.init(iArr1, -5);

        for (i4 = 8; 384 > i4; i4++) {
            vMeth(-654343955617334221L, Test.instanceCount);
            i5 >>= s1;
            i16 = 1;
            while (++i16 < 4) {
                byte by1=69;
                iArr1[i4] *= i16;
                Test.instanceCount = Test.instanceCount;
                Test.instanceCount /= (i5 | 1);
                if (false) {
                    if (true) {
                        s1 += (short)-7L;
                        i2 += (((i16 * Test.fFld) + by1) - by1);
                        switch ((i4 % 7) + 39) {
                        case 39:
                            Test.fFld = i16;
                        case 40:
                            Test.instanceCount = i2;
                            i5 = i2;
                            break;
                        case 41:
                            i5 += (((i16 * i4) + i16) - i2);
                        case 42:
                            Test.instanceCount -= i3;
                            break;
                        case 43:
                            s1 >>= (short)Test.instanceCount;
                            break;
                        case 44:
                            Test.instanceCount += Test.instanceCount;
                            break;
                        case 45:
                            i3 += (int)Test.fFld;
                        }
                    }
                } else if (true) {
                    i2 *= i5;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + s1 + i16 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=84.503F;
        int i=-128, i1=-63171, i17=-162, i18=1650, i19=-27709, iArr[][]=new int[N][N];
        double d=-2.60090;
        short s=31753;
        boolean b=true;

        FuzzerUtils.init(iArr, 4);

        for (f = 13; f < 231; ++f) {
            for (d = f; d < 115; ++d) {
                i1 ^= Math.min(iArr[(int)(d - 1)][(int)(d)], i);
                i1 *= (int)((--s) * ((Test.instanceCount + Test.instanceCount) * (Test.instanceCount = i1)));
            }
            i1 = (int)(Test.instanceCount++);
            iMeth(-19, i);
            Test.fFld -= iFld;
            Test.fArrFld[(i1 >>> 1) % N] += iFld;
            i17 = 1;
            while (++i17 < 115) {
                Test.fFld += (i17 - iFld);
                i1 = i;
                i1 = (int)Test.instanceCount;
                for (i18 = 1; i18 > 1; i18 -= 2) {
                    Test.instanceCount |= 119;
                    i += i17;
                    i19 = i;
                    Test.fArrFld[(int)(f - 1)] *= -35771;
                    Test.fFld += i18;
                    iFld &= i;
                    i1 <<= iFld;
                }
                if (b) break;
                switch (((i18 >>> 1) % 9) + 101) {
                case 101:
                    Test.fArrFld[i17] += Test.instanceCount;
                    break;
                case 102:
                    i1 += (i17 ^ s);
                    iArr[(int)(f)][i17] += i1;
                    try {
                        i = (iArr[(int)(f - 1)][i17 + 1] % -15);
                        iFld = (i19 % -55867);
                        iArr[i17 + 1][(int)(f + 1)] = (i19 / i17);
                    } catch (ArithmeticException a_e) {}
                case 103:
                    i1 = 58697;
                    iFld += (int)Test.instanceCount;
                case 104:
                    Test.fFld = iFld;
                    i1 >>= 0;
                case 105:
                    i19 += (int)Test.instanceCount;
                    break;
                case 106:
                    Test.instanceCount = (long)f;
                    break;
                case 107:
                    i1 += i1;
                    break;
                case 108:
                case 109:
                    i19 += i17;
                    break;
                default:
                    i = (int)Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("f i d = " + Float.floatToIntBits(f) + "," + i + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i1 s i17 = " + i1 + "," + s + "," + i17);
        FuzzerUtils.out.println("i18 i19 b = " + i18 + "," + i19 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("iFld Test.fArrFld Test.sArrFld = " + iFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
