// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static byte byFld=94;
    public int iFld=-44825;
    public static volatile int iFld1=13;
    public static int iArrFld[]=new int[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -12);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vMeth1(float f, int i3, int i4) {


        i4 = (++i4);
        vMeth1_check_sum += Float.floatToIntBits(f) + i3 + i4;
    }

    public static int iMeth(float f2, int i5, int i6) {

        double d1=-123.31473;
        float f3=0.812F;
        int i7=8, i8=-5, i9=44, i10=20601, i11=51263, i12=-30042, iArr[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr, 90);

        d1 += (--Test.instanceCount);
        for (f3 = 7; f3 < 142; ++f3) {
            i8 = 12;
            do {
                i6 += (((i8 * i7) + Test.instanceCount) - i6);
                for (i9 = 1; 2 > i9; i9++) {
                    vMeth1(f2, i9, -63);
                    if (b) continue;
                    f2 *= i8;
                    iArr[i8 - 1] = (int)Test.instanceCount;
                }
            } while ((i8 -= 2) > 0);
        }
        for (i11 = 5; 186 > i11; ++i11) {
            i10 += i8;
            switch ((i11 % 4) + 88) {
            case 88:
                if (b) {
                    i5 += i11;
                    i5 *= i8;
                } else if (true) {
                    i5 -= (int)Test.instanceCount;
                }
                break;
            case 89:
                i6 = i11;
                break;
            case 90:
                i12 |= i5;
                break;
            case 91:
                iArr[i11 + 1] += (int)-2.100191;
            }
        }
        long meth_res = Float.floatToIntBits(f2) + i5 + i6 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f3) +
            i7 + i8 + i9 + i10 + (b ? 1 : 0) + i11 + i12 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1, int i2) {

        float f1=-2.466F, f4=1.609F;
        double d=54.47692;
        int i13=7, i14=203, i15=-2;
        boolean b1=true;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-69);

        vMeth1(f1, (int)(((-(i1 * Test.instanceCount)) * (-45.123536 + (i1 >>>= -3))) / ((Test.instanceCount * -208) |
            1)), (int)((-d) + i1));
        i2 <<= (iMeth(f1, i2, i) - i);
        for (i13 = 380; i13 > 1; i13--) {
            short s=-9598;
            if (b1) continue;
            for (f4 = 1; f4 < 4; f4 += 3) {
                i14 = (int)Test.instanceCount;
                Test.iArrFld[(int)(f4 + 1)] %= (int)(Test.byFld | 1);
                byArr = FuzzerUtils.byte1array(N, (byte)-46);
                Test.instanceCount += (long)d;
                i1 += i13;
                i2 = (int)f4;
                try {
                    i15 = (28426 / i13);
                    i2 = (i / 132);
                    Test.iArrFld[i13] = (i2 / -48);
                } catch (ArithmeticException a_e) {}
                i2 = i13;
                i1 += 6;
            }
            f1 += ((long)i13 | (long)s);
        }
        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i13 + i14 + (b1 ? 1 :
            0) + Float.floatToIntBits(f4) + i15 + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=50, i17=38193, i18=14, i19=-64246, i20=-57819, i21=13;
        float f5=2.206F;
        boolean b2=true, bArr[]=new boolean[N];
        short s1=-22211;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 74950783L);
        FuzzerUtils.init(bArr, true);

        vMeth(i16, i16, i16);
        i16 >>= i16;
        for (i17 = 11; 184 > i17; ++i17) {
            i19 = 1;
            while (++i19 < 145) {
                i18 += i16;
                switch ((i17 % 8) + 56) {
                case 56:
                    f5 += ((long)i19 ^ (long)i19);
                    Test.instanceCount += (i19 + i18);
                    if (b2) break;
                    break;
                case 57:
                    i16 ^= i17;
                    f5 -= i17;
                    Test.instanceCount += (25989 + (i19 * i19));
                    i16 >>= 25174;
                case 58:
                    for (i20 = 1; i20 < 1; ++i20) {
                        i16 += (((i20 * Test.byFld) + i20) - Test.instanceCount);
                        Test.iArrFld[i20] += (int)2L;
                        switch ((i17 % 7) + 80) {
                        case 80:
                            i16 = Test.byFld;
                            Test.instanceCount -= i20;
                            break;
                        case 81:
                            i21 = i17;
                            i18 += (89 + (i20 * i20));
                            i16 -= i21;
                            switch (((i19 % 5) * 5) + 53) {
                            case 71:
                                lArr[i20 + 1][i20] -= Test.instanceCount;
                                i16 += i21;
                                i21 = (int)Test.instanceCount;
                                break;
                            case 67:
                                b2 = true;
                                i21 += (19 + (i20 * i20));
                                i18 |= i18;
                                try {
                                    i16 = (iFld % i18);
                                    i18 = (-7 % Test.iArrFld[i20]);
                                    Test.iArrFld[i20] = (224 / i19);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 74:
                                i21 += i20;
                                break;
                            case 77:
                                i21 = i21;
                                break;
                            case 76:
                                iFld %= (int)(i18 | 1);
                                break;
                            default:
                                iFld *= i21;
                            }
                            break;
                        case 82:
                            bArr[i17 - 1] = b2;
                            break;
                        case 83:
                            Test.instanceCount ^= i17;
                        case 84:
                            s1 = (short)i18;
                            break;
                        case 85:
                            Test.iArrFld[i19 - 1] >>= iFld;
                            break;
                        case 86:
                            Test.iArrFld[i17 - 1] -= (int)f5;
                            break;
                        default:
                            s1 += (short)i20;
                        }
                    }
                    break;
                case 59:
                    i16 ^= (int)Test.instanceCount;
                    break;
                case 60:
                    Test.iFld1 = Test.iFld1;
                    break;
                case 61:
                    sArrFld[i19] = (short)Test.instanceCount;
                    break;
                case 62:
                    Test.iFld1 = (int)-51308L;
                    break;
                case 63:
                    Test.iArrFld = Test.iArrFld;
                    break;
                default:
                    i21 += (i19 + iFld);
                }
            }
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 f5 b2 = " + i19 + "," + Float.floatToIntBits(f5) + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i20 i21 s1 = " + i20 + "," + i21 + "," + s1);
        FuzzerUtils.out.println("lArr bArr = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld iFld = " + Test.instanceCount + "," + Test.byFld + "," +
            iFld);
        FuzzerUtils.out.println("Test.iFld1 Test.iArrFld sArrFld = " + Test.iFld1 + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest iMeth
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
