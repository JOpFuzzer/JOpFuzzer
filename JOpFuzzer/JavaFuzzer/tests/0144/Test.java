// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-29534L;
    public static float fFld=-76.953F;
    public static int iFld=78;
    public byte byFld=-34;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 50079);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        float f=1.424F, fArr[]=new float[N];
        int i9=-10, i10=7, i11=-58980, i12=-158, i13=3, i14=-8, i15=-12, i16=65046, iArr1[]=new int[N];
        short s=-22883;

        FuzzerUtils.init(fArr, -1.127F);
        FuzzerUtils.init(iArr1, 10);

        Test.instanceCount ^= Test.iFld;
        for (f = 6; 316 > f; ++f) {
            fArr[(int)(f - 1)] = Test.iFld;
            iArr1[(int)(f)] += i9;
            iArr1[(int)(f)] *= Test.iFld;
        }
        Test.instanceCount += (long)2.744F;
        Test.fFld += i9;
        for (i10 = 16; i10 < 335; i10++) {
            Test.iFld = i9;
            for (i12 = 1; i12 < 5; i12 += 2) {
                iArr1[i10 + 1] += s;
                for (i14 = 1; i14 < 3; ++i14) {
                    fArr[i12] -= i11;
                    Test.instanceCount += i16;
                    i15 += (i14 | Test.iFld);
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + i13 + s + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1() {

        int i2=52769, i3=91, i4=-19354, i5=1, i6=-210, i7=47283, i8=-36195, iArr[]=new int[N];
        double d=-1.87272, dArr[]=new double[N];
        long l=4017616410L;

        FuzzerUtils.init(iArr, -91);
        FuzzerUtils.init(dArr, 9.47193);

        for (i2 = 9; i2 < 342; i2++) {
            i3 |= iArr[i2 + 1];
            iArr[i2 + 1] = (int)(Test.instanceCount | i2);
            Test.instanceCount += (i3++);
            Test.fFld += i2;
            i4 = 1;
            while (++i4 < 5) {
                i3 -= (iArr[i4 + 1]++);
            }
            for (i5 = 1; i5 < 5; i5++) {
                i6 -= (i6 += i4);
                for (i7 = 1; i7 < 2; i7++) {
                    d = dMeth();
                    switch (((i7 % 2) * 5) + 65) {
                    case 72:
                        Test.instanceCount += l;
                        i3 = (int)Test.instanceCount;
                        dArr[i7] -= i2;
                        break;
                    case 70:
                        iArr = iArr;
                        break;
                    default:
                        Test.instanceCount >>= i4;
                    }
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + l +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth(int i1) {


        vMeth1();
        vMeth_check_sum += i1;
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i17=-7748, i18=47034, i19=-14, i20=-7, i21=3, i22=-9, i23=-11;
        double d1=0.31252;
        long l1=-56434L;
        short s1=22916;

        i = 1;
        do {
            vMeth(-23943);
            Test.iFld -= (int)d1;
            Test.iFld -= -6;
            Test.iFld += (i + i);
            Test.iFld = (int)-109.761F;
            Test.instanceCount = Test.iFld;
            Test.iArrFld[i + 1] = Test.iFld;
        } while (++i < 217);
        for (i17 = 9; i17 < 165; ++i17) {
            for (i19 = i17; i19 < 161; ++i19) {
                i20 <<= i20;
                Test.iFld += i;
                i18 = (int)Test.instanceCount;
                byFld &= (byte)24135;
                Test.iArrFld[i17 - 1] -= i18;
                for (l1 = 1; l1 < 1; ++l1) {
                    s1 += (short)l1;
                }
                i20 += i19;
                i18 *= 3;
                i18 -= s1;
            }
            i21 = i18;
            i20 -= -4790;
            i18 = i;
            Test.iArrFld[i17] = i19;
            Test.instanceCount -= i18;
            for (i22 = 5; i22 < 161; ++i22) {
                Test.instanceCount <<= i18;
                Test.iFld -= Test.iFld;
                Test.fFld *= i22;
            }
            Test.iArrFld[i17 + 1] <<= Test.iFld;
        }

        FuzzerUtils.out.println("i d1 i17 = " + i + "," + Double.doubleToLongBits(d1) + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("l1 i21 s1 = " + l1 + "," + i21 + "," + s1);
        FuzzerUtils.out.println("i22 i23 = " + i22 + "," + i23);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("byFld Test.iArrFld = " + byFld + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
