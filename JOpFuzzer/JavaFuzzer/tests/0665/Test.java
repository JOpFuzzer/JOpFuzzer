// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8750L;
    public static float fFld=-1.689F;
    public static boolean bFld=true;
    public short sFld=-1955;
    public static float fArrFld[][]=new float[N][N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 26.4F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i5=-44229, i6=-128, i7=60082, i8=-12, i9=-61036, i10=52398, i11=-4, iArr[]=new int[N];
        byte by=-29;
        double d=-2.36902, d1=0.99023, dArr[]=new double[N];
        short s=-28942;
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr, 1.22467);
        FuzzerUtils.init(iArr, 246);

        i5 = i5;
        if (b) {
            i5 &= i5;
            for (i6 = 7; i6 < 262; i6++) {
                for (i8 = i6; i8 < 6; ++i8) {
                    i5 %= (int)(i8 | 1);
                    switch ((i6 % 8) + 21) {
                    case 21:
                        i9 += (int)Test.fFld;
                        by += (byte)(i8 ^ by);
                        switch (((i10 >>> 1) % 7) + 20) {
                        case 20:
                            for (d = 1; d < 1; d++) {
                                switch ((i8 % 5) + 107) {
                                case 107:
                                    i5 = i8;
                                    Test.instanceCount += (long)d;
                                    break;
                                case 108:
                                    Test.fFld = Test.instanceCount;
                                    break;
                                case 109:
                                    bArr[(int)(d)] = true;
                                    break;
                                case 110:
                                    i9 %= (int)(i9 | 1);
                                    break;
                                case 111:
                                    Test.instanceCount = 10;
                                default:
                                    s *= (short)d1;
                                }
                            }
                            break;
                        case 21:
                            i7 += (int)(166588476494024028L + (i8 * i8));
                            break;
                        case 22:
                        case 23:
                            i10 -= (int)Test.fFld;
                            break;
                        case 24:
                            Test.instanceCount += (((i8 * i11) + i8) - Test.instanceCount);
                            break;
                        case 25:
                            Test.instanceCount += Test.instanceCount;
                            break;
                        case 26:
                            Test.fArrFld[i8] = Test.fArrFld[i6];
                            break;
                        }
                        break;
                    case 22:
                        Test.instanceCount = i8;
                        break;
                    case 23:
                        Test.fFld %= (s | 1);
                        break;
                    case 24:
                        i5 -= i8;
                        break;
                    case 25:
                        i10 &= (int)-5L;
                        break;
                    case 26:
                        Test.fFld -= Test.instanceCount;
                    case 27:
                        i10 += i11;
                        break;
                    case 28:
                        by += (byte)(i8 ^ Test.instanceCount);
                    }
                }
            }
        } else if (true) {
            dArr[(42247 >>> 1) % N] *= i7;
        } else {
            iArr[(i10 >>> 1) % N] = i8;
        }
        vMeth_check_sum += i5 + i6 + i7 + i8 + i9 + by + i10 + Double.doubleToLongBits(d) + i11 + s +
            Double.doubleToLongBits(d1) + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i3, int i4) {

        byte by1=-82;
        int i12=7, i13=-25, i14=-10, iArr1[]=new int[N];
        double d2=-8.64047;

        FuzzerUtils.init(iArr1, 31615);

        vMeth();
        by1 = (byte)22L;
        Test.instanceCount += i4;
        i12 = 1;
        while (++i12 < 253) {
            iArr1[i12 + 1] *= (int)Test.instanceCount;
            i3 += (((i12 * i3) + i3) - i4);
            if (false) {
                try {
                    i3 = (i12 / 206);
                    i4 = (i4 % i12);
                    iArr1[i12 - 1] = (84 % i3);
                } catch (ArithmeticException a_e) {}
                for (i13 = 1; i13 < 6; i13++) {
                    iArr1[i12] >>= 9;
                    d2 -= i3;
                }
                Test.instanceCount >>= -14;
            } else if (Test.bFld) {
                i14 += (((i12 * i12) + i12) - i14);
                i4 += (((i12 * Test.instanceCount) + i12) - Test.instanceCount);
                Test.fFld += (((i12 * i13) + i4) - i13);
            } else if (Test.bFld) {
                d2 = d2;
            }
        }
        long meth_res = i3 + i4 + by1 + i12 + i13 + i14 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i2, long l) {


        iMeth(-178, i2);
        vSmallMeth_check_sum += i2 + l;
    }

    public void mainTest(String[] strArr1) {

        int i=-114, i1=40171, i15=-52112, i16=-11, iArr2[]=new int[N], iArr3[][]=new int[N][N];
        double d3=-51.94696;
        byte by2=110;

        FuzzerUtils.init(iArr2, 7384);
        FuzzerUtils.init(iArr3, 4);

        for (i = 10; 268 > i; i += 2) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(i1, Test.instanceCount);
            Test.fArrFld[i][i + 1] = i1;
            i15 = 194;
            do {
                i16 = 1;
                while (++i16 < 1) {
                    switch ((i15 % 6) + 16) {
                    case 16:
                        i1 = (int)Test.fFld;
                    case 17:
                        i1 -= i15;
                        break;
                    case 18:
                        iArr2[(i16 >>> 1) % N] >>= -13;
                        Test.bFld = false;
                        i1 += (i16 | (long)Test.fFld);
                        i1 >>= i;
                        break;
                    case 19:
                        iArr2[i - 1] *= i15;
                        Test.fFld = Test.instanceCount;
                        switch ((((i15 >>> 1) % 9) * 5) + 72) {
                        case 80:
                            switch ((i16 % 2) + 72) {
                            case 72:
                                i1 += (i16 * i16);
                            case 73:
                                i1 += (((i16 * Test.instanceCount) + i16) - i16);
                                i1 += (-8 + (i16 * i16));
                                switch (((i % 2) * 5) + 123) {
                                case 129:
                                    i1 ^= i;
                                    break;
                                case 124:
                                    switch ((i % 2) + 76) {
                                    case 76:
                                        d3 *= Test.fFld;
                                        i1 = i1;
                                        i1 *= sFld;
                                    case 77:
                                        i1 -= (int)Test.instanceCount;
                                        i1 -= i1;
                                        i1 = (int)Test.fFld;
                                    }
                                    Test.fFld += i16;
                                    iArr2[i15 - 1] |= i;
                                    break;
                                default:
                                    i1 >>= i1;
                                }
                            default:
                                iArr3 = iArr3;
                            }
                        case 95:
                            sFld += (short)(((i16 * i15) + i15) - i16);
                            break;
                        case 82:
                            if (Test.bFld) break;
                            break;
                        case 99:
                            sFld += (short)i;
                            break;
                        case 110:
                            i1 += (i16 - Test.fFld);
                            break;
                        case 84:
                            byArrFld[i15 + 1] |= (byte)i;
                        case 85:
                        case 104:
                            if (Test.bFld) continue;
                            break;
                        case 94:
                            i1 %= (int)(by2 | 1);
                            break;
                        }
                        break;
                    case 20:
                        Test.fFld = Test.instanceCount;
                        break;
                    case 21:
                        Test.bFld = Test.bFld;
                        break;
                    default:
                        Test.fFld = (float)38.54542;
                    }
                }
            } while (--i15 > 0);
        }

        FuzzerUtils.out.println("i i1 i15 = " + i + "," + i1 + "," + i15);
        FuzzerUtils.out.println("i16 d3 by2 = " + i16 + "," + Double.doubleToLongBits(d3) + "," + by2);
        FuzzerUtils.out.println("iArr2 iArr3 = " + FuzzerUtils.checkSum(iArr2) + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("sFld Test.fArrFld byArrFld = " + sFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
