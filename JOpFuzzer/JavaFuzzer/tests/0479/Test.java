// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-18L;
    public static int iFld=93;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 1);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3) {

        float f=0.711F;
        int i4=13, i5=-194, i6=90, i7=6, i8=1, iArr1[]=new int[N];
        boolean b=true;
        double d=0.26148;

        FuzzerUtils.init(iArr1, 73);

        f = i3;
        i4 = 1;
        while (++i4 < 257) {
            i5 = (int)-33.955F;
            switch ((i4 % 1) + 40) {
            case 40:
                i5 += i3;
                if (b) break;
                i3 += (i4 * i4);
            }
            switch (((i4 % 6) * 5) + 55) {
            case 73:
                i3 >>= i3;
                for (d = 6; d > 1; d -= 3) {
                    i6 >>>= 10;
                    i5 <<= (int)-108L;
                }
                break;
            case 66:
                for (i7 = i4; i7 < 6; ++i7) {
                    i3 &= i3;
                    iArr1[i4] >>= (int)Test.instanceCount;
                }
            case 68:
                i8 *= i5;
                break;
            case 61:
            case 82:
            case 67:
                i6 += i6;
                break;
            }
        }
        long meth_res = i3 + Float.floatToIntBits(f) + i4 + i5 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i6 + i7 +
            i8 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i2) {


        i2 <<= (int)lMeth(-13);
        vMeth_check_sum += i2;
    }

    public int iMeth() {

        int i9=4482, i10=-29944, i11=2, i12=28;
        float f1=-54.792F;
        short s=3749;
        double d1=-98.128606;
        byte by=71;

        vMeth(45149);
        Test.iFld = Test.iFld;
        for (i9 = 11; 270 > i9; i9++) {
            Test.iFld += i10;
            if (Test.bFld) continue;
            for (f1 = 1; f1 < 6; ++f1) {
                s <<= (short)Test.iFld;
                Test.instanceCount <<= i11;
                Test.iFld -= 22656;
            }
            try {
                i11 = (i11 % -28426);
                Test.iArrFld[i9] = (Test.iFld % -1126483922);
                i10 = (i9 % i10);
            } catch (ArithmeticException a_e) {}
            Test.iFld -= -81;
            Test.iFld = i10;
        }
        i12 = 360;
        while (--i12 > 0) {
            i11 = (int)d1;
            by |= (byte)i9;
        }
        long meth_res = i9 + i10 + Float.floatToIntBits(f1) + i11 + s + i12 + Double.doubleToLongBits(d1) + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-68, i1=6, i13=4, i14=66, i15=-54888, i16=2, i17=-151, iArr[]=new int[N];
        double d2=0.53390;
        short s1=-20648;
        float f2=1.744F;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 24056);
        FuzzerUtils.init(lArr, 204L);
        FuzzerUtils.init(byArr, (byte)117);

        for (i = 3; i < 261; ++i) {
            iArr[i] <<= (int)((2 - i1) - ((-lArr[i + 1]) + (byArr[i]++)));
            iMeth();
            Test.instanceCount += (i * i);
            i13 = 97;
            while (--i13 > 0) {
                byte by1=-99;
                by1 -= (byte)Test.instanceCount;
                for (i14 = 1; i14 > 1; --i14) {
                    Test.iArrFld[i14 - 1] %= (int)(i | 1);
                    Test.instanceCount >>= Test.instanceCount;
                }
                i15 += (i13 + Test.instanceCount);
                for (i16 = 1; i16 < 1; ++i16) {
                    lArr[i - 1] += by1;
                    Test.instanceCount += Test.instanceCount;
                    i15 += (((i16 * Test.iFld) + Test.iFld) - i);
                    d2 = -2.114F;
                    try {
                        i1 = (i / -27898);
                        Test.iFld = (Test.iArrFld[i13] % -207);
                        i15 = (-7641 % Test.iArrFld[i]);
                    } catch (ArithmeticException a_e) {}
                    switch (((i % 10) * 5) + 28) {
                    case 55:
                        i15 |= i17;
                        Test.iArrFld[i13 + 1] -= i;
                        Test.instanceCount += (i16 + Test.instanceCount);
                        d2 *= i1;
                        break;
                    case 59:
                        Test.iArrFld = iArr;
                        i1 = (int)Test.instanceCount;
                        break;
                    case 38:
                        i17 = i14;
                        break;
                    case 65:
                        s1 >>>= (short)i16;
                        break;
                    case 68:
                        Test.iFld += i1;
                        i17 >>= (int)Test.instanceCount;
                        i15 = Test.iFld;
                        break;
                    case 50:
                        f2 -= Test.instanceCount;
                        break;
                    case 51:
                        f2 *= i15;
                    case 30:
                        Test.iFld += (((i16 * i1) + i16) - by1);
                        break;
                    case 78:
                        s1 += (short)d2;
                        break;
                    case 67:
                        Test.iFld = (int)-405951204L;
                        break;
                    default:
                        f2 += i16;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i13 = " + i + "," + i1 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 d2 s1 = " + i17 + "," + Double.doubleToLongBits(d2) + "," + s1);
        FuzzerUtils.out.println("f2 iArr lArr = " + Float.floatToIntBits(f2) + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
