// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:44 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-79L;
    public static short sFld=-21683;
    public static boolean bFld=true;
    public static double dFld=0.92001;
    public static byte byFld=126;
    public float fFld=104.138F;
    public static int iArrFld[]=new int[N];
    public volatile byte byArrFld[]=new byte[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld1[]=new int[N];
    public boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 9);
        FuzzerUtils.init(Test.lArrFld, 1350484394L);
        FuzzerUtils.init(Test.iArrFld1, -8);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i7, int i8) {

        int i9=-13, i10=-157, i11=1569, i12=2772;
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)112);
        FuzzerUtils.init(lArr, 0L);

        i8 ^= i7;
        for (i9 = 9; i9 < 187; i9++) {
            if (false) {
                i7 -= (int)Test.instanceCount;
                i7 += i9;
            }
            i10 += (i9 - Test.sFld);
            lArr[i9] -= i10;
            i8 = i7;
            i8 += (int)Test.dFld;
            i7 += 8;
            Test.instanceCount += (i9 - i10);
            for (i11 = 1; i11 < 9; i11++) {
                i8 = i9;
                i10 = (int)Test.instanceCount;
                Test.instanceCount = i8;
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i6) {

        int i13=14, i14=16106, i15=-12, i16=140, i17=-37, i18=1, iArr[]=new int[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, -1);

        bArr[(i6 >>> 1) % N] = (((i6 % 107) >= (i6 * Test.sFld)) && (Test.bFld = (Test.bFld = Test.bFld)));
        Test.instanceCount = (((i6 / (i6 | 1)) + (-14 - iMeth1(i6, 101))) * i6);
        i6 = i6;
        for (i13 = 394; i13 > 2; i13 -= 2) {
            for (i15 = 1; i15 < 8; i15++) {
                i14 += (i15 - Test.instanceCount);
                i14 >>>= i14;
                i16 += (145 + (i15 * i15));
                Test.instanceCount += i15;
                for (i17 = 2; i17 > 1; i17--) {
                    i14 += i15;
                    if (Test.bFld) continue;
                    try {
                        i14 = (i16 / i18);
                        i6 = (60634 % Test.iArrFld[i13]);
                        i6 = (-17 % iArr[i17 + 1]);
                    } catch (ArithmeticException a_e) {}
                    i18 ^= Test.byFld;
                    i18 -= i18;
                }
            }
        }
        long meth_res = i6 + i13 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i5) {


        i5 *= (int)Math.abs(fMeth(i5));
        i5 = 14;
        i5 = Test.byFld;
        long meth_res = i5;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i1=16991, i2=72, i3=3589, i4=25897, i19=-7;
        double d=1.124666, dArr[]=new double[N];
        float f=0.837F;

        FuzzerUtils.init(dArr, -7.89297);

        i = 1;
        while ((i += 3) < 258) {
            for (i1 = i; i1 < 291; i1++) {
                for (i3 = 1; i3 < 1; ++i3) {
                    i4 = iMeth(i2);
                    Test.iArrFld[i + 1] += 76;
                    i4 *= (int)2.411F;
                    byArrFld[i3] += (byte)fFld;
                    i2 = i2;
                    Test.iArrFld[i3] *= 12;
                    i2 ^= 10;
                }
                d = 1;
                do {
                    i2 *= i2;
                    Test.instanceCount |= Test.instanceCount;
                    i4 /= (int)(i2 | 1);
                    if (Test.bFld) break;
                    i2 &= -9;
                    Test.lArrFld[i - 1] = i2;
                    i2 += 7;
                    i2 += (int)(((d * i4) + fFld) - Test.instanceCount);
                    i4 += (int)(((d * Test.instanceCount) + i2) - i4);
                } while (++d < 1);
                for (f = 1; f < 1; ++f) {
                    switch ((int)((f % 4) + 18)) {
                    case 18:
                        Test.instanceCount -= Test.instanceCount;
                        Test.instanceCount = i19;
                        dArr[i1 - 1] = fFld;
                        switch ((i % 9) + 103) {
                        case 103:
                            i19 -= (int)Test.instanceCount;
                            i4 += (int)(f * f);
                            break;
                        case 104:
                            Test.iArrFld1[(i4 >>> 1) % N] -= i2;
                            i2 -= (int)fFld;
                        case 105:
                            Test.iArrFld[i1 + 1] = i3;
                            break;
                        case 106:
                            Test.byFld += (byte)-96073761290303440L;
                            break;
                        case 107:
                            i4 -= 3;
                            break;
                        case 108:
                            Test.sFld += (short)f;
                            break;
                        case 109:
                            Test.lArrFld[(int)(f)] += i1;
                        case 110:
                            Test.instanceCount |= Test.instanceCount;
                        case 111:
                            bArrFld[i][i + 1] = Test.bFld;
                            break;
                        }
                        break;
                    case 19:
                    case 20:
                        fFld = i3;
                        break;
                    case 21:
                        i2 = i1;
                    default:
                        Test.iArrFld[i1] |= i1;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 d = " + i3 + "," + i4 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("f i19 dArr = " + Float.floatToIntBits(f) + "," + i19 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld Test.byFld fFld = " + Double.doubleToLongBits(Test.dFld) + "," + Test.byFld
            + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.iArrFld byArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(byArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 bArrFld = " + FuzzerUtils.checkSum(Test.iArrFld1) + "," +
            FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
