// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=14L;
    public static short sFld=-24403;
    public static boolean bFld=true;
    public volatile double dFld=1.21892;
    public byte byFld=-9;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 128L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1) {

        int i5=-20724, i6=-9, i7=-97, i8=-226, i9=-62051, i10=9, i11=-6, iArr1[]=new int[N];
        long l2=-41798L;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, 10);
        FuzzerUtils.init(fArr, 56.337F);

        iArr1[(i5 >>> 1) % N] = (int)Test.instanceCount;
        for (l2 = 13; l2 < 255; l2++) {
            fArr[(int)(l2 + 1)] *= Test.sFld;
            for (i7 = 7; i7 > 1; i7--) {
                iArr1[i7] = Test.sFld;
                switch (((i7 % 2) * 5) + 95) {
                case 96:
                    i5 += (i7 ^ Test.instanceCount);
                    i6 -= i8;
                    i9 <<= i6;
                    break;
                case 101:
                    Test.bFld = Test.bFld;
                    break;
                }
                for (i10 = 2; i10 > 1; i10--) {
                    i5 = (int)Test.instanceCount;
                    iArr1[(int)(l2 - 1)] = i11;
                    i9 &= -191;
                }
                i5 <<= i6;
            }
        }
        vMeth2_check_sum += l1 + i5 + l2 + i6 + i7 + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(double d, int i4) {

        int i12=48470, i13=12, i14=107, i15=-13519, i16=11, iArr2[]=new int[N];
        byte by=121;
        float f2=-1.40F;

        FuzzerUtils.init(iArr2, -147);

        vMeth2(Test.instanceCount);
        i12 = 1;
        do {
            i4 = (int)d;
            iArr2[i12 + 1] += i4;
            i4 &= -22635;
            d += Test.instanceCount;
            for (i13 = 1; 7 > i13; ++i13) {
                switch (((i14 >>> 1) % 2) + 41) {
                case 41:
                    for (i15 = i13; i15 < 2; ++i15) {
                        Test.bFld = Test.bFld;
                        i16 = (int)6L;
                        by = (byte)i16;
                        Test.instanceCount >>= i13;
                    }
                    try {
                        i14 = (i16 / i12);
                        iArr2[i13] = (-1546319105 / iArr2[i12 - 1]);
                        i14 = (i4 / i4);
                    } catch (ArithmeticException a_e) {}
                    iArr2[i13 - 1] -= (int)Test.instanceCount;
                case 42:
                    f2 *= 14.927F;
                }
            }
        } while (++i12 < 245);
        vMeth1_check_sum += Double.doubleToLongBits(d) + i4 + i12 + i13 + i14 + i15 + i16 + by +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(int i3, long l) {

        int iArr3[][]=new int[N][N];

        FuzzerUtils.init(iArr3, -13090);

        vMeth1(0.27882, -7);
        iArr3[(i3 >>> 1) % N] = iArr3[(i3 >>> 1) % N];
        vMeth_check_sum += i3 + l + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        float f=-77.159F, f1=-2.848F;
        int i=-220, i1=11, i2=122, i17=8429, i18=8089, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 110);

        if (true) {
            for (f = 370; f > 21; --f) {
                for (i1 = 4; i1 < 72; i1++) {
                    switch (((i2 >>> 1) % 3) + 64) {
                    case 64:
                        Test.lArrFld[(int)(f)] += i1;
                        i += (((i1 * i2) + i1) - i1);
                        try {
                            iArr[(int)(f + 1)] = (iArr[i1 - 1] / 64856);
                            i2 = (-19953 / i2);
                            iArr[i1 + 1] = (i2 % -2135286138);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 65:
                        iArr[(int)(f)] -= (int)(i1 - ((--Test.instanceCount) + (i + i1)));
                        f1 += i1;
                    case 66:
                        vMeth(i, Test.instanceCount);
                        i = Test.sFld;
                    }
                    iArr[i1] = i2;
                    for (i17 = i1; i17 < 2; i17++) {
                        i *= (int)Test.instanceCount;
                        i = i2;
                        i18 = i;
                        dFld = i17;
                        switch ((i17 % 8) + 48) {
                        case 48:
                            i2 += (int)f1;
                            break;
                        case 49:
                            i2 &= i1;
                            i <<= i17;
                            break;
                        case 50:
                            if (false) break;
                            dFld = i2;
                            i18 += (i17 * i17);
                        case 51:
                        case 52:
                            switch (((i1 % 10) * 5) + 47) {
                            case 51:
                                i18 *= (int)-6784219789141486306L;
                                break;
                            case 58:
                                i2 += i17;
                                Test.sFld += (short)74;
                                dFld *= Test.instanceCount;
                                i18 ^= i18;
                            case 55:
                                Test.instanceCount = i1;
                            case 59:
                                i += (i17 - f1);
                                break;
                            case 85:
                                i2 = i17;
                                break;
                            case 84:
                                i2 += (int)f;
                                break;
                            case 53:
                            case 66:
                                f1 += (5 + (i17 * i17));
                                break;
                            case 78:
                                dFld = f1;
                                break;
                            case 73:
                                byFld >>= (byte)-1106160554L;
                            default:
                                byFld = (byte)-39280L;
                            }
                            break;
                        case 53:
                            if (Test.bFld) break;
                            break;
                        case 54:
                            byFld += (byte)(-4 + (i17 * i17));
                            break;
                        case 55:
                            if (true) break;
                            break;
                        }
                    }
                }
            }
        } else if (Test.bFld) {
            byFld >>= (byte)i18;
        } else {
            iArr[(-8 >>> 1) % N] = i1;
        }

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 f1 i17 = " + i2 + "," + Float.floatToIntBits(f1) + "," + i17);
        FuzzerUtils.out.println("i18 iArr = " + i18 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("dFld byFld Test.lArrFld = " + Double.doubleToLongBits(dFld) + "," + byFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
