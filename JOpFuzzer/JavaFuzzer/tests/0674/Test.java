// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=8444502037861132687L;
    public static int iFld=6;
    public static double dFld=-1.93898;
    public static double dFld1=-73.116588;
    public static int iFld1=-27130;
    public static byte byFld=126;
    public static float fFld=80.769F;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -112);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(short s1, long l) {

        long l1=-7210888869869916390L, lArr[][]=new long[N][N];
        int i5=-56091, i6=-76, i7=-13, i8=-14, i9=-3031;
        double d1=-84.26605;
        boolean b1=true;

        FuzzerUtils.init(lArr, 97L);

        for (l1 = 21; l1 < 393; ++l1) {
            i5 *= (int)l;
            i5 -= i5;
            for (d1 = 1; d1 < 5; ++d1) {
                i5 += (int)d1;
                Test.instanceCount = l1;
                for (i7 = 1; i7 < 2; ++i7) {
                    switch ((int)((d1 % 2) + 72)) {
                    case 72:
                        i8 ^= i6;
                        i8 += 57605;
                        Test.instanceCount += i7;
                        i9 = 0;
                        break;
                    case 73:
                        b1 = false;
                        lArr[(int)(d1 + 1)][(int)(l1)] = Test.instanceCount;
                        Test.iFld <<= i6;
                    default:
                        Test.iArrFld[i7 + 1] = i7;
                    }
                }
            }
        }
        vMeth2_check_sum += s1 + l + l1 + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i2, int i3, int i4) {

        short s2=-6651;
        int i10=-4, i11=4, i12=-221;
        boolean b2=true;
        byte by=33;
        float f2=-1.758F;
        long l2=-8L;

        switch (((((i4 - Test.iFld) >>> 1) % 6) * 5) + 66) {
        case 76:
            vMeth2(s2, Test.instanceCount);
            Test.dFld -= Test.dFld1;
            i10 = 1;
            do {
                Test.instanceCount = i2;
            } while (++i10 < 337);
            i11 = 1;
            do {
                float f1=-1.837F;
                Test.iFld *= (int)f1;
                if (b2) break;
            } while (++i11 < 174);
            break;
        case 77:
            i12 = 1;
            while (++i12 < 197) {
                Test.iArrFld[i12] *= i4;
                Test.iArrFld[i12 + 1] |= by;
                Test.instanceCount = Test.iFld;
            }
            i4 *= (int)f2;
            Test.iFld -= i2;
            i2 = i3;
            break;
        case 94:
            Test.instanceCount = i4;
            break;
        case 91:
            l2 += l2;
            break;
        case 93:
            Test.dFld = i3;
            break;
        case 79:
            Test.iArrFld[(Test.iFld1 >>> 1) % N] += Test.iFld1;
            break;
        }
        vMeth1_check_sum += i2 + i3 + i4 + s2 + i10 + i11 + (b2 ? 1 : 0) + i12 + by + Float.floatToIntBits(f2) + l2;
    }

    public static void vMeth(boolean b, int i) {

        double d=35.19477;
        int i1=55, i13=25390, i14=139, i15=-28776, i16=8, i17=-5;
        long lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr1, 50452L);
        FuzzerUtils.init(fArr, 0.916F);

        Test.dFld = i;
        for (d = 15; d < 327; ++d) {
            vMeth1(Test.iFld1, Test.iFld1, Test.iFld);
            for (i13 = 1; i13 < 5; ++i13) {
                Test.byFld *= (byte)Test.instanceCount;
                for (i15 = 1; 2 > i15; i15++) {
                    i1 >>= i13;
                }
                Test.iArrFld[(int)(d - 1)] -= (int)Test.fFld;
                Test.dFld1 = Test.instanceCount;
                lArr1[(int)(d)] = i16;
                i17 = 1;
                do {
                    switch ((((i1 >>> 1) % 5) * 5) + 67) {
                    case 68:
                        Test.instanceCount = i15;
                        break;
                    case 74:
                        Test.fFld += i17;
                        Test.fFld = i14;
                    case 77:
                        fArr[(int)(d)] = Test.instanceCount;
                        break;
                    case 88:
                        lArr1[(int)(d)] >>>= Test.instanceCount;
                        break;
                    case 76:
                        Test.fFld *= i17;
                        break;
                    default:
                        i14 = i17;
                    }
                } while (++i17 < 2);
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i + Double.doubleToLongBits(d) + i1 + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        float f=-21.650F;
        short s=28060;
        boolean b3=false;
        long l3=-42244L;
        int i18=-14, i19=-227, i20=-53, i21=10, i22=-72, i23=-48364, i24=-52104, i25=6, i26=-3;
        double d2=-1.1622;

        Test.iFld = (int)((long)(-(f - 94)) >>> s);
        vMeth(b3, Test.iFld);
        for (l3 = 10; l3 < 358; l3++) {
            i18 = Test.iFld1;
            Test.iFld += Test.iFld1;
        }
        Test.iArrFld[(Test.iFld1 >>> 1) % N] += i18;
        Test.dFld1 = Test.iFld1;
        Test.iFld -= 47031;
        if (b3) {
            if (false) {
                Test.iFld1 -= Test.iFld;
            }
        } else {
            i18 -= i18;
            Test.iFld >>= (int)-50L;
        }
        for (i19 = 1; i19 < 324; i19++) {
            Test.iFld1 += (i19 * i19);
            f += i20;
            i18 |= i19;
            i18 = Test.iFld1;
        }
        d2 = 1;
        do {
            Test.instanceCount -= (long)d2;
            i18 -= Test.iFld1;
        } while (++d2 < 295);
        for (i21 = 1; i21 < 189; ++i21) {
            i20 += i18;
            for (i23 = 133; i23 > 6; --i23) {
                i24 = (int)l3;
                for (i25 = 2; i25 > 1; --i25) {
                    Test.iArrFld[i21] = (int)Test.instanceCount;
                    Test.instanceCount += (((i25 * Test.iFld1) + l3) - i23);
                    Test.fFld = -142;
                    Test.instanceCount = Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("f s b3 = " + Float.floatToIntBits(f) + "," + s + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("l3 i18 i19 = " + l3 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 d2 i21 = " + i20 + "," + Double.doubleToLongBits(d2) + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 = " + i25 + "," + i26);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.dFld1 Test.iFld1 Test.byFld = " + Double.doubleToLongBits(Test.dFld1) + "," +
            Test.iFld1 + "," + Test.byFld);
        FuzzerUtils.out.println("Test.fFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
