// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=8L;
    public byte byFld=-76;
    public static int iFld=14385;
    public static double dFld=1.49132;
    public static long lFld=572428883L;
    public short sFld=-9903;
    public static boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public static double dArrFld1[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 1.95662);
        FuzzerUtils.init(Test.dArrFld1, -10.91785);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, short s1) {

        long lArr1[]=new long[N];
        int iArr1[][]=new int[N][N];

        FuzzerUtils.init(lArr1, -3927575747293743726L);
        FuzzerUtils.init(iArr1, -55805);

        for (long l1 : lArr1) {
            Test.dArrFld[(Test.iFld >>> 1) % N] *= Test.iFld;
        }
        Test.iFld += Test.iFld;
        Test.iFld ^= 8;
        iArr1[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] *= 18600;
        vMeth1_check_sum += l + s1 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i3, int i4, int i5) {

        short s=-6433;
        float f=44.464F;
        int i8=-49615, i9=25732, iArr[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr, -45);

        Test.instanceCount ^= ((s++) - Test.instanceCount);
        for (int i6 : iArr) {
            if (f == i3) continue;
            vMeth1(Test.instanceCount, s);
            i4 = (int)Test.instanceCount;
            iArr[(i3 >>> 1) % N] &= 18841;
            Test.dArrFld1[(i4 >>> 1) % N] -= Test.instanceCount;
            for (i8 = 1; i8 < 4; i8++) {
                double d=0.99975;
                i4 = -106;
                if (b) break;
                iArr[i8 - 1] |= i4;
                i9 -= i5;
                Test.iFld = (int)d;
                i4 += (int)160L;
                i9 += i8;
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + s + Float.floatToIntBits(f) + i8 + i9 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i2) {

        double d1=-100.123649;
        int i10=8, i11=-14164, i12=-9, i13=-25, i14=-9, i15=10, i16=0, i17=36636, i18=-49415, iArr2[]=new int[N];
        float f1=-76.11F, fArr[]=new float[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-9997);
        FuzzerUtils.init(fArr, 2.1008F);
        FuzzerUtils.init(iArr2, 135);

        i2 <<= (int)(++Test.instanceCount);
        vMeth(Test.iFld, i2, Test.iFld);
        for (d1 = 8; d1 < 370; ++d1) {
            Test.dFld -= i2;
        }
        for (f1 = 12; f1 < 243; ++f1) {
            for (i12 = (int)(f1); i12 < 7; ++i12) {
                sArr[i12 + 1] = (short)Test.iFld;
            }
        }
        for (i14 = 11; i14 < 342; i14++) {
            for (i16 = 1; i16 < 5; i16 += 2) {
                i17 += (i16 + Test.instanceCount);
                i18 = 1;
                while (++i18 < 3) {
                    fArr[i18 - 1] *= (float)0.122796;
                    Test.iFld <<= 93;
                    i10 += i2;
                    iArr2 = iArr2;
                }
            }
        }
        long meth_res = i2 + Double.doubleToLongBits(d1) + i10 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15
            + i16 + i17 + i18 + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i1=-29416, i19=6, i20=1, i21=-54255, i22=-218, i23=-232, i24=-232, i25=8, iArr3[]=new int[N], iArr4[]=new
            int[N];
        float f2=-84.205F, fArr1[]=new float[N];
        boolean b1=true;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];
        short sArr1[][]=new short[N][N];

        FuzzerUtils.init(lArr, -24L);
        FuzzerUtils.init(iArr3, 193);
        FuzzerUtils.init(fArr1, 112.330F);
        FuzzerUtils.init(byArr, (byte)-23);
        FuzzerUtils.init(iArr4, -8);
        FuzzerUtils.init(sArr1, (short)9264);

        i1 -= (int)lArr[(i1 >>> 1) % N];
        byFld -= (byte)(iMeth(i1) + Test.iFld);
        if (b1) {
            Test.instanceCount -= (long)f2;
            i1 >>= -5;
            Test.lFld += Test.iFld;
            Test.iFld += (int)Test.instanceCount;
        } else {
            lArr = lArr;
            for (i19 = 13; i19 < 265; ++i19) {
                i1 = i1;
                try {
                    Test.iFld = (i1 / Test.iFld);
                    Test.iFld = (i19 % iArr3[i19]);
                    i1 = (-74 / Test.iFld);
                } catch (ArithmeticException a_e) {}
                i21 = 1;
                while (++i21 < 100) {
                    Test.dFld += Test.instanceCount;
                    for (i22 = 1; i19 < i22; i22 -= 3) {
                        i23 <<= i23;
                    }
                    i20 *= (int)Test.dFld;
                    try {
                        Test.iFld = (90 / i23);
                        iArr3[i21] = (i1 % i1);
                        i20 = (i21 / i23);
                    } catch (ArithmeticException a_e) {}
                    i1 += i21;
                    Test.iFld += (53843 + (i21 * i21));
                    i23 += i21;
                }
                Test.lFld %= (i22 | 1);
                Test.iFld *= sFld;
                switch (i19 + 118) {
                case 118:
                    i23 = i22;
                    iArr3 = iArr3;
                    break;
                case 119:
                    i20 = (int)-2.59618;
                    byFld += (byte)(i19 * i19);
                    break;
                case 120:
                    for (i24 = 1; i24 < 100; i24++) {
                        Test.lFld += 2;
                        Test.iFld <<= i20;
                    }
                    break;
                case 121:
                    i20 += i19;
                    break;
                case 122:
                    i23 >>= i21;
                    break;
                case 123:
                    i20 = i19;
                    break;
                case 124:
                    Test.lFld += (i19 * i19);
                case 125:
                    try {
                        iArr3[i19 + 1] = (-19586 % i19);
                        i23 = (iArr3[i19 + 1] / 1432866996);
                        i23 = (iArr3[i19] / 692367316);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 126:
                    i1 *= i22;
                    break;
                case 127:
                case 128:
                    i20 += i19;
                    break;
                case 129:
                    i20 = i21;
                    break;
                case 130:
                    Test.instanceCount += i21;
                    break;
                case 131:
                    iArr3[i19 - 1] += i25;
                    break;
                case 132:
                    i23 = (int)-22462L;
                case 133:
                    iArr3[i19] >>= (int)Test.lFld;
                    break;
                case 134:
                    i1 += -58334;
                    break;
                case 135:
                    Test.iFld -= i21;
                case 136:
                    i20 >>>= byFld;
                    break;
                case 137:
                    Test.iFld = Test.iFld;
                    break;
                case 138:
                    fArr1[i19 - 1] += 5880;
                case 139:
                    try {
                        i25 = (i25 % -20);
                        iArr3[(i23 >>> 1) % N] = (13689 / i22);
                        Test.iFld = (58591 / i25);
                    } catch (ArithmeticException a_e) {}
                case 140:
                    Test.iFld *= i21;
                case 141:
                    lArr[i19] *= i24;
                    break;
                case 142:
                    i20 *= (int)f2;
                    break;
                case 143:
                    Test.lFld >>= byFld;
                    break;
                case 144:
                    i20 -= i24;
                case 145:
                case 146:
                    iArr3[i19 + 1] >>>= i20;
                case 147:
                    Test.iFld = Test.iFld;
                    break;
                case 148:
                    i25 = (int)Test.lFld;
                    break;
                case 149:
                    try {
                        i25 = (99 / i25);
                        iArr3[i19] = (181 % iArr3[i19 + 1]);
                        i23 = (-54993 % i24);
                    } catch (ArithmeticException a_e) {}
                case 150:
                case 151:
                    i25 += i23;
                    break;
                case 152:
                    try {
                        i25 = (iArr3[i19 - 1] % i24);
                        i23 = (Test.iFld / i19);
                        i20 = (i22 % i25);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 153:
                    byArr = FuzzerUtils.byte1array(N, (byte)-31);
                case 154:
                    Test.lFld >>= 6;
                    break;
                case 155:
                    try {
                        i1 = (i24 / i21);
                        i23 = (i1 / -19352);
                        i1 = (iArr3[i19] % iArr4[i19]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 156:
                    iArr4[i19] = (int)f2;
                    break;
                case 157:
                    try {
                        i20 = (Test.iFld % i1);
                        i25 = (i19 % -77);
                        i1 = (-26 / i20);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 158:
                    i1 += (i19 * i19);
                    break;
                case 159:
                    Test.lFld = i22;
                    break;
                case 160:
                    sArr1[i19 + 1][i19] *= (short)i23;
                    break;
                case 161:
                    i23 = i24;
                case 162:
                    b1 = Test.bFld;
                    break;
                case 163:
                    i1 = (int)-2.348F;
                case 164:
                    Test.iFld <<= i25;
                    break;
                case 165:
                    sFld += (short)i19;
                    break;
                case 166:
                    lArr[i19 + 1] = i25;
                case 167:
                    Test.iFld -= -5330;
                    break;
                case 168:
                    Test.dFld -= i22;
                    break;
                case 169:
                    i25 = -48;
                    break;
                case 170:
                case 171:
                    iArr4[i19] -= (int)1.53727;
                    break;
                case 172:
                    iArr3[i19 + 1] = i25;
                    break;
                case 173:
                case 174:
                    i20 /= (int)((long)(f2) | 1);
                    break;
                case 175:
                    i1 += (i19 - byFld);
                    break;
                case 176:
                    Test.lFld >>= i19;
                    break;
                case 177:
                    i23 -= Test.iFld;
                case 178:
                    i20 = i23;
                    break;
                case 179:
                    iArr4[i19 + 1] -= (int)Test.instanceCount;
                    break;
                case 180:
                    byFld = (byte)Test.lFld;
                case 181:
                    i1 >>>= Test.iFld;
                case 182:
                    if (Test.bFld) continue;
                case 183:
                case 184:
                    i20 += (i19 | Test.iFld);
                case 185:
                    Test.iFld = i1;
                case 186:
                    i1 -= (int)f2;
                case 187:
                    if (true) continue;
                }
            }
        }

        FuzzerUtils.out.println("i1 f2 b1 = " + i1 + "," + Float.floatToIntBits(f2) + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 lArr iArr3 = " + i25 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("fArr1 byArr iArr4 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," +
            FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(iArr4));
        FuzzerUtils.out.println("sArr1 = " + FuzzerUtils.checkSum(sArr1));

        FuzzerUtils.out.println("Test.instanceCount byFld Test.iFld = " + Test.instanceCount + "," + byFld + "," +
            Test.iFld);
        FuzzerUtils.out.println("Test.dFld Test.lFld sFld = " + Double.doubleToLongBits(Test.dFld) + "," + Test.lFld +
            "," + sFld);
        FuzzerUtils.out.println("Test.bFld Test.dArrFld Test.dArrFld1 = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld1)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
