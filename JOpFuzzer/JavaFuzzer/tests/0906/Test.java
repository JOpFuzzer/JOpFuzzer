// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public static volatile int iFld=6;
    public static float fFld=100.126F;
    public static boolean bFld=true;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[][]=new int[N][N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)11591);
        FuzzerUtils.init(Test.iArrFld, 23);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static int iMeth(int i6) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -65101);

        Test.instanceCount += ((i6--) * ((iArr[(i6 >>> 1) % N]--) - Test.instanceCount));
        long meth_res = i6 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d, long l, float f2) {

        double d1=-4.4186;
        int i10=4, iArr1[][]=new int[N][N];
        byte by1=15, byArr[][]=new byte[N][N];
        short s=22548;

        FuzzerUtils.init(byArr, (byte)-89);
        FuzzerUtils.init(iArr1, -193);

        byArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] >>= (byte)Test.iFld;
        for (d1 = 19; d1 < 361; d1++) {
            Test.instanceCount /= (Test.instanceCount | 1);
        }
        i10 = (int)115.920F;
        switch (((2 >>> 1) % 10) + 29) {
        case 29:
            Test.iFld -= Test.iFld;
            d /= (Test.iFld | 1);
            f2 -= i10;
            Test.iFld -= (int)Test.instanceCount;
            break;
        case 30:
            iArr1[(i10 >>> 1) % N][(Test.iFld >>> 1) % N] = (int)l;
            d = f2;
            iArr1[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] -= -219;
            break;
        case 31:
            Test.iFld += (int)f2;
            Test.iFld -= i10;
            i10 *= i10;
            break;
        case 32:
            d += by1;
            break;
        case 33:
            i10 *= i10;
            break;
        case 34:
            f2 += f2;
        case 35:
            Test.instanceCount |= by1;
            break;
        case 36:
            s -= (short)i10;
        case 37:
        case 38:
            i10 += by1;
            break;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) +
            i10 + by1 + s + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static boolean bMeth(int i9) {

        double d2=2.87401;

        vMeth(d2, Test.instanceCount, Test.fFld);
        long meth_res = i9 + Double.doubleToLongBits(d2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static long lMeth(float f) {

        float f1=124.918F;
        int i3=-8, i4=8, i5=-173, i7=177, i8=-185, i11=-3;
        byte by=-108;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 13L);

        for (f1 = 14; f1 < 392; ++f1) {
            for (i4 = 1; i4 < 4; ++i4) {
                by -= (byte)Math.min(Math.min(62068, i5) - (i3++), (Test.instanceCount *= Test.instanceCount) + (62686
                    * (Test.instanceCount + 49687)));
                i5 += ((i5++) + (-iMeth(30)));
            }
            f -= Test.iFld;
            for (i7 = 1; i7 < 4; ++i7) {
                f *= (Test.iFld = (int)(iMeth(i3) - (i8 + f1)));
                Test.iFld >>= (int)(Test.sArrFld[(int)(f1 + 1)] - ((i8 + Test.instanceCount) - (i8 * by)));
                if (b = (!bMeth(i5))) break;
                i3 = i5;
                Test.iArrFld[(int)(f1)][i7] = i4;
                i11 = 1;
                while (++i11 < 2) {
                    lArr[i7 + 1] -= (long)-113.708F;
                    Test.iFld += (((i11 * Test.instanceCount) + Test.instanceCount) - i8);
                    i3 -= -125;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i3 + i4 + i5 + by + i7 + i8 + (b ? 1 : 0)
            + i11 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-1, i1=-827, i2=22647, i12=-84, i13=72, i14=-171, i15=172, i16=-11849, i17=183;
        byte by2=-75;
        short s1=29714;
        double d3=0.80634;

        switch (((((i--) >>> 1) % 3) * 5) + 25) {
        case 39:
            for (i1 = 5; i1 < 282; i1 += 3) {
                if ((i + (lMeth(Test.fFld) + by2)) != i1) continue;
                s1 = (short)Test.iFld;
                Test.fFld += (i1 * i1);
            }
            Test.iFld |= i2;
        case 38:
            i12 = 1;
            while (++i12 < 362) {
                Test.fFld = i2;
                Test.iFld = i12;
                for (i13 = 3; i13 < 70; i13++) {
                    i15 = 2;
                    while (--i15 > 0) {
                        if (Test.bFld) continue;
                        Test.instanceCount &= Test.iFld;
                        lArrFld[i15 + 1] = -13946;
                        Test.fFld *= Test.iFld;
                    }
                    Test.iArrFld[i12 + 1][i13] -= i13;
                }
                Test.iFld = i;
            }
            break;
        case 28:
            for (i16 = 6; i16 < 207; i16++) {
                d3 = i;
            }
            Test.instanceCount = (long)103.872F;
            by2 = (byte)d3;
            Test.iFld -= (int)1.4687;
            break;
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("by2 s1 i12 = " + by2 + "," + s1 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 d3 = " + i16 + "," + i17 + "," + Double.doubleToLongBits(d3));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.sArrFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  bMeth ->  bMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
