// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=1L;
    public volatile short sFld=15260;
    public static short sFld1=-13777;
    public static double dFld=2.21368;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -29184);
        FuzzerUtils.init(Test.lArrFld, 1075780378257946521L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d1, int i5) {

        int i6=4, i7=26512, i8=-165, i9=6, i10=47355, i11=2;
        float f=-1.775F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 52.54475);

        Test.iArrFld[(i5 >>> 1) % N] >>= (int)Test.instanceCount;
        for (i6 = 5; i6 < 163; ++i6) {
            switch (((i6 % 8) * 5) + 34) {
            case 54:
                i5 = i6;
                i7 >>= i6;
                break;
            case 72:
                if (false) continue;
                d1 = i7;
                dArr[i6 - 1] += i8;
                i8 += i7;
                break;
            case 66:
                for (i9 = i6; i9 < 10; i9++) {
                    f += Test.instanceCount;
                    Test.iArrFld[i9] <<= (int)Test.instanceCount;
                    i11 = 1;
                    do {
                        d1 = f;
                        i8 += i11;
                    } while (++i11 < 1);
                }
                break;
            case 56:
                i5 -= i9;
                break;
            case 63:
                i7 %= (int)(i5 | 1);
                break;
            case 43:
                Test.iArrFld[i6] &= i11;
                break;
            case 50:
                i7 = i5;
                break;
            case 67:
                Test.lArrFld = Test.lArrFld;
            default:
                Test.iArrFld[i6] <<= i10;
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + i11
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i2) {

        byte by=-125;
        double d=0.46890;
        int i3=-152, i4=-105, i12=-11, i13=-8, i14=-45765;
        float f1=24.759F, fArr[]=new float[N];
        boolean b=false;

        FuzzerUtils.init(fArr, -41.303F);

        Test.iArrFld[(i2 >>> 1) % N] <<= (int)(Float.intBitsToFloat(Test.iArrFld[(i2 >>> 1) % N]) + Test.instanceCount);
        fArr[(-8 >>> 1) % N] = (by + Math.min((int)(236L - (Test.iArrFld[(63163 >>> 1) % N]++)), Math.min(i2, i2)));
        d = 1;
        do {
            for (i3 = 1; i3 < 5; ++i3) {
                vMeth2(d, i3);
                for (f1 = 1; 2 > f1; f1++) {
                    i4 = (int)Test.instanceCount;
                    Test.sFld1 += (short)Test.instanceCount;
                }
                Test.iArrFld[i3 + 1] = i4;
                i4 += (239 + (i3 * i3));
                if (b) {
                    for (i13 = 1; i13 < 2; i13++) {
                        i12 += (-10 + (i13 * i13));
                        if (b) continue;
                        Test.lArrFld[i3 + 1] &= -1818154292L;
                    }
                    vMeth1_check_sum += i2 + by + Double.doubleToLongBits(d) + i3 + i4 + Float.floatToIntBits(f1) + i12
                        + i13 + i14 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
            }
        } while (++d < 375);
        vMeth1_check_sum += i2 + by + Double.doubleToLongBits(d) + i3 + i4 + Float.floatToIntBits(f1) + i12 + i13 + i14
            + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i1, long l) {

        float f2=-2.411F;
        int i15=51, i16=-12, i17=56083;
        boolean b1=true;

        vMeth1(i1);
        i1 -= (int)f2;
        for (i15 = 8; i15 < 279; ++i15) {
            if (b1) {
                i16 += (((i15 * i16) + i16) - Test.sFld1);
            } else {
                f2 = i1;
                i17 = 6;
                do {
                    f2 += Test.sFld1;
                    i16 *= i16;
                    Test.lArrFld[i17 - 1] += (long)Test.dFld;
                    Test.sFld1 += (short)i17;
                    i1 = i1;
                    i1 = (int)l;
                    Test.instanceCount = l;
                    b1 = true;
                } while (--i17 > 0);
            }
        }
        vMeth_check_sum += i1 + l + Float.floatToIntBits(f2) + i15 + i16 + (b1 ? 1 : 0) + i17;
    }

    public void mainTest(String[] strArr1) {

        int i18=9, i19=24, i20=-33, i21=-23281, i22=10656, i23=-2, i24=-58818, i25=-2;
        float f3=0.76F;
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6870935926699615895L);

        for (int i : Test.iArrFld) {
            i >>= (int)((i + (sFld--)) * lArr[(i >>> 1) % N]);
            vMeth(i, Test.instanceCount);
            switch (((i >>> 1) % 1) + 48) {
            case 48:
                for (i18 = 3; i18 < 63; i18++) {
                    switch ((i18 % 2) + 63) {
                    case 63:
                        i19 += i19;
                        for (i20 = 1; i20 < 2; i20++) {
                            f3 = i;
                        }
                        Test.instanceCount += (((i18 * i21) + f3) - i21);
                        break;
                    case 64:
                        i += i18;
                        b2 = b2;
                        Test.iArrFld[i18 - 1] = (int)-3051883326L;
                        Test.instanceCount = i18;
                    default:
                        i19 = (int)Test.instanceCount;
                        for (i22 = 1; i22 < 2; ++i22) {
                            Test.instanceCount = i18;
                            f3 += (((i22 * Test.instanceCount) + i22) - Test.instanceCount);
                            Test.iArrFld = Test.iArrFld;
                            Test.instanceCount = i18;
                            i19 *= 1;
                        }
                    }
                    i = i20;
                    i &= 1;
                    i21 = i18;
                    for (i24 = 2; i24 > i18; i24--) {
                        i = i19;
                        i19 = i20;
                        i23 = 49638;
                        Test.iArrFld[i24 - 1] += i21;
                        i21 += i22;
                    }
                }
                break;
            default:
                i25 = (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 f3 b2 = " + i21 + "," + Float.floatToIntBits(f3) + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 lArr = " + i25 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount sFld Test.sFld1 = " + Test.instanceCount + "," + sFld + "," +
            Test.sFld1);
        FuzzerUtils.out.println("Test.dFld Test.iArrFld Test.lArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
