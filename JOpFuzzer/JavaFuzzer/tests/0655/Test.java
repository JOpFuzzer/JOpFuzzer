// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=2262209745677981048L;
    public static int iFld=0;
    public static float fFld=90.407F;
    public boolean bFld=false;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, double d) {

        int i9=4, i10=14372, i11=1, iArr[]=new int[N];
        boolean b=false;
        float f=0.205F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 65);
        FuzzerUtils.init(lArr, -32774L);

        for (int i8 : iArr) {
            d += -1;
            i9 *= i9;
            i9 = i9;
            Test.instanceCount += i8;
            if (b) continue;
            for (i10 = 1; i10 < 4; i10++) {
                i7 |= i9;
                i7 += (i10 + i9);
                i7 += (int)(3106083630L + (i10 * i10));
                i8 |= i7;
                lArr[i10] = (long)f;
                if (b) continue;
                d = i7;
                Test.instanceCount += Test.instanceCount;
            }
        }
        vMeth1_check_sum += i7 + Double.doubleToLongBits(d) + i9 + (b ? 1 : 0) + i10 + i11 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i2, int i3, int i4) {

        int i5=44665, i6=214, i12=4, i13=-21798, i14=13, iArr1[]=new int[N];
        double d1=0.46266;
        byte by=116;
        short s=32442;

        FuzzerUtils.init(iArr1, 10);

        for (i5 = 2; 168 > i5; ++i5) {
            vMeth1(i5, d1);
            for (i12 = 10; i12 > 1; i12--) {
                by -= (byte)i6;
                i14 = 1;
                do {
                    i13 = i12;
                    Test.instanceCount = s;
                    iArr1[i14 + 1] += (int)Test.instanceCount;
                    Test.instanceCount |= i2;
                    i3 += (i14 - i12);
                    switch ((((i13 >>> 1) % 7) * 5) + 68) {
                    case 101:
                        s = (short)i3;
                    case 94:
                        Test.instanceCount *= Test.instanceCount;
                        iArr1[i5 - 1] = -5276;
                        break;
                    case 78:
                        d1 = -1.338F;
                        break;
                    case 95:
                        i4 >>= i2;
                        break;
                    case 85:
                        i2 += (i14 | i14);
                        break;
                    case 83:
                        i13 += (i14 | Test.instanceCount);
                        break;
                    case 80:
                        iArr1[i5 - 1] -= i5;
                        break;
                    default:
                        Test.instanceCount *= i14;
                    }
                } while (++i14 < 2);
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + i12 + i13 + by + i14 + s +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(int i, int i1) {

        boolean b1=false;

        vMeth(-201, i1, 38);
        b1 = b1;
        vSmallMeth_check_sum += i + i1 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i15=0, i16=5, i17=9, i18=-2252, i19=233, i20=56, i21=-36624, i22=-181, iArr2[][]=new int[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 243);
        FuzzerUtils.init(lArr1, -12L);

        for (int smallinvoc=0; smallinvoc<242; smallinvoc++) vSmallMeth(Test.iFld, Test.iFld);
        Test.iFld = Test.iFld;
        Test.instanceCount = Test.iFld;
        Test.iFld -= (int)Test.instanceCount;
        Test.iFld = Test.iFld;
        i15 = 1;
        while (++i15 < 279) {
            Test.instanceCount += (long)Test.fFld;
            Test.iFld += (i15 * i15);
            Test.iFld += i15;
            Test.iFld -= i15;
            for (i16 = i15; i16 < 90; i16++) {
                double d2=-103.56057;
                d2 -= Test.iFld;
                iArr2[i16][i15] -= i15;
                Test.iFld >>= (int)Test.instanceCount;
                Test.instanceCount = i15;
            }
            Test.iFld = i17;
            for (i18 = 2; i18 < 90; ++i18) {
                lArr1[i15] *= i19;
                bFld = bFld;
                Test.iFld = -2;
            }
        }
        i20 = 1;
        do {
            Test.fFld = i15;
            for (i21 = 3; i21 < 64; i21++) {
                lArr1[i21 - 1] <<= Test.instanceCount;
                i22 -= i16;
                Test.instanceCount = i18;
                Test.fFld -= Test.instanceCount;
                iArr2[i20][i20] = i21;
                i19 |= i15;
                iArr2[i21 + 1][i21] = i16;
            }
        } while (++i20 < 394);

        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 iArr2 = " + i21 + "," + i22 + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("bFld = " + (bFld ? 1 : 0));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
