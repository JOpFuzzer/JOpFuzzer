// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public static short sFld=5838;
    public static boolean bFld=false;
    public static float fFld=26.406F;
    public static volatile double dFld=-102.40833;
    public static byte byFld=-81;
    public static byte byArrFld[]=new byte[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-81);
        FuzzerUtils.init(Test.lArrFld, 5533664782709662462L);
    }

    public static long dMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l, long l1) {

        int i6=-8, i7=14, i8=153, i9=-35, i10=-3865, i11=101, i12=5, iArr1[][]=new int[N][N];
        byte by=119;

        FuzzerUtils.init(iArr1, 13);

        Test.bFld = Test.bFld;
        i6 = (int)Test.fFld;
        by >>= (byte)i6;
        for (i7 = 261; i7 > 11; i7--) {
            if (true) continue;
            for (i9 = i7; i9 < 7; ++i9) {
                Test.fFld *= Test.fFld;
                i6 += i9;
                l = Test.instanceCount;
                i10 = -10;
                i8 += (-7 + (i9 * i9));
                iArr1 = iArr1;
                for (i11 = i9; i11 < 1; ++i11) {
                    i8 = (int)Test.fFld;
                    i6 = by;
                }
            }
        }
        vMeth_check_sum += l + l1 + i6 + by + i7 + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth(int i4) {

        int i5=108, i13=-12, i14=13;
        double d1=1.64786;
        byte by1=-28;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(bArr1, true);

        i5 = 1;
        while (++i5 < 362) {
            bArr1[i5 + 1] = Test.bFld;
            vMeth(Test.instanceCount, Test.instanceCount);
            d1 = 1;
            while (++d1 < 5) {
                for (i13 = 1; 1 > i13; i13++) {
                    if (Test.bFld) break;
                    i4 >>= i13;
                    try {
                        i14 = (i13 % i5);
                        i14 = (i13 / i4);
                        i4 = (i5 % i5);
                    } catch (ArithmeticException a_e) {}
                    Test.fFld += Test.instanceCount;
                    i14 += (i13 ^ i5);
                    Test.fFld = -151;
                    i14 += (i13 | i4);
                    i14 += (i13 * i13);
                }
                i4 = by1;
                if (i5 != 0) {
                }
            }
        }
        long meth_res = i4 + i5 + Double.doubleToLongBits(d1) + i13 + i14 + by1 + FuzzerUtils.checkSum(bArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static double dMeth(double d, int i1, int i2) {

        int i3=-27787, i15=-8, iArr2[]=new int[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr2, -24228);

        i3 = 1;
        do {
            switch (((i3 % 1) * 5) + 65) {
            case 66:
                if (bArr[i3 - 1]) continue;
                i1 *= (int)(((i2 - Test.instanceCount) - Test.instanceCount) - Test.instanceCount);
                Test.byArrFld[i3 + 1] = (byte)((i2 = (int)(-15345 * (-(-Test.instanceCount)))) * Test.sFld);
                Test.bFld = Test.bFld;
                break;
            }
            i2 += (i3 * i3);
            fMeth(-110);
            Test.instanceCount *= (long)Test.fFld;
        } while (++i3 < 266);
        iArr2[(-11 >>> 1) % N] = (int)Test.instanceCount;
        if (Test.bFld) {
            Test.instanceCount *= (long)d;
            i15 = 1;
            while (++i15 < 321) {
                i1 >>>= (int)Test.instanceCount;
                Test.instanceCount -= Test.instanceCount;
            }
        } else if (Test.bFld) {
            iArr2[(i3 >>> 1) % N] += i15;
        } else {
            i1 *= (int)d;
        }
        long meth_res = Double.doubleToLongBits(d) + i1 + i2 + i3 + i15 + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-43402, i16=-12, i17=-16, i18=41142, i19=14, i20=-5, i21=2, i22=-21, i23=-3, i24=6, i25=-26, iArr[]=new
            int[N];
        float f=-1.909F;
        boolean bArr2[][]=new boolean[N][N];

        FuzzerUtils.init(iArr, -38134);
        FuzzerUtils.init(bArr2, true);

        iArr[(i >>> 1) % N] = (int)f;
        i += (int)(dMeth(-1.24477, i, i) + Test.instanceCount);
        bArr2[(-184 >>> 1) % N][(i >>> 1) % N] = Test.bFld;
        for (i16 = 1; i16 < 398; i16++) {
            for (i18 = 3; i18 < 63; i18++) {
                byte by2=46;
                i17 -= by2;
                i17 += (i18 * i17);
                i17 += (-11 + (i18 * i18));
                if (Test.bFld) continue;
                for (i20 = 1; i20 < 2; i20++) {
                    Test.dFld /= ((long)(Test.dFld) | 1);
                    if (Test.bFld) break;
                    Test.instanceCount >>= -15692;
                    i19 = 33;
                    i21 -= (int)-3380165930L;
                    i += (int)27503L;
                    i21 -= i21;
                    i17 ^= i19;
                    i17 += i20;
                }
                Test.instanceCount += (((i18 * i18) + by2) - Test.instanceCount);
            }
            Test.lArrFld[i16 + 1] = i19;
            i21 = (int)Test.dFld;
        }
        for (i22 = 8; i22 < 174; ++i22) {
            try {
                i = (-215 % i23);
                i19 = (203 / i22);
                i17 = (i17 / i18);
            } catch (ArithmeticException a_e) {}
            Test.byFld = (byte)Test.dFld;
            for (i24 = 5; 151 > i24; ++i24) {
                iArr[(i18 >>> 1) % N] >>= (int)62688L;
            }
            if (Test.bFld) break;
            i >>= (int)Test.instanceCount;
        }
        Test.dFld = i24;

        FuzzerUtils.out.println("i f i16 = " + i + "," + Float.floatToIntBits(f) + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("iArr bArr2 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(bArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.dFld Test.byFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.byArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  fMeth ->  fMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
