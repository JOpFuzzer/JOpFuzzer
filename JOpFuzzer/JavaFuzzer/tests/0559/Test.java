// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:53 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3970865159L;
    public double dFld=115.113821;
    public static boolean bFld=false;
    public static byte byFld=83;
    public static short sFld=-28246;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 8.638F);
        FuzzerUtils.init(Test.lArrFld, 3838181139L);
        FuzzerUtils.init(Test.dArrFld, 112.66393);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i10, int i11, int i12) {

        int i13=8, i14=-7, i15=-229, i16=-95, i17=-3, i18=13, iArr2[]=new int[N];
        float f2=26.74F, f3=-31.611F;
        byte by=74;

        FuzzerUtils.init(iArr2, -61333);

        Test.fArrFld = Test.fArrFld;
        i10 = -7;
        i12 = (int)2.142F;
        Test.lArrFld[(i12 >>> 1) % N] += i12;
        for (i13 = 12; i13 < 370; ++i13) {
            f2 = 1;
            while (++f2 < 5) {
                for (i15 = 1; i15 > 1; --i15) {
                    i16 = i11;
                    iArr2[i13 - 1] -= i14;
                    i10 -= (int)Test.instanceCount;
                }
                f3 -= i13;
                try {
                    i16 = (i13 % 11599);
                    i16 = (-247 % i13);
                    i10 = (590570595 / i14);
                } catch (ArithmeticException a_e) {}
            }
            for (i17 = 1; i17 < 5; i17++) {
                i11 = i15;
                by -= (byte)f3;
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f2) + i15 + i16 + Float.floatToIntBits(f3) +
            i17 + i18 + by + FuzzerUtils.checkSum(iArr2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i9=2, i19=11258, i20=10, i21=184, iArr3[]=new int[N];
        double d=-2.85451;

        FuzzerUtils.init(iArr3, -9);

        i9 -= (i9--);
        i9 += (int)(dMeth(14, i9, i9) - i9);
        i9 = i9;
        for (i19 = 10; i19 < 177; ++i19) {
            Test.instanceCount &= i9;
            i9 -= i20;
            Test.lArrFld = FuzzerUtils.long1array(N, (long)-3537333203L);
            if (Test.bFld) break;
            i21 = 1;
            while (++i21 < 9) {
                long l1=-57L;
                iArr3[i21] *= (int)d;
                i9 -= i9;
                Test.lArrFld = Test.lArrFld;
                Test.instanceCount = i19;
                i9 = i19;
                l1 -= Test.byFld;
            }
        }
        vMeth_check_sum += i9 + i19 + i20 + i21 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr3);
    }

    public static float fMeth(int i4, float f1, int i5) {

        int i6=-9144, i7=-2, i8=-9, i22=57, iArr1[]=new int[N];
        long l=-255093258L;
        double d1=1.44451;

        FuzzerUtils.init(iArr1, 12);

        for (i6 = 1; i6 < 310; i6++) {
            f1 += i4;
            i4 >>= i6;
            if (((i4++) - (--Test.instanceCount)) != i7) continue;
            for (l = 1; l < 5; l += 3) {
                try {
                    i8 = (i7 / 186);
                    i5 = (i6 / 38);
                    i8 = (i7 / iArr1[i6]);
                } catch (ArithmeticException a_e) {}
                vMeth();
                i5 = -10;
                f1 -= -3;
            }
            i5 *= (int)Test.instanceCount;
            Test.sFld -= (short)i5;
        }
        iArr1[(i4 >>> 1) % N] ^= i8;
        for (d1 = 367; d1 > 15; d1 -= 3) {
            Test.instanceCount = Test.byFld;
            i5 += (int)(((d1 * i6) + i4) - i8);
        }
        long meth_res = i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + l + i8 + Double.doubleToLongBits(d1) + i22 +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=122, i1=26971, i2=10, i3=108, i23=-140, iArr[]=new int[N];
        boolean b=true;
        float f=34.665F, f4=2.523F, f5=1.718F;

        FuzzerUtils.init(iArr, 9);

        for (i = 3; i < 258; i++) {
            Test.instanceCount -= (i + ((i1 + i) - i1));
            i2 = 1;
            while (++i2 < 99) {
                dFld += Math.abs(Math.max(i, i2) + (-3064 - Math.max(Test.instanceCount, 1119L)));
                i1 = (int)((iArr[i - 1]++) * (Test.instanceCount++));
                switch (((i2 % 8) * 5) + 26) {
                case 30:
                    i1 += (int)(-8715191828644963032L + (i2 * i2));
                    i1 += (i2 * i2);
                    b = b;
                    for (f = 1; f > 1; --f) {
                        Test.fArrFld[(int)(f)] += fMeth(i, f, i2);
                        i3 += i1;
                        i3 = -48543;
                        i1 = i2;
                    }
                case 60:
                case 58:
                    i3 = -44901;
                    f4 = 0;
                    i23 = 1;
                    while (++i23 < 1) {
                        switch (((i23 % 5) * 5) + 85) {
                        case 98:
                            i1 = (int)Test.instanceCount;
                            Test.instanceCount += i23;
                            i3 = (int)Test.instanceCount;
                            break;
                        case 97:
                            switch (((i3 >>> 1) % 10) + 41) {
                            case 41:
                                i1 += (((i23 * i23) + f4) - Test.instanceCount);
                                Test.fArrFld = FuzzerUtils.float1array(N, (float)0.256F);
                                Test.instanceCount -= (long)f4;
                            case 42:
                                f5 += Test.instanceCount;
                                iArr = FuzzerUtils.int1array(N, (int)-31439);
                                break;
                            case 43:
                                Test.dArrFld[i2 - 1] += i23;
                                Test.fArrFld[i] -= i23;
                                i1 += i1;
                                break;
                            case 44:
                                if (b) continue;
                                break;
                            case 45:
                                Test.instanceCount = i23;
                                break;
                            case 46:
                                Test.instanceCount *= Test.instanceCount;
                            case 47:
                                Test.byFld -= (byte)i3;
                            case 48:
                                i3 += (i23 * i23);
                                break;
                            case 49:
                                Test.instanceCount += i3;
                                break;
                            case 50:
                                Test.lArrFld[i] >>= i2;
                            default:
                                i1 <<= (int)52L;
                            }
                            break;
                        case 89:
                        case 102:
                            i1 += i23;
                            break;
                        case 105:
                            Test.byFld += (byte)(i23 * Test.instanceCount);
                            break;
                        default:
                            i3 -= (int)-3394766294L;
                        }
                    }
                    break;
                case 61:
                    i1 += (((i2 * Test.instanceCount) + i) - Test.instanceCount);
                    break;
                case 51:
                    Test.lArrFld = Test.lArrFld;
                    break;
                case 63:
                    iArr[i2] = (int)Test.instanceCount;
                    break;
                case 43:
                    Test.sFld *= (short)i1;
                    break;
                case 56:
                    f5 = 12080;
                    break;
                default:
                    i1 *= i;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("b f i3 = " + (b ? 1 : 0) + "," + Float.floatToIntBits(f) + "," + i3);
        FuzzerUtils.out.println("f4 i23 f5 = " + Float.floatToIntBits(f4) + "," + i23 + "," + Float.floatToIntBits(f5));
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld Test.sFld Test.fArrFld = " + Test.byFld + "," + Test.sFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.lArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
