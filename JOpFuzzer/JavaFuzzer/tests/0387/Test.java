// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3462266633538481799L;
    public static double dFld=2.12527;
    public static boolean bFld=true;
    public static float fFld=-7.997F;
    public int iFld=-8;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static int iMeth(float f1) {

        int i3=0;
        float f2=0.880F;

        i3 += (int)((i3 * (i3++)) + f2);
        long meth_res = Float.floatToIntBits(f1) + i3 + Float.floatToIntBits(f2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i6, float f3, int i7) {

        int i8=21399, i9=-41008, i10=153, i11=41556;
        double d1=87.25850;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.898F);

        Test.instanceCount *= (long)(((-10425 + Test.dFld) - -15349) + (Math.max(60536, i7) + iMeth(f3)));
        i8 = 1;
        while (++i8 < 331) {
            for (d1 = 1; d1 < 5; d1++) {
                if (Test.bFld) {
                    f3 *= i9;
                } else if (Test.bFld) {
                    i7 = (int)Test.instanceCount;
                    Test.dFld = i9;
                    fArr[(int)(d1 - 1)] = i9;
                    i6 -= (int)Test.instanceCount;
                    vMeth1_check_sum += i6 + Float.floatToIntBits(f3) + i7 + i8 + Double.doubleToLongBits(d1) + i9 +
                        i10 + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                } else if (false) {
                    i7 *= 201;
                    i6 += (int)d1;
                    for (i10 = 1; i10 < 2; i10++) {
                        i6 >>>= i11;
                        i6 = (int)Test.instanceCount;
                        i9 += (i10 - i8);
                    }
                }
            }
        }
        vMeth1_check_sum += i6 + Float.floatToIntBits(f3) + i7 + i8 + Double.doubleToLongBits(d1) + i9 + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i=-60587, i1=53363, i2=-3258, i4=-41964, i5=68;
        short s=26879, sArr[]=new short[N];
        double d=0.114101;
        long l=1951329061L;
        float f=-109.121F;

        FuzzerUtils.init(sArr, (short)26235);

        for (i = 148; i > 6; --i) {
            s = (short)i;
            i1 = (int)((-Math.min(i, i1)) * ((-1280706389946510264L + (60940 >>> (Test.instanceCount * i1))) - (d +
                Test.instanceCount)));
            for (l = 1; l < 11; l++) {
                f += (((l * l) + Test.instanceCount) - i);
                i2 += (int)(((Test.instanceCount + -1.100468) - (i2 / (i1 | 1))) + (++Test.instanceCount));
                i1 -= iMeth(iMeth(f) - l);
                i2 += (int)(l * i1);
            }
            i1 += (i * i);
            i1 += (i ^ l);
        }
        for (i4 = 8; 194 > i4; i4++) {
            vMeth1(i, 0.915F, 4);
            sArr[i4] -= (short)i1;
            i5 >>= (int)l;
            i5 <<= i1;
        }
        vMeth_check_sum += i + i1 + s + Double.doubleToLongBits(d) + l + i2 + Float.floatToIntBits(f) + i4 + i5 +
            FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i12=3, i13=-135, i14=40, i15=-1, i16=13, i17=5, i18=-8244, i19=4, i20=-14, i21=8;
        short s1=-29538, s2=-18563;
        byte by=104;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3500338361956596176L);

        vMeth();
        for (i12 = 7; i12 < 207; i12++) {
            if (Test.bFld) {
                i13 += (i12 | (long)Test.fFld);
                i13 = i12;
                for (i14 = 1; i14 < 126; i14++) {
                    lArr = lArr;
                    for (i16 = 1; i16 < 2; ++i16) {
                        i13 = (int)12L;
                        Test.instanceCount = i13;
                        iFld >>= (int)Test.instanceCount;
                    }
                    iFld = s1;
                    by = (byte)i15;
                    if (Test.bFld) break;
                    for (i18 = 1; i18 < 2; ++i18) {
                        i19 = i13;
                        i19 *= i12;
                        i17 += -2;
                        by += (byte)(i18 * i19);
                    }
                    iFld += (int)Test.instanceCount;
                    for (i20 = 2; i20 > 1; --i20) {
                        i17 += i20;
                        i13 <<= (int)Test.instanceCount;
                        Test.instanceCount <<= i12;
                        i15 <<= (int)Test.instanceCount;
                    }
                }
                Test.dFld -= i12;
            } else {
                i17 *= (int)Test.instanceCount;
                i21 += (i12 ^ Test.instanceCount);
                Test.instanceCount += (((i12 * i15) + i21) - i13);
                s2 += (short)i13;
            }
        }

        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("s1 by i18 = " + s1 + "," + by + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("s2 lArr = " + s2 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld iFld = " + Float.floatToIntBits(Test.fFld) + "," + iFld);

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest vMeth1
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
