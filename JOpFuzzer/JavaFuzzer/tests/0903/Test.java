// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5148L;
    public static float fFld=0.1021F;
    public static byte byFld=94;
    public static boolean bFld=true;
    public static volatile int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -178);
        FuzzerUtils.init(Test.dArrFld, 2.79371);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8, long l, byte by) {

        int i9=13, i10=69, i11=62180, i12=-33873, i13=10945;
        double d2=69.15785;
        boolean b=false;

        for (i9 = 8; i9 < 174; ++i9) {
            d2 -= i8;
            Test.instanceCount = 2556437726L;
            Test.instanceCount += i9;
            i8 ^= (int)Test.instanceCount;
            for (i11 = 1; i11 < 10; i11++) {
                i8 *= (int)Test.instanceCount;
                Test.iArrFld[i11 - 1] += i10;
                i13 = 1;
                while (++i13 < 2) {
                    if (b) continue;
                    Test.instanceCount -= Test.instanceCount;
                    Test.iArrFld[i9 - 1] = -139;
                    i10 = i8;
                }
                try {
                    i12 = (Test.iArrFld[i9] / i11);
                    i8 = (i13 / i10);
                    i12 = (i10 / Test.iArrFld[i11 + 1]);
                } catch (ArithmeticException a_e) {}
            }
            i8 += (int)(-106L + (i9 * i9));
        }
        vMeth1_check_sum += i8 + l + by + i9 + i10 + Double.doubleToLongBits(d2) + i11 + i12 + i13 + (b ? 1 : 0);
    }

    public static boolean bMeth(double d1, int i7) {

        int i14=12842, i15=0, i16=5, i17=35973, i18=53;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 59203L);

        vMeth1(i7, Test.instanceCount, Test.byFld);
        for (i14 = 5; i14 < 285; i14++) {
            switch (((i15 >>> 1) % 1) + 88) {
            case 88:
                for (i16 = 6; 1 < i16; i16 -= 3) {
                    Test.fFld += (-28278L + (i16 * i16));
                    i15 -= (int)Test.instanceCount;
                    i18 = i18;
                    switch (((i16 >>> 1) % 2) + 110) {
                    case 110:
                        Test.fFld -= Test.fFld;
                        i17 = (int)Test.instanceCount;
                        break;
                    case 111:
                        if (true) {
                            lArr[i14 - 1] *= i15;
                            i18 *= i17;
                            if (b1) break;
                        } else if (b1) {
                            b1 = b1;
                        }
                        break;
                    default:
                        Test.instanceCount += (((i16 * Test.fFld) + i16) - Test.fFld);
                    }
                }
                break;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i7 + i14 + i15 + i16 + i17 + i18 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(int i) {

        int i1=107, i2=-13, i3=47862, i4=157, i5=56729, i6=-75;
        double d=-39.62539;

        for (i1 = 5; i1 < 212; i1++) {
            i3 = 1;
            while ((i3 += 3) < 8) {
                for (i4 = i1; i4 < 4; ++i4) {
                    i += (((i4 * Test.fFld) + Test.instanceCount) - i);
                    i += (int)(Test.instanceCount * i4);
                }
                switch (((i1 % 5) * 5) + 110) {
                case 112:
                    for (d = 1; d < 4; d++) {
                        Test.instanceCount = Test.byFld;
                        if (bMeth(4.60535, i)) {
                            Test.instanceCount = Test.byFld;
                            Test.iArrFld[(int)(d)] = (++Test.iArrFld[i3]);
                        } else if (Test.bFld) {
                            i2 += (int)(((d * Test.instanceCount) + i6) - i2);
                            i = (i6--);
                            Test.instanceCount += (long)Test.dArrFld[(int)(d)];
                            i2 = (int)Test.instanceCount;
                        } else if (false) {
                            Test.iArrFld[i1 - 1] >>= (int)(++Test.instanceCount);
                        } else {
                            Test.iArrFld[i1] = (int)Test.fFld;
                        }
                    }
                case 127:
                case 134:
                    i5 -= i4;
                    break;
                case 124:
                    Test.iArrFld[i1] <<= -12792;
                    break;
                case 133:
                    Test.instanceCount = 1514195769696373891L;
                default:
                    Test.instanceCount = Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + i6;
    }

    public void mainTest(String[] strArr1) {

        int i19=-11, i20=-6, i21=-26300, i22=-10, i23=11, i24=-9, i25=-178, i26=-3, i27=104, i28=0, i29=33921;
        short s=32168;
        float f=-86.771F, f1=38.929F;
        double d3=106.111893;

        vMeth(i19);
        Test.iArrFld = Test.iArrFld;
        Test.dArrFld[(i19 >>> 1) % N] %= (i19 | 1);
        i20 = 1;
        while (++i20 < 311) {
            Test.dArrFld[i20] = -4444997616602969095L;
            i19 = s;
            s >>>= (short)i20;
            i19 += i20;
            i19 += i20;
        }
        for (i21 = 174; i21 > 1; i21--) {
            if (Test.bFld) break;
        }
        Test.iArrFld[(-67 >>> 1) % N] = (int)Test.fFld;
        i23 = 1;
        while (++i23 < 146) {
            Test.instanceCount -= Test.instanceCount;
            i22 = -19491;
            Test.fFld -= 28272;
        }
        for (f = 3; f < 168; ++f) {
            for (i25 = 7; i25 < 152; i25++) {
                Test.iArrFld[i25] -= i24;
                if (Test.bFld) break;
                for (f1 = 1; f1 < 2; ++f1) {
                    Test.fFld = (float)-101.44188;
                    i27 = i26;
                    Test.byFld -= (byte)i26;
                    Test.fFld += -183;
                    i24 = i25;
                    d3 = -7;
                }
                for (i28 = 1; i28 < 2; ++i28) {
                    s = (short)10;
                }
                Test.fFld = -1.614F;
            }
        }

        FuzzerUtils.out.println("i19 i20 s = " + i19 + "," + i20 + "," + s);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("f i24 i25 = " + Float.floatToIntBits(f) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 f1 i27 = " + i26 + "," + Float.floatToIntBits(f1) + "," + i27);
        FuzzerUtils.out.println("d3 i28 i29 = " + Double.doubleToLongBits(d3) + "," + i28 + "," + i29);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.bFld Test.iArrFld Test.dArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 bMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
