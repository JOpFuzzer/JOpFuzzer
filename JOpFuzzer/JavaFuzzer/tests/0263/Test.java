// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2669362073L;
    public static float fFld=-1.858F;
    public static long lFld=131L;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static int iMeth() {

        int i3=130;

        Test.fFld += i3;
        long meth_res = i3;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d, int i) {

        int i1=-6, i2=-1, i4=14, i5=2971, i6=36, i7=64511, i8=-35046, i9=2, iArr[][]=new int[N][N];
        byte by=24;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -21215L);
        FuzzerUtils.init(iArr, -24667);

        for (long l : lArr) {
            i = Integer.reverseBytes(i);
            for (i1 = 1; i1 < 4; ++i1) {
                i = (int)((Math.abs(d) - i) * i2);
            }
            i += iMeth();
            iArr[(182 >>> 1) % N][(i2 >>> 1) % N] = i1;
            l -= iArr[(i1 >>> 1) % N][(i >>> 1) % N];
            for (i4 = 1; 4 > i4; i4++) {
                for (i6 = i4; i6 < 2; ++i6) {
                    i += (((i6 * i) + by) - i6);
                    if (i7 != 0) {
                        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + i4 + i5 + i6 + i7 + by + i8 + i9
                            + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                }
                for (i8 = 1; i8 < 2; i8++) {
                    i9 += (int)((Test.instanceCount * i8) * iMeth());
                    i = (int)(((-102.700F - iMeth()) + (Test.instanceCount - i5)) - 132);
                    i += (i8 * i8);
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + i4 + i5 + i6 + i7 + by + i8 + i9 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(boolean b, int i16, float f2) {

        double d2=-42.21592;
        int i17=216, i18=6, i19=-2109, i20=1, i21=144, i22=56503, iArr2[]=new int[N];
        short s=-13342;

        FuzzerUtils.init(iArr2, 4);

        iArr2[(i16 >>> 1) % N] <<= (int)Test.instanceCount;
        vMeth(d2, i16);
        for (i17 = 7; i17 < 184; i17++) {
            for (i19 = 1; 9 > i19; ++i19) {
                for (i21 = 2; i21 > 1; --i21) {
                    i22 <<= (int)Test.instanceCount;
                    if (b) continue;
                    Test.instanceCount *= Test.lFld;
                    s += (short)(((i21 * i17) + f2) - i16);
                    Test.instanceCount &= 160;
                    if (b) {
                        Test.lFld += (((i21 * i19) + i20) - Test.instanceCount);
                    }
                    if (b) {
                        Test.fFld += Test.lFld;
                        Test.lFld += (((i21 * i22) + i17) - i16);
                    } else if (b) {
                        i20 = i19;
                    }
                }
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i16 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d2) + i17 + i18 +
            i19 + i20 + i21 + i22 + s + FuzzerUtils.checkSum(iArr2);
    }

    public static byte byMeth(float f1) {

        int i14=1, i15=-24792, i23=-5, i24=-4, i25=-3, i26=23626, i27=-17180, iArr3[]=new int[N];
        boolean b1=false;
        float f3=-50.475F;
        byte by1=19;

        FuzzerUtils.init(iArr3, -29503);

        for (i14 = 13; i14 < 369; i14++) {
            vMeth1(b1, i14, f1);
        }
        for (i23 = 209; i23 > 1; --i23) {
            i24 >>= i23;
            for (f3 = 1; f3 < 8; ++f3) {
                for (i26 = (int)(f3); i26 < 2; ++i26) {
                    Test.instanceCount += (i26 + i23);
                    iArr3[i23] = 19552;
                    i25 += i14;
                    i15 -= (int)Test.instanceCount;
                    iArr3[i23 + 1] = (int)Test.instanceCount;
                    iArr3 = iArr3;
                    by1 = (byte)i24;
                    i24 &= i14;
                    Test.instanceCount = i23;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i14 + i15 + (b1 ? 1 : 0) + i23 + i24 + Float.floatToIntBits(f3) +
            i25 + i26 + i27 + by1 + FuzzerUtils.checkSum(iArr3);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i10=21, i11=-2, i12=245, i13=-49, i28=-166, i29=-40676, i30=6278, i31=-62401, i32=13, i33=48694, i34=4,
            i35=27463, i36=7863, iArr1[]=new int[N];
        float f=2.677F, fArr[]=new float[N];
        double d1=-46.45635;
        byte by2=-33;
        boolean b2=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(fArr, -96.188F);
        FuzzerUtils.init(iArr1, -3);
        FuzzerUtils.init(sArr, (short)23508);

        vMeth((i10++) - Test.instanceCount, iMeth());
        for (f = 356; f > 21; --f) {
            for (i12 = (int)(f); i12 < 75; i12++) {
                vMeth(13 - fArr[i12 + 1], iMeth());
                iArr1[(int)(f + 1)] -= (int)Math.sqrt(Math.sqrt(d1++));
                fArr[i12] = byMeth(2.887F);
                Test.fFld += i12;
                iArr1[(int)(f)] -= (int)Test.lFld;
            }
            i13 += i10;
            for (i28 = 1; i28 < 75; i28++) {
                i11 = (int)Test.lFld;
                d1 *= d1;
                Test.lFld -= i13;
            }
            i30 = 75;
            do {
                Test.fFld -= Test.lFld;
                by2 = (byte)i29;
                i29 = 2;
            } while (--i30 > 0);
            Test.instanceCount -= i28;
            i13 += (int)(((f * Test.lFld) + Test.instanceCount) - i10);
        }
        for (i31 = 10; i31 < 259; ++i31) {
            sArr[i31] *= (short)i10;
            if (b2) {
                for (i33 = 2; i33 < 101; i33++) {
                    i13 -= (int)f;
                    for (i35 = 1; i35 < 2; ++i35) {
                        short s1=20042;
                        try {
                            i13 = (i31 / 108533654);
                            i10 = (-36373 % i32);
                            i34 = (i31 / -195);
                        } catch (ArithmeticException a_e) {}
                        Test.lFld &= s1;
                        i32 -= i12;
                        s1 += (short)(i35 + i29);
                        iArr1[i35] &= (int)1191080504L;
                    }
                }
            } else {
                i32 = i12;
            }
        }

        FuzzerUtils.out.println("i10 f i11 = " + i10 + "," + Float.floatToIntBits(f) + "," + i11);
        FuzzerUtils.out.println("i12 i13 d1 = " + i12 + "," + i13 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("by2 i31 i32 = " + by2 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 b2 fArr = " + i36 + "," + (b2 ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("iArr1 sArr = " + FuzzerUtils.checkSum(iArr1) + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.lFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.lFld);

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest vMeth1 byMeth
//DEBUG  iMeth ->  iMeth vMeth mainTest vMeth1 byMeth
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 byMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}
