// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8606404491927278185L;
    public static double dFld=-2.129809;
    public static volatile boolean bFld=false;

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static int iMeth(int i2) {

        int i3=156;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -32815L);

        lArr[(134 >>> 1) % N][(-31651 >>> 1) % N] += (((i3--) - (i3 * i3)) * i2);
        long meth_res = i2 + i3 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i, int i1) {

        int i4=-7;
        float f=-1.678F;

        i >>= (int)((i >>>= iMeth(i4)) - f);
        Test.instanceCount = (((-62526 - (i1 + -64778)) + i1) - ((-(i4 -= i)) + (--i4)));
        vSmallMeth_check_sum += i + i1 + i4 + Float.floatToIntBits(f);
    }

    public static double dMeth(int i7, boolean b) {

        int i8=55469, i9=-14, i10=-891, i11=49413, i12=-50691, iArr[]=new int[N];
        double d1=1.14203;
        byte by=-92;

        FuzzerUtils.init(iArr, -25597);

        for (i8 = 10; i8 < 272; ++i8) {
            for (d1 = 1; d1 < 6; ++d1) {
                float f3=40.673F;
                Test.dFld -= Math.min((int)((i10 - by) + (Test.instanceCount - i8)), i8);
                i7 -= (++i9);
                for (i11 = (int)(d1); i11 < 2; i11++) {
                    i7 += i11;
                }
                b = b;
                Test.instanceCount += (long)(((d1 * by) + Test.instanceCount) - i11);
                vSmallMeth(i9, i8);
                f3 = 11;
                by = (byte)i9;
            }
            iArr[i8 + 1] *= (int)Test.instanceCount;
            iArr = iArr;
            i9 = i11;
            iArr[i8 - 1] <<= i7;
        }
        long meth_res = i7 + (b ? 1 : 0) + i8 + i9 + Double.doubleToLongBits(d1) + i10 + by + i11 + i12 +
            FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(int i5, double d, long l) {

        int i6=4681, i13=-203, iArr1[]=new int[N];
        float f2=-115.269F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 60069);
        FuzzerUtils.init(lArr1, 14L);

        i5 = (int)(i5 - ((i5 + Test.instanceCount) + (++i6)));
        i6 = (int)((f2 -= (i6 - i6)) - ((i5 - 241) - dMeth(i6, Test.bFld)));
        i6 += 106;
        i13 = 1;
        while (++i13 < 288) {
            i5 >>>= i13;
            i5 = -212;
            i6 -= -90;
            i5 = i5;
            i6 += (i13 + i5);
            i6 |= i13;
            i6 = i5;
            iArr1[i13] /= (int)(i6 | 1);
            Test.instanceCount *= i13;
        }
        l >>= l;
        lArr1[(42501 >>> 1) % N] += (long)Test.dFld;
        long meth_res = i5 + Double.doubleToLongBits(d) + l + i6 + Float.floatToIntBits(f2) + i13 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f1=125.629F;
        int i15=60024, i16=-61180, i17=-89, i18=42089, i19=-13, i20=2, i21=-1, i22=7171, i23=-11, i24=17127,
            iArr2[]=new int[N];
        long l1=-10297L;

        FuzzerUtils.init(iArr2, -12396);

        for (int smallinvoc=0; smallinvoc<635; smallinvoc++) vSmallMeth(iMeth((int)(-(f1++))), (int)((lMeth(i15,
            Test.dFld, Test.instanceCount) + 226) + i15));
        i15 = i15;
        for (i16 = 13; 218 > i16; ++i16) {
            i15 += i17;
            i17 += i16;
            for (l1 = i16; l1 < 122; ++l1) {
                boolean b1=true;
                f1 = i16;
                iArr2[(int)(l1)] <<= i16;
                Test.instanceCount |= i18;
                Test.bFld = b1;
                Test.instanceCount = Test.instanceCount;
                f1 -= i15;
                i17 = -49;
            }
            for (i19 = 7; i19 < 122; i19++) {
                i18 = i16;
                i20 += (((i19 * i15) + i17) - i16);
                i20 += (i19 + f1);
                i18 += (i19 * i19);
                for (i21 = 1; i21 < 2; ++i21) {
                    short s=12903;
                    f1 *= 216;
                    i23 = 82;
                    i20 -= i16;
                    i23 += (i21 - i17);
                    i18 >>>= 50927;
                    i17 += (int)116.115172;
                    i18 -= (int)-6443284399512594642L;
                    s += (short)(((i21 * Test.instanceCount) + l1) - i15);
                    i15 = (int)f1;
                }
                iArr2[i16 - 1] -= 7;
                i24 = i16;
            }
        }

        FuzzerUtils.out.println("f1 i15 i16 = " + Float.floatToIntBits(f1) + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 l1 i18 = " + i17 + "," + l1 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test dMeth lMeth
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test dMeth lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}
