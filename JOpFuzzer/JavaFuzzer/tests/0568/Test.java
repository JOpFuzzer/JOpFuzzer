// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7346286326927859309L;
    public static int iFld=3;
    public static float fFld=0.179F;
    public static byte byFld=-22;
    public double dFld=-1.75653;
    public boolean bFld=true;
    public short sFld=31071;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, boolean b1) {

        int i6=11, i7=-201, i8=4, i9=-143, i10=-177, i11=-37611, i12=1, i13=11739;
        float f1=2.35F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 0.997F);

        l1 -= Test.iFld;
        for (i6 = 5; i6 < 126; ++i6) {
            for (i8 = 1; i8 < 13; ++i8) {
                f1 += i8;
                i7 >>= i9;
                i9 ^= Test.iFld;
                fArr1[i6] -= f1;
                i10 = 2;
                while (--i10 > 0) {
                    f1 *= -51537;
                }
                i11 = (int)Test.instanceCount;
                for (i12 = 1; i12 < 2; ++i12) {
                    short s=15929;
                    i13 <<= (int)Test.instanceCount;
                    i13 <<= i10;
                    f1 += 6700663559518123273L;
                    Test.fFld += (((i12 * f1) + Test.iFld) - s);
                }
            }
        }
        vMeth_check_sum += l1 + (b1 ? 1 : 0) + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static int iMeth() {

        boolean b=false;
        float f=2.724F, fArr[]=new float[N];
        int i14=-7, i15=0, i16=0, i17=6616, i18=7, i19=-65042, i20=219;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 105.20F);
        FuzzerUtils.init(lArr, 958004742L);

        b = (!((fArr[(Test.iFld >>> 1) % N] = Test.iFld) != f));
        vMeth(Test.instanceCount, b);
        for (i14 = 1; 201 > i14; i14++) {
            i16 += (i14 * f);
            Test.fFld += i14;
            i15 ^= 15294;
            for (i17 = i14; i17 < 8; ++i17) {
                Test.iFld >>>= i16;
                Test.iArrFld[i17 + 1] <<= Test.byFld;
                Test.instanceCount -= (long)Test.fFld;
            }
        }
        for (i19 = 1; i19 < 146; ++i19) {
            i16 = Test.iFld;
            Test.instanceCount += (((i19 * i14) + i18) - i20);
        }
        Test.iFld = i14;
        lArr[(i19 >>> 1) % N] = Test.instanceCount;
        long meth_res = (b ? 1 : 0) + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(long l, double d, int i5) {


        Test.iArrFld[(i5 >>> 1) % N] *= (int)(((l + i5) + (i5 = (int)Test.instanceCount)) * (i5++));
        iMeth();
        vSmallMeth_check_sum += l + Double.doubleToLongBits(d) + i5;
    }

    public void mainTest(String[] strArr1) {

        int i=11074, i1=-2, i2=6, i3=55921, i4=-6, i21=57, i22=1, i23=-2, i24=9, i25=2;
        byte byArr[]=new byte[N];
        float fArr2[]=new float[N];

        FuzzerUtils.init(byArr, (byte)-33);
        FuzzerUtils.init(fArr2, -48.217F);

        i = i;
        for (i1 = 12; i1 < 302; ++i1) {
            for (i3 = 5; i3 < 87; i3++) {
                switch (((i3 % 8) * 5) + 17) {
                case 32:
                    i4 -= 5;
                    byArr[i1] += (byte)-99.923F;
                    break;
                case 39:
                    i2 = (Test.iArrFld[i1] >> (-(--Test.iArrFld[i3 - 1])));
                    i2 += i;
                case 35:
                    for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(Test.instanceCount, dFld, i2);
                    try {
                        Test.iArrFld[i3] = (-117 % i4);
                        Test.iFld = (Test.iArrFld[i1 + 1] / 121);
                        i2 = (Test.iArrFld[i3 - 1] % i);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 56:
                case 43:
                    i4 += i3;
                    if (bFld) continue;
                case 48:
                    Test.iFld -= 47230;
                    Test.instanceCount = Test.iFld;
                    i = 5;
                    for (i21 = 1; i21 < 2; ++i21) {
                        Test.iArrFld[i3 - 1] = (int)dFld;
                        sFld -= (short)i21;
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)3);
                        fArr2[i21] += (float)dFld;
                        i4 <<= -107;
                    }
                    break;
                case 31:
                    for (i23 = i3; i23 < 2; i23++) {
                        dFld += Test.fFld;
                        Test.iArrFld[i3 + 1] = Test.byFld;
                        sFld *= (short)i;
                        Test.iFld = i25;
                        i24 *= i25;
                        i4 += (int)Test.fFld;
                        i22 += i23;
                        bFld = false;
                    }
                    break;
                case 18:
                    Test.fFld = i25;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i21 = " + i3 + "," + i4 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 byArr fArr2 = " + i25 + "," + FuzzerUtils.checkSum(byArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld dFld bFld = " + Test.byFld + "," + Double.doubleToLongBits(dFld) + "," +
            (bFld ? 1 : 0));
        FuzzerUtils.out.println("sFld Test.iArrFld = " + sFld + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
