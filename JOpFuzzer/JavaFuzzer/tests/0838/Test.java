// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=897782733L;
    public int iFld=-10;
    public static float fFld=-50.618F;
    public static int iFld1=-36;
    public static boolean bFld=true;
    public static int iFld2=-143;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -41712);
        FuzzerUtils.init(Test.fArrFld, -60.1011F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s, long l, int i) {

        double d=0.99024;
        float f2=1.334F;
        int i1=-138, i2=-240, iArr[][]=new int[N][N];
        boolean b=false;

        FuzzerUtils.init(iArr, -74);

        d *= 54.74057;
        f2 *= f2;
        i1 = 1;
        do {
            i *= i;
            i2 = 1;
            while (++i2 < 5) {
                i *= (int)f2;
                if (false) continue;
            }
            i -= i1;
            iArr = iArr;
            if (b) break;
            i += (i1 - f2);
            s = (short)i;
            i = i;
            iArr[i1][i1 - 1] = i;
        } while (++i1 < 314);
        iArr[(i >>> 1) % N][(i >>> 1) % N] *= i2;
        vMeth1_check_sum += s + l + i + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i1 + i2 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(float f, float f1, byte by) {

        short s1=844;
        int i3=-34004, i4=0, i5=-11, i6=14, i7=-52518, i8=3, i9=-116, i10=0, i11=-10, iArr1[]=new int[N];
        boolean b1=false, bArr[][]=new boolean[N][N];
        double d1=9.68459;

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, 188);

        vMeth1(s1, Test.instanceCount, i3);
        for (i4 = 306; i4 > 18; i4 -= 2) {
            for (i6 = 11; i6 > 1; i6--) {
                bArr[i4 - 1][i4] = b1;
                Test.instanceCount += (i6 - by);
                for (i8 = 1; i8 < 2; i8++) {
                    try {
                        i9 = (i9 % 1382039274);
                        i3 = (-42086 / iArr1[i4 - 1]);
                        iArr1[i8 + 1] = (i8 % i7);
                    } catch (ArithmeticException a_e) {}
                    iArr1[i6 - 1] -= by;
                }
                d1 -= f;
                switch ((i4 % 6) + 74) {
                case 74:
                    for (i10 = 1; i10 < 2; i10++) {
                        f1 += (float)-30.3277;
                        Test.instanceCount += i10;
                        i9 += (i10 * i10);
                    }
                case 75:
                    Test.instanceCount += (i6 * f);
                case 76:
                    i3 += i6;
                case 77:
                    i11 |= i9;
                case 78:
                    i3 = (int)Test.instanceCount;
                    break;
                case 79:
                    Test.instanceCount = s1;
                    break;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + by + s1 + i3 + i4 + i5 + i6 + i7 + (b1
            ? 1 : 0) + i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth() {

        byte by1=-86;
        int i12=-127, i13=196, i14=50, i15=-3;
        short s2=26021;

        vMeth(Test.fFld, Test.fFld, by1);
        i12 = 1;
        while (++i12 < 357) {
            Test.iFld1 -= (int)Test.instanceCount;
            i13 = 1;
            while (++i13 < 5) {
                Test.fFld += (i13 * i13);
                Test.iArrFld[i13] += i12;
                for (i14 = 1; i14 < 1; i14 += 3) {
                    double d2=-87.50080;
                    Test.iFld1 = i13;
                    switch ((i12 % 5) + 6) {
                    case 6:
                        Test.iFld1 += i14;
                        break;
                    case 7:
                        try {
                            i15 = (i12 / i12);
                            i15 = (207 / i13);
                            i15 = (-163 % Test.iFld1);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount = s2;
                    case 8:
                        Test.iFld1 *= i14;
                        Test.iArrFld[i14 + 1] *= (int)d2;
                        Test.instanceCount += by1;
                        break;
                    case 9:
                        Test.bFld = Test.bFld;
                    case 10:
                        Test.iArrFld[i13] = i15;
                        break;
                    default:
                        i15 += (((i14 * Test.iFld1) + i14) - Test.instanceCount);
                    }
                }
            }
        }
        long meth_res = by1 + i12 + i13 + i14 + i15 + s2;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i16=50875, i17=-2, i18=-7875, i19=-2, i20=-65354;
        byte by2=35, byArr[]=new byte[N];
        short s3=27880;

        FuzzerUtils.init(byArr, (byte)-16);

        byArr[(iFld >>> 1) % N] -= (byte)Test.instanceCount;
        Test.instanceCount = (iFld * lMeth());
        iFld /= (int)(iFld | 1);
        i16 = 1;
        do {
            Test.instanceCount += (-140 + (i16 * i16));
            Test.bFld = Test.bFld;
            lArrFld[i16] |= Test.instanceCount;
            Test.instanceCount += (i16 ^ Test.iFld2);
            for (i17 = 2; 68 > i17; ++i17) {
                for (i19 = 1; i19 < 2; ++i19) {
                    double d3=-39.69080;
                    Test.fArrFld[i16] = -7077L;
                    switch ((i17 % 9) + 74) {
                    case 74:
                        by2 += (byte)Test.instanceCount;
                        lArrFld = lArrFld;
                        Test.instanceCount += (10 + (i19 * i19));
                    case 75:
                        s3 += (short)(((i19 * Test.fFld) + Test.iFld2) - i16);
                        Test.fFld -= i16;
                        break;
                    case 76:
                        if (true) {
                            i20 = Test.iFld2;
                        } else {
                            Test.iFld2 = Test.iFld2;
                            Test.fFld += i19;
                            Test.fFld += s3;
                            Test.iFld1 += iFld;
                        }
                        iFld -= Test.iFld2;
                    case 77:
                        d3 *= 126;
                        iFld -= (int)d3;
                        iFld *= by2;
                    case 78:
                        iFld = i20;
                        Test.iArrFld[i19 + 1] = iFld;
                        break;
                    case 79:
                        Test.instanceCount += i17;
                        break;
                    case 80:
                        Test.fArrFld[i17 - 1] = (float)d3;
                        break;
                    case 81:
                        if (Test.bFld) break;
                        break;
                    case 82:
                        i20 = (int)Test.instanceCount;
                        break;
                    default:
                        Test.instanceCount = i17;
                    }
                }
            }
        } while (++i16 < 372);

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 by2 = " + i19 + "," + i20 + "," + by2);
        FuzzerUtils.out.println("s3 byArr = " + s3 + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld1 Test.bFld Test.iFld2 = " + Test.iFld1 + "," + (Test.bFld ? 1 : 0) + "," +
            Test.iFld2);
        FuzzerUtils.out.println("Test.iArrFld lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
