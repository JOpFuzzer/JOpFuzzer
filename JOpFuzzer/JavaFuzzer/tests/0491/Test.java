// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1465769875L;
    public static float fFld=-1.334F;
    public int iArrFld[]=new int[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i1=-56890, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -33382);

        iArr[(i1 >>> 1) % N] = i1;
        Test.instanceCount = -19900L;
        vMeth_check_sum += i1 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(long l, long l1) {

        int i2=10, i3=121, i4=-5, i5=55676, i6=-11, i7=-14, i8=-43784;
        boolean b=true;
        double d=-66.2900;
        byte by=-122;

        vMeth();
        for (i2 = 16; i2 < 365; ++i2) {
            if (b) {
                i3 = i3;
                Test.fFld = i2;
            } else if (b) {
                i3 *= 2;
            } else if (b) {
                for (i4 = 1; i4 < 5; i4++) {
                    for (i6 = 1; i6 < 2; i6++) {
                        if (b) break;
                        i3 *= (int)Test.fFld;
                        i5 <<= i6;
                        i7 |= i5;
                        i3 += i5;
                        d = i8;
                        by = (byte)i4;
                    }
                }
            } else {
                i8 = -7567;
            }
        }
        long meth_res = l + l1 + i2 + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i8 + by;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i, float f) {

        int i9=-4, i10=-3, i11=3, i12=-46, i13=108, i14=0, iArr1[]=new int[N];
        boolean b1=true;
        float fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, -14);
        FuzzerUtils.init(fArr, -72.1016F);
        FuzzerUtils.init(byArr, (byte)-91);

        i >>= (int)(i -= (int)(Math.abs(Test.instanceCount) ^ iMeth1(Test.instanceCount, Test.instanceCount)));
        iArr1[(i >>> 1) % N] = i;
        i += (int)Test.instanceCount;
        for (i9 = 10; i9 < 201; ++i9) {
            fArr[i9 + 1] = -7;
            for (i11 = 1; i11 < 8; ++i11) {
                if (b1) continue;
                i10 <<= i10;
                i10 += (((i11 * Test.instanceCount) + i12) - i);
                switch ((i9 % 4) + 109) {
                case 109:
                    for (i13 = 1; 2 > i13; ++i13) {
                        int i15=188;
                        byArr[i9] = (byte)i15;
                        iArr1[i11 + 1] = i15;
                        i10 *= (int)f;
                        i10 <<= i9;
                    }
                    break;
                case 110:
                    f += i11;
                    break;
                case 111:
                    iArr1[i9 + 1] <<= i13;
                    break;
                case 112:
                    i10 += (i11 + i13);
                }
            }
        }
        long meth_res = i + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + (b1 ? 1 : 0) + i13 + i14 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i16=1, i17=1, i18=-8183, i19=162, i20=-52430, i21=10, i22=242, i23=107, i24=52, i25=-9, i26=64219, i27=-4,
            i28=-171, i29=5;
        byte by1=-72;
        long lArr[]=new long[N];
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(lArr, -8106852158652018932L);
        FuzzerUtils.init(bArr, true);

        iMeth(5890, Test.fFld);
        for (i16 = 133; i16 > 8; --i16) {
            Test.fFld = i16;
        }
        for (i18 = 6; i18 < 355; i18++) {
            i17 += -52;
            lArr[i18 - 1] = by1;
            i19 += (int)Test.instanceCount;
            i19 += i18;
        }
        for (i20 = 205; i20 > 11; i20--) {
            bArr[i20 - 1][i20 - 1] = true;
            Test.instanceCount &= i17;
        }
        for (i22 = 8; i22 < 254; ++i22) {
            for (i24 = 1; i24 < 102; ++i24) {
                i17 *= -13601;
                for (i26 = 1; 2 > i26; ++i26) {
                    try {
                        i27 = (iArrFld[i24 + 1] % 51);
                        iArrFld[i24 - 1] = (iArrFld[i26] % -22832);
                        i21 = (-34622 % i25);
                    } catch (ArithmeticException a_e) {}
                }
                for (i28 = i22; i28 < 2; i28++) {
                    i17 += (i28 - i25);
                    iArrFld = FuzzerUtils.int1array(N, (int)-192);
                    iArrFld[i22 - 1] = i28;
                    i21 += (int)Test.instanceCount;
                    by1 = (byte)-43840;
                    i23 = i27;
                    i25 += (i28 | by1);
                    iArrFld[i28 + 1] >>= i29;
                    i17 += i28;
                    i25 += (i28 + i21);
                }
                Test.fFld += (i24 * i24);
                Test.instanceCount += i25;
                iArrFld[i22 - 1] ^= 49227;
            }
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 by1 i20 = " + i19 + "," + by1 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("lArr bArr = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld iArrFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
