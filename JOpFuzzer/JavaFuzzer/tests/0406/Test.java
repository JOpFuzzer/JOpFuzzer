// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-45L;
    public int iFld=-4;
    public volatile byte byFld=26;
    public boolean bFld=true;
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.783F);
        FuzzerUtils.init(Test.dArrFld, 0.13310);
        FuzzerUtils.init(Test.lArrFld, 4151694618L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i1=-7, i2=19835, i3=-5, i4=-1, i5=5, i6=7;
        double d=54.115615;
        float f=43.171F;

        i1 = 1;
        do {
            i2 *= -5;
            for (i3 = 1; i3 < 4; ++i3) {
                Test.fArrFld = Test.fArrFld;
                i2 -= (int)Test.instanceCount;
                i4 /= (int)(i3 | 1);
                Test.instanceCount = i1;
                i4 -= -28139;
                i2 &= i2;
                for (i5 = 2; i5 > 1; i5 -= 2) {
                    switch (((i6 >>> 1) % 8) + 117) {
                    case 117:
                        i6 += (int)d;
                        f += i5;
                        i6 <<= (int)Test.instanceCount;
                        Test.instanceCount += -12;
                    case 118:
                        f += i2;
                        break;
                    case 119:
                        i4 >>>= i6;
                        break;
                    case 120:
                    case 121:
                        d -= i2;
                        break;
                    case 122:
                    case 123:
                        i4 += i4;
                    case 124:
                        i4 += i5;
                        break;
                    default:
                        i2 -= (int)Test.instanceCount;
                    }
                }
            }
        } while (++i1 < 384);
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + Float.floatToIntBits(f);
    }

    public static long lMeth(int i) {

        int i7=11, i8=-1, i9=12, i10=-64486, i11=8, i12=13;
        long l=-4103L, l1=58667L;
        double d1=0.15137;
        float f1=3.203F;

        vMeth();
        i = i;
        for (i7 = 11; i7 < 201; i7++) {
            for (l = 1; l < 8; ++l) {
                for (l1 = i7; 2 > l1; l1++) {
                    Test.instanceCount -= i7;
                    Test.instanceCount &= i9;
                    i8 = -54;
                    d1 *= d1;
                }
                d1 -= -9L;
                for (i11 = (int)(l); i11 < 2; ++i11) {
                    Test.dArrFld[i11] = i;
                    i += i11;
                    f1 = i7;
                    i8 = i11;
                }
            }
        }
        long meth_res = i + i7 + i8 + l + i9 + l1 + i10 + Double.doubleToLongBits(d1) + i11 + i12 +
            Float.floatToIntBits(f1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth() {

        short s=-32254;
        int i13=-197;

        s += (short)(-(-lMeth(i13)));
        Test.fArrFld[(i13 >>> 1) % N] -= i13;
        vSmallMeth_check_sum += s + i13;
    }

    public void mainTest(String[] strArr1) {

        float f2=-4.742F;
        long l2=232L, l3=-13L;
        int i14=-2, i15=92, i16=-25667, i17=-10, i18=-46234, i19=-11, i20=3147, i21=-221, i22=3, iArr[]=new int[N];
        short s1=7080;
        double d2=-1.28679;

        FuzzerUtils.init(iArr, 42815);

        for (int smallinvoc=0; smallinvoc<592; smallinvoc++) vSmallMeth();
        Test.instanceCount = Test.instanceCount;
        f2 -= 0;
        Test.fArrFld[(-7 >>> 1) % N] = iFld;
        iFld >>>= iFld;
        for (l2 = 23; l2 < 376; l2++) {
            for (i15 = 1; i15 < 71; i15++) {
                Test.lArrFld[i15] = i16;
            }
            Test.instanceCount >>= i16;
            Test.instanceCount = -42;
            byFld += (byte)l2;
            i17 = 1;
            while (++i17 < 71) {
                i16 += (((i17 * i17) + byFld) - i15);
            }
            i18 = 71;
            while (--i18 > 0) {
                i16 += (i18 - i14);
                Test.instanceCount += (i18 - i17);
                for (i19 = 1; 1 > i19; ++i19) {
                    i14 -= i16;
                }
                for (l3 = l2; 1 > l3; ++l3) {
                    if (bFld) break;
                    Test.fArrFld[(int)(l2)] *= 35013;
                    Test.instanceCount += l3;
                    s1 *= (short)i18;
                    iArr[(int)(l3 - 1)] <<= (int)l2;
                }
            }
            i22 = 71;
            do {
                iArr[(int)(l2)] -= (int)d2;
                Test.instanceCount = i19;
                f2 += (i22 - i17);
                i16 = i19;
                f2 += i22;
            } while (--i22 > 0);
        }

        FuzzerUtils.out.println("f2 l2 i14 = " + Float.floatToIntBits(f2) + "," + l2 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("l3 i21 s1 = " + l3 + "," + i21 + "," + s1);
        FuzzerUtils.out.println("i22 d2 iArr = " + i22 + "," + Double.doubleToLongBits(d2) + "," +
            FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount iFld byFld = " + Test.instanceCount + "," + iFld + "," + byFld);
        FuzzerUtils.out.println("bFld Test.fArrFld Test.dArrFld = " + (bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
