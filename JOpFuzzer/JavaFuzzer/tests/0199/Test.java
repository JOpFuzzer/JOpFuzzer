// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public static byte byFld=36;
    public static double dFld=19.29475;
    public static boolean bFld=true;
    public static volatile long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -9L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i5=50582, i6=102, i7=0;
        short s=20459;
        float f1=-28.222F;
        double d=0.130949, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.72139);

        i5 = i5;
        i5 += Test.byFld;
        Test.instanceCount |= i5;
        for (long l1 : Test.lArrFld) {
            s = (short)i5;
            for (i6 = 1; i6 < 4; i6++) {
                f1 += i7;
                Test.dFld -= i6;
                i7 <<= (int)Test.instanceCount;
            }
            d = 1;
            while (++d < 4) {
                i7 += (int)((long)d ^ (long)f1);
                Test.dFld += i7;
                dArr[(int)(d + 1)] = Test.byFld;
                i5 = (int)11L;
                if (Test.bFld) continue;
            }
        }
        long meth_res = i5 + s + i6 + i7 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(float f) {

        int i4=-91, i8=240;

        i4 *= (int)(Test.instanceCount++);
        Test.instanceCount = (((i4 -= Test.byFld) + lMeth()) - i4);
        i8 = 1;
        do {
            if (Test.bFld) continue;
            i4 >>= i4;
        } while (++i8 < 164);
        long meth_res = Float.floatToIntBits(f) + i4 + i8;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i1, int i2, int i3) {

        long l=17345L;
        float f2=-2.159F, fArr[]=new float[N];
        int i9=6, i10=-13094, i11=249, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 221);
        FuzzerUtils.init(fArr, -120.904F);

        l = 1;
        do {
            iArr[(int)(l + 1)][(int)(l + 1)] -= (int)(iMeth(-1.968F) - -4144065992803778219L);
            for (f2 = 1; f2 < 9; ++f2) {
                for (i10 = 1; i10 < 2; ++i10) {
                    Test.dFld += Test.byFld;
                }
                i2 += (int)(((f2 * i10) + i9) - i1);
                Test.instanceCount += (long)(f2 + i3);
            }
            if (i2 != 0) {
                vMeth_check_sum += i1 + i2 + i3 + l + Float.floatToIntBits(f2) + i9 + i10 + i11 +
                    FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
        } while (++l < 182);
        Test.instanceCount += 12;
        i9 *= (int)l;
        Test.instanceCount -= l;
        fArr[(9 >>> 1) % N] += f2;
        iArr[(i11 >>> 1) % N][(i3 >>> 1) % N] *= i3;
        i1 += i10;
        vMeth_check_sum += i1 + i2 + i3 + l + Float.floatToIntBits(f2) + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i12=-13, i13=-76, i14=-31115, i15=-53992, i16=-16217, i17=36135, i18=-99, iArr1[]=new int[N];
        short s1=-20390;
        float f3=0.541F, f4=0.632F, f5=-43.489F;

        FuzzerUtils.init(iArr1, 2);

        i = 1;
        while (++i < 166) {
            vMeth(159, i, i);
            for (i12 = i; i12 < 151; i12++) {
                i13 = (int)Test.instanceCount;
                fArrFld[i + 1] -= i12;
                i13 = (int)Test.instanceCount;
                i13 -= i;
                i13 = (int)Test.instanceCount;
            }
            i13 >>>= i13;
            for (i14 = i; 151 > i14; i14++) {
                i16 = 1;
                while (++i16 < 1) {
                    i15 = i12;
                }
            }
            s1 = (short)i14;
            iArr1 = iArr1;
            iArr1[i - 1] -= i14;
            switch ((i % 8) + 35) {
            case 35:
                Test.instanceCount += (i * i);
                f3 = 1;
                while (++f3 < 151) {
                    i13 -= i14;
                    switch ((int)((f3 % 1) + 95)) {
                    case 95:
                        for (i17 = i; i17 < 1; ++i17) {
                            iArr1[(int)(f3 - 1)] = -205;
                            i18 += 13;
                            switch ((int)((f3 % 2) + 113)) {
                            case 113:
                                i18 += i18;
                                iArr1[i - 1] += i16;
                                i15 -= (int)11L;
                                Test.byFld -= (byte)s1;
                            case 114:
                                f4 = i16;
                                i15 >>>= i;
                                break;
                            }
                        }
                        break;
                    default:
                        i13 += (int)Test.instanceCount;
                    }
                }
            case 36:
                Test.byFld = (byte)i17;
                break;
            case 37:
                i13 *= (int)f3;
                break;
            case 38:
                f5 = f5;
                break;
            case 39:
                i15 += i17;
                break;
            case 40:
                i18 *= i12;
                break;
            case 41:
                i18 += (85 + (i * i));
                break;
            case 42:
                i13 = i12;
            }
        }

        FuzzerUtils.out.println("i i12 i13 = " + i + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("s1 f3 i17 = " + s1 + "," + Float.floatToIntBits(f3) + "," + i17);
        FuzzerUtils.out.println("i18 f4 f5 = " + i18 + "," + Float.floatToIntBits(f4) + "," + Float.floatToIntBits(f5));
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.lArrFld fArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
