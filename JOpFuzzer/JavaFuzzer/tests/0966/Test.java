// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=41041L;
    public static volatile int iFld=24602;
    public static volatile float fFld=37.83F;
    public static double dFld=14.124109;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 212);
        FuzzerUtils.init(Test.fArrFld, 0.945F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static void vSmallMeth(int i) {


        i = i;
        vSmallMeth_check_sum += i;
    }

    public static long lMeth() {


        Test.iFld >>= (int)Test.instanceCount;
        long meth_res = 0;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth2(int i14, long l, int i15) {


        Test.fArrFld[(217 >>> 1) % N] *= i14;
        long meth_res = i14 + l + i15;
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(byte by1, float f2, int i10) {

        int i11=1, i12=44746, i13=-43533, i16=-11, i17=8, i18=58, i19=-11;
        double d=61.24561;

        for (i11 = 12; i11 < 296; ++i11) {
            i13 = (int)((63006L * Math.max(-220, Test.iFld)) - by1);
            Test.iFld += ((iMeth2(Test.iFld, Test.instanceCount, -152) + 183) + i12);
            Test.instanceCount -= Test.iFld;
            i13 -= Test.iFld;
            i12 >>= i10;
            Test.instanceCount += i11;
            Test.iArrFld[i11 + 1] = (int)f2;
            for (i16 = 1; i16 < 6; ++i16) {
                f2 = Test.iFld;
                switch ((i16 % 4) + 102) {
                case 102:
                    for (i18 = 1; 2 > i18; ++i18) {
                        i17 += i19;
                    }
                    d += i16;
                    i12 -= (int)1.53F;
                    break;
                case 103:
                    f2 -= Test.instanceCount;
                    break;
                case 104:
                    i10 >>>= i13;
                    break;
                case 105:
                    Test.iArrFld[i16 - 1] <<= (int)Test.instanceCount;
                }
            }
        }
        long meth_res = by1 + Float.floatToIntBits(f2) + i10 + i11 + i12 + i13 + i16 + i17 + i18 + i19 +
            Double.doubleToLongBits(d);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i6) {

        int i7=-4, i8=-22482, i9=159, iArr[]=new int[N];
        float f1=-90.728F;
        byte by=-12;
        double d1=-12.109864, dArr[]=new double[N];
        boolean b=false, bArr[]=new boolean[N];
        short sArr[]=new short[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(sArr, (short)16595);
        FuzzerUtils.init(dArr, 2.122727);
        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 2L);

        vSmallMeth(Test.iFld * (++i6));
        for (short s : sArr) {
            float f=-16.1011F;
            vSmallMeth(56550);
            switch ((((((int)(i6 * f)) >>> 1) % 10) * 5) + 17) {
            case 29:
                try {
                    Test.iArrFld[(i6 >>> 1) % N] = (Test.iFld / 49391);
                    Test.iFld = (Test.iArrFld[(i6 >>> 1) % N] / i6);
                    Test.iFld = (i6 / -27);
                } catch (ArithmeticException a_e) {}
                Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld));
                break;
            case 55:
                for (i7 = 1; i7 < 4; ++i7) {
                    dArr[i7 + 1] -= Integer.reverseBytes(--iArr[i7 + 1]);
                    for (f1 = 1; f1 < 2; f1++) {
                        i6 = (by--);
                        if (bArr[i7]) break;
                        i6 = (i6 + iMeth1(by, f1, i9));
                        Test.iFld >>= (int)Test.instanceCount;
                        i6 += (int)f1;
                        d1 = Test.instanceCount;
                    }
                }
                break;
            case 35:
                i9 -= (int)f;
                break;
            case 45:
                lArr[(-7385 >>> 1) % N] -= -8L;
            case 19:
                Test.iFld += (int)d1;
                break;
            case 41:
                Test.instanceCount <<= i7;
                break;
            case 46:
                by += (byte)i8;
            case 36:
                i8 -= Test.iFld;
            case 21:
                f += f1;
            case 51:
                bArr[(Test.iFld >>> 1) % N] = b;
                break;
            }
        }
        long meth_res = i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + by + Double.doubleToLongBits(d1) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-9, i2=168, i3=65016, i4=-8, i5=-19715, i20=5, i21=56130, iArr1[][]=new int[N][N];
        short s1=-23264;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(iArr1, -83);
        FuzzerUtils.init(bArr1, true);

        for (int smallinvoc=0; smallinvoc<795; smallinvoc++) vSmallMeth(Integer.reverseBytes(i1--));
        for (i2 = 5; i2 < 144; ++i2) {
            Test.iArrFld[i2 + 1] = Test.iArrFld[i2];
            for (i4 = 3; 180 > i4; i4++) {
                Test.fArrFld[i2 + 1] *= (i5++);
                switch (((((int)(Test.instanceCount - i1)) >>> 1) % 8) + 91) {
                case 91:
                    switch ((i2 % 8) + 5) {
                    case 5:
                        i1 ^= (int)lMeth();
                    case 6:
                        Test.instanceCount -= (iMeth(Test.iFld) * -19088);
                        i5 |= (int)-89L;
                        i1 += i1;
                        iArr1 = iArr1;
                    case 7:
                        try {
                            Test.iFld = (Test.iArrFld[i2 + 1] / iArr1[i4][i2 - 1]);
                            Test.iFld = (i2 / i1);
                            i1 = (i3 / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        Test.fFld += i3;
                        break;
                    case 8:
                        Test.dFld *= Test.dFld;
                        i3 = i2;
                        bArr1[i4 - 1] = false;
                    case 9:
                        Test.iArrFld[i2] = -43151;
                    case 10:
                        Test.dFld = i5;
                        break;
                    case 11:
                        Test.iArrFld[i2] = -41369;
                    case 12:
                        lArrFld = FuzzerUtils.long2array(N, (long)-60135L);
                        Test.instanceCount = 9;
                        iArr1[i2][i4 - 1] += (int)Test.instanceCount;
                    default:
                        bArr1 = bArr1;
                    }
                    bArr1[i4 - 1] = false;
                    for (i20 = 1; i20 < 2; i20++) {
                        switch ((i2 % 1) + 106) {
                        case 106:
                            Test.dFld = i4;
                        }
                        i1 &= i2;
                    }
                    Test.iFld = -8741;
                case 92:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 93:
                    lArrFld[i4][i2 + 1] += Test.instanceCount;
                    break;
                case 94:
                    i1 += i4;
                case 95:
                    i3 = i1;
                    break;
                case 96:
                    s1 += (short)(i4 - i21);
                    break;
                case 97:
                    i3 *= Test.iFld;
                    break;
                case 98:
                    Test.dFld %= -4491;
                    break;
                default:
                    lArrFld[i4 + 1][(i3 >>> 1) % N] = -9;
                }
            }
        }

        FuzzerUtils.out.println("i1 i2 i3 = " + i1 + "," + i2 + "," + i3);
        FuzzerUtils.out.println("i4 i5 i20 = " + i4 + "," + i5 + "," + i20);
        FuzzerUtils.out.println("i21 s1 iArr1 = " + i21 + "," + s1 + "," + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("bArr1 = " + FuzzerUtils.checkSum(bArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.iArrFld Test.fArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
