// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-231L;
    public static volatile float fFld=2.933F;
    public static volatile int iArrFld[][]=new int[N][N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i12, int i13, float f) {

        int i14=-6, i15=-194, i16=-60, i17=14, i18=-54405, iArr[]=new int[N];
        byte by=113;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(lArr, 7028487281420919212L);

        for (i14 = 8; 260 > i14; ++i14) {
            try {
                i12 = (i14 % 240);
                i12 = (-31475 % i13);
                i13 = (iArr[i14] / i12);
            } catch (ArithmeticException a_e) {}
            if (false) break;
            for (i16 = 1; i16 < 6; ++i16) {
                double d2=-85.79936;
                if (i16 != 0) {
                    vMeth1_check_sum += i12 + i13 + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + i18 + by +
                        FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                    return;
                }
                i12 *= (int)Test.instanceCount;
                switch ((i16 % 9) + 15) {
                case 15:
                    i17 = i13;
                    i18 = 1;
                    do {
                        i17 <<= i13;
                    } while (++i18 < 2);
                case 16:
                    lArr[(i17 >>> 1) % N] |= i18;
                    switch (((i12 >>> 1) % 2) + 36) {
                    case 36:
                        Test.instanceCount = i13;
                    case 37:
                        f += -41592L;
                        iArr[i14 - 1] -= i14;
                        break;
                    default:
                        i15 = 1259;
                    }
                    break;
                case 17:
                    i15 = i13;
                    break;
                case 18:
                    d2 += -2;
                    break;
                case 19:
                    i13 *= i14;
                case 20:
                    Test.instanceCount -= i17;
                    break;
                case 21:
                    i15 += by;
                    break;
                case 22:
                    i13 = i16;
                    break;
                case 23:
                    i13 = i16;
                    break;
                default:
                    Test.fFld *= Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i12 + i13 + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + i18 + by +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        int i8=4641, i9=5, i10=238, i11=-35;
        short s1=-26611;
        byte by1=-23;
        double d3=-104.50953;

        i8 = 1;
        do {
            i9 += i8;
        } while (++i8 < 144);
        for (i10 = 4; i10 < 241; i10++) {
            i9 += (((i10 * Test.instanceCount) + i11) - Test.instanceCount);
            vMeth1(i10, i9, Test.fFld);
            i11 *= i10;
            i9 += (i10 * i10);
            Test.instanceCount = 21;
            s1 = by1;
            Test.fFld -= -116.930F;
            i9 += (((i10 * Test.instanceCount) + i8) - i9);
        }
        Test.instanceCount += by1;
        d3 %= (Test.instanceCount | 1);
        Test.instanceCount *= i11;
        Test.iArrFld[(i11 >>> 1) % N][(i11 >>> 1) % N] -= (int)Test.instanceCount;
        long meth_res = i8 + i9 + i10 + i11 + s1 + by1 + Double.doubleToLongBits(d3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i4=19126, i5=61, i6=-14, i7=-14302, i19=-11821, i20=-38749;
        double d1=49.45007;
        boolean b=true;
        long l=-5667437621956275434L;

        for (i4 = 13; i4 < 309; ++i4) {
            Test.fFld -= (Math.max(++i5, (int)(d1 * Test.fFld)) + (i5--));
            if (b) break;
            for (i6 = i4; i6 < 6; ++i6) {
                i5 -= (int)(((-247 + iMeth()) + i5) * l);
                for (i19 = i4; i19 < 1; ++i19) {
                    i5 = i19;
                    Test.instanceCount = (long)1.933F;
                    i7 += i6;
                }
                i5 += i5;
                i7 += (int)Test.fFld;
                Test.iArrFld[i4 - 1][i6 + 1] %= (int)(i6 | 1);
                i5 += (i6 ^ i4);
            }
        }
        i20 -= 165;
        Test.iArrFld[(-55 >>> 1) % N] = Test.iArrFld[(i6 >>> 1) % N];
        vMeth_check_sum += i4 + i5 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + i6 + i7 + l + i19 + i20;
    }

    public void mainTest(String[] strArr1) {

        int i=45278, i1=-40, i2=148, i3=-56, i21=-4, i22=6, i23=244, i24=197, i25=11;
        short s=24314;
        double d=-2.10788;
        byte by2=0;
        boolean b1=true;

        Test.fFld += Test.fFld;
        for (i = 1; i < 171; i++) {
            for (i2 = 8; 148 > i2; ++i2) {
                s = (short)(((Test.fFld + 36) - (i + d)) - (-(i2 * -91)));
                i1 += i2;
            }
            vMeth();
            i3 += (i | i);
            i3 &= i2;
            lArrFld[i + 1] <<= Test.instanceCount;
            for (i21 = 8; i21 < 148; i21++) {
                i3 += (int)d;
                i23 = 1;
                while (++i23 < 2) {
                    Test.fFld += (i23 - by2);
                    Test.iArrFld[i23][i21 - 1] >>= i1;
                    lArrFld[i23] = i2;
                    Test.instanceCount += (i23 * Test.instanceCount);
                    switch ((i % 3) + 2) {
                    case 2:
                        i22 >>= i22;
                        break;
                    case 3:
                        if (b1) break;
                        break;
                    case 4:
                        lArrFld[i] += i1;
                    }
                    i3 = (int)Test.instanceCount;
                    lArrFld[i23 - 1] = 50325L;
                    i1 = (int)Test.fFld;
                }
                for (i24 = 1; i24 < 2; i24++) {
                    if (b1) {
                        i22 += (int)Test.instanceCount;
                        Test.fFld -= Test.instanceCount;
                        s ^= (short)i2;
                        Test.instanceCount += (i24 * i24);
                    }
                    i1 = i24;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 s d = " + i3 + "," + s + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("by2 b1 i24 = " + by2 + "," + (b1 ? 1 : 0) + "," + i24);
        FuzzerUtils.out.println("i25 = " + i25);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iArrFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
