// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static float fFld=2.314F;
    public static volatile int iFld=-4;
    public static byte byFld=81;
    public static double dFld=-2.113519;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 224);
    }

    public static long fMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i2) {

        int i3=-8, i4=-55737, i5=1, i6=-8, i7=0, i8=9, iArr1[]=new int[N];
        short s=24667, sArr[]=new short[N];
        double d1=-47.32075;

        FuzzerUtils.init(sArr, (short)-27549);
        FuzzerUtils.init(iArr1, -134);

        Test.instanceCount *= 0L;
        for (i3 = 12; i3 < 255; ++i3) {
            for (i5 = 1; i5 < 7; i5++) {
                sArr = sArr;
                Test.fFld *= Test.instanceCount;
                i6 *= i2;
                for (i7 = i5; i7 < 2; i7++) {
                    i2 >>= 3;
                    i4 += i6;
                    Test.fFld *= i5;
                    i4 *= i7;
                    iArr1[i7] >>>= i6;
                    Test.fFld += i2;
                }
                s = (short)Test.instanceCount;
            }
            d1 += Test.iFld;
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + i8 + s + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(sArr)
            + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static byte byMeth(int i1) {

        short s1=-17033, sArr1[][]=new short[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.62F);
        FuzzerUtils.init(sArr1, (short)-27394);

        lMeth(-4);
        fArr[(251 >>> 1) % N] -= Test.fFld;
        sArr1[(i1 >>> 1) % N] = FuzzerUtils.short1array(N, (short)-14800);
        s1 += (short)Test.iFld;
        long meth_res = i1 + s1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static float fMeth(double d, int i) {

        float f=-2.377F;
        int i9=-49851, i10=-9397, i11=1, i12=-48766, i13=19176;
        boolean b=true;

        Test.iFld &= (int)(((i - -84.46576) * i) + byMeth(Test.iFld));
        for (f = 1; f < 152; f++) {
            Test.byFld = (byte)f;
            for (i10 = 1; 10 > i10; i10++) {
                i = (int)Test.instanceCount;
                for (i12 = 1; i12 < 2; ++i12) {
                    i *= i11;
                    Test.instanceCount += i12;
                    i11 += (((i12 * Test.instanceCount) + i10) - Test.instanceCount);
                    Test.fFld -= Test.iFld;
                    Test.instanceCount += Test.instanceCount;
                    if (b) continue;
                    i13 = (int)Test.instanceCount;
                }
                Test.iArrFld[i10] -= 133;
                i -= i11;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + i13 + (b ? 1
            : 0);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i14=-2, i15=251, i16=-16851, i17=-11, i18=-170, i19=102, i20=71, i21=-1, i22=0, iArr[][]=new int[N][N];
        short s2=12909;
        long l=4190282854L, l1=1L, lArr[]=new long[N];

        FuzzerUtils.init(iArr, 50);
        FuzzerUtils.init(lArr, -1611761921869625619L);

        Test.fFld -= -50386L;
        Test.instanceCount = (-(iArr[(Test.iFld >>> 1) % N][(-144 >>> 1) % N] + (Test.instanceCount - Test.iFld)));
        Test.instanceCount += (long)fMeth(Test.dFld, Test.iFld);
        Test.iFld = Test.byFld;
        try {
            i14 = 1;
            do {
                s2 += (short)Test.instanceCount;
                l = 1;
                while (++l < 117) {
                    Test.instanceCount = Test.iFld;
                    Test.instanceCount += l;
                    for (i15 = 1; i15 > 1; i15--) {
                        Test.iArrFld[i14] = (int)2894610501L;
                    }
                    Test.iFld += (int)(l ^ Test.iFld);
                    Test.iArrFld[i14 + 1] += (int)Test.fFld;
                    Test.iFld = (int)-7618212189232356876L;
                    Test.instanceCount = i15;
                }
            } while (++i14 < 215);
            switch (((10744 >>> 1) % 10) + 121) {
            case 121:
                for (l1 = 290; 15 < l1; l1--) {
                    i16 += (int)(((l1 * i14) + i16) - i14);
                    for (i18 = (int)(l1); 91 > i18; i18++) {
                        for (i20 = 1; i20 < 1; i20++) {
                            i17 += Test.byFld;
                            switch ((int)((l1 % 2) + 112)) {
                            case 112:
                                Test.iArrFld[i20 - 1] *= (int)Test.instanceCount;
                                switch (((i18 % 3) * 5) + 116) {
                                case 117:
                                    i16 <<= 13;
                                    i19 *= i14;
                                    Test.iArrFld[i20 - 1] = i15;
                                    Test.iArrFld[(int)(l1)] <<= (int)l1;
                                    break;
                                case 125:
                                    iArr[i20 - 1][i20 - 1] >>>= i16;
                                    break;
                                case 127:
                                    Test.iFld = i19;
                                    break;
                                default:
                                    iArr[i20 - 1][(int)(l1)] <<= (int)25335L;
                                }
                            case 113:
                                iArr[(int)(l1)][i18 + 1] += i17;
                                break;
                            default:
                                lArr[i18 - 1] *= -3263853381L;
                            }
                        }
                    }
                }
                break;
            case 122:
                Test.instanceCount *= i16;
                break;
            case 123:
                i19 += Test.iFld;
            case 124:
            case 125:
                Test.fFld *= i17;
                break;
            case 126:
                i21 = i20;
                break;
            case 127:
                iArr[(i19 >>> 1) % N][(i18 >>> 1) % N] <<= 26;
                break;
            case 128:
                i19 += i16;
                break;
            case 129:
                i21 = -8708;
            case 130:
                Test.iFld = (int)Test.instanceCount;
            default:
                i19 = (151 / i22);
            }
        }
        catch (ArithmeticException exc1) {
            Test.iFld *= i20;
        }

        FuzzerUtils.out.println("i14 s2 l = " + i14 + "," + s2 + "," + l);
        FuzzerUtils.out.println("i15 i16 l1 = " + i15 + "," + i16 + "," + l1);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("iArr lArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld Test.dFld Test.iArrFld = " + Test.byFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  byMeth ->  byMeth fMeth mainTest
//DEBUG  lMeth ->  lMeth byMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
