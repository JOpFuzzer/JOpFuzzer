// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:49 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-73L;
    public static byte byFld=-30;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 6);
        FuzzerUtils.init(Test.lArrFld, 3428801094L);
        FuzzerUtils.init(Test.fArrFld, 0.493F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(long l1) {

        int i4=-14, i5=-62113, i6=14, i7=-144, i8=14;
        float f1=-70.110F;
        double d=51.95426;
        boolean b=false;

        Test.iArrFld[(i4 >>> 1) % N] = (int)l1;
        Test.lArrFld[(i4 >>> 1) % N] ^= Test.instanceCount;
        f1 -= i4;
        i4 += 40170;
        for (d = 9; d < 229; d++) {
            i4 = i4;
            Test.instanceCount = i5;
        }
        i6 = 1;
        while (++i6 < 179) {
            i4 -= i6;
            for (i7 = 1; i7 < 9; ++i7) {
                i8 &= (int)l1;
                Test.lArrFld[i7] -= -10;
                i4 <<= -35827;
                if (b) break;
                if (b) continue;
            }
        }
        long meth_res = l1 + i4 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i5 + i6 + i7 + i8 + (b ? 1 :
            0);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth1(int i3, long l) {

        float f=0.931F;
        short s=9414;
        byte by=-71;

        if (bMeth(l)) {
            f = Test.iArrFld[(-52 >>> 1) % N];
        }
        Test.iArrFld[(i3 >>> 1) % N] %= (int)(s | 1);
        by -= (byte)f;
        i3 >>= i3;
        l = -63583;
        long meth_res = i3 + l + Float.floatToIntBits(f) + s + by;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2) {

        int i9=0, i10=-5, iArr1[]=new int[N];
        boolean b1=false;
        double d1=-15.130560, dArr[]=new double[N];
        float f2=40.702F;

        FuzzerUtils.init(iArr1, 38021);
        FuzzerUtils.init(dArr, 47.29016);

        iArr1[(i2 >>> 1) % N] <<= iMeth1(-11, Test.instanceCount);
        i2 -= i2;
        if (b1) {
            i2 *= Test.byFld;
            for (i9 = 4; i9 < 240; ++i9) {
                try {
                    i10 = (65 % i10);
                    iArr1[i9] = (47076 / i10);
                    i2 = (224 / iArr1[i9]);
                } catch (ArithmeticException a_e) {}
            }
            Test.instanceCount *= i2;
            Test.lArrFld[(61317 >>> 1) % N] *= i2;
        }
        Test.fArrFld[(i10 >>> 1) % N] = -5861;
        Test.instanceCount = -27884L;
        dArr[(i10 >>> 1) % N] = -11;
        switch (((9613 >>> 1) % 7) + 48) {
        case 48:
            d1 = 1;
            while (++d1 < 293) {
                Test.instanceCount = -61925L;
                i1 ^= i1;
            }
            break;
        case 49:
            i1 += i2;
        case 50:
            Test.instanceCount *= (long)d1;
            break;
        case 51:
            i10 = i9;
            break;
        case 52:
            i1 += i9;
            break;
        case 53:
        case 54:
            Test.iArrFld = FuzzerUtils.int1array(N, (int)145);
        default:
            i1 = (int)f2;
        }
        long meth_res = i1 + i2 + i9 + i10 + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l2=25035L;
        int i11=-11, i12=144, i13=34761, i14=-147, i15=-5, i16=-2823, iArr[]=new int[N];
        double d2=11.120591, dArr1[]=new double[N];
        float f3=0.319F;
        boolean b2=true;
        short s1=10227;

        FuzzerUtils.init(iArr, 93);
        FuzzerUtils.init(dArr1, 1.63065);

        for (int i : iArr) {
            i >>= iMeth(i, 13665);
            i >>= i;
            switch (((i >>> 1) % 9) + 70) {
            case 70:
                Test.fArrFld[(i >>> 1) % N] = i;
                for (l2 = 3; l2 < 63; l2 += 3) {
                    i11 |= i;
                    Test.lArrFld[(int)(l2 + 1)] ^= i;
                    d2 -= i11;
                    i11 += -2016;
                    i11 += (int)(l2 * l2);
                    if (b2) {
                        Test.iArrFld[(int)(l2 - 1)] = (int)l2;
                        for (i12 = 1; i12 < 4; i12++) {
                            i13 -= (int)Test.instanceCount;
                            i = (int)2.30244;
                            iArr[(int)(l2 + 1)] -= (int)f3;
                            f3 -= i13;
                            i += i12;
                        }
                    } else {
                        Test.lArrFld[(int)(l2 + 1)] -= i13;
                    }
                }
                Test.iArrFld[(i >>> 1) % N] <<= (int)-180L;
                break;
            case 71:
                i15 = 1;
                do {
                    i13 -= i13;
                    i14 = i11;
                    s1 *= (short)i14;
                    switch (((i14 >>> 1) % 5) + 123) {
                    case 123:
                        i11 = i14;
                    case 124:
                        iArr[i15 + 1] += (int)f3;
                        i14 += i15;
                        f3 = i15;
                        break;
                    case 125:
                        f3 *= i;
                    case 126:
                        i16 -= i;
                    case 127:
                        Test.instanceCount = s1;
                    }
                } while (++i15 < 63);
                break;
            case 72:
                Test.instanceCount >>= i14;
                break;
            case 73:
                i14 = i14;
            case 74:
                i += -20873;
                break;
            case 75:
                i |= i16;
            case 76:
                Test.instanceCount -= i;
                break;
            case 77:
                dArr1[(i16 >>> 1) % N] *= Test.instanceCount;
                break;
            case 78:
                Test.iArrFld[(i16 >>> 1) % N] += (int)l2;
                break;
            }
        }

        FuzzerUtils.out.println("l2 i11 d2 = " + l2 + "," + i11 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("f3 b2 i15 = " + Float.floatToIntBits(f3) + "," + (b2 ? 1 : 0) + "," + i15);
        FuzzerUtils.out.println("s1 i16 iArr = " + s1 + "," + i16 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("dArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.iArrFld = " + Test.instanceCount + "," + Test.byFld
            + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
