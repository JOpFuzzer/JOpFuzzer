// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:58 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-35L;
    public static int iFld=-54;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7);
        FuzzerUtils.init(Test.lArrFld, 13L);
        FuzzerUtils.init(Test.sArrFld, (short)29894);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5) {

        int i6=238, i7=239, i8=40844, i9=8, i10=-52963;
        boolean b=false;
        byte by=-49;
        double d1=2.121781;
        float f3=-50.356F;

        i6 -= i6;
        for (i7 = 276; i7 > 4; i7--) {
            Test.iFld *= i8;
            if (b) {
                Test.instanceCount >>= Test.iFld;
                Test.lArrFld[i7 + 1] *= i5;
            }
            if (true) break;
            Test.iFld += (i7 | i4);
            Test.iFld += (i7 ^ by);
            for (d1 = 1; d1 < 6; ++d1) {
                i10 = 1;
                do {
                    i8 += (int)3864220472436553878L;
                    Test.iFld -= -59618;
                    i6 <<= i10;
                    f3 -= i4;
                } while (++i10 < 2);
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) + by + Double.doubleToLongBits(d1) + i9 + i10 +
            Float.floatToIntBits(f3);
    }

    public static int iMeth(long l1, float f2) {

        double d=0.45613;
        int i2=47988, i3=-171, i11=-5, i12=-8983;
        boolean b1=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.428F);

        d += (d - Test.iArrFld[(Test.iFld >>> 1) % N]);
        for (i2 = 125; i2 > 5; --i2) {
            vMeth1(i2, i2);
            fArr[i2 - 1] /= (i3 | 1);
            i11 = 1;
            do {
                i3 += i11;
                Test.iFld += i2;
                f2 = -32183;
            } while (++i11 < 13);
            Test.iFld += (i2 ^ Test.instanceCount);
            if (b1) break;
            i12 = i3;
            Test.iFld = (int)f2;
            i12 += i2;
            i12 += i12;
            try {
                Test.iFld = (Test.iFld / 21);
                Test.iArrFld[i2 + 1] = (-213 / Test.iArrFld[i2]);
                Test.iArrFld[i2 - 1] = (60681 / i11);
            } catch (ArithmeticException a_e) {}
        }
        long meth_res = l1 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i2 + i3 + i11 + (b1 ? 1 : 0) + i12
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f1) {

        int i1=15229, i13=-201, iArr[]=new int[N];
        long l=-11446L, l2=47L;
        byte by1=29;

        FuzzerUtils.init(iArr, 90);

        Test.instanceCount -= Test.instanceCount;
        Test.iFld -= (int)Test.instanceCount;
        i1 = 1;
        do {
            Test.iFld >>>= (int)((f1 + i1) - ((Test.instanceCount + i1) - iArr[i1 + 1]));
            l = 1;
            while (++l < 9) {
                iArr[i1] = (int)((Test.instanceCount--) * iMeth(Test.instanceCount, f1));
                for (l2 = i1; l2 < 1; ++l2) {
                    Test.sArrFld = Test.sArrFld;
                    Test.iFld -= i13;
                    Test.instanceCount = Test.iFld;
                }
                switch ((i1 % 2) + 25) {
                case 25:
                    by1 <<= (byte)Test.instanceCount;
                    f1 = Test.instanceCount;
                    i13 *= i1;
                    Test.iFld += (int)3873098210270665380L;
                    break;
                case 26:
                    Test.iArrFld[i1] = i13;
                    break;
                }
            }
        } while (++i1 < 169);
        vMeth_check_sum += Float.floatToIntBits(f1) + i1 + l + l2 + i13 + by1 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        float f=-2.540F;
        int i=129, i14=-8, i15=-7, i16=-151, i17=6, i18=65, i19=-37655, i20=-149;
        boolean b2=false;
        short s=18072;
        byte by2=82;

        f += (++i);
        vMeth(f);
        for (i14 = 2; i14 < 131; ++i14) {
            if (b2) break;
            for (i16 = 4; i16 < 194; ++i16) {
                i15 = i16;
                f /= -74;
                i17 += (i16 ^ i14);
                Test.instanceCount = -189;
            }
            Test.lArrFld[i14 - 1] = 57736;
            Test.iArrFld[i14 + 1] = i16;
            i18 = 1;
            while (++i18 < 194) {
                i17 -= (int)f;
                Test.iFld += (int)Test.instanceCount;
                i15 *= s;
                for (i19 = i14; i19 < 1; ++i19) {
                    switch ((i18 % 5) + 108) {
                    case 108:
                        i17 += (int)(0.722F + (i19 * i19));
                    case 109:
                        Test.iArrFld[i18 + 1] -= i14;
                        i15 >>= (int)Test.instanceCount;
                        by2 *= (byte)252;
                        if (b2) break;
                    case 110:
                        i17 &= i20;
                        i20 += (int)Test.instanceCount;
                        i17 += (24821 + (i19 * i19));
                        break;
                    case 111:
                        i15 = i15;
                    case 112:
                    default:
                        if (true) continue;
                        i17 = i16;
                        Test.iArrFld[i18 - 1] |= (int)Test.instanceCount;
                    }
                    by2 = (byte)i15;
                }
            }
        }

        FuzzerUtils.out.println("f i i14 = " + Float.floatToIntBits(f) + "," + i + "," + i14);
        FuzzerUtils.out.println("i15 b2 i16 = " + i15 + "," + (b2 ? 1 : 0) + "," + i16);
        FuzzerUtils.out.println("i17 i18 s = " + i17 + "," + i18 + "," + s);
        FuzzerUtils.out.println("i19 i20 by2 = " + i19 + "," + i20 + "," + by2);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.iArrFld = " + Test.instanceCount + "," + Test.iFld +
            "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld Test.sArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
