// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2648678752L;
    public short sFld=-1814;
    public static double dFld=0.87200;
    public static byte byFld=-107;
    public static boolean bFld=false;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.3598);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static long lMeth(int i5) {

        int i6=7, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -4765);

        iArr1[(i6 >>> 1) % N] = (int)(--Test.dArrFld[(i6 >>> 1) % N]);
        long meth_res = i5 + i6 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i7, int i8, int i9) {

        float f1=-2.944F;
        double d1=2.3087, d2=-110.108285, d3=34.67372;
        int i10=136, i11=-173, i12=-7, i13=220, i14=6, i15=-17509;
        byte by=-83;
        boolean b=true;

        f1 = 1;
        while (++f1 < 377) {
            for (d1 = 4; d1 > 1; d1 -= 2) {
                for (i11 = (int)(d1); i11 < 4; ++i11) {
                    i9 += (-((i9 - i10) - (--i12)));
                    i12 /= (int)(((long)(((d1 - Test.instanceCount) - (by + i9)) + i11)) | 1);
                    by *= (byte)(((--Test.instanceCount) - lMeth(12361)) - i10);
                }
                d2 = f1;
                if (b) continue;
                for (i13 = (int)(f1); i13 < 4; ++i13) {
                    i7 = (int)-12L;
                    i9 += (int)Test.instanceCount;
                    i8 += i15;
                    d2 = 0.92108;
                    i12 -= (int)d3;
                    i15 *= -110;
                }
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i10 + i11 + i12 + by
            + Double.doubleToLongBits(d2) + (b ? 1 : 0) + i13 + i14 + i15 + Double.doubleToLongBits(d3);
    }

    public static int iMeth(int i2, short s, double d) {

        int i3=-19107, i4=5, i16=-29396, i17=32808, i18=-3, i19=-3669;
        float f=-33.356F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8L);

        for (i3 = 172; i3 > 7; i3 -= 2) {
            f += (i4 <<= (int)lMeth(-190));
        }
        Test.instanceCount = (i4--);
        vMeth(-30639, i3, i3);
        i2 += i4;
        for (double d4 : Test.dArrFld) {
            for (i16 = 1; i16 < 4; i16++) {
                i4 += i16;
                lArr[i16 - 1] = i17;
                i17 -= i2;
                for (i18 = 1; i18 < 2; i18++) {
                    i4 *= (int)Test.instanceCount;
                    s = (short)i4;
                    i4 *= i3;
                    i2 = 7;
                }
            }
        }
        long meth_res = i2 + s + Double.doubleToLongBits(d) + i3 + i4 + Float.floatToIntBits(f) + i16 + i17 + i18 + i19
            + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=50232, i1=-4, i20=-7, i21=-10458, i22=54941, i23=-46317, i24=53388, i25=-6, i26=-10, i27=28873,
            iArr[]=new int[N];
        float f2=1.947F;
        long lArr1[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -101);
        FuzzerUtils.init(lArr1, -696766425L);
        FuzzerUtils.init(bArr, true);

        iArr[(i >>> 1) % N] -= ((i++) * (++i));
        i1 = 320;
        do {
            iArr[(i1 >>> 1) % N] = (int)(Test.instanceCount = (iMeth(i, sFld, Test.dFld) * i));
            for (i20 = i1; i20 < 79; i20++) {
                iArr[i1 + 1] -= i;
                for (i22 = 1; i22 < 1; i22++) {
                    lArr1[i1] -= Test.instanceCount;
                    i23 = (int)Test.instanceCount;
                    Test.instanceCount <<= i20;
                    i *= (int)Test.instanceCount;
                    i21 >>>= i22;
                    i21 = -9;
                    Test.dFld *= i23;
                    Test.instanceCount += (((i22 * Test.instanceCount) + i) - Test.instanceCount);
                    lArr1[i20 - 1] += (long)2.547F;
                }
                Test.instanceCount = Test.instanceCount;
                Test.byFld += (byte)(-19385 + (i20 * i20));
            }
            i24 = 1;
            do {
                switch ((((i22 >>> 1) % 5) * 5) + 108) {
                case 119:
                    for (f2 = 1; 1 > f2; ++f2) {
                        i25 = (int)Test.instanceCount;
                        iArr = iArr;
                        i25 = (int)Test.instanceCount;
                        i += (int)(f2 - i24);
                    }
                    for (i26 = 1; 1 > i26; ++i26) {
                        int i28=-140;
                        i21 += i26;
                        i27 = (int)48876L;
                        Test.instanceCount += i26;
                        try {
                            i = (i28 / 148);
                            i23 = (i1 % i27);
                            i21 = (24986 % i25);
                        } catch (ArithmeticException a_e) {}
                        i = (int)-1.352F;
                    }
                    break;
                case 132:
                    i21 -= (int)f2;
                    break;
                case 125:
                    bArr[i24] = Test.bFld;
                    break;
                case 121:
                    Test.instanceCount -= (long)f2;
                    break;
                case 127:
                    i21 += i24;
                    break;
                }
            } while (++i24 < 79);
        } while (--i1 > 0);

        FuzzerUtils.out.println("i i1 i20 = " + i + "," + i1 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 f2 i25 = " + i24 + "," + Float.floatToIntBits(f2) + "," + i25);
        FuzzerUtils.out.println("i26 i27 iArr = " + i26 + "," + i27 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("lArr1 bArr = " + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount sFld Test.dFld = " + Test.instanceCount + "," + sFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld Test.bFld Test.dArrFld = " + Test.byFld + "," + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest vMeth
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
