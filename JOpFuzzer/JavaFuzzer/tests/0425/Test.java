// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=7687683759410461428L;
    public static volatile int iFld=-2;
    public static double dFld=0.117393;
    public short sFld=-19024;
    public static volatile boolean bArrFld[]=new boolean[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, int i8) {

        int i9=-8, i10=-9;

        for (i9 = 384; i9 > 16; i9--) {
            Test.instanceCount = Test.instanceCount;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i8 + i9 + i10;
    }

    public static boolean bMeth(long l, int i5, int i6) {

        float f2=-2.708F, fArr[]=new float[N];
        double d1=1.20438;
        short s1=3169;
        boolean b1=false;
        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -50278);
        FuzzerUtils.init(fArr, -1.85F);

        if (b1) {
            for (int i7 : iArr1) {
                iArr1[(i5 >>> 1) % N] >>>= (int)(l + (++Test.instanceCount));
                vMeth1(-14.877F, i6);
                i7 = (int)l;
                i6 >>>= (int)l;
                Test.instanceCount = i6;
                i6 = i7;
                f2 = (float)d1;
            }
            switch (((-5 >>> 1) % 5) + 93) {
            case 93:
                if (b1) {
                    for (int i11 : iArr1) {
                        s1 -= (short)i5;
                        l = 32498;
                        try {
                            i5 = (i11 / Test.iFld);
                            iArr1[(i11 >>> 1) % N] = (-22912 / iArr1[(i11 >>> 1) % N]);
                            i6 = (63445 / i11);
                        } catch (ArithmeticException a_e) {}
                    }
                }
                break;
            case 94:
                i6 /= 11576;
                break;
            case 95:
                Test.iFld = (int)Test.instanceCount;
                break;
            case 96:
                iArr1[(i6 >>> 1) % N] -= (int)Test.instanceCount;
                break;
            case 97:
                d1 = i5;
                break;
            default:
                i6 >>= Test.iFld;
            }
        } else if (b1) {
            iArr1[(Test.iFld >>> 1) % N] >>= Test.iFld;
        } else {
            iArr1 = iArr1;
        }
        long meth_res = l + i5 + i6 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + s1 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth() {

        int i=1, i1=-215, i2=-12, i3=12, i4=-246, iArr[]=new int[N];
        short s=-27677;
        float f=-90.885F;
        double d=2.31934;
        boolean b=true;

        FuzzerUtils.init(iArr, 58891);

        if (b) {
            for (i = 1; i < 148; ++i) {
                i1 += i;
                i2 = 1;
                do {
                    Test.instanceCount += (((i2 * i2) + Test.instanceCount) - Test.instanceCount);
                    for (i3 = 1; 1 > i3; i3++) {
                        if (b = bMeth(Test.instanceCount, i1, -64)) {
                            i4 = (int)(s + ((f - 19640) - i3));
                            Test.instanceCount += (i3 + i3);
                            Test.instanceCount |= (--i1);
                            i4 = (int)(Test.instanceCount >>= (i4 - 1323));
                        } else if (b) {
                            iArr[i + 1] <<= (i4--);
                            Test.instanceCount += i3;
                            d -= (((-3737592324L << i4) - (i4 * i1)) + (iArr[i + 1] += -36947));
                        } else if (b) {
                            i1 += (int)((i1 * i) - (iArr[i] -= (int)(-10 + (i1 * f))));
                        }
                    }
                } while (++i2 < 11);
            }
        } else if (b) {
            i1 <<= Test.iFld;
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + s + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + (b ? 1 :
            0) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        float f4=-65.840F;
        int i12=51, i13=-2, i14=-9, i15=54749, i16=-5, iArr2[]=new int[N];
        boolean b2=false;

        FuzzerUtils.init(iArr2, -13163);

        vMeth();
        Test.instanceCount += (long)f4;
        f4 = Test.instanceCount;
        f4 -= 143;
        Test.iFld += (int)Test.dFld;
        Test.iFld += Test.iFld;
        Test.instanceCount += sFld;
        Test.iFld = (int)Test.instanceCount;
        for (i12 = 10; 384 > i12; i12++) {
            switch (((i12 % 1) * 5) + 36) {
            case 37:
                i13 += i13;
                break;
            }
            i13 = i13;
            Test.bArrFld[i12] = b2;
            b2 = b2;
            Test.instanceCount = Test.iFld;
            f4 = i13;
        }
        for (i14 = 20; 368 > i14; i14 += 2) {
            dArrFld[i14 - 1] += i14;
            Test.iFld = i14;
            Test.iFld <<= i15;
            iArr2[i14] += (int)Test.instanceCount;
            i16 = 144;
            do {
                i13 = (int)1.31488;
                i13 += i15;
                if (true) {
                    i13 += (i16 + i16);
                    i13 += i16;
                    i15 += (int)Test.instanceCount;
                } else {
                    Test.iFld += (int)0L;
                    i13 *= i16;
                }
            } while (--i16 > 0);
        }

        FuzzerUtils.out.println("f4 i12 i13 = " + Float.floatToIntBits(f4) + "," + i12 + "," + i13);
        FuzzerUtils.out.println("b2 i14 i15 = " + (b2 ? 1 : 0) + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 iArr2 = " + i16 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("sFld Test.bArrFld dArrFld = " + sFld + "," + FuzzerUtils.checkSum(Test.bArrFld) + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 bMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
