// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=244L;
    public static int iFld=118;
    public static byte byFld=20;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 138L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(double d, float f, int i) {


        i = -12;
        vMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i;
    }

    public static void vMeth1() {

        int i3=-145, i4=-254, i5=-10, i6=-10, i7=-109;
        short s=24846;
        boolean b=false;
        float f1=70.346F;
        double d3=1.40102;

        for (i3 = 3; i3 < 374; ++i3) {
            s = (short)Test.instanceCount;
            i5 = 1;
            while (++i5 < 5) {
                Test.iFld = Test.iFld;
                b = b;
                Test.lArrFld = Test.lArrFld;
                for (i6 = 1; i6 > i3; i6 -= 2) {
                    i4 = (int)f1;
                    Test.instanceCount = (long)d3;
                    Test.iFld = i4;
                    i4 += (i6 * i6);
                    i4 = i3;
                    f1 += f1;
                    i7 = (int)Test.instanceCount;
                    d3 = s;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + s + i5 + (b ? 1 : 0) + i6 + i7 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d3);
    }

    public static int iMeth1() {

        short s1=-11668;
        int i8=-6, i9=41631, i10=8, i11=39066, i12=-53, iArr[][]=new int[N][N];
        float f2=0.913F;
        boolean b1=true;

        FuzzerUtils.init(iArr, 7);

        iArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = (Test.iFld = (--Test.iFld));
        vMeth1();
        s1 = (short)Test.instanceCount;
        if (b1) {
            for (i8 = 3; 176 > i8; ++i8) {
                switch (((i8 % 2) * 5) + 87) {
                case 96:
                    Test.instanceCount = i8;
                    for (i10 = 1; i10 < 9; i10++) {
                        i12 = 1;
                        do {
                            double d4=31.53757;
                            Test.iFld *= (int)d4;
                            iArr[i8 - 1] = iArr[i12];
                            Test.iFld <<= i8;
                            i9 -= 3;
                            Test.iFld += (i12 - i12);
                            f2 += (i12 * i12);
                        } while (++i12 < 2);
                    }
                    break;
                case 97:
                    Test.instanceCount = Test.instanceCount;
                    break;
                default:
                    f2 += (i8 + i12);
                }
            }
        } else if (b1) {
            Test.instanceCount -= i11;
        }
        long meth_res = s1 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=-251, i2=-2666, i13=-2, i14=-125, iArr1[]=new int[N];
        double d2=-36.109617, d5=-120.88505;
        short s2=-21263;

        FuzzerUtils.init(iArr1, 27063);

        for (i1 = 123; i1 > 7; i1--) {
            Test.instanceCount = (Test.instanceCount << (Test.iFld = (int)Test.instanceCount));
            switch (((((int)(d2 - -14L)) >>> 1) % 2) + 47) {
            case 47:
                i2 ^= (46814 * Math.max(iMeth1(), Test.iFld));
                iArr1 = iArr1;
                break;
            case 48:
                for (i13 = 1; i13 < 13; i13++) {
                    if (Test.iFld != 0) {
                    }
                    d5 = 1;
                    do {
                        if (i1 != 0) {
                        }
                        Test.iFld += (int)(((d5 * i14) + Test.iFld) - Test.byFld);
                        i14 = (int)-5.594F;
                        d2 += s2;
                        Test.iFld = Test.iFld;
                        Test.iFld = i14;
                        Test.byFld <<= Test.byFld;
                    } while (++d5 < 2);
                }
                break;
            }
        }
        long meth_res = i1 + i2 + Double.doubleToLongBits(d2) + i13 + i14 + Double.doubleToLongBits(d5) + s2 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d1=-1.38456;
        int i15=-47783;
        float f3=81.628F;

        vMeth(--d1, ((Test.iFld - Test.iFld) - Test.iFld) + (iMeth() + 8), Test.iFld);
        i15 = 1;
        while (++i15 < 334) {
            Test.iFld >>= Test.iFld;
            Test.instanceCount += (i15 + i15);
            Test.iFld += (i15 | (long)f3);
        }

        FuzzerUtils.out.println("d1 i15 f3 = " + Double.doubleToLongBits(d1) + "," + i15 + "," +
            Float.floatToIntBits(f3));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
