// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=908699408L;
    public double dFld=-65.115310;
    public static double dFld1=-82.47961;
    public static float fFld=-17.304F;
    public static int iFld=-14;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
        FuzzerUtils.init(Test.lArrFld, 37784489L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {

        int i9=31116, i10=-10, i11=15322, i12=23454, i13=174, i14=-35766, i15=-14, i16=0, i17=5;
        short s=-4193;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 12L);

        lArr[(-12 >>> 1) % N] -= i8;
        i8 *= i8;
        for (i9 = 5; i9 < 244; i9++) {
            try {
                i8 = (-22637 % i10);
                i10 = (i10 % -130);
                i10 = (759104608 % i9);
            } catch (ArithmeticException a_e) {}
        }
        for (i11 = 8; i11 < 170; i11++) {
            if (true) {
                i13 = 1;
                while (++i13 < 10) {
                    i8 += (((i13 * i11) + i13) - Test.fFld);
                }
            } else {
                switch ((i11 % 9) + 98) {
                case 98:
                    i14 = 1;
                    while (++i14 < 10) {
                        for (i15 = 1; i15 < 1; ++i15) {
                            Test.instanceCount += i15;
                        }
                        i17 = 1;
                        while (++i17 < 1) {
                            i12 += i8;
                        }
                    }
                    i12 ^= -34342;
                    break;
                case 99:
                    i10 = (int)Test.dFld1;
                case 100:
                    i8 -= i9;
                    break;
                case 101:
                    s *= (short)i10;
                case 102:
                    Test.fFld -= i9;
                    break;
                case 103:
                    Test.instanceCount >>= i14;
                    break;
                case 104:
                    Test.iArrFld[i11 + 1] <<= i15;
                    break;
                case 105:
                    i12 >>= (int)Test.instanceCount;
                case 106:
                }
                vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + s +
                    FuzzerUtils.checkSum(lArr);
                return;
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + s + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        int i6=0, i7=14, i18=-236, i19=-13855, i20=-34099, i21=-10;
        float f=2.857F, fArr1[][]=new float[N][N];
        short s1=2458;

        FuzzerUtils.init(fArr1, -105.430F);

        i6 = 209;
        do {
            i7 = Math.max((int)((--f) - (++Test.iArrFld[i6 + 1])), Math.abs(--Test.iArrFld[i6]));
            Test.instanceCount += (i6 * i6);
            vMeth1(-49);
            for (i18 = 1; i18 < 8; i18++) {
                switch ((((Test.iFld >>> 1) % 6) * 5) + 13) {
                case 21:
                    Test.dFld1 -= -62801L;
                    Test.instanceCount *= (long)Test.fFld;
                case 43:
                    f += -129;
                    for (i20 = i6; i20 < 2; ++i20) {
                        s1 = (short)i18;
                        Test.instanceCount -= -74;
                        f += (i20 + Test.iFld);
                        fArr1[i20][i20 + 1] -= (float)Test.dFld1;
                        i21 = -14;
                    }
                    break;
                case 37:
                    Test.instanceCount *= i20;
                    break;
                case 23:
                    fArr1[i18 + 1][i6] *= Test.instanceCount;
                case 17:
                    Test.dFld1 -= -1.749F;
                    break;
                case 22:
                    i21 <<= i18;
                    break;
                }
            }
        } while (--i6 > 0);
        long meth_res = i6 + i7 + Float.floatToIntBits(f) + i18 + i19 + i20 + i21 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4) {

        int i5=38359, i22=5, i23=1;
        double d=0.74883, dArr[]=new double[N];
        float fArr[]=new float[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(fArr, -100.506F);
        FuzzerUtils.init(sArr, (short)-28738);
        FuzzerUtils.init(dArr, -6.1925);

        Test.instanceCount *= (long)(fArr[(i4 >>> 1) % N] / (((long)((Test.dFld1--) - Test.instanceCount)) | 1));
        i5 = 198;
        do {
            i4 >>= iMeth();
            switch ((((i4 >>> 1) % 1) * 5) + 70) {
            case 71:
                Test.iFld >>= Test.iFld;
                d -= 109.561F;
                dArr[i5 + 1] -= Test.instanceCount;
                break;
            default:
                i4 += (174 + (i5 * i5));
                Test.iFld <<= (int)Test.instanceCount;
                i4 = i4;
                for (i22 = 1; 8 > i22; i22++) {
                    Test.iFld *= (int)Test.fFld;
                    i23 += (85 + (i22 * i22));
                    Test.iFld += i22;
                    Test.fFld *= i4;
                }
            }
        } while (--i5 > 0);
        vMeth_check_sum += i4 + i5 + Double.doubleToLongBits(d) + i22 + i23 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-28262, i1=13, i2=7, i3=57, i24=-6, i25=-188, i26=40440, i27=-62337;
        byte by=-54;
        short s3=5183;
        boolean b=false;

        for (i = 4; 191 > i; i += 2) {
            i1 = (int)(dFld * ((Test.instanceCount - Test.instanceCount) * (i * i)));
        }
        for (i2 = 295; i2 > 8; i2 -= 3) {
            Test.instanceCount = i1;
            vMeth(Test.iFld);
            for (i24 = 15; i24 < 264; i24++) {
                i1 += i24;
                if (b) {
                    for (i26 = i24; i26 < 2; i26++) {
                        Test.iArrFld[i2 - 1] *= (int)Test.instanceCount;
                        Test.instanceCount -= 172;
                        Test.lArrFld[i26] = Test.instanceCount;
                        i27 *= (int)Test.instanceCount;
                        i3 = 29128;
                        Test.instanceCount = i25;
                        i25 += (int)Test.instanceCount;
                        switch ((((i3 >>> 1) % 5) * 5) + 59) {
                        case 66:
                            Test.instanceCount += (i26 | Test.instanceCount);
                            Test.iFld += Test.iFld;
                            i1 *= (int)Test.dFld1;
                            i3 -= i;
                            break;
                        case 61:
                            if (true) continue;
                            Test.instanceCount = i26;
                            by += (byte)(((i26 * i3) + Test.fFld) - Test.fFld);
                            break;
                        case 63:
                            s3 += (short)(((i26 * i26) + i2) - Test.iFld);
                        case 60:
                            i3 += (i26 - i);
                            Test.iFld = -15892;
                            Test.fFld = 3029865133L;
                            i1 >>>= i26;
                        case 72:
                            i25 += (int)-107L;
                            break;
                        default:
                            Test.instanceCount >>= -22635;
                        }
                    }
                } else {
                    Test.instanceCount -= s3;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i24 i25 = " + i3 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 by = " + i26 + "," + i27 + "," + by);
        FuzzerUtils.out.println("s3 b = " + s3 + "," + (b ? 1 : 0));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.dFld1 = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Double.doubleToLongBits(Test.dFld1));
        FuzzerUtils.out.println("Test.fFld Test.iFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.iFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
