// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=961219523L;
    public static double dFld=86.44391;
    public static volatile short sFld=-9466;
    public static boolean bFld=true;
    public static float fFld=0.1023F;
    public static byte byFld=-101;
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.310F);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i4=28279, i5=-28971, i6=-4, i7=-245, iArr1[]=new int[N];
        float f1=1.516F;

        FuzzerUtils.init(iArr1, -168);

        i4 = (int)-14L;
        for (i5 = 250; i5 > 15; --i5) {
            Test.fArrFld[i5 - 1][i5] -= i6;
            i7 = 7;
            do {
                f1 *= (float)Test.dFld;
                if (false) break;
                i6 += Test.sFld;
                if (Test.bFld) break;
                Test.dFld -= Test.instanceCount;
                i6 += (int)Test.instanceCount;
                iArr1[i5] = i4;
                Test.sFld <<= (short)i5;
                i6 = (int)120.26762;
            } while (--i7 > 0);
            f1 = Test.instanceCount;
            iArr1[(i6 >>> 1) % N] >>= i6;
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
    }

    public static boolean bMeth(long l, short s) {

        double d1=0.36583;
        int i8=112;

        vMeth1();
        for (d1 = 2; d1 < 388; ++d1) {
            Test.fFld += (float)(d1 - i8);
        }
        i8 = 11943;
        s = (short)l;
        long meth_res = l + s + Double.doubleToLongBits(d1) + i8;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(float f) {

        int i=-9, i1=-4, i2=10, i3=-254, i9=225, iArr[]=new int[N];
        double d=2.19729;
        boolean b=false;
        float f2=-36.661F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 24535);
        FuzzerUtils.init(lArr, 140L);

        i += Math.max((i * i) * (i * i), (int)((-2.461F - (i + d)) * (d * f)));
        for (i1 = 5; i1 < 250; i1++) {
            f -= Test.instanceCount;
            Test.instanceCount += i1;
        }
        i3 = 1;
        while (++i3 < 127) {
            try {
                i2 = (-19507 % i);
                i = (iArr[i3] / i1);
                iArr[i3] = (26770 % i2);
            } catch (ArithmeticException a_e) {}
            if (i != 0) {
                vMeth_check_sum += Float.floatToIntBits(f) + i + Double.doubleToLongBits(d) + i1 + i2 + i3 + (b ? 1 :
                    0) + Float.floatToIntBits(f2) + i9 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                return;
            }
            d += (Math.max(-(iArr[(185 >>> 1) % N]++), 49346) * Test.instanceCount);
            if ((b = bMeth(Test.instanceCount, Test.sFld)) != b) break;
            lArr = lArr;
            i2 += (-6 + (i3 * i3));
            for (f2 = 1; 12 > f2; f2++) {
                i2 += (int)(((f2 * i1) + i1) - Test.instanceCount);
                if (true) continue;
                iArr[(int)(f2 - 1)] = i1;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + Double.doubleToLongBits(d) + i1 + i2 + i3 + (b ? 1 : 0) +
            Float.floatToIntBits(f2) + i9 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i10=-6064, i11=-227, i12=-6, i13=-3, i14=-51799, i15=31, i16=-199, i17=0, i18=5755, i19=-58, iArr2[]=new
            int[N];
        double d2=100.82905;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(iArr2, 6);
        FuzzerUtils.init(sArr, (short)-11045);

        vMeth(Test.fFld);
        for (i10 = 5; i10 < 274; ++i10) {
            Test.byFld >>= (byte)i10;
            iArr2[i10] = (int)Test.instanceCount;
        }
        for (i12 = 279; i12 > 5; i12--) {
            i13 >>>= i10;
            Test.fArrFld[i12][(i12 >>> 1) % N] -= (float)Test.dFld;
            Test.bFld = Test.bFld;
            i11 = Test.byFld;
        }
        Test.instanceCount >>= Test.sFld;
        Test.bFld = Test.bFld;
        i13 = (int)Test.instanceCount;
        i13 -= i13;
        i13 = i10;
        i14 = 1;
        do {
            for (i15 = 6; i15 < 98; i15++) {
                sArr[i15 + 1][i15 + 1] -= (short)Test.instanceCount;
            }
            if (Test.bFld) {
                Test.instanceCount -= Test.instanceCount;
            } else if (Test.bFld) {
                Test.fFld += i16;
                for (i17 = 6; i17 < 98; i17++) {
                    for (d2 = 1; d2 < 2; d2++) {
                        Test.instanceCount = Test.instanceCount;
                        Test.instanceCount = (long)-1.3484;
                        i19 = -8;
                        switch (((i17 % 2) * 5) + 100) {
                        case 110:
                            switch ((((i10 >>> 1) % 4) * 5) + 39) {
                            case 50:
                                if (Test.bFld) break;
                                i16 = i11;
                                Test.dFld = Test.byFld;
                                break;
                            case 58:
                                Test.sFld += (short)(((d2 * i13) + i11) - Test.instanceCount);
                            case 54:
                                if (Test.bFld) continue;
                                break;
                            case 41:
                                Test.instanceCount = i13;
                                break;
                            }
                            break;
                        case 101:
                            Test.instanceCount += i14;
                        }
                    }
                }
            } else {
                Test.instanceCount += (i14 * i14);
            }
        } while (++i14 < 257);

        FuzzerUtils.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("d2 i19 iArr2 = " + Double.doubleToLongBits(d2) + "," + i19 + "," +
            FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld Test.fFld Test.byFld = " + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 bMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
