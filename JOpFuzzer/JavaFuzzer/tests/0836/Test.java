// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=227L;
    public static double dFld=2.97080;
    public byte byFld=124;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -17);
        FuzzerUtils.init(Test.fArrFld, 1.867F);
        FuzzerUtils.init(Test.dArrFld, 81.106708);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i3, double d1, short s) {

        int i4=3, i5=3, i6=63326, i7=11, i8=73, i9=6;
        float f=23.87F, f1=1.605F;

        i4 = 1;
        do {
            for (i5 = i4; 5 > i5; ++i5) {
                i3 *= 64512;
                i6 <<= i4;
                for (i7 = 1; i7 < 1; i7++) {
                    i6 += i7;
                }
                i8 += (i5 | Test.instanceCount);
                Test.iArrFld[i4 + 1] <<= i7;
                Test.iArrFld[i5 - 1] *= 36673;
                Test.instanceCount += i5;
            }
            for (f = 1; f < 5; ++f) {
                i3 += (int)(f * f);
                f1 += (float)-119.105950;
                Test.fArrFld[i4 - 1] -= (float)d1;
                s = (short)i7;
            }
        } while (++i4 < 359);
        long meth_res = i3 + Double.doubleToLongBits(d1) + s + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i9 +
            Float.floatToIntBits(f1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2, long l) {

        double d2=126.750;
        short s1=12794, sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-104);

        iMeth1(i2, d2, s1);
        sArr[(i1 >>> 1) % N] -= (short)i2;
        Test.dArrFld = Test.dArrFld;
        long meth_res = i1 + i2 + l + Double.doubleToLongBits(d2) + s1 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i, double d) {


        Test.instanceCount = iMeth(24, i, Test.instanceCount);
        i <<= i;
        vSmallMeth_check_sum += i + Double.doubleToLongBits(d);
    }

    public void mainTest(String[] strArr1) {

        int i10=-121, i11=-132, i12=244, i13=-43544, i14=61, i15=5, i16=-186, i17=7;
        boolean b=false;
        short s2=-17699;
        float f2=108.341F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)95);

        for (int smallinvoc=0; smallinvoc<262; smallinvoc++) vSmallMeth(i10, Test.dFld);
        i10 = i10;
        i10 += i10;
        for (i11 = 11; i11 < 263; ++i11) {
            if (b) continue;
            for (i13 = 3; i13 < 100; ++i13) {
                Test.instanceCount >>>= Test.instanceCount;
                Test.iArrFld[i11 + 1] += i12;
                i14 = (int)Test.instanceCount;
                Test.instanceCount *= i13;
                switch ((((i11 >>> 1) % 4) * 5) + 127) {
                case 132:
                    byFld += (byte)(15253L + (i13 * i13));
                    s2 += (short)(i13 * i11);
                    for (i15 = 1; i15 < 2; i15++) {
                        Test.instanceCount += i15;
                        i10 += (int)(-119L + (i15 * i15));
                        i10 *= i14;
                        Test.iArrFld[i11 + 1] = (int)Test.instanceCount;
                        f2 += (((i15 * Test.instanceCount) + Test.instanceCount) - s2);
                        b = b;
                        i14 >>= (int)Test.instanceCount;
                    }
                    i12 = 63;
                    break;
                case 139:
                    i14 += (((i13 * i15) + Test.instanceCount) - i15);
                    byArr[i13] = (byte)s2;
                    i17 = 1;
                    while (++i17 < 2) {
                        Test.instanceCount += i10;
                    }
                    i10 += (i13 + Test.instanceCount);
                case 130:
                    i12 = i13;
                    if (b) continue;
                    Test.instanceCount >>= Test.instanceCount;
                case 133:
                    i12 = -42810;
                    break;
                default:
                    Test.instanceCount <<= 8;
                }
            }
        }

        FuzzerUtils.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("b i13 i14 = " + (b ? 1 : 0) + "," + i13 + "," + i14);
        FuzzerUtils.out.println("s2 i15 i16 = " + s2 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("f2 i17 byArr = " + Float.floatToIntBits(f2) + "," + i17 + "," +
            FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld byFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.fArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  iMeth1 ->  iMeth1 iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
