// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2646184313L;
    public static float fFld=-2.901F;
    public static int iFld=5;
    public static double dFld=0.91527;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 37.366F);
        FuzzerUtils.init(Test.lArrFld, -49L);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long fMeth1_check_sum = 0;

    public static float fMeth1(int i7) {

        int i8=-178, i9=-56903, i10=11, i11=-4, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 0);

        Test.iFld -= Test.iFld;
        i8 = 1;
        while (++i8 < 360) {
            Test.lArrFld[i8] *= i8;
            i7 = Test.iFld;
            for (i9 = 1; i9 < 5; ++i9) {
                i10 += i9;
                switch (((i8 % 1) * 5) + 62) {
                case 63:
                    i11 = 1;
                    do {
                        Test.dFld += i7;
                    } while (++i11 < 2);
                    if (false) continue;
                    Test.iFld += i9;
                    break;
                }
                Test.fFld = i10;
                Test.iFld >>= (int)Test.instanceCount;
                iArr1[i9 - 1] &= i7;
                try {
                    i7 = (-1798202903 % i10);
                    Test.iFld = (iArr1[i8 - 1] / -199);
                    Test.iFld = (29300 % Test.iFld);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr1);
        fMeth1_check_sum += meth_res;
        return (float)meth_res;
    }

    public static float fMeth(float f) {

        int i13=8934, i14=36, i15=-5, i16=-114, i17=5537, iArr[][]=new int[N][N], iArr2[]=new int[N];
        float f1=0.691F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3744681685L);
        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(iArr2, 48185);

        f -= Math.max(2769071182L, lArr[(-7 >>> 1) % N]);
        iArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] += (int)fMeth1(-13);
        for (int i12 : iArr2) {
            try {
                iArr2[(i12 >>> 1) % N] = (i12 % iArr[(Test.iFld >>> 1) % N][(i12 >>> 1) % N]);
                Test.iFld = (iArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] % iArr2[(i12 >>> 1) % N]);
                i12 = (123 % i12);
            } catch (ArithmeticException a_e) {}
        }
        Test.iFld >>= Test.iFld;
        for (i13 = 11; i13 < 212; ++i13) {
            f += (((i13 * Test.iFld) + Test.instanceCount) - i14);
            Test.iFld = (int)Test.instanceCount;
            for (i15 = i13; i15 < 8; i15++) {
                iArr[i13 - 1] = FuzzerUtils.int1array(N, (int)6);
                for (f1 = 1; 1 < f1; f1--) {
                    Test.fFld = Test.instanceCount;
                    f += Test.instanceCount;
                }
                Test.iFld = i17;
            }
            if (false) continue;
        }
        long meth_res = Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + Float.floatToIntBits(f1) + i17 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(int i1, boolean b, int i2) {

        int i3=-3194, i4=-136, i5=-9, i6=68, i18=14, i19=1, i20=-10, iArr3[]=new int[N];
        short s=-14161;

        FuzzerUtils.init(iArr3, 235);

        Test.fArrFld[(i1 >>> 1) % N] *= i2;
        for (i3 = 279; i3 > 10; i3 -= 2) {
            Test.fFld += (-28424 + (i3 * i3));
            if (i1 != 0) {
                vMeth_check_sum += i1 + (b ? 1 : 0) + i2 + i3 + i4 + i5 + i6 + i18 + i19 + i20 + s +
                    FuzzerUtils.checkSum(iArr3);
                return;
            }
        }
        for (i5 = 3; i5 < 390; i5++) {
            i6 += (int)fMeth(Test.fFld);
            if (b) {
                if (b) {
                    i18 = 1;
                    while (++i18 < 4) {
                        Test.instanceCount = Test.instanceCount;
                        iArr3[i5 - 1] = i4;
                    }
                } else if (b) {
                    for (i19 = i5; i19 < 4; ++i19) {
                        Test.fFld = Test.instanceCount;
                        Test.lArrFld[i5 + 1] = 13;
                        iArr3[(i3 >>> 1) % N] <<= 4;
                    }
                } else {
                    Test.iFld *= s;
                }
                vMeth_check_sum += i1 + (b ? 1 : 0) + i2 + i3 + i4 + i5 + i6 + i18 + i19 + i20 + s +
                    FuzzerUtils.checkSum(iArr3);
                return;
            } else if (b) {
                if (i3 != 0) {
                    vMeth_check_sum += i1 + (b ? 1 : 0) + i2 + i3 + i4 + i5 + i6 + i18 + i19 + i20 + s +
                        FuzzerUtils.checkSum(iArr3);
                    return;
                }
            }
        }
        vMeth_check_sum += i1 + (b ? 1 : 0) + i2 + i3 + i4 + i5 + i6 + i18 + i19 + i20 + s +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=0;
        boolean b1=false;

        i *= (int)Test.instanceCount;
        vMeth(i, b1, Test.iFld);
        Test.dFld += Test.iFld;

        FuzzerUtils.out.println("i b1 = " + i + "," + (b1 ? 1 : 0));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld Test.fArrFld Test.lArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("fMeth1_check_sum: " + fMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  fMeth1 ->  fMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
