// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2247405543L;
    public double dFld=35.99205;
    public static volatile float fFld=-64.393F;
    public static int iFld=9;
    public boolean bFld=true;
    public static volatile double dArrFld[]=new double[N];
    public int iArrFld[][]=new int[N][N];
    public static int iArrFld1[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.27129);
        FuzzerUtils.init(Test.iArrFld1, -16639);
        FuzzerUtils.init(Test.lArrFld, -11L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1, int i6) {

        int i7=3, i8=11, i9=-65005, i10=8;
        double d1=0.81607;
        boolean b=true;

        for (i7 = 10; i7 < 162; i7++) {
            Test.iArrFld1[i7 - 1] *= (int)d1;
            i6 += (142 + (i7 * i7));
            i8 = -32884;
            for (i9 = 1; i9 < 10; ++i9) {
                i8 += i7;
                Test.fFld += (((i9 * i7) + i6) - i8);
                Test.iArrFld1[i7 - 1] *= i8;
                b = b;
                i6 += i9;
                i6 = i7;
                Test.fFld += 114.201F;
                Test.iArrFld1[i7 + 1] = i9;
            }
            i8 -= i7;
            Test.iArrFld1[i7 - 1] = -8456;
        }
        vMeth2_check_sum += l1 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + i9 + i10 + (b ? 1 : 0);
    }

    public static void vMeth1() {

        int i11=5, i12=40165, i13=-202, i14=-1, i15=9, i16=57217;
        double d2=-15.45449;

        vMeth2(Test.instanceCount, Test.iFld);
        i11 = 1;
        do {
            Test.iFld += (i11 ^ i11);
            Test.iFld = 8;
            d2 *= Test.instanceCount;
            Test.iFld = (int)Test.instanceCount;
            Test.lArrFld[(324 >>> 1) % N] += i11;
            Test.instanceCount = Test.instanceCount;
            Test.iFld += (i11 ^ (long)Test.fFld);
        } while (++i11 < 349);
        for (i12 = 313; i12 > 2; i12 -= 2) {
            i13 = i13;
            Test.iFld += (i12 ^ Test.iFld);
        }
        for (i14 = 19; i14 < 391; ++i14) {
            i16 = (int)Test.instanceCount;
            Test.iFld >>= (int)Test.instanceCount;
        }
        vMeth1_check_sum += i11 + Double.doubleToLongBits(d2) + i12 + i13 + i14 + i15 + i16;
    }

    public void vMeth(long l, int i4) {

        int i5=3, i17=0, i18=-2843;
        float f1=-123.988F;
        short s=-29484, sArr[]=new short[N];
        byte by1=80;

        FuzzerUtils.init(sArr, (short)-15729);

        iArrFld[(-11365 >>> 1) % N][(i4 >>> 1) % N] = (--i4);
        i5 = 393;
        while (--i5 > 0) {
            switch (((((int)(i5 - f1)) >>> 1) % 6) + 110) {
            case 110:
                i4 += (i5 * i5);
                vMeth1();
                s *= (short)i5;
            case 111:
                i4 = Test.iFld;
                for (i17 = i5; i17 < 4; i17++) {
                    i18 += (int)130L;
                }
                i18 = (int)f1;
                if (bFld) {
                    i18 ^= Test.iFld;
                    iArrFld[i5][i5] = (int)Test.instanceCount;
                    l += i4;
                    i18 = Test.iFld;
                } else {
                    Test.instanceCount -= Test.instanceCount;
                }
            case 112:
                Test.iFld = i18;
                break;
            case 113:
                Test.iArrFld1[i5 - 1] = i17;
                break;
            case 114:
                i18 += (11 + (i5 * i5));
                break;
            case 115:
                Test.instanceCount += (((i5 * i17) + i17) - by1);
                break;
            }
        }
        vMeth_check_sum += l + i4 + i5 + Float.floatToIntBits(f1) + s + i17 + i18 + by1 + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-25794, i1=78, i2=3, i3=55166, iArr[]=new int[N];
        float f=73.330F;
        double d=-104.83436;
        byte by=118;
        short s2=-1275;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -147);
        FuzzerUtils.init(lArr, -8994027360578967441L);

        i = 1;
        while (++i < 121) {
            f += iArr[i + 1];
            for (d = i; d < 207; ++d) {
                try {
                    i1 = (iArr[i + 1] / i1);
                    i1 = (2062218276 / i);
                    i1 = (i % 57206);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = iArr[(int)(d)];
                for (i2 = 1; i2 < 1; ++i2) {
                    i1 *= (int)Test.instanceCount;
                    Test.dArrFld[i2] *= (by++);
                    i3 = i;
                    f -= (Test.instanceCount--);
                    switch (((i2 % 9) * 5) + 105) {
                    case 111:
                        lArr = (lArr = lArr);
                        i1 = (int)((i3 = (int)(Test.instanceCount + i1)) + i);
                        lArr[i] <<= (long)(((i + i2) + (d + i2)) - (Test.instanceCount - (f -= Test.instanceCount)));
                    case 120:
                        dFld += (-Integer.reverseBytes((int)(i * Test.instanceCount)));
                        i1 += (((i2 * Test.instanceCount) + i3) - i3);
                        vMeth(Test.instanceCount, i);
                        break;
                    case 128:
                        Test.instanceCount *= -4728960169741438968L;
                        Test.iFld *= i3;
                        if (bFld) {
                            iArr = Test.iArrFld1;
                        } else if (bFld) {
                            i3 = 4;
                        } else if (bFld) {
                            i1 += i2;
                        }
                        dFld = i;
                        break;
                    case 123:
                        Test.iFld += i2;
                        Test.fFld += (((i2 * i) + s2) - Test.instanceCount);
                    case 125:
                        iArr[i2 - 1] *= i2;
                        break;
                    case 126:
                        i3 += (((i2 * Test.fFld) + s2) - Test.fFld);
                        Test.iFld -= by;
                        iArr[i2] -= i;
                        break;
                    case 130:
                        i3 += i2;
                    case 116:
                        i3 = i1;
                    case 145:
                        dFld = 8.81475;
                        break;
                    default:
                        Test.iFld -= (int)-11L;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i f d = " + i + "," + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i1 i2 i3 = " + i1 + "," + i2 + "," + i3);
        FuzzerUtils.out.println("by s2 iArr = " + by + "," + s2 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld bFld Test.dArrFld = " + Test.iFld + "," + (bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iArrFld Test.iArrFld1 Test.lArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld1) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
