// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-862278760961524457L;
    public static double dFld=-1.54790;
    public volatile float fFld=-40.286F;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -787);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i7, int i8) {

        boolean b=true;

        Test.bArrFld[(i8 >>> 1) % N][(i7 >>> 1) % N] = b;
        long meth_res = i7 + i8 + (b ? 1 : 0);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static boolean bMeth(int i3, int i4, double d2) {

        int i5=-56128, i6=9, i9=241, i10=-14, i11=8765, i12=-56379, iArr1[]=new int[N];
        byte by=-45;
        short s=-1664;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -11);
        FuzzerUtils.init(lArr, -1424719629L);

        Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (iArr1 = Test.iArrFld)));
        for (i5 = 1; i5 < 266; ++i5) {
            i3 += (int)(fMeth(i5, i6) - i6);
            i3 += (((i5 * i3) + i4) - by);
            lArr[i5] = i4;
        }
        i9 = 1;
        while (++i9 < 308) {
            i10 = 1;
            do {
                if (i3 != 0) {
                    return ((int)(i3 + i4 + Double.doubleToLongBits(d2) + i5 + i6 + by + i9 + i10 + s + i11 + i12 +
                        FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr))) % 2 > 0;
                }
                s ^= (short)i6;
                try {
                    i3 = (10674 / Test.iArrFld[i9]);
                    iArr1[i10 - 1] = (iArr1[i10 - 1] % i3);
                    i6 = (i4 / 166);
                } catch (ArithmeticException a_e) {}
                for (i11 = 1; i11 < 1; i11++) {
                    iArr1[i9 - 1] += (int)Test.instanceCount;
                    Test.instanceCount -= -106;
                    i3 = i9;
                    i6 += -89;
                }
            } while (++i10 < 5);
        }
        long meth_res = i3 + i4 + Double.doubleToLongBits(d2) + i5 + i6 + by + i9 + i10 + s + i11 + i12 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(long l, long l1, int i1) {

        int i2=28488, i13=-5, i14=-16, i15=-17, i16=-250, i17=7, i18=53449;
        float f=117.601F;
        long l2=-41L;

        i2 = 1;
        while (++i2 < 281) {
            if (bMeth(i2, 230, Test.dFld)) continue;
        }
        i1 = i2;
        for (i13 = 16; 270 > i13; ++i13) {
            byte by1=-75;
            l *= by1;
            i14 = i14;
            for (i15 = 1; i15 < 6; ++i15) {
                i1 = (int)l1;
                f += (i15 + f);
            }
            for (i17 = 1; i17 < 6; i17++) {
                l2 = 2;
                do {
                    i18 = (int)Test.instanceCount;
                    l1 += l2;
                    Test.iArrFld[(int)(l2 + 1)] >>= i16;
                    f = f;
                } while (--l2 > 0);
            }
        }
        long meth_res = l + l1 + i1 + i2 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f) + i17 + i18 + l2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-10, i19=59776, i20=227, i21=-1364, i22=-2, iArr[]=new int[N];
        double d=0.62817, d1=45.106295, dArr[]=new double[N];
        boolean b1=false;
        float f1=51.421F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr, 156);
        FuzzerUtils.init(byArr, (byte)-111);
        FuzzerUtils.init(dArr, -2.65118);

        i &= iArr[(i >>> 1) % N];
        d = 1;
        while (++d < 128) {
            d1 = Long.reverseBytes(iMeth(Test.instanceCount, Test.instanceCount, i) * i);
            fFld += (float)(((d * i) + fFld) - Test.instanceCount);
            for (i19 = 7; i19 < 196; i19++) {
                i /= (int)(i20 | 1);
                fFld *= 26;
                if (b1) break;
                for (i21 = 1; i21 < 2; i21++) {
                    Test.instanceCount += (((i21 * i19) + fFld) - i21);
                    fFld += Test.instanceCount;
                    i20 += i22;
                    i20 = i22;
                    Test.instanceCount += i21;
                    fFld -= i;
                    switch ((((i22 >>> 1) % 1) * 5) + 111) {
                    case 112:
                        Test.instanceCount -= (long)-2.859F;
                        f1 += i21;
                        i22 >>= i22;
                        if (b1) break;
                        break;
                    default:
                        if (b1) {
                            Test.instanceCount += (long)(-25.817F + (i21 * i21));
                            byArr[(int)(d - 1)] += (byte)i19;
                        } else if (true) {
                            Test.bArrFld[(int)(d)][i21 + 1] = false;
                            i22 = i;
                        }
                        fFld += Test.instanceCount;
                    }
                    i20 += (int)Test.instanceCount;
                    dArr[(int)(d + 1)] += i19;
                    Test.instanceCount += (((i21 * i20) + i22) - i);
                }
                i22 <<= i19;
            }
        }

        FuzzerUtils.out.println("i d d1 = " + i + "," + Double.doubleToLongBits(d) + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i19 i20 b1 = " + i19 + "," + i20 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i21 i22 f1 = " + i21 + "," + i22 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("iArr byArr dArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(byArr) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.iArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth mainTest
//DEBUG  fMeth ->  fMeth bMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
