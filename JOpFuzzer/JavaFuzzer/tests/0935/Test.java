// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=1357986586L;
    public static short sFld=8844;
    public static int iFld=10;
    public static volatile float fFld=0.316F;
    public boolean bFld=true;
    public static volatile int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -8545);
        FuzzerUtils.init(Test.dArrFld, -80.93526);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(double d, int i9) {

        int i10=-5, i11=-159, i12=-30868, i13=58220, i14=-201, i15=-15132;
        boolean b=true;

        i9 = i9;
        if (b) {
            i10 = 1;
            while (++i10 < 386) {
                for (i11 = 1; 4 > i11; ++i11) {
                    i9 = (int)d;
                    Test.instanceCount = i10;
                    i13 = i12;
                    for (i14 = 1; i14 < 2; i14++) {
                        i15 -= Test.sFld;
                        try {
                            i9 = (i10 % i14);
                            i12 = (-178 % Test.iFld);
                            Test.iArrFld[i11 + 1] = (Test.iArrFld[i10 + 1] % Test.iArrFld[i14 - 1]);
                        } catch (ArithmeticException a_e) {}
                        i9 = (int)88L;
                        Test.fFld = -40126;
                        i15 = i9;
                        i12 += Test.iFld;
                        Test.instanceCount -= i15;
                    }
                }
            }
        } else if (true) {
            i9 &= i15;
        } else if (false) {
            i13 += i14;
        } else {
            Test.iArrFld[(i10 >>> 1) % N] -= i13;
        }
        long meth_res = Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i5, int i6) {

        int i7=4, i8=44675, i16=-7196, i17=38455, i18=-37046, i19=195, i20=0;
        double d1=2.27698;
        boolean b1=true;

        for (i7 = 144; i7 > 6; --i7) {
            i6 += (int)lMeth(2.78204, 6);
            Test.iFld = i16;
            Test.iFld += i7;
            i8 = i17;
            i5 *= Test.iFld;
            i5 += (i7 - i16);
            i16 += (int)d1;
            if (b1) continue;
            if (b1) break;
        }
        Test.iArrFld[(i18 >>> 1) % N] = i16;
        i18 ^= (int)Test.instanceCount;
        for (i19 = 10; i19 < 294; i19++) {
            i16 <<= i8;
            Test.instanceCount += i19;
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + i16 + i17 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + i18 + i19 +
            i20;
    }

    public void vMeth() {

        short s=5934, s1=-9466;
        int i=0, i1=-158, i2=54094, i3=100, i4=25405;
        boolean b2=true, bArr[]=new boolean[N];
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 2281591989313145079L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, 2.806F);

        s *= (short)251;
        i = 1;
        do {
            for (i1 = 11; i1 > 1; i1--) {
                switch ((((i2 + i) >>> 1) % 6) + 81) {
                case 81:
                    switch ((i1 % 4) + 13) {
                    case 13:
                        lArr[i1 - 1] <<= (i2++);
                        for (i3 = 1; i3 < 2; ++i3) {
                            i4 *= i3;
                            switch (((i % 7) * 5) + 25) {
                            case 54:
                                vMeth1(i4, i3);
                            case 49:
                                i2 = (int)Test.instanceCount;
                                i4 = 118;
                                i2 += i3;
                                Test.instanceCount += i3;
                                break;
                            case 55:
                                Test.iArrFld[i - 1] = i2;
                                break;
                            case 60:
                                Test.dArrFld[i1 + 1] -= i;
                                break;
                            case 37:
                                try {
                                    i2 = (i4 / i2);
                                    i4 = (i1 / 40345);
                                    Test.iFld = (Test.iFld % Test.iFld);
                                } catch (ArithmeticException a_e) {}
                            case 59:
                                Test.iFld = i1;
                                break;
                            case 26:
                                Test.fFld += i3;
                                break;
                            }
                        }
                    case 14:
                        if (Test.iFld != 0) {
                            vMeth_check_sum += s + i + i1 + i2 + i3 + i4 + (b2 ? 1 : 0) + s1 +
                                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                    case 15:
                        Test.iFld += i3;
                    case 16:
                        bArr[i1] = b2;
                        break;
                    }
                    break;
                case 82:
                case 83:
                    Test.iArrFld[i1 + 1] |= (int)Test.instanceCount;
                    break;
                case 84:
                    i2 += (i1 - i2);
                case 85:
                    s <<= (short)Test.instanceCount;
                case 86:
                    fArr = fArr;
                    break;
                default:
                    Test.fFld += (((i1 * Test.instanceCount) + i4) - s1);
                }
            }
        } while (++i < 148);
        vMeth_check_sum += s + i + i1 + i2 + i3 + i4 + (b2 ? 1 : 0) + s1 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=173, i22=-10, i23=-241, i24=91, i25=-18594, i26=-6, i27=109;
        double d2=0.121117;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 1.885F);

        vMeth();
        i21 = 1;
        do {
            for (i22 = 5; i22 < 101; ++i22) {
                Test.iFld = i23;
                i23 <<= (int)Test.instanceCount;
                Test.iFld += (((i22 * i21) + Test.iFld) - i21);
                for (i24 = 1; 2 > i24; i24++) {
                    Test.instanceCount <<= Test.iFld;
                    i25 *= i25;
                }
                i26 = 1;
                while (++i26 < 2) {
                    try {
                        Test.iFld = (i26 % -59713);
                        i23 = (i21 % i23);
                        i25 = (i23 / 819750475);
                    } catch (ArithmeticException a_e) {}
                    i23 <<= i26;
                    fArr1[i21] += (float)d2;
                    bFld = bFld;
                    d2 *= i22;
                    Test.fFld += i26;
                    Test.iFld ^= (int)Test.instanceCount;
                    Test.iFld += (((i26 * i24) + i26) - i22);
                }
                i27 = 1;
                while (++i27 < 2) {
                    Test.instanceCount += Test.iFld;
                    if (bFld) continue;
                    i25 = 224;
                    switch (((i26 >>> 1) % 3) + 111) {
                    case 111:
                        if (bFld) continue;
                    case 112:
                        Test.iArrFld[i22] -= (int)Test.fFld;
                        Test.iFld = (int)Test.fFld;
                        Test.fFld = 42578;
                    case 113:
                        i25 += (int)-1.304F;
                        Test.iArrFld[i22] += (int)Test.fFld;
                        break;
                    }
                    Test.instanceCount <<= i21;
                }
            }
        } while (++i21 < 249);

        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("d2 i27 fArr1 = " + Double.doubleToLongBits(d2) + "," + i27 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.iFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld bFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," + (bFld ? 1 :
            0) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
