// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static int iFld=-51989;
    public static byte byFld=108;
    public double dFld=-2.79452;
    public short sFld=-32363;
    public int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2, byte by1) {

        float f=0.171F;
        int i3=209, i4=-86, i5=-10, i6=0, iArr[]=new int[N];
        double d=2.37013;

        FuzzerUtils.init(iArr, 35);

        iArr[(-12 >>> 1) % N] = i2;
        f -= i2;
        for (i3 = 244; i3 > 13; i3 -= 3) {
            if (i2 != 0) {
                vMeth2_check_sum += i2 + by1 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d)
                    + FuzzerUtils.checkSum(iArr);
                return;
            }
            iArr[i3 + 1] >>= -162;
            i2 *= 7125;
            for (i5 = 20; i5 > 1; --i5) {
                if (false) continue;
                i4 += (int)d;
                Test.instanceCount = i3;
                f += (i5 + i5);
                i4 <<= (int)Test.instanceCount;
                i2 <<= 200;
                i2 *= i4;
                d %= (i5 | 1);
            }
        }
        vMeth2_check_sum += i2 + by1 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        double d1=-33.42054;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -35.459F);

        vMeth2(Test.iFld, Test.byFld);
        Test.iFld -= (int)Test.instanceCount;
        Test.iFld -= Test.iFld;
        Test.iFld ^= Test.iFld;
        fArr[(-2 >>> 1) % N][(Test.iFld >>> 1) % N] -= Test.iFld;
        d1 = Test.iFld;
        Test.iFld -= Test.iFld;
        vMeth1_check_sum += Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth() {

        int i=45870, i1=4, i7=23110, i8=11, i9=-23161, i10=-5, iArr1[][]=new int[N][N];
        byte by=92, by2=124;
        float f1=1.718F, fArr1[][]=new float[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 8);
        FuzzerUtils.init(lArr, 113804847L);
        FuzzerUtils.init(fArr1, 48.933F);

        for (i = 384; i > 1; --i) {
            float f2=0.747F;
            by -= (byte)i1;
            vMeth1();
            Test.iFld = (int)dFld;
            sFld += (short)Test.instanceCount;
            for (i7 = 1; 4 > i7; ++i7) {
                Test.instanceCount = Test.instanceCount;
            }
            i9 = 1;
            do {
                i10 = 1;
                do {
                    iArr1[i10 + 1][i10] >>= (int)3908720654L;
                    i8 = 20695;
                    lArr[i9 - 1] += (long)f1;
                } while (--i10 > 0);
            } while (++i9 < 4);
            Test.iFld = (int)f2;
            fArr1[i][i + 1] /= (Test.iFld | 1);
            by2 >>= (byte)-62;
        }
        vMeth_check_sum += i + i1 + by + i7 + i8 + i9 + i10 + Float.floatToIntBits(f1) + by2 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i11=-6, i12=13614, i13=-57051, i14=53302, i15=-38163, i16=-241, i17=-6;
        double d2=-48.5090, dArr[]=new double[N];
        float f3=30.491F, f4=-1.128F;
        byte byArr[]=new byte[N];
        long lArr1[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr, 56.35842);
        FuzzerUtils.init(byArr, (byte)-14);
        FuzzerUtils.init(lArr1, 68L);
        FuzzerUtils.init(sArr, (short)20316);

        vMeth();
        for (i11 = 5; i11 < 201; i11++) {
            for (d2 = 7; d2 < 128; ++d2) {
                i12 *= i13;
                iArrFld[i11] *= i12;
                sFld += (short)(((d2 * i11) + i11) - i13);
                for (f3 = 1; f3 < 2; f3++) {
                    i15 >>= i13;
                    fArrFld[(int)(d2 + 1)] *= i14;
                    dFld -= Test.instanceCount;
                }
                Test.iFld += (int)((long)d2 | Test.instanceCount);
                Test.iFld = i15;
                switch ((i11 % 4) + 67) {
                case 67:
                    i12 -= 12;
                    break;
                case 68:
                    for (i16 = 1; i16 < 2; i16++) {
                        dArr[(int)(d2)] -= -6;
                        Test.iFld += i16;
                        Test.instanceCount *= sFld;
                        byArr[(int)(d2 + 1)] += (byte)i17;
                        i17 += i16;
                        Test.byFld = (byte)Test.instanceCount;
                        i14 <<= i13;
                        Test.instanceCount += (i16 - Test.instanceCount);
                        iArrFld[i11 + 1] = i17;
                        i13 = (int)f3;
                    }
                    switch ((i11 % 7) + 25) {
                    case 25:
                        sFld += (short)d2;
                        i14 += (int)(d2 - f3);
                        i17 = i13;
                        f4 = f3;
                    case 26:
                        lArr1[i11] *= i14;
                    case 27:
                        Test.instanceCount *= Test.iFld;
                        break;
                    case 28:
                        i13 *= i12;
                        break;
                    case 29:
                        i14 &= i11;
                    case 30:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 31:
                        Test.instanceCount -= (long)f4;
                        break;
                    default:
                        i17 += (int)(d2 * f4);
                    }
                    break;
                case 69:
                    lArr1 = lArr1;
                    break;
                case 70:
                    sArr[i11] = (short)Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i11 i12 d2 = " + i11 + "," + i12 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i13 f3 i14 = " + i13 + "," + Float.floatToIntBits(f3) + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("f4 dArr byArr = " + Float.floatToIntBits(f4) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("lArr1 sArr = " + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("dFld sFld iArrFld = " + Double.doubleToLongBits(dFld) + "," + sFld + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
