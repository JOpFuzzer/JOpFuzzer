// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public volatile int iFld=11;
    public static double dFld=0.107963;
    public static float fFld=-2.318F;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -64712);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(long l) {

        short s=6061;

        l += s;
        vSmallMeth_check_sum += l + s;
    }

    public static void vMeth(int i1, int i2, float f) {

        int i3=65, i4=-36834, i5=-9, i6=14373, i7=-143;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2044237575L);

        i3 = 1;
        do {
            if (b) {
                for (i4 = 1; i4 < 6; i4 += 3) {
                    i5 += (int)(Test.instanceCount++);
                    Test.instanceCount += (i4 * i4);
                    vSmallMeth(Test.instanceCount);
                    for (i6 = 1; 6 > i6; i6++) {
                        i7 -= i5;
                        Test.instanceCount -= (long)f;
                        i5 += i1;
                        Test.iArrFld[i4 + 1] = i1;
                        i2 += (i6 | i6);
                        Test.instanceCount += Test.instanceCount;
                        i7 *= i4;
                        lArr[i3] = 0;
                    }
                }
                vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) +
                    FuzzerUtils.checkSum(lArr);
                return;
            } else {
                i7 += i3;
            }
        } while (++i3 < 261);
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(long l1, long l2, int i) {

        short s2=-18927;
        int i8=-25742, i9=7, i10=-69, i12=-20898;
        long l3=5L;
        boolean b1=false;
        float f1=112.573F, fArr[]=new float[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr, -2.718F);
        FuzzerUtils.init(byArr, (byte)98);

        vMeth(i, i, -1.128F);
        i = s2;
        i8 = 1;
        while (++i8 < 388) {
            i *= 13;
            switch (((i8 % 9) * 5) + 127) {
            case 135:
                l3 = 1;
                while (++l3 < 4) {
                    i = (int)Test.instanceCount;
                    for (i9 = (int)(l3); i9 < 1; ++i9) {
                        int i11=-206;
                        Test.instanceCount -= i8;
                        i11 = i10;
                    }
                    if (b1) break;
                    Test.iArrFld[(int)(l3)] += i10;
                }
                i12 = 1;
                do {
                    f1 = i;
                    Test.instanceCount = i10;
                } while (++i12 < 4);
            case 168:
                Test.iArrFld = Test.iArrFld;
            case 133:
                i10 = (int)l3;
            case 158:
                i10 %= (int)(i10 | 1);
                break;
            case 137:
                Test.iArrFld[i8] = i12;
                break;
            case 131:
                i10 += s2;
                break;
            case 128:
                b1 = b1;
                break;
            case 157:
                l2 += (i8 - s2);
                break;
            case 145:
                f1 -= 0.166F;
            default:
                l2 = (long)Test.dFld;
            }
        }
        long meth_res = l1 + l2 + i + s2 + i8 + l3 + i9 + i10 + (b1 ? 1 : 0) + i12 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s1=5474;
        int i13=8, i14=-21347, i15=-9, i16=-169, i17=-9621, i18=-6;
        float f3=12.105F, fArr1[]=new float[N];
        byte by1=124;
        double dArr[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr, -34.44132);
        FuzzerUtils.init(fArr1, -2.125F);
        FuzzerUtils.init(lArr1, -42307L);

        for (int smallinvoc=0; smallinvoc<420; smallinvoc++) vSmallMeth((long)((Math.min(iFld, iFld) ^ (iFld * s1)) -
            (lMeth(Test.instanceCount, Test.instanceCount, -62575) - Test.fFld)));
        i13 = 1;
        while (++i13 < 376) {
            dArr[i13 - 1] -= i13;
            switch (((i13 % 2) * 5) + 33) {
            case 42:
                fArr1[i13] += -9L;
                Test.instanceCount = i13;
                s1 += (short)(((i13 * s1) + Test.instanceCount) - i13);
                iFld += i13;
                break;
            case 41:
                iFld += iFld;
                for (i14 = 4; i14 < 67; i14++) {
                    Test.instanceCount += i14;
                    Test.dFld -= Test.instanceCount;
                    Test.instanceCount = i13;
                    Test.iArrFld[i13] = (int)Test.instanceCount;
                    i15 += i16;
                }
                for (f3 = 67; f3 > 4; f3--) {
                    i15 += (int)(f3 * f3);
                    switch ((int)(((f3 % 8) * 5) + 97)) {
                    case 127:
                        by1 = (byte)Test.instanceCount;
                        break;
                    case 103:
                        Test.instanceCount >>= i14;
                    case 131:
                        Test.bFld = false;
                        Test.fFld -= Test.instanceCount;
                        break;
                    case 128:
                        iFld *= i15;
                        i18 = 1;
                        while (++i18 < 2) {
                            i16 &= i13;
                            i17 -= iFld;
                            Test.instanceCount = Test.instanceCount;
                            i15 += (i18 - i14);
                            by1 = (byte)i18;
                            lArr1[i18] -= i17;
                        }
                        break;
                    case 98:
                        lArr1 = lArr1;
                    case 101:
                        i15 -= (int)Test.instanceCount;
                        break;
                    case 115:
                        iFld *= iFld;
                        break;
                    case 111:
                        Test.instanceCount *= Test.instanceCount;
                        break;
                    }
                }
                break;
            }
        }

        FuzzerUtils.out.println("s1 i13 i14 = " + s1 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 f3 = " + i15 + "," + i16 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i17 by1 i18 = " + i17 + "," + by1 + "," + i18);
        FuzzerUtils.out.println("dArr fArr1 lArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld Test.bFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            (Test.bFld ? 1 : 0) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
