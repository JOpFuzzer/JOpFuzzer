// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:54 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=41745L;
    public static volatile float fFld=1.871F;
    public static short sFld=-11945;
    public static byte byFld=106;
    public long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.693F);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, int i5) {

        int i6=-98, i7=39432, i8=21782, i9=123, i10=-59924, i11=0, iArr1[]=new int[N];
        boolean b=false;
        byte by=45;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3094759597L);
        FuzzerUtils.init(iArr1, -30);

        Test.instanceCount *= Test.instanceCount;
        i5 -= i5;
        i4 += 159;
        i5 = i5;
        lArr[(i4 >>> 1) % N] = 0;
        Test.fArrFld[(i5 >>> 1) % N] = i5;
        for (i6 = 6; i6 < 180; ++i6) {
            for (i8 = 1; 9 > i8; i8++) {
                try {
                    i9 = (i8 / 18);
                    i4 = (iArr1[i6] % i7);
                    i5 = (iArr1[i6 - 1] / 12622);
                } catch (ArithmeticException a_e) {}
                Test.sFld += (short)(((i8 * i5) + i9) - Test.instanceCount);
                if (b) {
                    for (i10 = 1; i10 < 2; ++i10) {
                        i7 = i7;
                        lArr[i8] = Test.instanceCount;
                        i7 += i10;
                    }
                } else if (false) {
                    i9 += i4;
                } else if (b) {
                    iArr1[i6] *= i10;
                } else {
                    by += (byte)(((i8 * i7) + i6) - i6);
                }
            }
        }
        vMeth2_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + (b ? 1 : 0) + by + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(long l, int i2, int i3) {

        int i12=-2, i13=25, i14=2, i15=-52426;
        double d1=-80.114809, d2=-69.42679;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-16152);

        vMeth2(12, i2);
        i12 = 290;
        do {
            if (i3 != 0) {
                vMeth1_check_sum += l + i2 + i3 + i12 + i13 + i14 + Double.doubleToLongBits(d1) + i15 +
                    Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(sArr);
                return;
            }
            for (i13 = 1; i13 < 6; ++i13) {
                i14 = (int)Test.fFld;
                for (d1 = 1; d1 < 2; ++d1) {
                    sArr[i12] -= (short)i13;
                    Test.bArrFld = FuzzerUtils.boolean1array(N, (boolean)true);
                    Test.fFld = Test.fFld;
                    l -= i3;
                    Test.sFld >>= (short)i3;
                    i3 += (int)(d1 * d1);
                    i2 *= i2;
                }
                d2 = i14;
                i2 *= 9;
            }
        } while (--i12 > 0);
        vMeth1_check_sum += l + i2 + i3 + i12 + i13 + i14 + Double.doubleToLongBits(d1) + i15 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i1) {

        int i16=-96, i17=223, i18=-47056, i19=33228, i20=14, i21=17006, i22=-81, iArr[]=new int[N];
        boolean b1=false;
        long l1=3353617976L;
        short sArr1[]=new short[N];

        FuzzerUtils.init(iArr, 2);
        FuzzerUtils.init(sArr1, (short)-11029);

        i1 >>= (int)(iArr[(i1 >>> 1) % N] + Test.fFld);
        vMeth1(Test.instanceCount, -228, i1);
        Test.sFld += (short)i1;
        i1 = i1;
        for (i16 = 166; i16 > 5; i16 -= 3) {
            switch (((i16 % 1) * 5) + 13) {
            case 16:
                iArr[i16] = i1;
                iArr = iArr;
                break;
            }
            i18 = 1;
            while (++i18 < 29) {
                b1 = b1;
                l1 += (long)120.880F;
            }
            for (i19 = i16; i19 < 29; i19++) {
                for (i21 = i16; i21 < 1; i21++) {
                    sArr1[i21] = (short)i18;
                    i20 |= i1;
                }
            }
        }
        vMeth_check_sum += i1 + i16 + i17 + i18 + (b1 ? 1 : 0) + l1 + i19 + i20 + i21 + i22 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-107, i23=13, i24=-123, i25=-36, i26=-10, iArr2[]=new int[N];
        double d=9.40650, dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.19138);
        FuzzerUtils.init(iArr2, -1849);

        i = (int)(Test.instanceCount * (lArrFld[(i >>> 1) % N]--));
        d -= dArr[(i >>> 1) % N];
        vMeth(i);
        i = (int)Test.instanceCount;
        for (float f : Test.fArrFld) {
            i <<= 7125;
            i -= 11666;
            Test.byFld -= (byte)i;
            i <<= Test.sFld;
            iArr2[(i >>> 1) % N] += (int)Test.instanceCount;
            for (i23 = 63; i23 > 1; i23 -= 3) {
                i24 = (int)Test.instanceCount;
                switch (((i23 % 1) * 5) + 78) {
                case 79:
                    iArr2 = FuzzerUtils.int1array(N, (int)21);
                    i = i24;
                    i |= i23;
                    switch ((i23 % 2) + 120) {
                    case 120:
                        Test.byFld = (byte)i23;
                        break;
                    case 121:
                        i24 = 13;
                        for (i25 = 1; i25 < 4; i25++) {
                            boolean b2=false;
                            switch ((((i26 >>> 1) % 6) * 5) + 20) {
                            case 47:
                                i <<= i26;
                                break;
                            case 43:
                                i += i25;
                                i += i25;
                                switch ((i23 % 2) + 45) {
                                case 45:
                                    i += (((i25 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                                    break;
                                case 46:
                                    i26 -= (int)2.498F;
                                    lArrFld[i23] += (long)Test.fFld;
                                    break;
                                }
                                i -= i24;
                            case 44:
                                if (b2) continue;
                                break;
                            case 31:
                                iArr2[i25 + 1] += (int)Test.instanceCount;
                                break;
                            case 40:
                                i26 = (int)d;
                                break;
                            case 32:
                                i += (int)Test.instanceCount;
                                break;
                            }
                        }
                        break;
                    }
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i d i23 = " + i + "," + Double.doubleToLongBits(d) + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("dArr iArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld lArrFld Test.fArrFld = " + Test.byFld + "," + FuzzerUtils.checkSum(lArrFld)
            + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.bArrFld = " + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
