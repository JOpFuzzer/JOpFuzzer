// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=7543186228579310189L;
    public static float fFld=2.571F;
    public static short sFld=3777;
    public static int iFld=22990;
    public int iFld1=-218;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[][]=new int[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 29.884F);
        FuzzerUtils.init(Test.iArrFld, -149);
        FuzzerUtils.init(Test.lArrFld, 3549245361737903643L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, long l2, int i8) {

        byte by=98;
        boolean b=true, bArr[]=new boolean[N];
        float f2=48.66F;
        int i10=-7, i11=-179, iArr[]=new int[N];
        double d1=0.23117;

        FuzzerUtils.init(iArr, 45377);
        FuzzerUtils.init(bArr, true);

        by <<= (byte)i7;
        b = false;
        iArr[(i8 >>> 1) % N] >>>= i7;
        Test.fFld = Test.sFld;
        for (int i9 : iArr) {
            for (f2 = 1; f2 < 4; f2++) {
                i11 = 2;
                do {
                    i10 = (int)l2;
                    switch ((int)(((f2 % 8) * 5) + 46)) {
                    case 54:
                        bArr = bArr;
                        iArr[(int)(f2)] <<= i7;
                        Test.fFld += (float)d1;
                        break;
                    case 57:
                        Test.iFld += (i11 - i7);
                        l2 >>= 20;
                        break;
                    case 52:
                        i7 += (i11 * Test.sFld);
                        break;
                    case 85:
                        Test.instanceCount = i9;
                        break;
                    case 83:
                        Test.iFld = Test.iFld;
                    case 59:
                        Test.fFld += i10;
                        break;
                    case 56:
                        Test.instanceCount = l2;
                    case 70:
                        i7 <<= i9;
                        break;
                    default:
                        Test.iFld <<= 44669;
                    }
                } while (--i11 > 0);
            }
        }
        vMeth1_check_sum += i7 + l2 + i8 + by + (b ? 1 : 0) + Float.floatToIntBits(f2) + i10 + i11 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(long l, float f1, int i5) {

        long l1=-355045720889774064L;
        int i6=49592, i13=-63, i14=210, i15=-2, i16=-4, i17=5769, i18=-54327, iArr1[]=new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr1, -36);

        for (l1 = 8; l1 < 375; ++l1) {
            vMeth1(i5, 30391L, i6);
            b1 = b1;
        }
        for (int i12 : iArr1) {
            Test.fFld *= 9;
            i12 *= Test.iFld;
            i6 = (int)Test.instanceCount;
        }
        i13 = 1;
        do {
            for (i14 = 1; i14 < 8; ++i14) {
                i15 += (i14 ^ i5);
                i6 -= -3;
                for (i16 = 1; i16 < 2; i16++) {
                    i15 <<= i18;
                    i17 -= (int)Test.instanceCount;
                    if (b1) break;
                }
            }
        } while (++i13 < 212);
        vMeth_check_sum += l + Float.floatToIntBits(f1) + i5 + l1 + i6 + (b1 ? 1 : 0) + i13 + i14 + i15 + i16 + i17 +
            i18 + FuzzerUtils.checkSum(iArr1);
    }

    public long lMeth(short s, int i2) {

        int i3=196, i4=4, i19=-32407, i20=39884;
        boolean b2=false;
        double d2=122.30859;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-82);

        for (i3 = 377; i3 > 23; --i3) {
            vMeth(-112L, Test.fFld, i3);
            Test.fFld -= i3;
            i2 >>>= Test.sFld;
            if (b2) continue;
        }
        for (byte by1 : byArr) {
            Test.instanceCount *= i4;
        }
        d2 += i19;
        Test.iFld &= Test.iFld;
        Test.instanceCount >>= i19;
        i20 = 1;
        do {
            i19 = i4;
            Test.instanceCount += (((i20 * Test.instanceCount) + Test.fFld) - Test.fFld);
            Test.fFld += Test.iFld;
            i19 <<= i19;
        } while (++i20 < 212);
        long meth_res = s + i2 + i3 + i4 + (b2 ? 1 : 0) + Double.doubleToLongBits(d2) + i19 + i20 +
            FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=13, i1=-11, i21=2, i22=-150, i23=-1, i24=-58348, i25=87, i26=57846, i27=-97, i28=1;
        float f=2.190F;
        double d=2.99353;
        boolean b3=true;

        for (i = 1; i < 318; i++) {
            f -= (float)(++d);
            i1 += (int)(lMeth(Test.sFld, i1) - Test.instanceCount);
            switch ((i % 9) + 25) {
            case 25:
                for (i21 = 1; i21 < 79; i21++) {
                    if (b3) break;
                }
                Test.fFld *= i22;
                break;
            case 26:
                Test.instanceCount = iFld1;
                break;
            case 27:
                if (b3) break;
                for (i23 = 1; i23 < 79; ++i23) {
                    d = i;
                }
            case 28:
                Test.instanceCount <<= i22;
            case 29:
                Test.instanceCount *= Test.instanceCount;
                i1 -= i24;
            case 30:
                for (i25 = i; i25 < 79; i25++) {
                    i1 = (int)d;
                    Test.fArrFld = Test.fArrFld;
                    Test.iFld <<= i23;
                    Test.iArrFld[i][i - 1] >>= (int)Test.instanceCount;
                    Test.lArrFld[i] = -8;
                    for (i27 = 1; 1 > i27; ++i27) {
                        Test.fFld -= i25;
                        Test.sFld = (short)i26;
                        i28 <<= i22;
                        Test.iArrFld[i25][i25 - 1] += i27;
                        if (b3) break;
                    }
                    i1 <<= -10;
                    i1 = (int)Test.instanceCount;
                    Test.instanceCount = -7500;
                }
                if (b3) break;
                break;
            case 31:
                Test.lArrFld[i - 1] /= ((long)(d) | 1);
                break;
            case 32:
                Test.iFld = i28;
                break;
            case 33:
                Test.lArrFld[i - 1] -= Test.sFld;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("d i21 i22 = " + Double.doubleToLongBits(d) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("b3 i23 i24 = " + (b3 ? 1 : 0) + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 = " + i28);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld iFld1 Test.fArrFld = " + Test.iFld + "," + iFld1 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
