// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=64L;
    public int iFld=4;
    public static float fFld=-94.122F;
    public static boolean bFld=true;
    public static double dFld=-1.53744;
    public byte byFld=94;
    public static int iFld1=27931;
    public static int iFld2=-12226;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1339L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3) {

        int i4=12, i5=-247, i6=7, i7=-13, i8=-10, iArr1[]=new int[N];
        byte by=93;
        double d1=1.129427;
        short s=-17822;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 2.43F);
        FuzzerUtils.init(iArr1, -58549);

        Test.fFld = i3;
        for (i4 = 15; i4 < 326; ++i4) {
            Test.fFld = Test.instanceCount;
        }
        i3 = i3;
        i6 = 1;
        while (++i6 < 157) {
            if (Test.bFld) continue;
            Test.instanceCount += 213;
            for (i7 = 1; i7 < 10; i7++) {
                Test.instanceCount = -6;
                fArr[i7][i7 + 1] -= 28242;
                Test.instanceCount += by;
                try {
                    iArr1[i7 - 1] = (i7 / -65);
                    i5 = (i5 % -64965);
                    i3 = (i3 / iArr1[i6]);
                } catch (ArithmeticException a_e) {}
                d1 *= s;
                i3 += i7;
            }
            Test.instanceCount += (((i6 * i6) + Test.instanceCount) - i5);
        }
        vMeth2_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + by + Double.doubleToLongBits(d1) + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        int i9=24944, i10=-64, i11=74, i12=9, iArr2[]=new int[N];
        short s1=21044;
        float f=-106.557F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr2, 0);
        FuzzerUtils.init(byArr, (byte)-76);

        vMeth2(i9);
        Test.instanceCount = (long)Test.dFld;
        Test.dFld = Test.instanceCount;
        iArr2[(-5 >>> 1) % N] -= (int)Test.instanceCount;
        for (i10 = 4; i10 < 215; ++i10) {
            byArr[i10 + 1] = (byte)i10;
        }
        Test.dFld -= Test.fFld;
        iArr2[(i9 >>> 1) % N] <<= s1;
        s1 <<= (short)i11;
        switch ((((i11 >>> 1) % 1) * 5) + 38) {
        case 42:
            for (f = 4; 236 > f; f += 2) {
                int i13=-244;
                if (Test.bFld) continue;
                i9 -= i9;
                Test.instanceCount += (long)f;
                i13 *= (int)Test.dFld;
            }
            break;
        }
        vMeth1_check_sum += i9 + i10 + i11 + s1 + Float.floatToIntBits(f) + i12 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(byArr);
    }

    public void vMeth() {


        vMeth1();
        Test.dFld = Test.instanceCount;
        iFld = (int)Test.fFld;
        vMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-7379, i1=-4, i2=140, i14=-8, i15=48, i16=0, i17=-174, i18=-13, i19=-96, iArr[]=new int[N];
        double d=1.58481;
        short s2=20286, sArr[]=new short[N];

        FuzzerUtils.init(iArr, 62233);
        FuzzerUtils.init(sArr, (short)-6628);

        iFld = -42;
        Test.fFld = Integer.reverseBytes(iArr[(iFld >>> 1) % N]);
        i = 1;
        while (++i < 172) {
            for (i1 = 4; i1 < 146; i1++) {
                iFld *= (i2--);
                Test.bFld = (((-8.106477 - i1) - Test.fFld) > ((2643601354254179499L * i1) * (Test.fFld--)));
                d -= (((-(Test.lArrFld[i1] = 31711)) * (i2++)) - (Test.instanceCount * (-iFld)));
            }
            vMeth();
            Test.instanceCount += (i * i);
            for (i14 = 9; i14 < 146; i14++) {
                for (i16 = 1; i16 < 2; i16 += 3) {
                    sArr[i14 - 1] *= (short)Test.fFld;
                    if (Test.bFld) {
                        iArr = iArr;
                        i18 = i15;
                    } else {
                        iArr[i16] >>= i1;
                        switch ((i16 % 7) + 80) {
                        case 80:
                            Test.dFld += i16;
                            i18 += s2;
                        case 81:
                            byFld = (byte)iFld;
                            i2 /= (int)(i | 1);
                            break;
                        case 82:
                            if (Test.bFld) continue;
                            if (true) {
                                i17 *= (int)Test.instanceCount;
                                i18 -= Test.iFld1;
                            }
                            switch ((i14 % 8) + 64) {
                            case 64:
                            case 65:
                                Test.lArrFld[i14] *= i1;
                                iArr[i + 1] += (int)Test.fFld;
                                iArr[i14] <<= iFld;
                                Test.instanceCount += Test.instanceCount;
                                break;
                            case 66:
                                Test.fFld += (i16 * Test.fFld);
                            case 67:
                                iArr[i] *= i17;
                            case 68:
                                s2 += (short)i17;
                            case 69:
                                Test.iFld2 += (19666 + (i16 * i16));
                                break;
                            case 70:
                                Test.fFld += (((i16 * Test.instanceCount) + i18) - i2);
                                break;
                            case 71:
                                d += Test.instanceCount;
                            default:
                                i19 = Test.iFld2;
                            }
                            break;
                        case 83:
                            i2 ^= s2;
                            break;
                        case 84:
                            Test.instanceCount >>>= i1;
                        case 85:
                            iArr[i] >>= i1;
                            break;
                        case 86:
                            Test.iFld2 -= i2;
                            break;
                        default:
                            if (Test.bFld) continue;
                        }
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("d i14 i15 = " + Double.doubleToLongBits(d) + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("s2 i19 iArr = " + s2 + "," + i19 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.dFld byFld = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(Test.dFld) + "," + byFld);
        FuzzerUtils.out.println("Test.iFld1 Test.iFld2 Test.lArrFld = " + Test.iFld1 + "," + Test.iFld2 + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
