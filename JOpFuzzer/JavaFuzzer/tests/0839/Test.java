// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=238L;
    public static volatile int iFld=-2;
    public static long lFld=57773L;
    public static volatile long lFld1=-87L;
    public volatile int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 234);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i5) {

        int i6=-234, i7=47, i8=-77, i9=-5, i10=-97, i11=28168, i12=5;
        double d=-94.12195;
        boolean b=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -8943387971131160114L);

        for (i6 = 16; i6 < 330; ++i6) {
            i5 += i6;
            lArr[i6] += (long)1.607F;
            switch ((i6 % 8) + 39) {
            case 39:
                i7 = (int)d;
                i5 += i7;
            case 40:
                i5 += (((i6 * i5) + Test.instanceCount) - i5);
                i8 = 1;
                while (++i8 < 5) {
                    i9 = 1;
                    do {
                        b = false;
                        i7 += (i9 ^ Test.instanceCount);
                    } while (++i9 < 1);
                    switch ((i8 % 6) + 126) {
                    case 126:
                        for (i10 = i6; i10 < 1; i10++) {
                            i11 >>= i8;
                            i11 += (((i10 * Test.iFld) + Test.iFld) - i10);
                        }
                        break;
                    case 127:
                        Test.instanceCount += Test.instanceCount;
                        break;
                    case 128:
                        i7 -= -17363;
                        break;
                    case 129:
                        i12 = i10;
                        break;
                    case 130:
                        i11 = -30;
                    case 131:
                        Test.iFld = i9;
                    }
                }
                break;
            case 41:
                i12 += i6;
                break;
            case 42:
                Test.iArrFld1[i6 + 1] = i9;
            case 43:
                i7 = i10;
            case 44:
                i5 *= i5;
                break;
            case 45:
                Test.iArrFld1[i6 - 1] = (int)-2L;
                break;
            case 46:
                lArr = lArr;
                break;
            }
        }
        long meth_res = i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 + (b ? 1 : 0) + i10 + i11 + i12 +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, int i4) {

        float f1=0.770F;

        Test.iArrFld1[(i4 >>> 1) % N] += (int)Long.reverseBytes((long)(iMeth1(-32) + f1));
        Test.instanceCount = i3;
        vMeth_check_sum += i3 + i4 + Float.floatToIntBits(f1);
    }

    public static int iMeth(long l) {

        float f2=0.248F;
        int i13=35099, i14=91, i15=-12, i16=-29, i17=1332, i18=9, i19=7, i20=-50, i21=-75;
        byte by=36;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)26631);

        vMeth(Test.iFld, -145);
        f2 *= Test.iFld;
        for (i13 = 9; i13 < 364; ++i13) {
            for (i15 = i13; i15 < 5; i15++) {
                by *= (byte)i15;
            }
            i16 += -13389;
            for (i17 = 1; 5 > i17; i17++) {
                i16 -= i17;
            }
            for (i19 = 1; i19 < 5; i19++) {
                Test.iArrFld1 = Test.iArrFld1;
                l = i13;
                sArr[i13 + 1] = (short)i17;
                i21 = 1;
                do {
                    i20 -= (int)Test.instanceCount;
                    Test.iFld += (((i21 * l) + i21) - i13);
                } while (++i21 < 2);
            }
        }
        long meth_res = l + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + by + i17 + i18 + i19 + i20 + i21 +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-2.572F;
        int i1=61138, i2=-42060, i22=138, i23=63, i24=35, i25=41454, i26=-9, i27=-1;
        long l1=19419L;
        short s=-26449;
        boolean b1=false;
        byte by1=31;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 102.107950);

        for (int i : iArrFld) {
            f += Integer.reverseBytes(--i);
        }
        for (i1 = 5; i1 < 249; ++i1) {
            iMeth(9L);
            for (i22 = 2; i22 < 103; i22++) {
                Test.instanceCount += (i22 * i22);
                i2 <<= (int)Test.lFld;
                for (i24 = 1; 2 > i24; ++i24) {
                    i25 = (int)l1;
                }
                iArrFld[i22] += i25;
                if (true) continue;
                dArr[i1] = i25;
                switch ((i22 % 5) + 25) {
                case 25:
                    for (i26 = 1; 2 > i26; ++i26) {
                        Test.lFld1 = s;
                        i23 = i25;
                        switch ((i26 % 8) + 62) {
                        case 62:
                            s -= (short)i1;
                            Test.iArrFld1[i22] = Test.iFld;
                        case 63:
                            if (b1) continue;
                            if (true) break;
                            break;
                        case 64:
                            i23 += (i26 + i24);
                            i27 &= 156;
                            i25 += i26;
                            i25 -= (int)f;
                            break;
                        case 65:
                            l1 = i1;
                        case 66:
                            i23 -= by1;
                            break;
                        case 67:
                            i23 >>= i2;
                            s = (short)i22;
                            if (b1) continue;
                        case 68:
                            i25 -= i23;
                            break;
                        case 69:
                            f *= f;
                            break;
                        }
                    }
                    break;
                case 26:
                    i2 -= s;
                    break;
                case 27:
                    Test.lFld *= i1;
                case 28:
                    i27 = (int)f;
                case 29:
                    Test.lFld1 += (((i22 * i22) + f) - i1);
                    break;
                default:
                    Test.iFld += (i22 - f);
                }
            }
        }

        FuzzerUtils.out.println("f i1 i2 = " + Float.floatToIntBits(f) + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 l1 i26 = " + i25 + "," + l1 + "," + i26);
        FuzzerUtils.out.println("i27 s b1 = " + i27 + "," + s + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("by1 dArr = " + by1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.lFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.lFld);
        FuzzerUtils.out.println("Test.lFld1 iArrFld Test.iArrFld1 = " + Test.lFld1 + "," +
            FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
