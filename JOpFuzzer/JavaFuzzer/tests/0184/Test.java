// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-49116L;
    public static byte byFld=-116;
    public static float fFld=-46.122F;
    public double dFld=124.124455;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 77);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=-19, i4=-11, i5=57447, i8=5, i9=-8, i10=41, i11=-8, iArr1[]=new int[N];
        byte by=56;
        boolean b=true, bArr[]=new boolean[N];
        short s1=-8194;
        float fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -84);
        FuzzerUtils.init(fArr, 1.631F);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr, -2.64226);

        i3 = (int)Test.instanceCount;
        for (i4 = 21; i4 < 357; i4++) {
            by *= (byte)Test.instanceCount;
            i5 = i4;
            if (b) {
                i5 |= -55;
                fArr[i4 + 1] = i5;
                i5 >>>= i4;
            } else if (b) {
                for (i8 = 1; i8 < 5; i8++) {
                    bArr[i4 + 1] = b;
                    i9 = i5;
                    for (i10 = 1; i10 < 2; ++i10) {
                        Test.instanceCount += i4;
                        if (b) continue;
                        dArr[i4] += s1;
                    }
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + by + i8 + i9 + (b ? 1 : 0) + i10 + i11 + s1 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(short s, long l1) {

        int i2=-3, i12=-74, i13=-210, i14=-129, i15=113, i16=14427, iArr2[][]=new int[N][N];

        FuzzerUtils.init(iArr2, -148);

        i2 = 1;
        while (++i2 < 240) {
            vMeth1();
            for (i12 = 7; i12 > 1; i12 -= 3) {
                iArr2[i2][i12] = i12;
                for (i14 = 4; i14 > i2; i14 -= 3) {
                    iArr2[i2 - 1][i2 - 1] <<= 48;
                }
                switch (((i12 % 10) * 5) + 15) {
                case 62:
                    i15 += (i12 | i14);
                    break;
                case 17:
                    i15 = i15;
                    i16 -= 21490;
                    break;
                case 25:
                    try {
                        i16 = (-1680247380 / i14);
                        i15 = (i2 / 1952766964);
                        i13 = (iArr2[i12 - 1][i12] % 878463735);
                    } catch (ArithmeticException a_e) {}
                    i13 -= 11134;
                    i15 *= i14;
                    break;
                case 64:
                    i13 += (int)l1;
                    i16 /= (int)37.223F;
                case 23:
                    Test.instanceCount = Test.byFld;
                    break;
                case 32:
                    iArr2[i12 + 1][i12] += i15;
                    break;
                case 49:
                    i13 = -67;
                case 24:
                    i15 *= i12;
                    break;
                case 57:
                    i15 /= (int)(i12 | 1);
                    break;
                case 31:
                    iArr2[i12][i2 + 1] = i14;
                    break;
                default:
                    i13 = (int)63551L;
                }
            }
        }
        long meth_res = s + l1 + i2 + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i=57, i1=5442, i17=0, iArr[]=new int[N];
        float f=1.511F;
        short s2=-25053;
        long l2=2882982983L, lArr[]=new long[N];
        boolean b1=true;
        double d1=-1.36663;

        FuzzerUtils.init(iArr, -94);
        FuzzerUtils.init(lArr, -2945175733L);

        if (b1) {
            if (b1) {
                for (i = 1; i < 171; ++i) {
                    double d=-76.34607;
                    switch (((i % 1) * 5) + 69) {
                    case 71:
                        f += (i * i);
                        i1 += (int)l;
                        break;
                    }
                    i1 += (i * i);
                    i1 = (int)(f--);
                    iArr[i] = (int)(((6908775629315013644L - iArr[i]) + (Test.instanceCount + i1)) - ((i * d) +
                        (--i1)));
                    iMeth(s2, l);
                    l2 = 9;
                    while ((l2 -= 3) > 0) {
                        i1 += i1;
                        lArr[i] -= l;
                        i1 += 27001;
                        s2 -= (short)i17;
                    }
                }
            } else {
                d1 += -3769825619843907039L;
            }
        } else {
            i1 -= i1;
        }
        vMeth_check_sum += l + i + i1 + Float.floatToIntBits(f) + s2 + l2 + i17 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        double d2=50.86445;
        int i18=-46274, i19=0, i20=233, i21=-56922, i22=-42124, i23=-7, i24=28, i25=3014, i26=-106;
        short s3=16538;

        vMeth(3442783903L);
        for (d2 = 10; d2 < 269; ++d2) {
            try {
                i18 = (-57 % i18);
                Test.iArrFld[(int)(d2 - 1)] = (i18 % i18);
                i18 = (i18 % i18);
            } catch (ArithmeticException a_e) {}
            for (i19 = 4; 97 > i19; ++i19) {
                Test.iArrFld[i19] += (int)1.129F;
            }
            i20 += (int)d2;
            Test.instanceCount += (long)(((d2 * i18) + i19) - i20);
        }
        Test.instanceCount = (long)Test.fFld;
        for (i21 = 3; i21 < 368; i21++) {
            Test.fFld += (((i21 * i21) + i21) - s3);
            i22 = i22;
            Test.instanceCount = 11;
            i20 = (int)3439907948L;
            i20 -= i20;
            Test.fFld += i20;
            for (i23 = 3; i23 < 69; i23++) {
                dFld = i23;
                Test.fFld += i23;
                i18 -= 46283;
                for (i25 = 1; i25 < 2; i25 += 3) {
                    Test.iArrFld[i21 + 1] -= (int)Test.instanceCount;
                    i22 += (((i25 * Test.instanceCount) + i24) - Test.fFld);
                    Test.iArrFld[i25 - 1] = (int)Test.instanceCount;
                    Test.iArrFld = Test.iArrFld;
                    i18 <<= i18;
                    Test.fFld += i24;
                    if (false) continue;
                    i18 += (i25 * i25);
                }
                i20 &= i22;
                Test.iArrFld[i21] = i26;
            }
        }

        FuzzerUtils.out.println("d2 i18 i19 = " + Double.doubleToLongBits(d2) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("s3 i23 i24 = " + s3 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 = " + i25 + "," + i26);

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("dFld Test.iArrFld = " + Double.doubleToLongBits(dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
