// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public static float fFld=-6.117F;
    public byte byFld=71;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 13L);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(float f) {

        int i4=2, i5=-12, i6=59076, i7=-5, i8=3, i9=-50399;
        byte by=21;

        i4 = 1;
        do {
            for (i5 = 1; i5 < 5; i5++) {
                i7 = 1;
                while (++i7 < 2) {
                    i6 *= i5;
                    Test.instanceCount -= -59;
                    i6 = i4;
                    i6 &= by;
                    i6 -= (int)Test.instanceCount;
                }
                for (i8 = 2; i8 > i4; --i8) {
                    i9 += i8;
                    Test.instanceCount += (i8 + i4);
                }
                Test.instanceCount += 45;
                i6 -= i9;
            }
            Test.instanceCount += (i4 - i7);
            i9 = by;
        } while (++i4 < 354);
        long meth_res = Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + by + i8 + i9;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i, int i1, double d1) {

        int i2=4, i3=-7, i10=38938, i11=-9, i12=48, iArr[]=new int[N];
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -40313);
        FuzzerUtils.init(dArr, 2.26104);

        for (i2 = 3; i2 < 194; i2++) {
            i <<= iMeth1(Test.fFld);
            i1 = -50541;
            i10 = 1;
            do {
                for (i11 = 1; i11 < 1; ++i11) {
                    i += i11;
                    i1 += (((i11 * i10) + Test.instanceCount) - i11);
                    switch (((i12 >>> 1) % 4) + 2) {
                    case 2:
                        i1 -= 242;
                        Test.instanceCount = 138;
                        iArr[i2 + 1] &= (int)Test.instanceCount;
                    case 3:
                        dArr[i10 - 1] *= 35.39F;
                        d1 += Test.instanceCount;
                        Test.instanceCount -= i2;
                        b1 = b1;
                    case 4:
                        iArr[i2 + 1] = i;
                        break;
                    case 5:
                        i3 %= (int)(Test.instanceCount | 1);
                        break;
                    }
                }
            } while (++i10 < 8);
        }
        long meth_res = i + i1 + Double.doubleToLongBits(d1) + i2 + i3 + i10 + i11 + i12 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth() {

        double d=2.126022;
        int i13=59449, i14=-9, i15=151, i16=-14, i17=-9, i18=53388, iArr1[]=new int[N];
        long l=-16025L;
        boolean b2=true;
        byte by1=115;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -49.92F);
        FuzzerUtils.init(iArr1, 7);

        d += iMeth(i13, i13, d);
        fArr[(i13 >>> 1) % N] *= i13;
        for (l = 10; 300 > l; l += 2) {
            short s=18001;
            Test.lArrFld[(int)(l + 1)] = l;
            if (b2) continue;
            switch ((int)((l % 6) + 27)) {
            case 27:
                if (b2) {
                    if (false) continue;
                    for (i15 = 11; i15 > l; i15 -= 2) {
                        d -= i13;
                        iArr1[(int)(l - 1)] >>>= 25;
                        iArr1 = iArr1;
                        for (i17 = 1; i17 < 1; ++i17) {
                            if (b2) continue;
                            Test.instanceCount += (((i17 * i16) + i18) - i17);
                        }
                    }
                } else if (b2) {
                    by1 -= (byte)s;
                } else {
                    Test.instanceCount += (((l * i13) + i15) - Test.fFld);
                }
            case 28:
                Test.instanceCount += (long)2.694F;
                break;
            case 29:
                Test.instanceCount += (((l * i14) + Test.fFld) - i13);
                break;
            case 30:
                b2 = b2;
            case 31:
                d = Test.instanceCount;
            case 32:
                fArr[(int)(l + 1)] += 176L;
                break;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i13 + l + i14 + (b2 ? 1 : 0) + i15 + i16 + i17 + i18 + by1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b=false;
        int i19=-9, i20=182, i21=26899, i22=12, i23=7, iArr2[]=new int[N];
        double d2=1.68087, dArr1[]=new double[N];
        long l2=3929907348259720463L;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr2, 150);
        FuzzerUtils.init(dArr1, -47.21007);
        FuzzerUtils.init(byArr, (byte)-44);

        b = b;
        dMeth();
        for (i19 = 1; i19 < 179; i19++) {
            i21 = 1;
            do {
                i22 = 1;
                while (++i22 < 1) {
                    i20 *= i21;
                    i20 = i21;
                    iArr2[(-177 >>> 1) % N] -= 90;
                }
                Test.fFld += i21;
                switch (((i21 % 2) * 5) + 8) {
                case 18:
                case 12:
                    i20 -= i20;
                    i20 <<= (int)Test.instanceCount;
                    iArr2[i19 - 1] = 151;
                    byFld >>= (byte)Test.instanceCount;
                }
                dArr1[i19 + 1] -= i21;
                Test.instanceCount = (long)d2;
            } while (++i21 < 141);
            i20 = (int)Test.fFld;
            for (l2 = i19; l2 < 141; ++l2) {
                i20 >>= i21;
                byArr[i19 - 1] = (byte)Test.fFld;
                if (b) {
                    d2 = byFld;
                    i23 += (int)l2;
                }
                i23 += (int)l2;
                i23 = (int)l2;
                Test.instanceCount += l2;
                switch ((int)(((l2 % 5) * 5) + 85)) {
                case 108:
                    byArr[(int)(l2 - 1)] -= (byte)d2;
                    try {
                        i23 = (-100 % i23);
                        i23 = (1620484602 / i22);
                        iArr2[(int)(l2 + 1)] = (iArr2[(int)(l2 - 1)] % i20);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 110:
                    d2 += -21019;
                case 87:
                case 90:
                    i23 -= (int)1.358F;
                case 101:
                    i20 += (int)(((l2 * i23) + Test.fFld) - i20);
                default:
                    i20 = i22;
                }
            }
        }

        FuzzerUtils.out.println("b i19 i20 = " + (b ? 1 : 0) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 d2 = " + i21 + "," + i22 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("l2 i23 iArr2 = " + l2 + "," + i23 + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("dArr1 byArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," +
            FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + byFld);
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
