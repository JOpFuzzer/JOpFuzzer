// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public int iFld=-7;
    public float fFld=-12.420F;
    public static double dFld=-12.2371;
    public static float fFld1=-1.927F;
    public static double dFld1=0.42641;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public volatile double dArrFld[]=new double[N];
    public static byte byArrFld[]=new byte[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -47585);
        FuzzerUtils.init(Test.byArrFld, (byte)53);
        FuzzerUtils.init(Test.lArrFld, -212L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i8, int i9, int i10) {

        int i11=197, i12=0;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 109.285F);

        for (i11 = 2; i11 < 282; ++i11) {
            Test.instanceCount = 13;
            Test.dFld -= Test.instanceCount;
            i8 &= i9;
            i10 = (int)Test.instanceCount;
            Test.instanceCount += (long)Test.fFld1;
            Test.fFld1 += i11;
            Test.dFld *= i12;
            i10 = 8;
        }
        i9 *= (int)Test.instanceCount;
        i12 += (int)-2.1012F;
        Test.dFld = i8;
        Test.instanceCount -= (long)Test.dFld;
        fArr[(i9 >>> 1) % N] = i11;
        Test.byArrFld[(i9 >>> 1) % N] = (byte)i9;
        vMeth_check_sum += i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1(long l1) {

        int i13=0, i14=1987, i15=-21, i16=12, i17=-86, i18=-38870;
        double d1=-1.55137;
        byte by=-18;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 250L);

        vMeth(i13, i13, i13);
        Test.fFld1 -= (float)Test.dFld;
        for (i14 = 3; i14 < 202; ++i14) {
            for (d1 = 8; d1 > 1; d1--) {
                i16 %= -50723;
                lArr1[(int)(d1 + 1)][i14] = i14;
                if (false) continue;
                Test.dFld += 18399;
                by ^= (byte)i13;
                for (i17 = 1; 2 > i17; i17++) {
                    Test.fFld1 += (((i17 * Test.fFld1) + i14) - i18);
                    Test.iArrFld[i14 + 1] >>= (int)l1;
                    by = (byte)Test.instanceCount;
                    Test.iArrFld[i14 + 1] >>= (int)Test.instanceCount;
                    Test.fFld1 -= l1;
                }
            }
        }
        long meth_res = l1 + i13 + i14 + i15 + Double.doubleToLongBits(d1) + i16 + by + i17 + i18 +
            FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(long l, int i2) {

        int i3=-4, i4=-60201, i5=248, i6=-24, i7=-142;
        double d=-116.41827;
        byte by1=105;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3759535066L);

        i2 >>= (int)(++Test.instanceCount);
        for (i3 = 16; 307 > i3; ++i3) {
            Test.iArrFld[i3] -= (int)(Math.max((int)(Test.instanceCount + -12L), i3) - Test.instanceCount);
            i5 = 1;
            do {
                Test.instanceCount += (i5 * i5);
                for (i6 = 1; i6 > 1; i6--) {
                    switch ((i6 % 3) + 17) {
                    case 17:
                        Test.iArrFld[i3] += (int)(Math.abs(dArrFld[i5 - 1]) - (4258858693L * (69 + l)));
                        d *= lArr[i6 - 1];
                        switch ((((Test.iArrFld[i3 - 1] >>> 1) % 4) * 5) + 83) {
                        case 93:
                            l >>= (i4 + 1);
                            i4 /= (int)(((952217480173709514L - (l + 142)) - 196) | 1);
                            break;
                        case 91:
                            Test.instanceCount += (i6 + i7);
                        case 94:
                            Test.instanceCount -= (Math.max(-245, --i7) + (i7++));
                            i2 *= (iFld - iMeth1(Test.instanceCount));
                            break;
                        case 92:
                        default:
                            i2 = 5243;
                        }
                    case 18:
                        i4 = (int)l;
                        break;
                    case 19:
                        i2 += (i6 + by1);
                    }
                }
            } while (++i5 < 6);
        }
        long meth_res = l + i2 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + by1 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=220, i1=10822, i19=-178, i20=-61981, i21=2, i22=-55543;
        byte by2=117;
        short s=-25182;

        iFld = (--iFld);
        for (i = 2; i < 272; i++) {
            iFld -= (int)(((--iFld) * (fFld * Test.instanceCount)) + ((iFld * i) + iMeth(Test.instanceCount, i)));
            iFld = by2;
            i19 = 1;
            do {
                Test.iArrFld[i + 1] += (int)Test.instanceCount;
                Test.instanceCount += (i19 * i19);
                iFld += i20;
                iFld -= s;
                Test.instanceCount += (long)Test.fFld1;
                i20 = (int)Test.dFld1;
                Test.instanceCount += Test.instanceCount;
                Test.instanceCount += i20;
                i20 = s;
            } while ((i19 += 3) < 93);
            i21 = 1;
            do {
                Test.instanceCount <<= 50422;
                fFld += 1.772F;
                i1 += (i21 | Test.instanceCount);
                switch (((i21 % 7) * 5) + 25) {
                case 26:
                case 29:
                    i20 >>>= i21;
                    i20 = (int)Test.dFld;
                    iFld = i;
                    break;
                case 50:
                    iFld >>>= (int)8L;
                    i22 = 1;
                    do {
                        Test.instanceCount += i22;
                        Test.lArrFld[i22] *= i20;
                        i20 += (int)Test.fFld1;
                    } while (++i22 < 1);
                    iFld += (i21 * by2);
                    s = (short)i1;
                    break;
                case 31:
                    Test.instanceCount = i22;
                    break;
                case 52:
                    Test.bFld = Test.bFld;
                case 49:
                    i1 *= i19;
                    break;
                case 38:
                    Test.instanceCount = -29590L;
                    break;
                }
            } while (++i21 < 93);
        }

        FuzzerUtils.out.println("i i1 by2 = " + i + "," + i1 + "," + by2);
        FuzzerUtils.out.println("i19 i20 s = " + i19 + "," + i20 + "," + s);
        FuzzerUtils.out.println("i21 i22 = " + i21 + "," + i22);

        FuzzerUtils.out.println("Test.instanceCount iFld fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.dFld Test.fFld1 Test.dFld1 = " + Double.doubleToLongBits(Test.dFld) + "," +
            Float.floatToIntBits(Test.fFld1) + "," + Double.doubleToLongBits(Test.dFld1));
        FuzzerUtils.out.println("Test.bFld Test.iArrFld dArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("Test.byArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
