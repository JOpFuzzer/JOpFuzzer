// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-62636L;
    public static int iFld=42589;
    public static double dFld=0.23932;
    public static short sFld=-6711;
    public static boolean bFld=true;
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 6574009381588399996L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(double d1, int i4) {

        int i5=-101, i6=14, i7=-7675, i8=88, i9=-242, i10=3, i11=-6, i12=41829, iArr[]=new int[N];
        boolean b=true, bArr[]=new boolean[N];
        long l=-1411707160173718577L, lArr[]=new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, -23410L);
        FuzzerUtils.init(iArr, 61267);

        try {
            for (i5 = 6; i5 < 283; i5++) {
                i6 ^= Test.sFld;
            }
        }
        catch (ArithmeticException exc1) {
            bArr[(Test.iFld >>> 1) % N] = b;
            for (i7 = 3; i7 < 297; ++i7) {
                l = 0;
                for (i9 = 1; i9 < 6; i9++) {
                    for (i11 = 1; i11 < 2; i11++) {
                        float f2=-1.921F;
                        lArr[i9 - 1] -= i5;
                        iArr[i7 - 1] = i5;
                        i6 = (int)f2;
                        i4 += i12;
                        d1 *= i9;
                        d1 -= l;
                        Test.instanceCount >>= i10;
                    }
                }
            }
        }
        finally {
            i6 += (int)l;
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i4 + i5 + i6 + (b ? 1 : 0) + i7 + i8 + l + i9 + i10 + i11 +
            i12 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(int i1) {

        int i2=-19161, i3=22060, i13=2, i14=11, i15=-100, i16=92, i17=13, i18=12;
        float f1=-2.449F, fArr[][]=new float[N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr, -54.804F);
        FuzzerUtils.init(byArr, (byte)75);

        for (i2 = 11; i2 < 297; ++i2) {
            Test.instanceCount %= (((long)(i3 + (i1 -= (int)(f1 * i1)))) | 1);
            fArr[i2] = (fArr[i2 - 1] = (fArr[i2 + 1] = (fArr[i2 + 1] = fArr[i2 - 1])));
            vMeth(Test.dFld, i2);
        }
        byArr[(i1 >>> 1) % N] = (byte)-89L;
        for (i13 = 4; 129 > i13; i13++) {
            for (i15 = 1; i15 < 13; i15++) {
                Test.instanceCount = i15;
                Test.lArrFld[i15 - 1] = i14;
                Test.dFld = i1;
                for (i17 = 1; 2 > i17; ++i17) {
                    switch ((i15 % 2) + 25) {
                    case 25:
                        f1 += i18;
                        fArr[i17 + 1][i15] -= Test.instanceCount;
                        Test.iFld <<= i1;
                        break;
                    case 26:
                        i1 += (int)Test.instanceCount;
                        break;
                    }
                }
            }
        }
        long meth_res = i1 + i2 + i3 + Float.floatToIntBits(f1) + i13 + i14 + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(float f, int i) {

        int i19=-10, i20=11, i21=4, i22=58124, i23=-42, i24=12461;
        short sArr[][]=new short[N][N];
        double dArr[]=new double[N];
        byte byArr1[][]=new byte[N][N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(sArr, (short)15667);
        FuzzerUtils.init(dArr, -30.26776);
        FuzzerUtils.init(byArr1, (byte)-31);
        FuzzerUtils.init(fArr1, -79.231F);

        i *= (int)(((sArr[(i >>> 1) % N][(Test.iFld >>> 1) % N]++) * (++Test.dFld)) * iMeth1(i));
        i += (int)Test.dFld;
        for (i19 = 3; i19 < 254; i19++) {
            i *= 12;
            dArr[i19 + 1] *= Test.sFld;
            for (i21 = 1; 6 > i21; ++i21) {
                for (i23 = 2; i23 > i21; i23--) {
                    byArr1 = byArr1;
                    switch (((i19 % 2) * 5) + 4) {
                    case 6:
                        Test.dFld = f;
                        if (Test.bFld) continue;
                        break;
                    case 5:
                        iArrFld[i21 + 1] ^= i;
                        fArr1 = FuzzerUtils.float1array(N, (float)-2.892F);
                        i22 = (int)Test.instanceCount;
                        iArrFld[i19 + 1] = -8;
                        break;
                    default:
                        i22 += i23;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i + i19 + i20 + i21 + i22 + i23 + i24 + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-1.83943;
        int i25=30650, i26=-13, i27=-9, i28=-2, i29=36142, i30=-59193, i31=44753, i32=-9707, i33=-2;
        byte by=-60;
        float f3=0.547F;

        d -= (Test.iFld + (-iMeth(58.740F, 49924)));
        i25 = 1;
        while (++i25 < 268) {
            Test.instanceCount += (i25 * i25);
            for (i26 = 5; i26 < 94; ++i26) {
                if (Test.bFld) {
                    Test.iFld -= i26;
                    switch ((i25 % 3) + 85) {
                    case 85:
                        for (i28 = 1; i28 < 2; i28++) {
                            Test.lArrFld[i25] -= Test.instanceCount;
                            Test.instanceCount += (i28 * i28);
                            iArrFld[i28 + 1] >>>= i29;
                            iArrFld[i25 + 1] += (int)Test.instanceCount;
                            Test.instanceCount += -7;
                            Test.iFld >>= (int)Test.instanceCount;
                            Test.lArrFld[i28 - 1] += (long)Test.dFld;
                            Test.instanceCount = Test.iFld;
                            by >>= (byte)Test.iFld;
                            i29 <<= 42261;
                        }
                        break;
                    case 86:
                        Test.instanceCount = i28;
                        i27 += (int)(89.811F + (i26 * i26));
                        break;
                    case 87:
                        Test.sFld += (short)(i26 * i26);
                        break;
                    }
                    for (i30 = 1; i30 < 2; i30++) {
                        i29 = i28;
                        Test.instanceCount += (i30 * i30);
                    }
                }
                switch ((((Test.iFld >>> 1) % 1) * 5) + 64) {
                case 66:
                    for (i32 = i26; i32 < 2; i32 += 3) {
                        f3 = Test.iFld;
                        i31 &= i28;
                        Test.iFld += (((i32 * i31) + Test.iFld) - i26);
                        i31 += i25;
                    }
                    break;
                }
            }
        }

        FuzzerUtils.out.println("d i25 i26 = " + Double.doubleToLongBits(d) + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("by i30 i31 = " + by + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 f3 = " + i32 + "," + i33 + "," + Float.floatToIntBits(f3));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld Test.bFld Test.lArrFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
