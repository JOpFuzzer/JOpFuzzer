// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=32301L;
    public static float fFld=0.269F;
    public static int iFld=0;
    public double dFld=92.43040;
    public long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld1[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 6);
        FuzzerUtils.init(Test.lArrFld1, -65171L);
        FuzzerUtils.init(Test.dArrFld, 94.105523);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i8, int i9, int i10) {

        double d=-6.129842;

        i10 -= 0;
        i8 += (int)d;
        long meth_res = i8 + i9 + i10 + Double.doubleToLongBits(d);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(int i4, long l1) {

        int i6=27574, i7=-11, i11=-112, i12=4910;
        byte by1=-47;
        boolean b=true;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 2L);

        for (int i5 : Test.iArrFld) {
            for (i6 = 1; 4 > i6; ++i6) {
                i4 -= -178;
                Test.instanceCount += (long)dMeth(i7, i6, i6);
                Test.iArrFld[i6 - 1] = 8657;
                i7 = -10;
                by1 <<= (byte)217;
                i5 <<= i7;
                switch ((((4 >>> 1) % 4) * 5) + 24) {
                case 27:
                    by1 = (byte)Test.instanceCount;
                case 43:
                    Test.fFld -= i4;
                    b = b;
                    for (i11 = 1; i11 < 2; i11++) {
                        i7 = i12;
                        lArr[i11 - 1][i6] += i7;
                    }
                case 28:
                    i12 >>>= i12;
                    break;
                case 33:
                    i4 = by1;
                    break;
                }
            }
        }
        long meth_res = i4 + l1 + i6 + i7 + by1 + (b ? 1 : 0) + i11 + i12 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i3) {

        long l2=-6942522174169902965L;
        short s1=32565;

        i3 = (int)((i3 + lMeth(Test.iFld, Test.instanceCount)) - Test.instanceCount);
        Test.fFld *= i3;
        switch (((i3 >>> 1) % 2) + 25) {
        case 25:
            i3 = 8;
            break;
        case 26:
            Test.iArrFld[(i3 >>> 1) % N] = Test.iFld;
            Test.lArrFld1[(i3 >>> 1) % N] *= i3;
            l2 = 101;
            Test.dArrFld[(-12 >>> 1) % N] *= i3;
            break;
        }
        i3 -= s1;
        Test.fFld -= Test.instanceCount;
        long meth_res = i3 + l2 + s1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=7869919995893893820L;
        int i=-12, i1=-52689, i2=-8, i13=206, i14=0, i15=62933, i16=-13;
        short s=13192;
        byte by=41;
        double d1=-1.14485, dArr[]=new double[N];
        boolean b1=true;

        FuzzerUtils.init(dArr, -1.30793);

        for (l = 173; l > 4; --l) {
            dArr[(int)(l + 1)] += ((--s) + Math.min(Test.instanceCount, Test.instanceCount *= 2292));
            i = (int)((i - (i - 156L)) - (by * i));
            Test.instanceCount = (-((-lArrFld[(int)(l)]) & Math.min(i, i)));
            for (i1 = 2; i1 < 148; i1++) {
                i = (iMeth(i1) + Test.iFld);
                for (i13 = 1; 2 > i13; i13++) {
                    i2 += (140 + (i13 * i13));
                }
                Test.iArrFld[i1] = i2;
                Test.iArrFld[(int)(l)] = (int)l;
                Test.instanceCount += (-31695L + (i1 * i1));
                i2 -= (int)Test.fFld;
                i2 = i;
                i -= (int)d1;
                i2 -= (int)dFld;
            }
            i2 += (int)l;
            for (i15 = 1; i15 < 148; ++i15) {
                Test.instanceCount += i13;
                Test.iFld %= (int)((long)(dFld) | 1);
            }
            i2 -= i13;
            if (b1) {
                i16 += (int)l;
                Test.instanceCount ^= -1;
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-61549);
            } else if (true) {
                try {
                    Test.iArrFld[(int)(l - 1)] = (i2 % Test.iArrFld[(int)(l + 1)]);
                    Test.iFld = (-29 % i15);
                    i2 = (i16 / -212);
                } catch (ArithmeticException a_e) {}
                b1 = b1;
            } else if (false) {
                Test.fFld += (((l * by) + Test.fFld) - i16);
                d1 -= Test.fFld;
            }
        }
        lArrFld[(i >>> 1) % N] -= -10;
        Test.iArrFld[(Test.iFld >>> 1) % N] = i;

        FuzzerUtils.out.println("l i s = " + l + "," + i + "," + s);
        FuzzerUtils.out.println("by i1 i2 = " + by + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i13 i14 d1 = " + i13 + "," + i14 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i15 i16 b1 = " + i15 + "," + i16 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("dFld lArrFld Test.iArrFld = " + Double.doubleToLongBits(dFld) + "," +
            FuzzerUtils.checkSum(lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld1 Test.dArrFld = " + FuzzerUtils.checkSum(Test.lArrFld1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
