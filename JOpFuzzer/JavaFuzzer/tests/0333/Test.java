// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=11L;
    public static short sFld=30426;
    public static volatile double dFld=60.108767;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 23556);
        FuzzerUtils.init(Test.lArrFld, 7430772097020307038L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i1=27247, i2=9, i3=-14, i4=-10, i5=9, i6=144;
        short s1=-521;
        float f=0.743F;
        double d1=0.2088;
        boolean b1=false;

        i1 *= i1;
        for (i2 = 15; i2 < 329; i2++) {
            i3 -= i1;
            i3 += i2;
            Test.instanceCount = i3;
            for (i4 = 1; i4 < 5; ++i4) {
                i6 = 2;
                while ((i6 -= 3) > 0) {
                    Test.instanceCount += (((i6 * s1) + i1) - i4);
                    f += (i6 + i6);
                    i3 += i6;
                }
                d1 = Test.instanceCount;
                b1 = false;
                i5 *= i6;
                i1 += i1;
                i1 &= i6;
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i6 + s1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + (b1
            ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(short s) {

        boolean b=false;
        double d=0.26980, d2=-122.88819;
        int i7=16655, i8=-42770, i9=-6, i10=11;
        float f1=-89.726F;

        b = b;
        d = lMeth();
        for (i7 = 359; i7 > 17; i7--) {
            for (i9 = 1; i9 < 5; ++i9) {
                d2 = 1;
                while (++d2 < 2) {
                    switch ((int)(((d2 % 8) * 5) + 73)) {
                    case 82:
                        i10 = i7;
                        f1 += (float)d2;
                        break;
                    case 111:
                        s += (short)i10;
                        Test.iArrFld[i9] = i9;
                        break;
                    case 92:
                        if (false) {
                            i8 += (int)d2;
                        } else {
                            i8 >>>= (int)200L;
                        }
                        b = false;
                        break;
                    case 112:
                        i10 = i8;
                        break;
                    case 89:
                    case 80:
                        i10 >>= (int)Test.instanceCount;
                    case 98:
                        i8 += (int)(((d2 * Test.instanceCount) + Test.instanceCount) - i7);
                        break;
                    case 83:
                        d *= i7;
                        break;
                    default:
                        b = true;
                    }
                }
            }
        }
        long meth_res = s + (b ? 1 : 0) + Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d2)
            + Float.floatToIntBits(f1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i) {

        float f2=1.667F;

        i = (int)(iMeth(Test.sFld) - f2);
        i -= i;
        vSmallMeth_check_sum += i + Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        int i11=-1477, i12=22087, i13=-22112, i14=164, i15=-91, i16=-126, i17=-6, i18=5, i19=-48746, i20=95, i21=241;
        float f3=-53.556F;

        for (int smallinvoc=0; smallinvoc<456; smallinvoc++) vSmallMeth(i11);
        i11 *= i11;
        i11 >>= i11;
        i11 *= -119;
        for (i12 = 3; i12 < 258; ++i12) {
            for (i14 = 2; i14 < 99; i14++) {
                i15 += Test.sFld;
                Test.lArrFld[i14] = 99;
            }
            Test.instanceCount += (i12 - Test.instanceCount);
            i11 <<= 9;
            i11 <<= (int)Test.instanceCount;
            for (i16 = 4; i16 < 99; ++i16) {
                for (i18 = 1; 2 > i18; ++i18) {
                    f3 -= Test.instanceCount;
                    Test.instanceCount += i12;
                    i13 += i18;
                    i19 += (int)Test.dFld;
                    switch ((i18 % 1) + 10) {
                    case 10:
                        bFld = bFld;
                        i11 = (int)Test.dFld;
                        i15 >>= i11;
                        Test.iArrFld[i16 - 1] -= (int)61862L;
                    }
                    i19 >>= (int)Test.instanceCount;
                    i11 -= -6;
                    Test.instanceCount %= 4159912333L;
                }
                for (i20 = 1; i20 < 2; ++i20) {
                    i15 -= -111;
                    i17 = i20;
                    i19 += 197;
                    f3 = Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("f3 i20 i21 = " + Float.floatToIntBits(f3) + "," + i20 + "," + i21);

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("bFld Test.iArrFld Test.lArrFld = " + (bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
