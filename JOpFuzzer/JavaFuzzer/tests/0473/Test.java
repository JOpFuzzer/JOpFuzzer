// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:51 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=111L;
    public static volatile int iFld=-796;
    public static byte byFld=-32;
    public double dFld=1.29881;
    public long lFld=5L;
    public static int iArrFld[][]=new int[N][N];
    public long lArrFld[]=new long[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 9);
        FuzzerUtils.init(Test.iArrFld1, -11);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i11, float f, int i12) {

        int i13=-168, i14=-2, i15=13, i16=26, i17=132, i18=-12279;
        short s1=-20083;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-109);

        byArr[(i12 >>> 1) % N] = (byte)i12;
        for (i13 = 3; i13 < 153; ++i13) {
            Test.iArrFld[i13 + 1][i13 - 1] += Test.byFld;
            i11 = i11;
            for (i15 = 1; 11 > i15; i15++) {
                i14 -= 2;
                i16 = (int)f;
                i11 = i13;
                Test.instanceCount -= Test.iFld;
                Test.iFld += i14;
                for (i17 = 2; i17 > 1; i17--) {
                    s1 += (short)(i17 | i11);
                    Test.instanceCount += (15375 + (i17 * i17));
                }
                Test.byFld += (byte)(i15 - Test.iFld);
                i12 += Test.iFld;
            }
        }
        long meth_res = i11 + Float.floatToIntBits(f) + i12 + i13 + i14 + i15 + i16 + i17 + i18 + s1 +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d) {

        int i7=-20434, i8=-19106, i9=51972, i10=-56270, i19=-13, i20=4, iArr[]=new int[N];
        short s=-29445;
        float f1=22.223F;
        boolean b=true;

        FuzzerUtils.init(iArr, -133);

        iArr[(Test.iFld >>> 1) % N] <<= (int)Test.instanceCount;
        iArr[(Test.iFld >>> 1) % N] = 9;
        for (i7 = 5; i7 < 141; ++i7) {
            switch ((i7 % 3) + 67) {
            case 67:
                i8 <<= (--Test.iFld);
                break;
            case 68:
                i8 += (((i7 * i7) + Test.iFld) - i8);
                break;
            case 69:
                for (i9 = 1; i9 < 12; ++i9) {
                    i10 -= (~((i10 * s) * iMeth(11700, f1, i8)));
                    i10 >>= (int)5629663411073798282L;
                    f1 -= 4;
                    Test.iFld *= i19;
                    i8 = (int)Test.instanceCount;
                    if (b) break;
                    if (i20 != 0) {
                        vMeth_check_sum += Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + s +
                            Float.floatToIntBits(f1) + i19 + (b ? 1 : 0) + i20 + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    i19 = (int)Test.instanceCount;
                }
            default:
                i19 *= i7;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + s + Float.floatToIntBits(f1) + i19 + (b ?
            1 : 0) + i20 + FuzzerUtils.checkSum(iArr);
    }

    public long lMeth() {

        int i5=-14, i6=-9;

        Test.iFld = (Test.iFld--);
        for (i5 = 18; 334 > i5; i5++) {
            vMeth(0.11246);
        }
        long meth_res = i5 + i6;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-253, i1=50066, i2=43436, i3=55957, i4=-2, i21=72, i22=213, i23=3, i24=13, i25=-63888, i26=200;
        float f2=1.884F, f3=85.2F;
        boolean b1=false;
        double d1=-1.40790, d2=34.60322, dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, -39.13965);

        i = (int)Test.instanceCount;
        for (i1 = 11; i1 < 395; i1++) {
            if (b1) {
                for (i3 = 2; i3 < 66; ++i3) {
                    Test.instanceCount <<= lMeth();
                    Test.iFld = (int)f2;
                    dFld *= i;
                    for (f3 = 1; f3 < 2; ++f3) {
                        Test.byFld = (byte)Test.iFld;
                    }
                    Test.instanceCount = Test.instanceCount;
                }
            } else {
                Test.iFld %= (int)((long)(f2) | 1);
                switch ((i1 % 5) + 62) {
                case 62:
                    for (d1 = 3; d1 < 66; d1++) {
                        i4 -= (int)Test.instanceCount;
                        i21 = i;
                        dFld *= f3;
                        i21 |= -151;
                    }
                    if (true) {
                        for (d2 = 3; d2 < 66; ++d2) {
                            Test.iArrFld[i1 + 1][(int)(d2)] -= i4;
                            for (i24 = 1; i24 < 2; i24++) {
                                Test.instanceCount *= Test.instanceCount;
                                Test.instanceCount = lFld;
                                f2 -= i23;
                                f2 -= -5;
                                i2 += (int)f2;
                                switch ((((-220 >>> 1) % 1) * 5) + 46) {
                                case 49:
                                    if (b1) break;
                                    Test.instanceCount = i24;
                                    lArrFld[i1 - 1] *= Test.instanceCount;
                                }
                            }
                        }
                    } else {
                        i21 = i25;
                    }
                    break;
                case 63:
                    lArrFld[i1 - 1] = Test.instanceCount;
                    break;
                case 64:
                    dArr[(i1 >>> 1) % N][i1] += i;
                    break;
                case 65:
                    lFld -= Test.instanceCount;
                    break;
                case 66:
                    Test.instanceCount = i26;
                default:
                    i23 = (int)f2;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 f2 = " + i3 + "," + i4 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("f3 i21 b1 = " + Float.floatToIntBits(f3) + "," + i21 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("d1 i22 d2 = " + Double.doubleToLongBits(d1) + "," + i22 + "," +
            Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 dArr = " + i26 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("dFld lFld Test.iArrFld = " + Double.doubleToLongBits(dFld) + "," + lFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
