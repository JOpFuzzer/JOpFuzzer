// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=59621L;
    public static int iFld=-61352;
    public static volatile byte byFld=5;
    public static short sFld=-6236;
    public static int iFld1=-14;
    public boolean bFld=false;
    public double dFld=102.120992;
    public static volatile float fFld=-2.768F;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.87194);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i7) {

        int i8=235, i9=-4, i10=3, i11=182;
        double d=2.89175;
        float f2=-28.367F;
        boolean b=false;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-11665);

        sArr[(Test.iFld >>> 1) % N] = (short)i7;
        i8 = 360;
        do {
            d *= Test.iFld;
            i9 = 1;
            while (++i9 < 5) {
                d -= i9;
                Test.instanceCount += i9;
                l1 -= -29757;
                Test.iFld = (int)Test.instanceCount;
            }
            if (b) {
                Test.iFld *= (int)Test.instanceCount;
                Test.iFld += i8;
                i7 += i8;
                for (i10 = 1; i10 < 5; i10++) {
                    f2 = f2;
                    d += Test.instanceCount;
                }
            } else {
                i11 = i11;
            }
        } while (--i8 > 0);
        vMeth1_check_sum += l1 + i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + Float.floatToIntBits(f2) + (b
            ? 1 : 0) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i5, float f1, int i6) {

        int i12=-114, i13=-64432, i14=-89, i15=-7, iArr1[]=new int[N];
        double d1=1.107506;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -212);
        FuzzerUtils.init(lArr1, 44496L);

        vMeth1(Test.instanceCount, i5);
        Test.iFld -= i5;
        Test.instanceCount = i5;
        for (i12 = 10; i12 < 373; i12++) {
            Test.instanceCount += Test.instanceCount;
            iArr1[i12 + 1] -= i12;
        }
        i6 -= (int)Test.instanceCount;
        i6 = (int)d1;
        i5 = i5;
        i13 += (int)f1;
        for (i14 = 12; i14 < 308; i14++) {
            iArr1 = iArr1;
            f1 -= 134;
            try {
                iArr1[i14] = (i13 % Test.iFld);
                Test.iFld = (Test.iFld / iArr1[i14 + 1]);
                iArr1[i14] = (i12 / -59568);
            } catch (ArithmeticException a_e) {}
            i15 >>>= (int)Test.instanceCount;
        }
        vMeth_check_sum += i5 + Float.floatToIntBits(f1) + i6 + i12 + i13 + Double.doubleToLongBits(d1) + i14 + i15 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public static boolean bMeth() {

        float f=0.782F;
        int i2=-8, i3=5, i4=134, i16=44413, i17=41152, iArr2[]=new int[N];
        double d2=113.114203;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 27356L);
        FuzzerUtils.init(iArr2, 26344);

        f += i2;
        i2 = 3;
        Test.instanceCount |= ((--i2) ^ -95);
        for (long l : lArr) {
            for (i3 = 1; i3 < 4; i3++) {
                vMeth(i2, f, i2);
                Test.iFld = (int)45432L;
                Test.byFld += (byte)(i3 * i3);
                Test.sFld += (short)d2;
                for (i16 = i3; i16 < 2; ++i16) {
                    Test.iFld1 = (int)Test.instanceCount;
                    Test.iFld1 = Test.iFld1;
                    i4 = (int)l;
                    Test.dArrFld[i3 - 1] = Test.sFld;
                    iArr2[i16 - 1] = (int)Test.instanceCount;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i2 + i3 + i4 + Double.doubleToLongBits(d2) + i16 + i17 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i1=-79, i18=24296, i19=49255, i20=-13, i21=32, i22=0, i23=62, i24=19139, iArr[]=new int[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -39955);
        FuzzerUtils.init(bArr, false);

        i <<= (int)(Test.instanceCount--);
        i = iArr[(36 >>> 1) % N];
        i1 = 1;
        do {
            i = (int)Test.instanceCount;
            bArr[i1 - 1] = bMeth();
            for (i18 = 2; i18 < 89; ++i18) {
                if (bFld) continue;
            }
            Test.iFld = i18;
            dFld += Test.byFld;
            Test.instanceCount = i19;
        } while (++i1 < 284);
        i20 = 1;
        do {
            for (i21 = 4; i21 < 101; i21++) {
                iArr[i21 + 1] = i19;
                for (i23 = 1; i23 < 2; i23++) {
                    i22 += (int)dFld;
                    Test.instanceCount = 4035073488L;
                    switch ((i21 % 9) + 4) {
                    case 4:
                    case 5:
                        Test.fFld *= 4;
                        iArr[i20 + 1] <<= (int)Test.instanceCount;
                        iArr[i23] >>>= Test.iFld1;
                    case 6:
                        Test.instanceCount = 7;
                        Test.instanceCount = Test.sFld;
                        try {
                            i24 = (-6740 / Test.iFld);
                            i24 = (32 / Test.iFld1);
                            Test.iFld = (-254 / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        Test.iFld1 = i22;
                        break;
                    case 7:
                        Test.iFld1 = (int)4408211483982675334L;
                        Test.fFld += (i23 * i23);
                    case 8:
                        i22 += i23;
                    case 9:
                        if (bFld) continue;
                        bFld = bFld;
                        i19 ^= i18;
                        break;
                    case 10:
                        iArr[i23] = i22;
                        break;
                    case 11:
                        Test.iFld1 = Test.iFld1;
                        break;
                    case 12:
                        i *= i24;
                        break;
                    default:
                        i *= (int)-171L;
                    }
                }
            }
        } while (++i20 < 248);

        FuzzerUtils.out.println("i i1 i18 = " + i + "," + i1 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("iArr bArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.sFld Test.iFld1 bFld = " + Test.sFld + "," + Test.iFld1 + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("dFld Test.fFld Test.dArrFld = " + Double.doubleToLongBits(dFld) + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
