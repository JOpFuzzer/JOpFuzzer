// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:01 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3117899886147105755L;
    public static int iFld=4;
    public static boolean bFld=true;
    public static long lFld=-14L;
    public double dFld=-69.129326;
    public static volatile float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 43.85F);
        FuzzerUtils.init(Test.iArrFld, 222);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4) {

        int i5=0, i6=-11, i7=0, i8=-43946;
        float f1=-2.1F, f2=1.964F, fArr[][]=new float[N][N];
        double d1=-121.56928;
        boolean b=true;

        FuzzerUtils.init(fArr, -81.1007F);

        i4 += i4;
        i4 *= (int)Test.instanceCount;
        for (i5 = 10; i5 < 291; i5++) {
            for (i7 = 1; i7 < 6; i7++) {
                i6 = i4;
                i8 = -194;
                f1 = 1;
                while (++f1 < 2) {
                    if (b) {
                        switch ((i5 % 4) + 24) {
                        case 24:
                            Test.iArrFld[(int)(f1)] >>= i4;
                            Test.instanceCount = (long)d1;
                            Test.instanceCount /= (i6 | 1);
                            Test.instanceCount = 1;
                            break;
                        case 25:
                            if (b) continue;
                            f2 = Test.iFld;
                            break;
                        case 26:
                            f2 += (f1 + Test.instanceCount);
                            break;
                        case 27:
                            Test.iFld -= Test.iFld;
                            break;
                        default:
                            fArr = FuzzerUtils.float2array(N, (float)41.926F);
                        }
                    } else {
                        try {
                            i8 = (188 % Test.iFld);
                            i4 = (636635082 % Test.iArrFld[(int)(f1)]);
                            i4 = (i4 / -956456399);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        }
        vMeth2_check_sum += i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + (b ? 1 :
            0) + Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(double d) {

        int i3=230;
        float f3=77.983F;

        Test.iFld += (int)Test.fArrFld[(Test.iFld >>> 1) % N];
        i3 = 1;
        do {
            vMeth2(0);
            Test.instanceCount += (i3 * i3);
            Test.instanceCount -= Test.iFld;
            Test.iFld *= Test.iFld;
            Test.iFld = (int)f3;
            d *= i3;
            Test.instanceCount *= (long)2.931F;
            Test.instanceCount += (i3 * i3);
            if (true) {
                Test.iFld -= i3;
                Test.iFld += i3;
                Test.iFld += (int)(-2.76F + (i3 * i3));
            } else {
                Test.iFld += i3;
            }
        } while (++i3 < 194);
        vMeth1_check_sum += Double.doubleToLongBits(d) + i3 + Float.floatToIntBits(f3);
    }

    public static void vMeth(long l, int i2) {

        double d2=41.123710;

        vMeth1(d2);
        vMeth_check_sum += l + i2 + Double.doubleToLongBits(d2);
    }

    public void mainTest(String[] strArr1) {

        int i=-63852, i1=64220, i9=158, i10=-35047, i11=51, i12=31967, i13=28164, i14=247;
        byte by=-3;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i = 13; i < 267; i++) {
            float f=-79.607F;
            i1 = Math.min(-(i1 * i1), i1);
            bArr[i - 1] = (((f % (i1 | 1)) + (i * Test.instanceCount)) != Test.instanceCount);
            vMeth(1100223493L, Test.iFld);
            switch ((i % 8) + 95) {
            case 95:
                for (i9 = i; i9 < 99; ++i9) {
                    Test.instanceCount >>>= Test.instanceCount;
                    i11 = (int)f;
                }
                Test.bFld = false;
                Test.iArrFld[i + 1] -= Test.iFld;
                i1 <<= 24747;
                break;
            case 96:
                i10 = i;
                break;
            case 97:
                i1 = i;
                break;
            case 98:
                Test.iFld += i;
                i12 = 1;
                do {
                    Test.instanceCount *= i11;
                    for (i13 = 1; i13 < 1; i13 += 2) {
                        Test.iArrFld[i13] = (int)1.725F;
                        Test.lFld = by;
                        f *= i12;
                        Test.iArrFld[i12 + 1] += (int)Test.instanceCount;
                        Test.lFld += (i13 + by);
                        i1 = -12;
                        i10 = Test.iFld;
                        Test.iArrFld[i12] >>= (int)Test.lFld;
                    }
                    i1 -= (int)f;
                    if (Test.bFld) break;
                    Test.lFld = i12;
                    Test.bFld = Test.bFld;
                    Test.lFld -= i11;
                } while (++i12 < 99);
                break;
            case 99:
                Test.lFld += i;
            case 100:
                i14 = (int)40.28009;
            case 101:
                i10 += (((i * i13) + f) - i);
            case 102:
                Test.instanceCount *= (long)dFld;
                break;
            default:
                Test.lFld = -6325;
            }
        }

        FuzzerUtils.out.println("i i1 i9 = " + i + "," + i1 + "," + i9);
        FuzzerUtils.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 by = " + i13 + "," + i14 + "," + by);
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lFld dFld Test.fArrFld = " + Test.lFld + "," + Double.doubleToLongBits(dFld) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
