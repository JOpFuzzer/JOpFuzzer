// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3055942658L;
    public static double dFld=-1.112167;
    public static long lArrFld[]=new long[N];
    public volatile boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -6L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(long l2, long l3) {

        int i9=-9, i10=-8, i11=-76, i12=91;
        boolean b=false;
        double d1=-10.73540;
        byte by=113;
        short sArr[]=new short[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(sArr, (short)7344);
        FuzzerUtils.init(fArr, 2.113F);

        for (i9 = 1; i9 < 245; ++i9) {
            if (b) break;
            for (i11 = 1; i11 < 7; ++i11) {
                float f=0.818F;
                short s=1637;
                l2 = (long)1.28617;
                d1 -= i9;
                i12 += (int)(-67L + (i11 * i11));
                switch ((i9 % 6) + 44) {
                case 44:
                    f -= -34;
                    l3 += i11;
                case 45:
                    by >>= (byte)i10;
                    i10 += (((i11 * i11) + i9) - i10);
                    break;
                case 46:
                    switch ((i9 % 5) + 115) {
                    case 115:
                        i10 *= i9;
                        break;
                    case 116:
                        sArr[i9 + 1] += (short)i11;
                        break;
                    case 117:
                        i12 = (int)d1;
                        break;
                    case 118:
                        fArr[i9] = -14;
                        break;
                    case 119:
                        i10 = (int)l2;
                    default:
                        i10 += (-146 + (i11 * i11));
                    }
                case 47:
                    if (i12 != 0) {
                    }
                    break;
                case 48:
                    i12 += (i11 * s);
                    break;
                case 49:
                    i10 <<= i10;
                default:
                    f = i12;
                }
            }
        }
        long meth_res = l2 + l3 + i9 + i10 + (b ? 1 : 0) + i11 + i12 + Double.doubleToLongBits(d1) + by +
            FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static long lMeth(long l1, double d) {

        int i3=-51, i4=1, i5=-13, i6=-10, i7=40416, i8=-27, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -176);

        for (i3 = 14; i3 < 369; i3++) {
            for (i5 = 1; 5 > i5; ++i5) {
                i6 >>= (int)(i6 * (i6 * (i6 - 122.127039)));
                i6 *= -4;
                i7 = 1;
                while (++i7 < 2) {
                    i4 += (i7 * i7);
                }
                i8 = 1;
                while (++i8 < 2) {
                    iArr1 = iArr1;
                    i4 /= (int)((0 - ((i8 * i4) * (-byMeth(Test.instanceCount, Test.instanceCount)))) | 1);
                    l1 <<= l1;
                    i6 += (int)87.108913;
                    Test.lArrFld[i8 + 1] = i6;
                    iArr1 = iArr1;
                    i6 = i3;
                    i6 += (i8 * i5);
                }
            }
        }
        long meth_res = l1 + Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        long l=-253L, lArr[]=new long[N];
        int i=6, i1=10, i2=12, iArr[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(lArr, 48521L);
        FuzzerUtils.init(iArr, 6);

        for (l = 2; l < 191; l++) {
            i -= (int)(lArr[(int)(l + 1)] = (Test.instanceCount++));
            if (i != 0) {
                vMeth_check_sum += l + i + i1 + i2 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
                    FuzzerUtils.checkSum(iArr);
                return;
            }
            i += (int)l;
            i += (int)(l | l);
            for (i1 = 1; 8 > i1; ++i1) {
                Test.instanceCount *= ((++i) << Test.instanceCount);
                iArr[(int)(l + 1)] = (int)l;
                if (b1) {
                    Test.instanceCount <<= (((Test.instanceCount - l) - (--i2)) * lMeth(l, Test.dFld));
                    if (b1) {
                        i2 = -23;
                        Test.instanceCount = l;
                        Test.instanceCount = l;
                    } else {
                        i2 >>>= i2;
                    }
                } else {
                    Test.instanceCount ^= i1;
                }
            }
        }
        vMeth_check_sum += l + i + i1 + i2 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i13=11, i14=41985, i15=-9, i16=-9, i17=-54562, i18=20368, i19=-35434, i20=54372, iArr2[]=new int[N];
        boolean b2=false;
        float f1=2.387F, f2=126.544F;
        byte by1=100;
        short s2=-20250;

        FuzzerUtils.init(iArr2, 8);

        vMeth();
        iArr2[(i13 >>> 1) % N] *= i13;
        i13 += i13;
        for (i14 = 10; 176 > i14; i14++) {
            switch (((i14 >>> 1) % 4) + 104) {
            case 104:
                bArrFld[i14] = b2;
                if (b2) {
                    if (b2) {
                        i15 = i13;
                        i13 -= i15;
                        i15 >>= 9;
                    } else {
                        i16 = 1;
                        while (++i16 < 151) {
                            for (f1 = i16; f1 < 1; f1++) {
                                f2 = i16;
                            }
                            Test.dFld *= Test.dFld;
                            i13 += (((i16 * i16) + i15) - i15);
                            by1 -= (byte)Test.instanceCount;
                            i17 *= (int)85L;
                            i15 += (i16 * i17);
                            i13 *= (int)Test.instanceCount;
                        }
                    }
                    for (i18 = 1; 151 > i18; i18++) {
                        short s1=-18387;
                        s1 = s1;
                        i15 *= i13;
                        i20 = 1;
                        while (++i20 < 2) {
                            i19 += i17;
                            f2 = i15;
                            f2 *= Test.instanceCount;
                            Test.instanceCount *= i17;
                            Test.instanceCount >>= i19;
                            Test.instanceCount >>= i16;
                        }
                    }
                } else if (b2) {
                    i19 += s2;
                }
                break;
            case 105:
                i19 -= i16;
            case 106:
                iArr2[i14 + 1] |= (int)Test.instanceCount;
            case 107:
                b2 = b2;
            }
        }

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("b2 i16 f1 = " + (b2 ? 1 : 0) + "," + i16 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i17 f2 by1 = " + i17 + "," + Float.floatToIntBits(f2) + "," + by1);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("s2 iArr2 = " + s2 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.lArrFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("bArrFld = " + FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
