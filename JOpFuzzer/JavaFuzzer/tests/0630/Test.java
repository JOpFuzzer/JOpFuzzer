// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-385946237990749264L;
    public static int iFld=-4;
    public static volatile int iFld1=-2;
    public static byte byFld=-45;
    public static int iFld2=8;
    public static float fFld=-2.516F;
    public boolean bFld=true;
    public volatile int iFld3=44612;
    public static int iFld4=7833;
    public static int iFld5=62170;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 24341);
        FuzzerUtils.init(Test.byArrFld, (byte)76);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static long lMeth1(int i5, long l, long l1) {

        byte by=105;

        by <<= (byte)(i5 -= ((Test.iArrFld[(Test.iFld >>> 1) % N]++) - (Test.iFld - i5)));
        long meth_res = i5 + l + l1 + by;
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        boolean b=false;
        int i8=11, i9=-13, i10=10, i11=4, i12=73, i13=-1005, i14=14, iArr[][]=new int[N][N];
        float f=-70.14F, fArr[]=new float[N];

        FuzzerUtils.init(iArr, 136);
        FuzzerUtils.init(fArr, 72.935F);

        b = b;
        for (i8 = 272; i8 > 9; i8--) {
            for (i10 = i8; i10 < 6; i10++) {
                Test.iFld1 += i8;
                f += -57739;
                i9 += (((i10 * Test.instanceCount) + i10) - f);
                iArr = iArr;
                Test.iFld1 = i12;
            }
            Test.iFld1 = (int)Test.instanceCount;
            fArr[i8] += Test.iFld1;
        }
        for (i13 = 4; i13 < 131; i13++) {
            switch (((i13 % 1) * 5) + 48) {
            case 50:
                if (b) break;
                i14 -= (int)Test.instanceCount;
                break;
            }
            fArr[i13] = Test.iFld;
        }
        long meth_res = (b ? 1 : 0) + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i6, int i7) {

        int i15=-223, i16=-21578, i17=-170;
        double d=0.89441;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -132L);

        Test.iFld = Math.abs(Test.iArrFld[(Test.iFld >>> 1) % N]--);
        i7 = iMeth();
        Test.instanceCount <<= i7;
        i15 = 1;
        do {
            Test.iFld1 += (((i15 * i15) + Test.byFld) - i7);
            Test.byArrFld[i15 - 1] *= (byte)i7;
            i16 = 7;
            do {
                Test.iFld2 += i7;
                lArr[i15] *= 165;
                d = 48005;
                Test.fFld -= -97;
                Test.instanceCount += (i16 * i16);
                i17 = 1;
                while (++i17 < 1) {
                    Test.fFld *= Test.instanceCount;
                }
                Test.iFld1 += i7;
            } while (--i16 > 0);
        } while (++i15 < 244);
        long meth_res = i6 + i7 + i15 + i16 + Double.doubleToLongBits(d) + i17 + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public long lMeth() {

        int i4=5, i18=29533, i19=-3349, i20=-14, i21=-43132, iArr1[]=new int[N];
        double d1=3.12150;

        FuzzerUtils.init(iArr1, -237);

        Test.iFld *= Test.iFld;
        i4 = 1;
        do {
            Test.iFld = (int)lMeth1(Test.iArrFld[i4 - 1], (-lMeth1(Test.iFld1, Test.instanceCount, Test.instanceCount))
                + (Test.iFld1 + -182), (long)(fMeth(i4, 20314) + -101.11904));
            bFld = bFld;
            Test.iArrFld[(Test.iFld2 >>> 1) % N] = (int)116.127361;
        } while (++i4 < 251);
        for (i18 = 3; i18 < 330; ++i18) {
            Test.iArrFld[i18] = Test.iFld;
            for (i20 = i18; i20 < 5; i20++) {
                int i22=-179;
                if (bFld) break;
                switch ((i18 % 5) + 95) {
                case 95:
                    if (bFld) break;
                    iArr1[i20] += -20992;
                    Test.iFld2 += (i20 * i20);
                    i22 = (int)Test.instanceCount;
                case 96:
                    d1 = iFld3;
                    break;
                case 97:
                    Test.instanceCount = i18;
                case 98:
                    Test.iFld1 = i22;
                    break;
                case 99:
                    i19 += i20;
                    break;
                default:
                    Test.iArrFld[i18 - 1] <<= i21;
                }
            }
        }
        long meth_res = i4 + i18 + i19 + i20 + i21 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=10, i1=-212, i2=126, i3=-6, i23=124, i24=18445, i25=-223, i26=9, i27=26218;
        short s=-21360;
        double d2=38.111143;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 0.680F);

        for (i = 8; i < 149; i++) {
            for (i2 = 10; i2 < 178; i2++) {
                Test.instanceCount *= (lMeth() + i);
                Test.iArrFld = Test.iArrFld;
            }
            i23 = 1;
            while (++i23 < 178) {
                Test.iFld2 ^= Test.iFld1;
                s += (short)i23;
                i24 = 1;
                while (--i24 > 0) {
                    Test.iArrFld = Test.iArrFld;
                    iFld3 = (int)Test.instanceCount;
                    Test.iFld4 &= -26446;
                    i3 += (int)d2;
                    Test.iFld2 += (((i24 * i3) + Test.instanceCount) - Test.fFld);
                    Test.iArrFld[i - 1] = Test.iFld5;
                    iFld3 += (i24 - i24);
                    if (bFld) continue;
                    Test.iFld *= (int)Test.fFld;
                    Test.iFld5 >>= 6;
                }
                i25 = 1;
                do {
                    i1 += (int)Test.fFld;
                } while (++i25 < 1);
                if (true) continue;
                iFld3 += (int)-1.14838;
                for (i26 = 1; i26 < 1; ++i26) {
                    d2 -= Test.instanceCount;
                    Test.iArrFld[i + 1] = i26;
                    fArr1[i + 1] += i25;
                    Test.iArrFld[i23] = (int)Test.instanceCount;
                    i27 = (int)-3132008943L;
                    Test.iArrFld[i26 + 1] -= Test.iFld5;
                    Test.instanceCount = Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i23 s = " + i3 + "," + i23 + "," + s);
        FuzzerUtils.out.println("i24 d2 i25 = " + i24 + "," + Double.doubleToLongBits(d2) + "," + i25);
        FuzzerUtils.out.println("i26 i27 fArr1 = " + i26 + "," + i27 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.iFld1 = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.iFld1);
        FuzzerUtils.out.println("Test.byFld Test.iFld2 Test.fFld = " + Test.byFld + "," + Test.iFld2 + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("bFld iFld3 Test.iFld4 = " + (bFld ? 1 : 0) + "," + iFld3 + "," + Test.iFld4);
        FuzzerUtils.out.println("Test.iFld5 Test.iArrFld Test.byArrFld = " + Test.iFld5 + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
