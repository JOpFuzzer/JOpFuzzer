// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:23:03 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public static int iFld=28433;
    public static short sFld=-19465;
    public static byte byFld=-92;
    public static double dFld=-100.17650;
    public static float fFld=-2.110F;
    public static float fFld1=82.42F;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
        FuzzerUtils.init(Test.fArrFld, 0.293F);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i4=-23, i5=41, i6=-4, i7=105;
        float f=-1.357F;

        Test.dFld += Test.iFld;
        i4 = 346;
        do {
            i5 = 9;
            do {
                for (i6 = 1; 1 > i6; ++i6) {
                    Test.iFld = (int)Test.instanceCount;
                    Test.instanceCount += (i6 + f);
                    Test.instanceCount *= Test.iFld;
                    Test.dFld -= Test.iFld;
                    switch ((i6 % 2) + 45) {
                    case 45:
                        Test.iFld &= 22873;
                        f = 11;
                        switch (((i4 % 2) * 5) + 8) {
                        case 9:
                            Test.instanceCount += (42697 + (i6 * i6));
                            break;
                        case 11:
                            f -= f;
                            Test.iArrFld = Test.iArrFld;
                        }
                        break;
                    case 46:
                        Test.iFld *= i7;
                        break;
                    }
                }
            } while (--i5 > 0);
        } while ((i4 -= 2) > 0);
        long meth_res = i4 + i5 + i6 + i7 + Float.floatToIntBits(f);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1) {

        int i2=-22711, i3=249, i8=-13, i9=-20, i11=-46, i12=-30;
        byte byArr[]=new byte[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(byArr, (byte)21);
        FuzzerUtils.init(fArr, 0.186F);

        Test.iArrFld[(i1 >>> 1) % N] >>= (Test.iFld++);
        for (i2 = 10; i2 < 221; i2++) {
            Test.iFld = Math.min(i3 += (-Test.sFld), i3);
            Test.iArrFld[i2 - 1] -= (Test.byFld = (byte)iMeth1());
        }
        Test.fFld = Test.sFld;
        i1 >>= i3;
        Test.instanceCount <<= Test.instanceCount;
        for (i8 = 398; i8 > 11; --i8) {
            Test.instanceCount += (i8 * Test.fFld);
            i1 -= (int)Test.dFld;
            byArr[i8] += (byte)i9;
            Test.dFld = i2;
            for (i11 = 1; 4 > i11; i11++) {
                i1 = Test.byFld;
                fArr[i11] = 82.207F;
            }
        }
        long meth_res = i1 + i2 + i3 + i8 + i9 + i11 + i12 + FuzzerUtils.checkSum(byArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(long l) {

        int i=5, i13=10, i14=140, i15=-6, i16=14;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 1.742F);

        i = 1;
        while (++i < 174) {
            Test.iFld <<= (int)((Test.instanceCount + iMeth(Test.iFld)) << Test.byFld);
            Test.iFld &= (int)Test.instanceCount;
            Test.iFld *= i;
            for (i13 = 1; 9 > i13; i13++) {
                for (i15 = 1; i15 < 2; ++i15) {
                    i16 += (i15 * i15);
                    i16 += (i15 ^ i13);
                    switch (((i13 % 4) * 5) + 47) {
                    case 52:
                        i16 += (((i15 * i13) + l) - i14);
                        i14 >>= (int)29321L;
                        Test.iFld += (((i15 * i15) + i15) - i13);
                        Test.iArrFld[i] = i14;
                        break;
                    case 60:
                        fArr1[i15 + 1] += (float)Test.dFld;
                        i14 = i14;
                        break;
                    case 51:
                        Test.fFld %= (i | 1);
                        break;
                    case 48:
                        fArr1[i - 1] = Test.iFld;
                    }
                }
            }
        }
        long meth_res = l + i + i13 + i14 + i15 + i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17=11, i18=-10, i19=2, i20=7, i21=9, i22=-45383, i23=-3;
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        Test.iFld = (int)(-(dMeth(Test.instanceCount) - Test.instanceCount));
        Test.iArrFld[(-212 >>> 1) % N] = (int)Test.fFld1;
        Test.iArrFld[(89 >>> 1) % N] = (int)Test.instanceCount;
        lArrFld[(Test.iFld >>> 1) % N] |= Test.iFld;
        for (i17 = 16; i17 < 345; ++i17) {
            i19 = 1;
            while (++i19 < 76) {
                Test.iFld = (int)2.138F;
            }
            Test.dFld += Test.instanceCount;
            for (i20 = 1; i20 < 76; ++i20) {
                Test.fFld += (((i20 * i17) + i17) - Test.instanceCount);
                i22 = 1;
                while (++i22 < 2) {
                    Test.dFld = i19;
                    Test.fFld *= i19;
                }
                i23 = 2;
                while (--i23 > 0) {
                    i18 = i19;
                    bArr[i23 - 1] = b;
                    Test.instanceCount -= Test.byFld;
                    if (b) continue;
                    switch ((((-158 >>> 1) % 1) * 5) + 46) {
                    case 47:
                        Test.dFld += -145;
                        break;
                    default:
                        Test.iFld = i20;
                        Test.iArrFld[i17 - 1] = Test.iFld;
                        Test.fArrFld[i23 - 1] *= 0;
                    }
                    Test.iFld -= -3;
                    Test.iFld = i22;
                    Test.instanceCount -= i19;
                }
                i21 = Test.sFld;
                Test.iFld += i20;
                Test.instanceCount -= i17;
                try {
                    i18 = (-38 / i19);
                    Test.iArrFld[i20] = (i20 % 1092834284);
                    i21 = (Test.iFld / i20);
                } catch (ArithmeticException a_e) {}
            }
        }

        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 b bArr = " + i23 + "," + (b ? 1 : 0) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld Test.dFld Test.fFld = " + Test.byFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.fFld1 Test.iArrFld lArrFld = " + Float.floatToIntBits(Test.fFld1) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
