// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5619098037939929969L;
    public static int iFld=-14033;
    public float fFld=2.733F;
    public static float fFld1=-2.73F;
    public static byte byFld=48;
    public static short sFld=-6588;
    public volatile int iFld1=-12;
    public byte byArrFld[]=new byte[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(float f1, int i5, int i6) {


        i5 *= 195;
        i5 += (int)f1;
        long meth_res = Float.floatToIntBits(f1) + i5 + i6;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, int i4, float f) {


        lMeth(f, 12, i4);
        vMeth_check_sum += l + i4 + Float.floatToIntBits(f);
    }

    public static int iMeth(byte by) {

        double d=89.46695;
        int i7=46674, i8=7, i9=-60208, i10=-44, i11=-2388, i12=81, iArr1[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, -83);

        vMeth(Test.instanceCount, Test.iFld, Test.fFld1);
        d -= -8;
        for (i7 = 3; i7 < 130; i7++) {
            i8 >>= (int)Test.instanceCount;
            for (i9 = 12; 1 < i9; i9 -= 2) {
                b = false;
                try {
                    i8 = (iArr1[i9 - 1] % -22381);
                    iArr1[i9] = (iArr1[i7] / iArr1[i7 - 1]);
                    iArr1[i9] = (-30366 % i7);
                } catch (ArithmeticException a_e) {}
                i10 = Test.iFld;
            }
            for (i11 = 1; i11 < 12; ++i11) {
                Test.fFld1 += Test.iFld;
                i12 += (int)Test.instanceCount;
                if (b) break;
                i10 %= (int)(by | 1);
                i8 += (i11 + i11);
                Test.iFld = -4;
            }
        }
        long meth_res = by + Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + (b ? 1 : 0) + i11 + i12 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=-2, i2=4, i3=5238, i13=-3, iArr[]=new int[N];
        long l1=60235L, lArr[]=new long[N];
        double d1=9.72584;
        boolean b1=true;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-15917);
        FuzzerUtils.init(iArr, 36);
        FuzzerUtils.init(lArr, 8506379141566394518L);

        sArr[(Test.iFld >>> 1) % N] += (short)Test.iFld;
        for (i = 4; 274 > i; i++) {
            for (i2 = 2; i2 < 93; ++i2) {
                fFld += Math.max(Test.instanceCount++, i1 + (i3 >>> i2));
                iArr[i - 1] = iMeth(Test.byFld);
            }
            l1 = 1;
            do {
                if (b1) {
                    i13 = 1;
                    while (++i13 < 1) {
                        switch ((int)(((l1 % 2) * 5) + 63)) {
                        case 73:
                            byArrFld[i] -= (byte)Test.sFld;
                            switch ((int)((l1 % 1) + 18)) {
                            case 18:
                                i1 += i13;
                                iArr[i] = i2;
                            default:
                                Test.fFld1 *= (float)d1;
                                i1 = (int)Test.instanceCount;
                                Test.iFld = -12;
                                if (b1) {
                                    lArr[(int)(l1 + 1)] -= Test.instanceCount;
                                    switch ((int)((l1 % 8) + 72)) {
                                    case 72:
                                        Test.iFld |= Test.iFld;
                                        fFld += i13;
                                        break;
                                    case 73:
                                        Test.iFld += (((i13 * Test.instanceCount) + fFld) - i3);
                                        Test.sFld -= (short)i13;
                                        iFld1 += 0;
                                        Test.iFld *= i3;
                                        break;
                                    case 74:
                                        Test.instanceCount += Test.iFld;
                                        iArr[i13 + 1] /= (int)(Test.byFld | 1);
                                        Test.byFld += (byte)(i13 + iFld1);
                                        break;
                                    case 75:
                                        Test.instanceCount *= (long)d1;
                                        Test.instanceCount += (((i13 * i3) + l1) - i2);
                                        break;
                                    case 76:
                                        Test.iFld += (i13 * i13);
                                        break;
                                    case 77:
                                        i3 = i13;
                                    case 78:
                                        iArr = iArr;
                                    case 79:
                                        d1 += i3;
                                        break;
                                    }
                                } else {
                                    i3 *= iFld1;
                                }
                            }
                            break;
                        case 72:
                            i3 = -120;
                            break;
                        }
                    }
                } else if (b1) {
                    iFld1 *= 215;
                } else {
                    iArr[i - 1] -= i3;
                }
            } while (++l1 < 93);
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 l1 i13 = " + i3 + "," + l1 + "," + i13);
        FuzzerUtils.out.println("d1 b1 sArr = " + Double.doubleToLongBits(d1) + "," + (b1 ? 1 : 0) + "," +
            FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("iArr lArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld fFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.fFld1 Test.byFld Test.sFld = " + Float.floatToIntBits(Test.fFld1) + "," +
            Test.byFld + "," + Test.sFld);
        FuzzerUtils.out.println("iFld1 byArrFld = " + iFld1 + "," + FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
