// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:43 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=144L;
    public byte byFld=112;
    public static double dFld=-1.103905;
    public static byte byFld1=18;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -129);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(long l1, int i8, int i9) {

        int i10=-3, i11=-47162, i12=230, i13=-16127, iArr1[]=new int[N];
        boolean b2=true, bArr[]=new boolean[N];
        long l2=-4087459945164576312L;

        FuzzerUtils.init(iArr1, -11);
        FuzzerUtils.init(bArr, true);

        for (i10 = 7; i10 < 386; i10++) {
            iArr1[i10 + 1] += (int)Test.instanceCount;
            i12 = 4;
            do {
                if (b2) continue;
                i9 += i12;
                for (l2 = 1; l2 < 1; ++l2) {
                    i13 = i10;
                    switch ((i12 % 3) + 100) {
                    case 100:
                        b2 = b2;
                        Test.dFld += i9;
                        bArr[i12 + 1] = b2;
                        i13 = i12;
                        break;
                    case 101:
                        i8 = (int)Test.dFld;
                        break;
                    case 102:
                        i13 = i13;
                        i9 += (int)(l2 + i9);
                        break;
                    }
                }
            } while (--i12 > 0);
        }
        long meth_res = l1 + i8 + i9 + i10 + i11 + i12 + (b2 ? 1 : 0) + l2 + i13 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(bArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(int i6, int i7) {

        short s=-27778;
        boolean b3=false;
        float f=1.702F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -47018L);
        FuzzerUtils.init(fArr, -2.720F);

        lArr[(i6 >>> 1) % N] &= sMeth(Test.instanceCount, 38911, i7);
        i7 = i6;
        for (int i14 : Test.iArrFld) {
            fArr[(i6 >>> 1) % N] = -876308093L;
            switch (((i6 >>> 1) % 4) + 9) {
            case 9:
            case 10:
                i7 = s;
                break;
            case 11:
            case 12:
                i14 = i7;
                break;
            }
            if (b3) continue;
            if (b3) continue;
            i7 = i6;
            Test.iArrFld[(i14 >>> 1) % N] = (int)-56.21988;
            i7 = 121;
            f = i14;
        }
        fArr[(i7 >>> 1) % N] += -61062;
        s -= (short)i6;
        vMeth_check_sum += i6 + i7 + s + (b3 ? 1 : 0) + Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(boolean b, long l, boolean b1) {

        int i15=-123, i16=-52236, i17=-46, i18=-54647, i19=8, i20=2;
        float f1=-1.878F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -78.267F);

        vMeth(i15, i15);
        i15 = i15;
        Test.instanceCount *= i15;
        Test.byFld1 = (byte)i15;
        fArr1[(i15 >>> 1) % N] -= (float)Test.dFld;
        for (i16 = 14; i16 < 242; i16++) {
            i15 >>= (int)Test.instanceCount;
            i18 += (int)Test.instanceCount;
            i18 = (int)f1;
            i18 = (int)f1;
            try {
                i18 = (Test.iArrFld[i16 - 1] % -13471);
                Test.iArrFld[i16 - 1] = (Test.iArrFld[i16] / i18);
                i15 = (-17134 % i16);
            } catch (ArithmeticException a_e) {}
            for (i19 = 1; i19 < 7; i19++) {
                f1 -= i18;
                Test.iArrFld[i19 - 1] = i19;
                i17 *= (int)f1;
            }
        }
        long meth_res = (b ? 1 : 0) + l + (b1 ? 1 : 0) + i15 + i16 + i17 + i18 + Float.floatToIntBits(f1) + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-5, i1=11, i2=11, i3=35379, i4=14, i5=105, i21=54637, iArr[]=new int[N];
        float f2=1.127F;
        long l3=-2754255910L, l4=616615693848779964L, lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -2);
        FuzzerUtils.init(lArr1, 1L);

        i = 202;
        while (--i > 0) {
            switch (((i % 2) * 5) + 48) {
            case 55:
                for (i1 = 7; 124 > i1; ++i1) {
                    for (i3 = i; 2 > i3; ++i3) {
                        i4 += (i5 / ((~Math.max(i2, i)) | 1));
                    }
                    iArr[i1 + 1] *= (int)(Test.instanceCount |= (byFld++));
                    i2 = -252;
                    i2 -= (int)((i5 * Test.instanceCount) + iMeth(bFld, Test.instanceCount, bFld));
                    f2 = Test.instanceCount;
                    switch (((i % 2) * 5) + 29) {
                    case 34:
                        bFld = bFld;
                        Test.dFld = Test.instanceCount;
                        break;
                    case 36:
                        Test.instanceCount = Test.byFld1;
                        break;
                    }
                    i5 = (int)-56317L;
                    i2 = (int)l3;
                    f2 -= i5;
                    i5 = 2;
                }
                Test.instanceCount -= i1;
                l4 = 1;
                while (++l4 < 124) {
                    iArr[(int)(l4 + 1)] = (int)Test.instanceCount;
                    i5 -= -21985;
                }
                break;
            case 50:
                i2 = i3;
                i5 *= i;
                if (bFld) continue;
                break;
            default:
                i5 += (((i * l4) + i1) - l3);
                switch (((i % 10) * 5) + 45) {
                case 82:
                    i21 = 124;
                    while (--i21 > 0) {
                        i4 += i21;
                        i5 = i2;
                        lArr1 = lArr1;
                    }
                    break;
                case 58:
                case 53:
                    i4 += (i * i);
                case 46:
                    Test.instanceCount -= 0;
                    break;
                case 85:
                    i4 *= (int)-5146L;
                    break;
                case 73:
                    l3 = i2;
                    break;
                case 78:
                    l3 += (((i * i2) + Test.byFld1) - l3);
                    break;
                case 95:
                    i2 = i21;
                    break;
                case 57:
                    iArr = Test.iArrFld;
                case 68:
                    i4 |= i5;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("f2 l3 l4 = " + Float.floatToIntBits(f2) + "," + l3 + "," + l4);
        FuzzerUtils.out.println("i21 iArr lArr1 = " + i21 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount byFld Test.dFld = " + Test.instanceCount + "," + byFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld1 bFld Test.iArrFld = " + Test.byFld1 + "," + (bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
