// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=329632267L;
    public byte byFld=-45;
    public static double dFld=36.83944;
    public float fFld=-5.509F;
    public boolean bFld=false;
    public static int iFld=-3;
    public long lArrFld[]=new long[N];
    public static volatile long lArrFld1[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld1, 8575328227562780878L);
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i10) {

        short s1=-26800;
        int i11=-27044, i12=-6, i13=-7, i14=-239, i15=-13, i16=-20511, i17=-12;
        long l=-70L;
        float f1=-2.230F;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        i10 <<= (int)Test.instanceCount;
        s1 *= (short)108;
        i10 >>>= i10;
        i10 *= i10;
        for (i11 = 11; i11 < 392; i11++) {
            for (l = 1; 4 > l; ++l) {
                i13 &= i13;
            }
            for (i14 = 4; i14 > i11; i14--) {
                i10 += (i14 * i14);
                i15 += (int)Test.dFld;
                i12 += (int)f1;
                Test.iArrFld[i14] += Test.iFld;
            }
            for (i16 = 1; i16 < 4; i16++) {
                bArr[i11 - 1] = b;
                Test.instanceCount += (long)1.789F;
            }
        }
        vMeth1_check_sum += i10 + s1 + i11 + i12 + l + i13 + i14 + i15 + Float.floatToIntBits(f1) + i16 + i17 + (b ? 1
            : 0) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i9) {

        int i18=-36198, i19=53, i20=3;
        short s2=-1039, sArr[]=new short[N];
        float f2=-33.63F;
        boolean b1=true;

        FuzzerUtils.init(sArr, (short)6405);

        vMeth1(Test.iFld);
        for (i18 = 7; i18 < 203; i18++) {
            s2 = (short)Test.iFld;
            i19 += (i18 | Test.instanceCount);
            f2 = Test.iFld;
            switch ((((2 >>> 1) % 2) * 5) + 101) {
            case 108:
                i20 = 1;
                do {
                    switch (((i20 % 3) * 5) + 117) {
                    case 118:
                        i9 = i18;
                        Test.iFld <<= i20;
                        break;
                    case 128:
                        switch ((i20 % 8) + 109) {
                        case 109:
                            if (b1) continue;
                            break;
                        case 110:
                            Test.iFld += (167 + (i20 * i20));
                            break;
                        case 111:
                            Test.instanceCount = Test.instanceCount;
                            sArr[i18 - 1] = (short)31784;
                            break;
                        case 112:
                        case 113:
                            Test.iFld += i20;
                            break;
                        case 114:
                            f2 += (1521805645L + (i20 * i20));
                            break;
                        case 115:
                            i9 = i19;
                        case 116:
                            Test.iArrFld = Test.iArrFld;
                            break;
                        default:
                            Test.instanceCount = i9;
                        }
                        break;
                    case 120:
                        Test.iFld *= i9;
                        break;
                    default:
                        if (b1) break;
                    }
                } while (++i20 < 8);
            case 110:
            }
        }
        vMeth_check_sum += i9 + i18 + i19 + s2 + Float.floatToIntBits(f2) + i20 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(sArr);
    }

    public static long lMeth() {

        int i8=15, i21=-23;
        float f=2.749F;

        Test.lArrFld1[(i8 >>> 1) % N] <<= Long.reverseBytes((long)(i8 + (f + i8)));
        vMeth(Test.iFld);
        i21 *= i8;
        long meth_res = i8 + Float.floatToIntBits(f) + i21;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i1=-185, i2=-105, i3=7, i4=54110, i5=-10, i6=10, i7=-5, i22=-12629, i23=-2, i24=11;
        short s=-15220;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.79205);

        lArrFld[(i >>> 1) % N] >>= (i++);
        dArr = dArr;
        for (i1 = 13; i1 < 362; i1++) {
            Test.instanceCount += (i1 * i1);
            byFld += (byte)(i1 * i);
            Test.instanceCount -= (long)(((Test.instanceCount * i3) + (--Test.dFld)) - ((-(Test.instanceCount %
                -33808)) * (i2 + i3)));
        }
        for (i4 = 7; i4 < 278; i4++) {
            if (bFld) {
                Test.instanceCount -= (long)(((++i3) + (-fFld)) - ((Test.instanceCount + i5) - (--s)));
            }
            for (i6 = 5; 93 > i6; ++i6) {
                Test.instanceCount += i6;
                i5 = Math.min((int)((81 * (--Test.instanceCount)) + lMeth()), i5);
                bFld = bFld;
                Test.iFld <<= (int)-2003649307L;
            }
            for (i22 = 5; i22 < 93; i22++) {
                Test.iArrFld[i22 + 1] = s;
                i2 += (((i22 * i) + i4) - i2);
                Test.instanceCount += (i22 | i22);
                fFld += i3;
                Test.instanceCount = 3551431483L;
                i2 >>>= i2;
                Test.iFld += (i22 * i22);
                Test.iArrFld[i22] = (int)-19521L;
                i = i5;
            }
            switch (((i4 % 10) * 5) + 58) {
            case 68:
                byFld = (byte)Test.instanceCount;
                i += i7;
                break;
            case 62:
                Test.instanceCount += (i4 * i1);
                break;
            case 59:
                Test.instanceCount += (i4 * i4);
                if (true) continue;
                break;
            case 105:
                i += i4;
            case 100:
                i23 = i1;
            case 85:
                try {
                    i24 = (i3 / 4769);
                    i24 = (i7 % i6);
                    Test.iFld = (i / 4573);
                } catch (ArithmeticException a_e) {}
            case 103:
                i = (int)67.103263;
                break;
            case 104:
                Test.dFld *= s;
            case 61:
                i &= (int)Test.instanceCount;
                break;
            case 108:
                Test.dFld = 130L;
            default:
                i3 -= i3;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("s i6 i7 = " + s + "," + i6 + "," + i7);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount byFld Test.dFld = " + Test.instanceCount + "," + byFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("fFld bFld Test.iFld = " + Float.floatToIntBits(fFld) + "," + (bFld ? 1 : 0) + "," +
            Test.iFld);
        FuzzerUtils.out.println("lArrFld Test.lArrFld1 Test.iArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld1) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
