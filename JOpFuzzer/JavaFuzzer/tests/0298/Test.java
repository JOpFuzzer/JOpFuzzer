// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:48 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=4076302627L;
    public static double dFld=117.55310;
    public byte byFld=122;
    public static volatile byte byArrFld[]=new byte[N];
    public static volatile int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-103);
        FuzzerUtils.init(Test.iArrFld, -9);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4) {

        short s2=-2202;
        float f=-45.54F;
        int i5=-183, i6=60865, i7=-11, i8=172, i9=-104, i10=57417, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -12);

        i4 |= (int)Test.instanceCount;
        s2 = (short)f;
        i3 += (int)3536348488L;
        for (i5 = 8; i5 < 182; i5++) {
            i6 += (int)37344L;
            Test.dFld = f;
            for (i7 = i5; 9 > i7; ++i7) {
                i3 >>= -20355;
                for (i9 = 1; i9 < 1; ++i9) {
                    i8 -= i10;
                    Test.byArrFld[i5 - 1] -= (byte)-104.954F;
                    Test.instanceCount = s2;
                    iArr1[i7 + 1] -= (int)Test.instanceCount;
                    i8 += i7;
                    i10 = i4;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + s2 + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i2) {

        double d=50.68563;
        int i11=-12, i12=1, i13=-35, i14=-39268, iArr[]=new int[N];
        float f1=-2.729F, fArr[]=new float[N], fArr1[]=new float[N];
        boolean b1=true;

        FuzzerUtils.init(iArr, -9);
        FuzzerUtils.init(fArr, -2.14F);
        FuzzerUtils.init(fArr1, 2.964F);

        if (b1) {
            iArr[(i2 >>> 1) % N] = (-i2);
            vMeth1(165, i2);
            Test.dFld -= i2;
            for (d = 9; 162 > d; ++d) {
                i2 = i2;
                i2 <<= i2;
                fArr = fArr1;
                for (f1 = (float)(d); f1 < 10; ++f1) {
                    for (i13 = 1; i13 < 1; i13++) {
                        byte by1=84;
                        switch ((int)((d % 5) + 100)) {
                        case 100:
                            Test.instanceCount += i11;
                            by1 += (byte)i13;
                        case 101:
                            try {
                                iArr[i13 + 1] = (52134 % iArr[(int)(f1)]);
                                i11 = (i2 % 174);
                                i14 = (Test.iArrFld[(int)(d - 1)] % -53201);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 102:
                            Test.instanceCount |= Test.instanceCount;
                            break;
                        case 103:
                        case 104:
                            i12 = -7;
                            break;
                        }
                    }
                }
            }
            vMeth_check_sum += i2 + Double.doubleToLongBits(d) + i11 + Float.floatToIntBits(f1) + i12 + i13 + i14 + (b1
                ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
            return;
        } else {
            i14 -= i2;
        }
        vMeth_check_sum += i2 + Double.doubleToLongBits(d) + i11 + Float.floatToIntBits(f1) + i12 + i13 + i14 + (b1 ? 1
            : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static double dMeth(byte by, int i1, boolean b) {

        short s1=-12705;

        Test.instanceCount >>= s1;
        Test.instanceCount = ((++i1) - (Test.instanceCount++));
        i1 -= (i1 - Integer.reverseBytes(i1));
        vMeth(i1);
        long meth_res = by + i1 + (b ? 1 : 0) + s1;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=33388, i15=10, i16=-1, i17=7519, i18=-58334, i19=191, i20=-33975;
        short s=-6219;
        boolean b2=false;
        float f2=1.330F;
        byte byArr[][]=new byte[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-70);
        FuzzerUtils.init(lArr, -91L);

        byArr = byArr;
        i -= (int)((s -= (short)(-(-6 - Math.max(4688882472340083562L, Test.instanceCount)))) * (Test.instanceCount--));
        Test.instanceCount <<= (long)((--Test.instanceCount) - dMeth(byFld, i, b2));
        i15 = 1;
        while (++i15 < 391) {
            for (i16 = 2; i16 < 64; i16++) {
                i >>= 5294;
                i %= -87;
                i18 = 1;
                while (++i18 < 2) {
                    Test.instanceCount = i18;
                    fArrFld[i15 - 1] -= (float)Test.dFld;
                    s ^= (short)Test.instanceCount;
                    lArr[i15 + 1] *= i15;
                    i17 %= (int)((long)(f2) | 1);
                    i -= i17;
                }
                i -= i17;
                i += (((i16 * i17) + Test.instanceCount) - i17);
                byArr[i15 + 1] = byArr[i16];
                for (i19 = 1; i19 < 2; i19++) {
                    Test.instanceCount += (i19 * i19);
                    switch (((i19 % 4) * 5) + 7) {
                    case 9:
                        i20 += (i19 * i19);
                        i17 += (10566 + (i19 * i19));
                        i += i19;
                        f2 *= i17;
                        break;
                    case 27:
                    case 26:
                        i += (((i19 * Test.instanceCount) + Test.instanceCount) - i18);
                        i17 += i19;
                        i20 += i15;
                        break;
                    case 19:
                        Test.instanceCount += -41997;
                        Test.iArrFld[i19 - 1] = 13;
                        try {
                            i = (i18 % i19);
                            i17 = (21 / i20);
                            i17 = (20593 % Test.iArrFld[i19]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i s b2 = " + i + "," + s + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 f2 i19 = " + i18 + "," + Float.floatToIntBits(f2) + "," + i19);
        FuzzerUtils.out.println("i20 byArr lArr = " + i20 + "," + FuzzerUtils.checkSum(byArr) + "," +
            FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld byFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + byFld);
        FuzzerUtils.out.println("Test.byArrFld Test.iArrFld fArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
