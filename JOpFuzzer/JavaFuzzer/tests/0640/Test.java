// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:55 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static int iFld=9;
    public byte byFld=-40;
    public static float fFld=0.538F;
    public static long lFld=-10L;
    public byte byFld1=-38;
    public static double dFld=0.64395;
    public static volatile int iArrFld[][]=new int[N][N];
    public volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 19473);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l2, boolean b, int i4) {

        int i5=-32164, i6=65, i7=47, i8=53884;
        byte by=59;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -2284687452L);

        Test.iFld += i4;
        for (i5 = 9; i5 < 183; i5 += 2) {
            i7 = 1;
            do {
                i6 -= i7;
                i8 = 1;
                while (++i8 < 1) {
                    lArr[i8][i8] -= Test.instanceCount;
                    Test.iArrFld[i7 + 1][i5] = i6;
                    i4 += i5;
                    Test.fFld -= Test.iFld;
                    lArr[i8 + 1][i8 - 1] -= i4;
                    by ^= (byte)i7;
                    Test.iArrFld[i8][i5 - 1] = (int)Test.fFld;
                    i4 -= i5;
                    l2 >>= i4;
                }
            } while (++i7 < 18);
            Test.iArrFld[i5 - 1][i5 + 1] = Test.iFld;
        }
        long meth_res = l2 + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + by + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        long l1=3L, lArr1[][]=new long[N][N];
        int i3=13238, i9=7, i10=-23563, i11=1, i12=-3;
        boolean b2=true;
        byte by1=-122;
        double dArr[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, 42.128910);
        FuzzerUtils.init(lArr1, 0L);
        FuzzerUtils.init(fArr, -1.189F);

        for (double d1 : dArr) {
            for (l1 = 1; l1 < 4; l1++) {
                boolean b1=true;
                Test.iArrFld[(int)(l1 - 1)][(int)(l1)] = iMeth1(Test.lFld, b1, Test.iFld);
            }
            if (false) {
                lArr1[(-12 >>> 1) % N][(i3 >>> 1) % N] >>>= 19009;
            }
            i9 = 1;
            do {
                i10 = Test.iFld;
                b2 = false;
                by1 = (byte)-187;
            } while (++i9 < 4);
            d1 += Test.fFld;
            for (i11 = 1; i11 < 4; i11++) {
                i12 |= 135;
            }
            l = i10;
        }
        i3 = by1;
        i3 = (int)Test.lFld;
        vMeth_check_sum += l + l1 + i3 + i9 + i10 + (b2 ? 1 : 0) + by1 + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public int iMeth(int i1, double d) {

        int i2=15750, i13=3, i14=7, i15=-45211;

        byFld += (byte)(-(Test.instanceCount++));
        i2 = 1;
        while (++i2 < 153) {
            i1 += (i2 * Test.iFld);
            vMeth(Test.instanceCount);
            Test.lFld = (long)d;
            Test.lFld <<= Test.iFld;
            Test.iFld += (int)d;
            d = byFld1;
            for (i13 = i2; i13 < 10; ++i13) {
                i15 = 1;
                do {
                    if (true) break;
                    Test.iFld -= (int)Test.fFld;
                    fArrFld[i2 - 1] *= Test.fFld;
                    Test.instanceCount -= i2;
                    Test.iFld += i15;
                } while (++i15 < 1);
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + i2 + i13 + i14 + i15;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-33122, i16=-8, i17=-35113, i18=14, i19=53194, i20=34918, i21=12;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 122.125105);

        i = 261;
        do {
            Test.iFld = (int)Long.reverseBytes(i - (--Test.iFld));
            iMeth(62797, Test.dFld);
        } while (--i > 0);
        for (i16 = 2; i16 < 208; ++i16) {
            Test.dFld *= i16;
            i17 += (-32114 + (i16 * i16));
            try {
                Test.iArrFld[i16 - 1][i16] = (i16 % -1664950772);
                Test.iFld = (Test.iFld % i);
                Test.iArrFld[i16][i16] = (i17 / Test.iFld);
            } catch (ArithmeticException a_e) {}
            for (i18 = i16; i18 < 122; i18++) {
                Test.lFld = Test.instanceCount;
                i20 = 1;
                while (--i20 > 0) {
                    try {
                        i17 = (-59 % i18);
                        Test.iArrFld[i18][i20] = (i21 % 1774423795);
                        i17 = (i16 % i21);
                    } catch (ArithmeticException a_e) {}
                    i19 = (int)Test.dFld;
                    dArr1 = dArr1;
                    byFld1 -= (byte)Test.dFld;
                    Test.fFld += (((i20 * Test.iFld) + Test.lFld) - Test.fFld);
                    Test.lFld = Test.lFld;
                    i19 <<= -14;
                    Test.iFld += (((i20 * i) + i16) - i17);
                    i21 = i16;
                    switch (((i16 % 3) * 5) + 26) {
                    case 35:
                        try {
                            Test.iArrFld[i16][i20] = (i16 % 61619);
                            i21 = (Test.iArrFld[i16][i20 - 1] / 21663);
                            Test.iArrFld[i18 + 1][i16 + 1] = (-222 % i17);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 29:
                        Test.lFld *= Test.instanceCount;
                        fArrFld = fArrFld;
                        Test.iFld = i19;
                    case 41:
                        i19 = (int)Test.instanceCount;
                        switch ((i20 % 7) + 37) {
                        case 37:
                            switch (((i16 % 1) * 5) + 64) {
                            case 66:
                                dArr1[i16 + 1] += i16;
                                i19 += (int)(0.50F + (i20 * i20));
                                i17 += (1 + (i20 * i20));
                                break;
                            }
                            break;
                        case 38:
                            Test.iArrFld[i16 - 1][i18] = 25201;
                        case 39:
                            Test.fFld += Test.fFld;
                        case 40:
                            Test.fFld = -10;
                            break;
                        case 41:
                        case 42:
                            i21 = i17;
                            break;
                        case 43:
                            i17 += i20;
                            break;
                        }
                    default:
                        Test.instanceCount <<= 44889;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i16 i17 = " + i + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 dArr1 = " + i21 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld byFld = " + Test.instanceCount + "," + Test.iFld + "," +
            byFld);
        FuzzerUtils.out.println("Test.fFld Test.lFld byFld1 = " + Float.floatToIntBits(Test.fFld) + "," + Test.lFld +
            "," + byFld1);
        FuzzerUtils.out.println("Test.dFld Test.iArrFld fArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
