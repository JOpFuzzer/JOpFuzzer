// Generated by Java* Fuzzer test generator (1.0.001). Mon Aug 29 10:22:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=69L;
    public int iFld=-32089;
    public double dFld=2.24926;
    public static int iFld1=194;
    public boolean bFld=true;
    public float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4087240889L);
        FuzzerUtils.init(Test.iArrFld, 143);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth() {

        double d=-88.96749;
        byte by3=-22;
        int i13=44, i15=-2, i16=-4, i17=44956, i18=-62274, iArr2[]=new int[N], iArr3[]=new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr2, 16629);
        FuzzerUtils.init(iArr3, -64837);

        Test.iArrFld[(Test.iFld1 >>> 1) % N][(Test.iFld1 >>> 1) % N] += Test.iFld1;
        d += by3;
        i13 = 256;
        while ((i13 -= 2) > 0) {
            Test.iArrFld = FuzzerUtils.int2array(N, (int)43613);
            d -= Test.iFld1;
            if (b1) {
                i15 = 1;
                do {
                    Test.lArrFld = Test.lArrFld;
                    Test.iFld1 *= (int)Test.instanceCount;
                } while (++i15 < 12);
                i16 = 1;
                do {
                    Test.iFld1 *= i16;
                } while (++i16 < 12);
                Test.iFld1 = i15;
                for (i17 = 12; i17 > 1; i17 -= 2) {
                    i18 = i17;
                    Test.iArrFld[i17][i13 + 1] >>= 4;
                }
            } else if (b1) {
                Test.iFld1 += i16;
            } else if (b1) {
                iArr3[i13 - 1] >>>= i18;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + by3 + i13 + i15 + i16 + i17 + i18 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i8, byte by2, int i9) {

        float f1=-88.1000F;
        int i10=170, i11=31051, i12=31516, i19=12, i20=2;
        long l2=-470801396530928580L;

        for (f1 = 3; 126 > f1; ++f1) {
            by2 = (byte)(f1 + (i8 + (~(i8 + Test.instanceCount))));
            i10 %= (int)(Test.iArrFld[(i9 >>> 1) % N][(int)(f1 - 1)] | 1);
            Test.iArrFld[(int)(f1 + 1)][(int)(f1 + 1)] = (int)(++Test.instanceCount);
        }
        for (i11 = 7; i11 < 161; i11++) {
            short s1=18906;
            i12 ^= (int)((-49522 * fMeth()) + Test.iFld1);
            Test.instanceCount = s1;
            l2 = 1;
            do {
                Test.instanceCount = by2;
                for (i19 = 1; i19 < 1; i19++) {
                    if (false) {
                        i12 = s1;
                        i8 += (((i19 * f1) + i19) - i20);
                        i10 += (((i19 * i20) + Test.iFld1) - by2);
                        Test.iFld1 += (i19 * i19);
                    }
                }
            } while (++l2 < 10);
        }
        long meth_res = i8 + by2 + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + l2 + i19 + i20;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth() {

        byte by1=-20;
        boolean b=true;
        int i7=13, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 14);

        by1 <<= (byte)2847109578L;
        b = (iArr1[(i7 >>> 1) % N] != ((i7 - 7) - iMeth(i7, by1, -37990)));
        vSmallMeth_check_sum += by1 + (b ? 1 : 0) + i7 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        float f=-1.971F;
        int i=-47326, i1=35155, i2=-12, i3=-38162, i4=209, i5=-80, i6=-17000, i21=11, i22=12389, i23=6, i24=12, i25=11,
            iArr[]=new int[N];
        byte by=109;
        short s=-21605;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -55906);
        FuzzerUtils.init(lArr, -3203L);

        f = (float)(((iArr[(iFld >>> 1) % N] *= (int)dFld) + (dFld - Test.instanceCount)) + iArr[(-59534 >>> 1) % N]);
        i >>>= (int)((by += (byte)(Test.instanceCount >>= Test.instanceCount)) + (-Test.instanceCount));
        iFld -= (++s);
        for (i1 = 3; i1 < 230; i1++) {
            for (i3 = 3; i3 < 111; ++i3) {
                for (i5 = i1; i5 < 2; ++i5) {
                    fArrFld = fArrFld;
                    i += i5;
                    Test.instanceCount = ((iArr[i5 - 1] >> (Test.instanceCount * iFld)) * ((i4++) * -53489));
                    iFld *= i1;
                }
            }
            i6 += i1;
            iArr[i1] += Math.max((i1 - iFld) + (i3 / (i6 | 1)), (int)((10 - (i = i2)) % (((long)(dFld++)) | 1)));
            iArr[i1 - 1] += iArr[i1 - 1];
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth();
            i21 = 111;
            while (--i21 > 0) {
                s += (short)(((i21 * i1) + i2) - Test.instanceCount);
                Test.iArrFld[i21 + 1][i21] -= by;
                i2 *= (int)f;
                fArrFld[i21] += 8;
                iArr[i21 - 1] = i1;
                i4 <<= i4;
            }
            Test.instanceCount += (((i1 * i2) + i6) - i6);
        }
        i4 ^= i2;
        for (i22 = 19; i22 < 310; i22++) {
            i6 += (i22 * i22);
            f -= 125.593F;
            for (i24 = 5; i24 < 86; ++i24) {
                if (bFld) continue;
                if (bFld) break;
                f += (-7536 + (i24 * i24));
            }
        }

        FuzzerUtils.out.println("f i by = " + Float.floatToIntBits(f) + "," + i + "," + by);
        FuzzerUtils.out.println("s i1 i2 = " + s + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("i6 i21 i22 = " + i6 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("iArr lArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount iFld dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iFld1 bFld fArrFld = " + Test.iFld1 + "," + (bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
